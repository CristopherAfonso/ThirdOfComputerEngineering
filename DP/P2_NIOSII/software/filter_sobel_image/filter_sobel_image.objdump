
filter_sobel_image.elf:     file format elf32-littlenios2
filter_sobel_image.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000150fc memsz 0x000150fc flags r-x
    LOAD off    0x0001611c vaddr 0x0081511c paddr 0x00816c14 align 2**12
         filesz 0x00001af8 memsz 0x00001af8 flags rw-
    LOAD off    0x0001870c vaddr 0x0081870c paddr 0x0081870c align 2**12
         filesz 0x00000000 memsz 0x000003f4 flags rw-
    LOAD off    0x00018000 vaddr 0x01100000 paddr 0x01100000 align 2**12
         filesz 0x00000584 memsz 0x00000584 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .main.text    00000584  01100000  01100000  00018000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00014690  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000008d8  00814844  00814844  00015844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .rwdata       00001af8  0081511c  00816c14  0001611c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  6 .bss          000003f4  0081870c  0081870c  0001870c  2**2
                  ALLOC, SMALL_DATA
  7 .comment      00000026  00000000  00000000  00018584  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001240  00000000  00000000  000185b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00001b9f  00000000  00000000  000197f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00038389  00000000  00000000  0001b38f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000bc32  00000000  00000000  00053718  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001e4fb  00000000  00000000  0005f34a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002454  00000000  00000000  0007d848  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000302b  00000000  00000000  0007fc9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00012b6f  00000000  00000000  00082cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00095838  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000ba0  00000000  00000000  00095868  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0009a300  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0009a303  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0009a306  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0009a307  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0009a308  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0009a30c  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0009a310  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0009a314  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0009a31d  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0009a326  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000012  00000000  00000000  0009a32f  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002e  00000000  00000000  0009a341  2**0
                  CONTENTS, READONLY
 30 .jdi          00005577  00000000  00000000  0009a36f  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000528d3  00000000  00000000  0009f8e6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
01100000 l    d  .main.text	00000000 .main.text
008001b4 l    d  .text	00000000 .text
00814844 l    d  .rodata	00000000 .rodata
0081511c l    d  .rwdata	00000000 .rwdata
0081870c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 pgm4.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 ctype_.c
00814ce9 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fgetc.c
00000000 l    df *ABS*	00000000 fgets.c
00000000 l    df *ABS*	00000000 findfp.c
00802864 l     F .text	00000058 std
00802970 l     F .text	00000008 __fp_lock
00802978 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fscanf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
0081511c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00804980 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sscanf.c
00804a6c l     F .text	00000008 eofread
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
008050c4 l     F .text	00000058 __sprint_r
00814ee2 l     O .rodata	00000010 blanks.3452
00814ed2 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
00814efa l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00808940 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00808b64 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
00816ba0 l     O .rwdata	00000004 charset
00814f3c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00815084 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
0080c610 l     F .text	00000048 match
00815944 l     O .rwdata	00000014 fpi.1950
008150a0 l     O .rodata	00000028 tinytens
00815930 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0080e844 l     F .text	00000024 htinit
0080e8d0 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0080f17c l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0081040c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00811248 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00811858 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
008118b8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
008118e4 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
00811a1c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00811b40 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00811c20 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00811d80 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00811e8c l     F .text	000000f8 alt_file_locked
00812110 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
00812294 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00816bbc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0081254c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00815b00 l     O .rwdata	00001060 jtag_uart
00816b60 l     O .rwdata	00000028 altera_hostfs
00812670 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
008128b0 l     F .text	00000228 altera_avalon_jtag_uart_irq
00812ad8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00813154 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
00816bc0 l     O .rwdata	00000004 hcinfo.2234
00816bcc l     O .rwdata	00000004 hcinfo.2276
00816bd8 l     O .rwdata	00000004 hcinfo.2289
00816be4 l     O .rwdata	00000004 hcinfo.2311
00816bf0 l     O .rwdata	00000004 hcinfo.2333
00816bfc l     O .rwdata	00000004 hcinfo.2368
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00813ba8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008142e0 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
0080b05c g     F .text	00000094 _mprec_log10
0080b148 g     F .text	00000088 __any_on
0080a898 g     F .text	00000070 _isatty_r
0081505c g     O .rodata	00000028 __mprec_tinytens
00811de0 g     F .text	0000006c alt_main
00804708 g     F .text	000000a0 _puts_r
00818870 g     O .bss	00000100 alt_irq
0080a9f8 g     F .text	00000078 _lseek_r
00816c14 g       *ABS*	00000000 __flash_rwdata_start
0080a35c g     F .text	000000a0 __sflags
00810cd4 g     F .text	00000088 __eqdf2
00818b00 g       *ABS*	00000000 __alt_heap_start
00804690 g     F .text	00000044 printf
008008d0 g     F .text	00000334 pgmwrite
00804b88 g     F .text	00000068 __sseek
008028cc g     F .text	000000a4 __sinit
0080a958 g     F .text	00000084 _setlocale_r
008029cc g     F .text	0000009c __sfmoreglue
008050a8 g     F .text	0000001c ungetc
00811e6c g     F .text	00000020 __malloc_unlock
008133bc g     F .text	00000154 alt_hostfs_open
0080c658 g     F .text	000015cc _strtod_r
00818738 g     O .bss	00000004 altera_avalon_timer_ts_freq
0080ab70 g     F .text	000000e0 memmove
008029bc g     F .text	00000010 _cleanup
0080b1d0 g     F .text	000000bc _Balloc
00810de4 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00803820 g     F .text	00000074 _fstat_r
0081870c g     O .bss	00000004 errno
008049e8 g     F .text	00000014 __srget
0080868c g     F .text	00000024 __svfscanf
00811504 g     F .text	0000002c __make_fp
0081872c g     O .bss	00000004 alt_argv
0081eb88 g       *ABS*	00000000 _gp
0080337c g     F .text	00000044 fscanf
00802840 g     F .text	00000024 fgets
00815980 g     O .rwdata	00000180 alt_fd_list
008136a4 g     F .text	000000a0 alt_hostfs_seek
00813cd0 g     F .text	00000094 alt_find_dev
008044e0 g     F .text	000000a0 memcpy
0080f1c8 g     F .text	00000248 __hexnan
008029b0 g     F .text	0000000c _cleanup_r
00811004 g     F .text	000000f8 __floatsidf
00813e84 g     F .text	00000090 alt_fs_reg
008143b8 g     F .text	00000078 alt_io_redirect
00810ef4 g     F .text	00000088 __ltdf2
00814844 g       *ABS*	00000000 __DTOR_END__
008047a8 g     F .text	00000014 puts
0080aaf0 g     F .text	00000040 mbrtowc
008086b0 g     F .text	00000068 _vfscanf_r
0080afac g     F .text	000000b0 __ratio
00812cf0 g     F .text	00000224 altera_avalon_jtag_uart_read
00803ca8 g     F .text	00000014 malloc
008046d4 g     F .text	00000034 _printf_r
00811384 g     F .text	00000008 __udivsi3
00811a7c g     F .text	000000c4 isatty
0080a908 g     F .text	0000002c iswspace
00814f6c g     O .rodata	000000c8 __mprec_tens
0080a934 g     F .text	00000008 __locale_charset
0080f534 g     F .text	000000a4 __fixunsdfsi
0080036c g     F .text	0000009c eatWhitespaces
008145f4 g     F .text	00000090 alt_icache_flush
00818710 g     O .bss	00000004 __malloc_top_pad
0080e530 g     F .text	00000024 strtoul
00816b9c g     O .rwdata	00000004 __mb_cur_max
0080a93c g     F .text	0000000c _localeconv_r
0080e554 g     F .text	000002f0 _strtoull_r
0080b934 g     F .text	0000003c __i2b
0080a3fc g     F .text	0000049c __sfvwrite_r
008049fc g     F .text	00000070 _sbrk_r
00813564 g     F .text	000000a0 alt_hostfs_read
0080bcdc g     F .text	00000078 _read_r
00815924 g     O .rwdata	0000000c __lc_ctype
00816bb4 g     O .rwdata	00000004 alt_max_fd
00802028 g     F .text	00000138 __unpack_d
0080227c g     F .text	00000110 _fclose_r
0080259c g     F .text	00000034 fflush
00818714 g     O .bss	00000004 __malloc_max_sbrked_mem
00802668 g     F .text	00000090 _fgetc_r
0081089c g     F .text	00000074 __adddf3
008102a4 g     F .text	00000078 __nesf2
0080ae8c g     F .text	00000120 __b2d
0080fc44 g     F .text	00000660 __umoddi3
00811c8c g     F .text	000000f4 lseek
00816b90 g     O .rwdata	00000004 _global_impure_ptr
0080bd54 g     F .text	000005f4 _realloc_r
00818b00 g       *ABS*	00000000 __bss_end
008141e8 g     F .text	000000f8 alt_iic_isr_register
008144c8 g     F .text	0000010c alt_tick
00818770 g     O .bss	00000100 __hexdig
0080f5d8 g     F .text	0000066c __udivdi3
00815034 g     O .rodata	00000028 __mprec_bigtens
0080bbbc g     F .text	00000120 __s2b
00801ac8 g     F .text	00000194 __floatunsidf
0080adac g     F .text	00000060 __mcmp
00816b88 g     O .rwdata	00000004 __ctype_ptr
00802998 g     F .text	00000018 __fp_lock_all
008141a0 g     F .text	00000048 alt_ic_irq_enabled
00814430 g     F .text	00000098 alt_alarm_stop
0080dfb4 g     F .text	00000024 strtol
008002c4 g     F .text	000000a8 eatCommsWhitespaces
0081873c g     O .bss	00000004 alt_irq_active
00813510 g     F .text	00000054 alt_hostfs_close
008000ec g     F .exceptions	000000c8 alt_irq_handler
00815958 g     O .rwdata	00000028 alt_dev_null
00811394 g     F .text	000000c8 __unpack_f
00813ab0 g     F .text	00000044 alt_dcache_flush_all
0080ac78 g     F .text	00000070 __hi0bits
008110fc g     F .text	000000d8 __fixdfsi
00802160 g     F .text	0000001c calloc
0080dd48 g     F .text	0000001c strtod
00816c14 g       *ABS*	00000000 __ram_rwdata_end
00816bac g     O .rwdata	00000008 alt_dev_list
00812428 g     F .text	00000124 write
00813394 g     F .text	00000028 alt_timestamp_freq
0081031c g     F .text	00000078 __gtsf2
0081511c g       *ABS*	00000000 __ram_rodata_end
00811944 g     F .text	000000d8 fstat
00802c68 g     F .text	0000002c fprintf
00810f7c g     F .text	00000088 __ledf2
0080ba9c g     F .text	00000120 __pow5mult
0081871c g     O .bss	00000004 __nlocale_changed
0081138c g     F .text	00000008 __umodsi3
00818b00 g       *ABS*	00000000 end
008115f8 g     F .text	00000160 __pack_f
008037fc g     F .text	00000024 fseek
008127f0 g     F .text	000000c0 altera_avalon_jtag_uart_init
00814840 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008131c4 g     F .text	00000090 alt_avalon_timer_sc_init
00801c94 g     F .text	00000080 __clzsi2
00812f14 g     F .text	00000240 altera_avalon_jtag_uart_write
008028bc g     F .text	00000004 __sfp_lock_acquire
008043fc g     F .text	000000e4 memchr
0080511c g     F .text	00001ec4 ___vfprintf_internal_r
0080c4f4 g     F .text	00000060 _sprintf_r
00803040 g     F .text	00000314 _free_r
01100000 g       *ABS*	00000000 __alt_mem_tightly_coupled_instr_mem
0080499c g     F .text	0000004c __srget_r
00808944 g     F .text	000001b0 __call_exitprocs
00818720 g     O .bss	00000004 __mlocale_changed
00816b98 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000004c _start
00818740 g     O .bss	00000004 _alt_tick_rate
0080dfd8 g     F .text	00000318 _strtoll_r
0080b594 g     F .text	0000014c __lshift
00818744 g     O .bss	00000004 _alt_nticks
00812170 g     F .text	00000124 read
008125e0 g     F .text	00000090 alt_sys_init
00804618 g     F .text	00000078 _open_r
0081470c g     F .text	00000134 __register_exitproc
00804d40 g     F .text	000000f0 strncmp
0080b6e0 g     F .text	00000254 __multiply
00812b88 g     F .text	00000074 altera_avalon_jtag_uart_close
00801c5c g     F .text	00000038 __mulsi3
0081511c g       *ABS*	00000000 __ram_rwdata_start
00814844 g       *ABS*	00000000 __ram_rodata_start
00818748 g     O .bss	00000028 __malloc_current_mallinfo
0080b28c g     F .text	0000017c __d2b
008126a8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080e2f0 g     F .text	00000240 _strtoul_r
00813f14 g     F .text	000000d0 alt_get_fd
00811530 g     F .text	000000c8 __fpcmp_parts_d
00808af4 g     F .text	00000070 _close_r
00814698 g     F .text	00000074 memcmp
00812758 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00818b00 g       *ABS*	00000000 __alt_stack_base
008127a0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00803a14 g     F .text	000000ac _fwrite_r
00804afc g     F .text	00000084 sscanf
00808804 g     F .text	0000013c __swsetup_r
00800200 g     F .text	000000c4 readToWhitespace
00801870 g     F .text	00000258 __divdf3
00802a68 g     F .text	000000f0 __sfp
0080b0f0 g     F .text	00000058 __copybits
0081551c g     O .rwdata	00000408 __malloc_av_
008028c8 g     F .text	00000004 __sinit_lock_release
00810910 g     F .text	000003c4 __muldf3
00804c6c g     F .text	00000060 __sread
00802ed4 g     F .text	00000040 fread
00813d64 g     F .text	00000120 alt_find_file
00813af4 g     F .text	000000b4 alt_dev_llist_insert
00811e4c g     F .text	00000020 __malloc_lock
00802c94 g     F .text	00000034 _fprintf_r
0081236c g     F .text	000000bc sbrk
008023a0 g     F .text	000001fc _fflush_r
0080217c g     F .text	000000c8 _calloc_r
00802c4c g     F .text	0000001c fopen
0081870c g       *ABS*	00000000 __bss_start
00803354 g     F .text	00000028 _fscanf_r
00804580 g     F .text	00000098 memset
01100000 g     F .main.text	00000584 main
00818730 g     O .bss	00000004 alt_envp
00818718 g     O .bss	00000004 __malloc_max_total_mem
00812700 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00810394 g     F .text	00000078 __ltsf2
00802cc8 g     F .text	0000020c _fread_r
0080048c g     F .text	00000444 pgmread
00804b80 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080238c g     F .text	00000014 fclose
0080dd64 g     F .text	00000250 _strtol_r
008111d4 g     F .text	00000074 __truncdfsf2
00813254 g     F .text	000000a4 alt_timestamp_start
00818970 g     O .bss	00000190 _atexit0
00808da8 g     F .text	000015b4 _dtoa_r
00803cbc g     F .text	00000740 _malloc_r
00816bb8 g     O .rwdata	00000004 alt_errno
00804e30 g     F .text	000000dc __submore
0080395c g     F .text	000000b8 _fwalk
008026f8 g     F .text	00000148 _fgets_r
0080ab30 g     F .text	00000040 _mbtowc_r
008112c4 g     F .text	00000060 __divsi3
00814ad4 g     O .rodata	00000014 __thenan_df
00802f14 g     F .text	0000012c _malloc_trim_r
00814844 g       *ABS*	00000000 __CTOR_END__
0080c554 g     F .text	000000bc strcmp
00814844 g       *ABS*	00000000 __flash_rodata_start
00814844 g       *ABS*	00000000 __DTOR_LIST__
00810d5c g     F .text	00000088 __nedf2
01080000 g       *ABS*	00000000 __alt_mem_sram_0
008125ac g     F .text	00000034 alt_irq_init
008122f4 g     F .text	00000078 alt_release_fd
008025d0 g     F .text	00000098 fgetc
0080c480 g     F .text	00000074 sprintf
00814ae8 g     O .rodata	00000100 __clz_tab
00818724 g     O .bss	00000004 _PathLocale
0080dc24 g     F .text	00000124 strtof
00814684 g     F .text	00000014 atexit
0080878c g     F .text	00000078 _write_r
0080a9dc g     F .text	0000001c setlocale
0080c478 g     F .text	00000008 nanf
00816b8c g     O .rwdata	00000004 _impure_ptr
00818728 g     O .bss	00000004 alt_argc
0080aa70 g     F .text	00000080 _mbrtowc_r
00818734 g     O .bss	00000004 altera_avalon_timer_ts_base
00813c6c g     F .text	00000064 _do_dtors
008033c0 g     F .text	0000043c _fseek_r
008047bc g     F .text	000001c4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
0080ae0c g     F .text	00000080 __ulp
0080c348 g     F .text	00000040 __isinfd
00802980 g     F .text	00000018 __fp_unlock_all
00816ba4 g     O .rwdata	00000008 alt_fs_list
00813604 g     F .text	000000a0 alt_hostfs_write
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080a948 g     F .text	00000010 localeconv
008132f8 g     F .text	0000009c alt_timestamp
00814014 g     F .text	00000050 alt_ic_isr_register
00803ac0 g     F .text	00000040 fwrite
0080e868 g     F .text	00000068 __hexdig_init
00804a74 g     F .text	00000088 _sscanf_r
008013ec g     F .text	00000484 ppmwrite2
00816c14 g       *ABS*	00000000 _edata
00818b00 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
00808718 g     F .text	00000074 vfscanf
00812bfc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00814100 g     F .text	000000a0 alt_ic_irq_disable
00801098 g     F .text	00000354 pgmwrite2
00804bf0 g     F .text	0000007c __swrite
00816b94 g     O .rwdata	00000004 __malloc_trim_threshold
008145d4 g     F .text	00000020 altera_nios2_qsys_irq_init
00802244 g     F .text	00000038 exit
00803894 g     F .text	000000c8 _fwalk_reent
0080b408 g     F .text	0000018c __mdiff
00811324 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008028c0 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080c3b8 g     F .text	000000c0 __sccl
00814be8 g     O .rodata	00000101 _ctype_
01101000 g       *ABS*	00000000 __alt_mem_tightly_coupled_data_mem
0081145c g     F .text	000000a8 __fpcmp_parts_f
00802b58 g     F .text	000000f4 _fopen_r
0080c388 g     F .text	00000030 __isnand
00811924 g     F .text	00000020 _exit
0081395c g     F .text	00000154 alt_alarm_start
0080f410 g     F .text	00000124 __muldi3
00803b00 g     F .text	00000194 __smakebuf_r
00804ccc g     F .text	00000074 strlen
00811f84 g     F .text	0000018c open
00810e6c g     F .text	00000088 __gedf2
0080e980 g     F .text	000007fc __gethex
00813fe4 g     F .text	00000030 alt_icache_flush_all
00800408 g     F .text	00000084 eatComments
00816c08 g     O .rwdata	00000004 alt_priority_mask
00814064 g     F .text	0000009c alt_ic_irq_enable
00806fe0 g     F .text	00000024 __vfprintf_internal
0081081c g     F .text	00000080 __subdf3
00800c04 g     F .text	00000494 pgmread2
0080ace8 g     F .text	000000c4 __lo0bits
00807004 g     F .text	00001688 __svfscanf_r
00816c0c g     O .rwdata	00000008 alt_alarm_list
00804f0c g     F .text	0000019c _ungetc_r
00813c08 g     F .text	00000064 _do_ctors
00811758 g     F .text	00000100 close
00811ba0 g     F .text	00000080 alt_load
00801d14 g     F .text	00000314 __pack_d
00803c94 g     F .text	00000014 free
008028c4 g     F .text	00000004 __sinit_lock_acquire
0080b970 g     F .text	0000012c __multadd
0080ac50 g     F .text	00000028 _Bfree
00813744 g     F .text	00000218 alt_hostfs_fstat



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c020b4 	movhi	r3,130
  800134:	18e21c04 	addi	r3,r3,-30608
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c020b4 	movhi	r3,130
  80014c:	18e21c04 	addi	r3,r3,-30608
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .main.text:

01100000 <main>:
#include "io.h"
#include "pgm4.h"
#include "system.h"

int main() __attribute__ ((section(".main.text")));
int main() {
 1100000:	deffe704 	addi	sp,sp,-100
 1100004:	dfc01815 	stw	ra,96(sp)
 1100008:	df001715 	stw	fp,92(sp)
 110000c:	dc001615 	stw	r16,88(sp)
 1100010:	df001604 	addi	fp,sp,88

	char* path_in = "/mnt/host/boat.512.pgm";
 1100014:	00802074 	movhi	r2,129
 1100018:	10921104 	addi	r2,r2,18500
 110001c:	e0bff415 	stw	r2,-48(fp)
	char* path_out = "/mnt/host/boat_conv_tr.512.pgm";
 1100020:	00802074 	movhi	r2,129
 1100024:	10921704 	addi	r2,r2,18524
 1100028:	e0bff315 	stw	r2,-52(fp)
	int width_photo = 0;
 110002c:	e03ff515 	stw	zero,-44(fp)
	int height_photo = 0;
 1100030:	e03ff615 	stw	zero,-40(fp)
	unsigned char** orig_uc_matrix = pgmread2(path_in, &width_photo, &height_photo);
 1100034:	e17ff504 	addi	r5,fp,-44
 1100038:	e1bff604 	addi	r6,fp,-40
 110003c:	e13ff417 	ldw	r4,-48(fp)
 1100040:	0800c040 	call	800c04 <pgmread2>
 1100044:	e0bff215 	stw	r2,-56(fp)
	unsigned char** dest_uc_matrix = (unsigned char**)malloc(512*sizeof(unsigned char*));
 1100048:	01020004 	movi	r4,2048
 110004c:	0803ca80 	call	803ca8 <malloc>
 1100050:	e0bff115 	stw	r2,-60(fp)
	//unsigned char** dest_uc_matrix = (unsigned char**)(TIGHTLY_COUPLED_DATA_MEM_BASE);
	if (orig_uc_matrix == NULL || dest_uc_matrix == NULL) printf("NULL ptr found\n");
 1100054:	e0bff217 	ldw	r2,-56(fp)
 1100058:	1005003a 	cmpeq	r2,r2,zero
 110005c:	1000031e 	bne	r2,zero,110006c <main+0x6c>
 1100060:	e0bff117 	ldw	r2,-60(fp)
 1100064:	1004c03a 	cmpne	r2,r2,zero
 1100068:	1000031e 	bne	r2,zero,1100078 <main+0x78>
 110006c:	01002074 	movhi	r4,129
 1100070:	21121f04 	addi	r4,r4,18556
 1100074:	08047a80 	call	8047a8 <puts>
	int i = 0;
 1100078:	e03ff015 	stw	zero,-64(fp)
    for (; i < 512; ++i) {
 110007c:	00001806 	br	11000e0 <main+0xe0>
      dest_uc_matrix[i] = (unsigned char*)malloc(512*sizeof(unsigned char));
 1100080:	e0bff017 	ldw	r2,-64(fp)
 1100084:	1085883a 	add	r2,r2,r2
 1100088:	1085883a 	add	r2,r2,r2
 110008c:	1007883a 	mov	r3,r2
 1100090:	e0bff117 	ldw	r2,-60(fp)
 1100094:	18a1883a 	add	r16,r3,r2
 1100098:	01008004 	movi	r4,512
 110009c:	0803ca80 	call	803ca8 <malloc>
 11000a0:	80800015 	stw	r2,0(r16)
      if (dest_uc_matrix[i] == NULL) printf("NULL ptr found\n");
 11000a4:	e0bff017 	ldw	r2,-64(fp)
 11000a8:	1085883a 	add	r2,r2,r2
 11000ac:	1085883a 	add	r2,r2,r2
 11000b0:	1007883a 	mov	r3,r2
 11000b4:	e0bff117 	ldw	r2,-60(fp)
 11000b8:	1885883a 	add	r2,r3,r2
 11000bc:	10800017 	ldw	r2,0(r2)
 11000c0:	1004c03a 	cmpne	r2,r2,zero
 11000c4:	1000031e 	bne	r2,zero,11000d4 <main+0xd4>
 11000c8:	01002074 	movhi	r4,129
 11000cc:	21121f04 	addi	r4,r4,18556
 11000d0:	08047a80 	call	8047a8 <puts>
	unsigned char** orig_uc_matrix = pgmread2(path_in, &width_photo, &height_photo);
	unsigned char** dest_uc_matrix = (unsigned char**)malloc(512*sizeof(unsigned char*));
	//unsigned char** dest_uc_matrix = (unsigned char**)(TIGHTLY_COUPLED_DATA_MEM_BASE);
	if (orig_uc_matrix == NULL || dest_uc_matrix == NULL) printf("NULL ptr found\n");
	int i = 0;
    for (; i < 512; ++i) {
 11000d4:	e0bff017 	ldw	r2,-64(fp)
 11000d8:	10800044 	addi	r2,r2,1
 11000dc:	e0bff015 	stw	r2,-64(fp)
 11000e0:	e0bff017 	ldw	r2,-64(fp)
 11000e4:	10808010 	cmplti	r2,r2,512
 11000e8:	103fe51e 	bne	r2,zero,1100080 <main+0x80>
      dest_uc_matrix[i] = (unsigned char*)malloc(512*sizeof(unsigned char));
      if (dest_uc_matrix[i] == NULL) printf("NULL ptr found\n");
    }
	printf("Read OK\n");
 11000ec:	01002074 	movhi	r4,129
 11000f0:	21122304 	addi	r4,r4,18572
 11000f4:	08047a80 	call	8047a8 <puts>

	alt_timestamp_start(); // inicializamos los timers
 11000f8:	08132540 	call	813254 <alt_timestamp_start>
	alt_u32 timer1 = alt_timestamp();
 11000fc:	08132f80 	call	8132f8 <alt_timestamp>
 1100100:	e0bfef15 	stw	r2,-68(fp)
	int kernel[9] = {-1, -1, -1, -1, 8, -1, -1, -1, -1};
 1100104:	00bfffc4 	movi	r2,-1
 1100108:	e0bff715 	stw	r2,-36(fp)
 110010c:	00bfffc4 	movi	r2,-1
 1100110:	e0bff815 	stw	r2,-32(fp)
 1100114:	00bfffc4 	movi	r2,-1
 1100118:	e0bff915 	stw	r2,-28(fp)
 110011c:	00bfffc4 	movi	r2,-1
 1100120:	e0bffa15 	stw	r2,-24(fp)
 1100124:	00800204 	movi	r2,8
 1100128:	e0bffb15 	stw	r2,-20(fp)
 110012c:	00bfffc4 	movi	r2,-1
 1100130:	e0bffc15 	stw	r2,-16(fp)
 1100134:	00bfffc4 	movi	r2,-1
 1100138:	e0bffd15 	stw	r2,-12(fp)
 110013c:	00bfffc4 	movi	r2,-1
 1100140:	e0bffe15 	stw	r2,-8(fp)
 1100144:	00bfffc4 	movi	r2,-1
 1100148:	e0bfff15 	stw	r2,-4(fp)
	int accum = 0;
 110014c:	e03fee15 	stw	zero,-72(fp)
	i = 1;
 1100150:	00800044 	movi	r2,1
 1100154:	e0bff015 	stw	r2,-64(fp)
	int j = 1;
 1100158:	00800044 	movi	r2,1
 110015c:	e0bfed15 	stw	r2,-76(fp)
	for(; i < 511; ++i) {
 1100160:	0000c706 	br	1100480 <main+0x480>
		j = 1;
 1100164:	00800044 	movi	r2,1
 1100168:	e0bfed15 	stw	r2,-76(fp)
		for(; j < 511; ++j) {
 110016c:	0000be06 	br	1100468 <main+0x468>
			accum = 0;
 1100170:	e03fee15 	stw	zero,-72(fp)
			accum = accum + (kernel[0] * orig_uc_matrix[i - 1][j - 1]);
 1100174:	e13ff717 	ldw	r4,-36(fp)
 1100178:	e0bff017 	ldw	r2,-64(fp)
 110017c:	1085883a 	add	r2,r2,r2
 1100180:	1085883a 	add	r2,r2,r2
 1100184:	1007883a 	mov	r3,r2
 1100188:	e0bff217 	ldw	r2,-56(fp)
 110018c:	1885883a 	add	r2,r3,r2
 1100190:	10bfff04 	addi	r2,r2,-4
 1100194:	10c00017 	ldw	r3,0(r2)
 1100198:	e0bfed17 	ldw	r2,-76(fp)
 110019c:	1885883a 	add	r2,r3,r2
 11001a0:	10bfffc4 	addi	r2,r2,-1
 11001a4:	10800003 	ldbu	r2,0(r2)
 11001a8:	11403fcc 	andi	r5,r2,255
 11001ac:	0801c5c0 	call	801c5c <__mulsi3>
 11001b0:	1007883a 	mov	r3,r2
 11001b4:	e0bfee17 	ldw	r2,-72(fp)
 11001b8:	10c5883a 	add	r2,r2,r3
 11001bc:	e0bfee15 	stw	r2,-72(fp)
			accum = accum + (kernel[1] * orig_uc_matrix[i - 1][j]);
 11001c0:	e13ff817 	ldw	r4,-32(fp)
 11001c4:	e0bff017 	ldw	r2,-64(fp)
 11001c8:	1085883a 	add	r2,r2,r2
 11001cc:	1085883a 	add	r2,r2,r2
 11001d0:	1007883a 	mov	r3,r2
 11001d4:	e0bff217 	ldw	r2,-56(fp)
 11001d8:	1885883a 	add	r2,r3,r2
 11001dc:	10bfff04 	addi	r2,r2,-4
 11001e0:	10c00017 	ldw	r3,0(r2)
 11001e4:	e0bfed17 	ldw	r2,-76(fp)
 11001e8:	1885883a 	add	r2,r3,r2
 11001ec:	10800003 	ldbu	r2,0(r2)
 11001f0:	11403fcc 	andi	r5,r2,255
 11001f4:	0801c5c0 	call	801c5c <__mulsi3>
 11001f8:	1007883a 	mov	r3,r2
 11001fc:	e0bfee17 	ldw	r2,-72(fp)
 1100200:	10c5883a 	add	r2,r2,r3
 1100204:	e0bfee15 	stw	r2,-72(fp)
			accum = accum + (kernel[2] * orig_uc_matrix[i - 1][j + 1]);
 1100208:	e13ff917 	ldw	r4,-28(fp)
 110020c:	e0bff017 	ldw	r2,-64(fp)
 1100210:	1085883a 	add	r2,r2,r2
 1100214:	1085883a 	add	r2,r2,r2
 1100218:	1007883a 	mov	r3,r2
 110021c:	e0bff217 	ldw	r2,-56(fp)
 1100220:	1885883a 	add	r2,r3,r2
 1100224:	10bfff04 	addi	r2,r2,-4
 1100228:	10c00017 	ldw	r3,0(r2)
 110022c:	e0bfed17 	ldw	r2,-76(fp)
 1100230:	1885883a 	add	r2,r3,r2
 1100234:	10800044 	addi	r2,r2,1
 1100238:	10800003 	ldbu	r2,0(r2)
 110023c:	11403fcc 	andi	r5,r2,255
 1100240:	0801c5c0 	call	801c5c <__mulsi3>
 1100244:	1007883a 	mov	r3,r2
 1100248:	e0bfee17 	ldw	r2,-72(fp)
 110024c:	10c5883a 	add	r2,r2,r3
 1100250:	e0bfee15 	stw	r2,-72(fp)
			accum = accum + (kernel[3] * orig_uc_matrix[i][j - 1]);
 1100254:	e13ffa17 	ldw	r4,-24(fp)
 1100258:	e0bff017 	ldw	r2,-64(fp)
 110025c:	1085883a 	add	r2,r2,r2
 1100260:	1085883a 	add	r2,r2,r2
 1100264:	1007883a 	mov	r3,r2
 1100268:	e0bff217 	ldw	r2,-56(fp)
 110026c:	1885883a 	add	r2,r3,r2
 1100270:	10c00017 	ldw	r3,0(r2)
 1100274:	e0bfed17 	ldw	r2,-76(fp)
 1100278:	1885883a 	add	r2,r3,r2
 110027c:	10bfffc4 	addi	r2,r2,-1
 1100280:	10800003 	ldbu	r2,0(r2)
 1100284:	11403fcc 	andi	r5,r2,255
 1100288:	0801c5c0 	call	801c5c <__mulsi3>
 110028c:	1007883a 	mov	r3,r2
 1100290:	e0bfee17 	ldw	r2,-72(fp)
 1100294:	10c5883a 	add	r2,r2,r3
 1100298:	e0bfee15 	stw	r2,-72(fp)
			accum = accum + (kernel[4] * orig_uc_matrix[i][j]);
 110029c:	e13ffb17 	ldw	r4,-20(fp)
 11002a0:	e0bff017 	ldw	r2,-64(fp)
 11002a4:	1085883a 	add	r2,r2,r2
 11002a8:	1085883a 	add	r2,r2,r2
 11002ac:	1007883a 	mov	r3,r2
 11002b0:	e0bff217 	ldw	r2,-56(fp)
 11002b4:	1885883a 	add	r2,r3,r2
 11002b8:	10c00017 	ldw	r3,0(r2)
 11002bc:	e0bfed17 	ldw	r2,-76(fp)
 11002c0:	1885883a 	add	r2,r3,r2
 11002c4:	10800003 	ldbu	r2,0(r2)
 11002c8:	11403fcc 	andi	r5,r2,255
 11002cc:	0801c5c0 	call	801c5c <__mulsi3>
 11002d0:	1007883a 	mov	r3,r2
 11002d4:	e0bfee17 	ldw	r2,-72(fp)
 11002d8:	10c5883a 	add	r2,r2,r3
 11002dc:	e0bfee15 	stw	r2,-72(fp)
			accum = accum + (kernel[5] * orig_uc_matrix[i][j + 1]);
 11002e0:	e13ffc17 	ldw	r4,-16(fp)
 11002e4:	e0bff017 	ldw	r2,-64(fp)
 11002e8:	1085883a 	add	r2,r2,r2
 11002ec:	1085883a 	add	r2,r2,r2
 11002f0:	1007883a 	mov	r3,r2
 11002f4:	e0bff217 	ldw	r2,-56(fp)
 11002f8:	1885883a 	add	r2,r3,r2
 11002fc:	10c00017 	ldw	r3,0(r2)
 1100300:	e0bfed17 	ldw	r2,-76(fp)
 1100304:	1885883a 	add	r2,r3,r2
 1100308:	10800044 	addi	r2,r2,1
 110030c:	10800003 	ldbu	r2,0(r2)
 1100310:	11403fcc 	andi	r5,r2,255
 1100314:	0801c5c0 	call	801c5c <__mulsi3>
 1100318:	1007883a 	mov	r3,r2
 110031c:	e0bfee17 	ldw	r2,-72(fp)
 1100320:	10c5883a 	add	r2,r2,r3
 1100324:	e0bfee15 	stw	r2,-72(fp)
			accum = accum + (kernel[6] * orig_uc_matrix[i + 1][j - 1]);
 1100328:	e13ffd17 	ldw	r4,-12(fp)
 110032c:	e0bff017 	ldw	r2,-64(fp)
 1100330:	1085883a 	add	r2,r2,r2
 1100334:	1085883a 	add	r2,r2,r2
 1100338:	1007883a 	mov	r3,r2
 110033c:	e0bff217 	ldw	r2,-56(fp)
 1100340:	1885883a 	add	r2,r3,r2
 1100344:	10800104 	addi	r2,r2,4
 1100348:	10c00017 	ldw	r3,0(r2)
 110034c:	e0bfed17 	ldw	r2,-76(fp)
 1100350:	1885883a 	add	r2,r3,r2
 1100354:	10bfffc4 	addi	r2,r2,-1
 1100358:	10800003 	ldbu	r2,0(r2)
 110035c:	11403fcc 	andi	r5,r2,255
 1100360:	0801c5c0 	call	801c5c <__mulsi3>
 1100364:	1007883a 	mov	r3,r2
 1100368:	e0bfee17 	ldw	r2,-72(fp)
 110036c:	10c5883a 	add	r2,r2,r3
 1100370:	e0bfee15 	stw	r2,-72(fp)
			accum = accum + (kernel[7] * orig_uc_matrix[i + 1][j]);
 1100374:	e13ffe17 	ldw	r4,-8(fp)
 1100378:	e0bff017 	ldw	r2,-64(fp)
 110037c:	1085883a 	add	r2,r2,r2
 1100380:	1085883a 	add	r2,r2,r2
 1100384:	1007883a 	mov	r3,r2
 1100388:	e0bff217 	ldw	r2,-56(fp)
 110038c:	1885883a 	add	r2,r3,r2
 1100390:	10800104 	addi	r2,r2,4
 1100394:	10c00017 	ldw	r3,0(r2)
 1100398:	e0bfed17 	ldw	r2,-76(fp)
 110039c:	1885883a 	add	r2,r3,r2
 11003a0:	10800003 	ldbu	r2,0(r2)
 11003a4:	11403fcc 	andi	r5,r2,255
 11003a8:	0801c5c0 	call	801c5c <__mulsi3>
 11003ac:	1007883a 	mov	r3,r2
 11003b0:	e0bfee17 	ldw	r2,-72(fp)
 11003b4:	10c5883a 	add	r2,r2,r3
 11003b8:	e0bfee15 	stw	r2,-72(fp)
			accum = accum + (kernel[8] * orig_uc_matrix[i + 1][j + 1]);
 11003bc:	e13fff17 	ldw	r4,-4(fp)
 11003c0:	e0bff017 	ldw	r2,-64(fp)
 11003c4:	1085883a 	add	r2,r2,r2
 11003c8:	1085883a 	add	r2,r2,r2
 11003cc:	1007883a 	mov	r3,r2
 11003d0:	e0bff217 	ldw	r2,-56(fp)
 11003d4:	1885883a 	add	r2,r3,r2
 11003d8:	10800104 	addi	r2,r2,4
 11003dc:	10c00017 	ldw	r3,0(r2)
 11003e0:	e0bfed17 	ldw	r2,-76(fp)
 11003e4:	1885883a 	add	r2,r3,r2
 11003e8:	10800044 	addi	r2,r2,1
 11003ec:	10800003 	ldbu	r2,0(r2)
 11003f0:	11403fcc 	andi	r5,r2,255
 11003f4:	0801c5c0 	call	801c5c <__mulsi3>
 11003f8:	1007883a 	mov	r3,r2
 11003fc:	e0bfee17 	ldw	r2,-72(fp)
 1100400:	10c5883a 	add	r2,r2,r3
 1100404:	e0bfee15 	stw	r2,-72(fp)
			if (accum > 255) accum = 255;
 1100408:	e0bfee17 	ldw	r2,-72(fp)
 110040c:	10804010 	cmplti	r2,r2,256
 1100410:	1000031e 	bne	r2,zero,1100420 <main+0x420>
 1100414:	00803fc4 	movi	r2,255
 1100418:	e0bfee15 	stw	r2,-72(fp)
 110041c:	00000406 	br	1100430 <main+0x430>
			else if (accum < 0) accum = 0;
 1100420:	e0bfee17 	ldw	r2,-72(fp)
 1100424:	1004403a 	cmpge	r2,r2,zero
 1100428:	1000011e 	bne	r2,zero,1100430 <main+0x430>
 110042c:	e03fee15 	stw	zero,-72(fp)
			dest_uc_matrix[i][j] = (unsigned char)accum;
 1100430:	e0bff017 	ldw	r2,-64(fp)
 1100434:	1085883a 	add	r2,r2,r2
 1100438:	1085883a 	add	r2,r2,r2
 110043c:	1007883a 	mov	r3,r2
 1100440:	e0bff117 	ldw	r2,-60(fp)
 1100444:	1885883a 	add	r2,r3,r2
 1100448:	10c00017 	ldw	r3,0(r2)
 110044c:	e0bfed17 	ldw	r2,-76(fp)
 1100450:	1887883a 	add	r3,r3,r2
 1100454:	e0bfee17 	ldw	r2,-72(fp)
 1100458:	18800005 	stb	r2,0(r3)
	int accum = 0;
	i = 1;
	int j = 1;
	for(; i < 511; ++i) {
		j = 1;
		for(; j < 511; ++j) {
 110045c:	e0bfed17 	ldw	r2,-76(fp)
 1100460:	10800044 	addi	r2,r2,1
 1100464:	e0bfed15 	stw	r2,-76(fp)
 1100468:	e0bfed17 	ldw	r2,-76(fp)
 110046c:	10807fd0 	cmplti	r2,r2,511
 1100470:	103f3f1e 	bne	r2,zero,1100170 <main+0x170>
	alt_u32 timer1 = alt_timestamp();
	int kernel[9] = {-1, -1, -1, -1, 8, -1, -1, -1, -1};
	int accum = 0;
	i = 1;
	int j = 1;
	for(; i < 511; ++i) {
 1100474:	e0bff017 	ldw	r2,-64(fp)
 1100478:	10800044 	addi	r2,r2,1
 110047c:	e0bff015 	stw	r2,-64(fp)
 1100480:	e0bff017 	ldw	r2,-64(fp)
 1100484:	10807fd0 	cmplti	r2,r2,511
 1100488:	103f361e 	bne	r2,zero,1100164 <main+0x164>
			if (accum > 255) accum = 255;
			else if (accum < 0) accum = 0;
			dest_uc_matrix[i][j] = (unsigned char)accum;
		}
	}
	alt_u32 timer_result = alt_timestamp() - timer1;
 110048c:	08132f80 	call	8132f8 <alt_timestamp>
 1100490:	1007883a 	mov	r3,r2
 1100494:	e0bfef17 	ldw	r2,-68(fp)
 1100498:	1885c83a 	sub	r2,r3,r2
 110049c:	e0bfec15 	stw	r2,-80(fp)
	printf("Ciclos de aplicación del algoritmo: %u \n", timer_result);
 11004a0:	01002074 	movhi	r4,129
 11004a4:	21122504 	addi	r4,r4,18580
 11004a8:	e17fec17 	ldw	r5,-80(fp)
 11004ac:	08046900 	call	804690 <printf>
	printf("Nanosegundos de aplicación del algoritmo: %u \n", (timer_result) * 20);
 11004b0:	e13fec17 	ldw	r4,-80(fp)
 11004b4:	01400504 	movi	r5,20
 11004b8:	0801c5c0 	call	801c5c <__mulsi3>
 11004bc:	100b883a 	mov	r5,r2
 11004c0:	01002074 	movhi	r4,129
 11004c4:	21123004 	addi	r4,r4,18624
 11004c8:	08046900 	call	804690 <printf>
	printf("Segundos de aplicación del algoritmo: %f \n", (double)((timer_result) * 20) / 100000000 );
 11004cc:	e13fec17 	ldw	r4,-80(fp)
 11004d0:	01400504 	movi	r5,20
 11004d4:	0801c5c0 	call	801c5c <__mulsi3>
 11004d8:	1009883a 	mov	r4,r2
 11004dc:	0801ac80 	call	801ac8 <__floatunsidf>
 11004e0:	100b883a 	mov	r5,r2
 11004e4:	180d883a 	mov	r6,r3
 11004e8:	2809883a 	mov	r4,r5
 11004ec:	300b883a 	mov	r5,r6
 11004f0:	000d883a 	mov	r6,zero
 11004f4:	01d06634 	movhi	r7,16792
 11004f8:	39f5e104 	addi	r7,r7,-10364
 11004fc:	08018700 	call	801870 <__divdf3>
 1100500:	1009883a 	mov	r4,r2
 1100504:	180b883a 	mov	r5,r3
 1100508:	2005883a 	mov	r2,r4
 110050c:	2807883a 	mov	r3,r5
 1100510:	01002074 	movhi	r4,129
 1100514:	21123c04 	addi	r4,r4,18672
 1100518:	100b883a 	mov	r5,r2
 110051c:	180d883a 	mov	r6,r3
 1100520:	08046900 	call	804690 <printf>


	if (pgmwrite2(path_out, height_photo, width_photo, dest_uc_matrix, NULL, 1) == 0) printf("Written OK\n");
 1100524:	e17ff617 	ldw	r5,-40(fp)
 1100528:	e1bff517 	ldw	r6,-44(fp)
 110052c:	d8000015 	stw	zero,0(sp)
 1100530:	00800044 	movi	r2,1
 1100534:	d8800115 	stw	r2,4(sp)
 1100538:	e13ff317 	ldw	r4,-52(fp)
 110053c:	e1fff117 	ldw	r7,-60(fp)
 1100540:	08010980 	call	801098 <pgmwrite2>
 1100544:	1004c03a 	cmpne	r2,r2,zero
 1100548:	1000041e 	bne	r2,zero,110055c <main+0x55c>
 110054c:	01002074 	movhi	r4,129
 1100550:	21124704 	addi	r4,r4,18716
 1100554:	08047a80 	call	8047a8 <puts>
 1100558:	00000306 	br	1100568 <main+0x568>
	else { printf("ERROR\n"); }
 110055c:	01002074 	movhi	r4,129
 1100560:	21124a04 	addi	r4,r4,18728
 1100564:	08047a80 	call	8047a8 <puts>
//		free(orig_uc_matrix[i]);
//		free((void*)dest_uc_matrix[i]);
//	}
//	free(orig_uc_matrix);
//	free(dest_uc_matrix);
	return 0;
 1100568:	0005883a 	mov	r2,zero
}
 110056c:	e037883a 	mov	sp,fp
 1100570:	dfc00217 	ldw	ra,8(sp)
 1100574:	df000117 	ldw	fp,4(sp)
 1100578:	dc000017 	ldw	r16,0(sp)
 110057c:	dec00304 	addi	sp,sp,12
 1100580:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00880014 	movui	r2,8192
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bffc04 	addi	r2,r2,-16
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001d0:	d6bae214 	ori	gp,gp,60296
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001d8:	10a1c314 	ori	r2,r2,34572

    movhi r3, %hi(__bss_end)
  8001dc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001e0:	18e2c014 	ori	r3,r3,35584

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f4:	0811ba00 	call	811ba0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f8:	0811de00 	call	811de0 <alt_main>

008001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001fc:	003fff06 	br	8001fc <alt_after_alt_main>

00800200 <readToWhitespace>:
 * NOTE: the image buffer returned is in column dominant format
 */



int readToWhitespace(FILE * file, char * cadena, int maxchars){
  800200:	defff804 	addi	sp,sp,-32
  800204:	dfc00715 	stw	ra,28(sp)
  800208:	df000615 	stw	fp,24(sp)
  80020c:	df000604 	addi	fp,sp,24
  800210:	e13ffd15 	stw	r4,-12(fp)
  800214:	e17ffe15 	stw	r5,-8(fp)
  800218:	e1bfff15 	stw	r6,-4(fp)
	int c;
	int numread = 0;
  80021c:	e03ffb15 	stw	zero,-20(fp)
	char * ptchar = cadena;
  800220:	e0bffe17 	ldw	r2,-8(fp)
  800224:	e0bffa15 	stw	r2,-24(fp)
	do {
		c = fgetc(file);
  800228:	e13ffd17 	ldw	r4,-12(fp)
  80022c:	08025d00 	call	8025d0 <fgetc>
  800230:	e0bffc15 	stw	r2,-16(fp)
		//printf("L:%c\n", c);
		if (c == EOF) break;
  800234:	e0bffc17 	ldw	r2,-16(fp)
  800238:	10bfffe0 	cmpeqi	r2,r2,-1
  80023c:	10001b1e 	bne	r2,zero,8002ac <readToWhitespace+0xac>
		if (isspace(c)){ //Devuelve el espacio leido al stream y sale
  800240:	00802074 	movhi	r2,129
  800244:	109ae204 	addi	r2,r2,27528
  800248:	10c00017 	ldw	r3,0(r2)
  80024c:	e0bffc17 	ldw	r2,-16(fp)
  800250:	1885883a 	add	r2,r3,r2
  800254:	10800003 	ldbu	r2,0(r2)
  800258:	10803fcc 	andi	r2,r2,255
  80025c:	1080020c 	andi	r2,r2,8
  800260:	1005003a 	cmpeq	r2,r2,zero
  800264:	1000041e 	bne	r2,zero,800278 <readToWhitespace+0x78>
			ungetc(c, file);
  800268:	e13ffc17 	ldw	r4,-16(fp)
  80026c:	e17ffd17 	ldw	r5,-12(fp)
  800270:	08050a80 	call	8050a8 <ungetc>
			break;
  800274:	00000d06 	br	8002ac <readToWhitespace+0xac>
		}
		/* un caracter valido */
		*ptchar++ = (unsigned char) c;
  800278:	e0bffc17 	ldw	r2,-16(fp)
  80027c:	1007883a 	mov	r3,r2
  800280:	e0bffa17 	ldw	r2,-24(fp)
  800284:	10c00005 	stb	r3,0(r2)
  800288:	e0bffa17 	ldw	r2,-24(fp)
  80028c:	10800044 	addi	r2,r2,1
  800290:	e0bffa15 	stw	r2,-24(fp)
		numread++;
  800294:	e0bffb17 	ldw	r2,-20(fp)
  800298:	10800044 	addi	r2,r2,1
  80029c:	e0bffb15 	stw	r2,-20(fp)
	} while (numread <= maxchars);
  8002a0:	e0fffb17 	ldw	r3,-20(fp)
  8002a4:	e0bfff17 	ldw	r2,-4(fp)
  8002a8:	10ffdf0e 	bge	r2,r3,800228 <readToWhitespace+0x28>
	return numread;
  8002ac:	e0bffb17 	ldw	r2,-20(fp)
}
  8002b0:	e037883a 	mov	sp,fp
  8002b4:	dfc00117 	ldw	ra,4(sp)
  8002b8:	df000017 	ldw	fp,0(sp)
  8002bc:	dec00204 	addi	sp,sp,8
  8002c0:	f800283a 	ret

008002c4 <eatCommsWhitespaces>:

void eatCommsWhitespaces(FILE * file){
  8002c4:	defffb04 	addi	sp,sp,-20
  8002c8:	dfc00415 	stw	ra,16(sp)
  8002cc:	df000315 	stw	fp,12(sp)
  8002d0:	df000304 	addi	fp,sp,12
  8002d4:	e13fff15 	stw	r4,-4(fp)
	int c, cc;
	do {
		c = fgetc(file);
  8002d8:	e13fff17 	ldw	r4,-4(fp)
  8002dc:	08025d00 	call	8025d0 <fgetc>
  8002e0:	e0bffe15 	stw	r2,-8(fp)
		if (c == EOF) return;
  8002e4:	e0bffe17 	ldw	r2,-8(fp)
  8002e8:	10bfffe0 	cmpeqi	r2,r2,-1
  8002ec:	10001a1e 	bne	r2,zero,800358 <eatCommsWhitespaces+0x94>
		if (c == '#'){ //Procesar comentario
  8002f0:	e0bffe17 	ldw	r2,-8(fp)
  8002f4:	108008d8 	cmpnei	r2,r2,35
  8002f8:	10000a1e 	bne	r2,zero,800324 <eatCommsWhitespaces+0x60>
			do {
			    cc = fgetc(file);
  8002fc:	e13fff17 	ldw	r4,-4(fp)
  800300:	08025d00 	call	8025d0 <fgetc>
  800304:	e0bffd15 	stw	r2,-12(fp)
			    if (cc == EOF) return;
  800308:	e0bffd17 	ldw	r2,-12(fp)
  80030c:	10bfffe0 	cmpeqi	r2,r2,-1
  800310:	1000111e 	bne	r2,zero,800358 <eatCommsWhitespaces+0x94>
		    } while (cc != '\n'); //Se asume que no se abre en modo binario (Windows compatible)
  800314:	e0bffd17 	ldw	r2,-12(fp)
  800318:	10800298 	cmpnei	r2,r2,10
  80031c:	103ff71e 	bne	r2,zero,8002fc <eatCommsWhitespaces+0x38>
			break;
  800320:	00000d06 	br	800358 <eatCommsWhitespaces+0x94>
		}
		if (!isspace(c)){ //Devuelve el caracter leido al stream y sale
  800324:	00802074 	movhi	r2,129
  800328:	109ae204 	addi	r2,r2,27528
  80032c:	10c00017 	ldw	r3,0(r2)
  800330:	e0bffe17 	ldw	r2,-8(fp)
  800334:	1885883a 	add	r2,r3,r2
  800338:	10800003 	ldbu	r2,0(r2)
  80033c:	10803fcc 	andi	r2,r2,255
  800340:	1080020c 	andi	r2,r2,8
  800344:	1004c03a 	cmpne	r2,r2,zero
  800348:	103fe31e 	bne	r2,zero,8002d8 <eatCommsWhitespaces+0x14>
			ungetc(c, file);
  80034c:	e13ffe17 	ldw	r4,-8(fp)
  800350:	e17fff17 	ldw	r5,-4(fp)
  800354:	08050a80 	call	8050a8 <ungetc>
			return;
		}
	} while(1);
}
  800358:	e037883a 	mov	sp,fp
  80035c:	dfc00117 	ldw	ra,4(sp)
  800360:	df000017 	ldw	fp,0(sp)
  800364:	dec00204 	addi	sp,sp,8
  800368:	f800283a 	ret

0080036c <eatWhitespaces>:

int eatWhitespaces(FILE * file, int maxchars){
  80036c:	defffa04 	addi	sp,sp,-24
  800370:	dfc00515 	stw	ra,20(sp)
  800374:	df000415 	stw	fp,16(sp)
  800378:	df000404 	addi	fp,sp,16
  80037c:	e13ffe15 	stw	r4,-8(fp)
  800380:	e17fff15 	stw	r5,-4(fp)
	int c;
	int numread = 0;
  800384:	e03ffc15 	stw	zero,-16(fp)
	do {
		c = fgetc(file);
  800388:	e13ffe17 	ldw	r4,-8(fp)
  80038c:	08025d00 	call	8025d0 <fgetc>
  800390:	e0bffd15 	stw	r2,-12(fp)
		if (c == EOF) break;
  800394:	e0bffd17 	ldw	r2,-12(fp)
  800398:	10bfffe0 	cmpeqi	r2,r2,-1
  80039c:	1000141e 	bne	r2,zero,8003f0 <eatWhitespaces+0x84>
		if (!isspace(c)){ //Devuelve el caracter leido al stream y sale
  8003a0:	00802074 	movhi	r2,129
  8003a4:	109ae204 	addi	r2,r2,27528
  8003a8:	10c00017 	ldw	r3,0(r2)
  8003ac:	e0bffd17 	ldw	r2,-12(fp)
  8003b0:	1885883a 	add	r2,r3,r2
  8003b4:	10800003 	ldbu	r2,0(r2)
  8003b8:	10803fcc 	andi	r2,r2,255
  8003bc:	1080020c 	andi	r2,r2,8
  8003c0:	1004c03a 	cmpne	r2,r2,zero
  8003c4:	1000041e 	bne	r2,zero,8003d8 <eatWhitespaces+0x6c>
			ungetc(c, file);
  8003c8:	e13ffd17 	ldw	r4,-12(fp)
  8003cc:	e17ffe17 	ldw	r5,-8(fp)
  8003d0:	08050a80 	call	8050a8 <ungetc>
			break;
  8003d4:	00000606 	br	8003f0 <eatWhitespaces+0x84>
		}
		numread++;
  8003d8:	e0bffc17 	ldw	r2,-16(fp)
  8003dc:	10800044 	addi	r2,r2,1
  8003e0:	e0bffc15 	stw	r2,-16(fp)
	} while (numread <= maxchars);
  8003e4:	e0fffc17 	ldw	r3,-16(fp)
  8003e8:	e0bfff17 	ldw	r2,-4(fp)
  8003ec:	10ffe60e 	bge	r2,r3,800388 <eatWhitespaces+0x1c>
	return numread;
  8003f0:	e0bffc17 	ldw	r2,-16(fp)
}
  8003f4:	e037883a 	mov	sp,fp
  8003f8:	dfc00117 	ldw	ra,4(sp)
  8003fc:	df000017 	ldw	fp,0(sp)
  800400:	dec00204 	addi	sp,sp,8
  800404:	f800283a 	ret

00800408 <eatComments>:

void eatComments(FILE * file){
  800408:	defffc04 	addi	sp,sp,-16
  80040c:	dfc00315 	stw	ra,12(sp)
  800410:	df000215 	stw	fp,8(sp)
  800414:	df000204 	addi	fp,sp,8
  800418:	e13fff15 	stw	r4,-4(fp)
	int c;
    do { //Procesa cada comentario
	  c = fgetc(file);
  80041c:	e13fff17 	ldw	r4,-4(fp)
  800420:	08025d00 	call	8025d0 <fgetc>
  800424:	e0bffe15 	stw	r2,-8(fp)
	  if (c == EOF) return;
  800428:	e0bffe17 	ldw	r2,-8(fp)
  80042c:	10bfffe0 	cmpeqi	r2,r2,-1
  800430:	1000111e 	bne	r2,zero,800478 <eatComments+0x70>
	  if (c != '#'){
  800434:	e0bffe17 	ldw	r2,-8(fp)
  800438:	108008e0 	cmpeqi	r2,r2,35
  80043c:	1000041e 	bne	r2,zero,800450 <eatComments+0x48>
	     ungetc(c, file);
  800440:	e13ffe17 	ldw	r4,-8(fp)
  800444:	e17fff17 	ldw	r5,-4(fp)
  800448:	08050a80 	call	8050a8 <ungetc>
	     return;
  80044c:	00000a06 	br	800478 <eatComments+0x70>
	  } //Procesa el resto del comentario hasta fin de linea
	  do {
		 c = fgetc(file);
  800450:	e13fff17 	ldw	r4,-4(fp)
  800454:	08025d00 	call	8025d0 <fgetc>
  800458:	e0bffe15 	stw	r2,-8(fp)
		 if (c == EOF) return;
  80045c:	e0bffe17 	ldw	r2,-8(fp)
  800460:	10bfffe0 	cmpeqi	r2,r2,-1
  800464:	1000041e 	bne	r2,zero,800478 <eatComments+0x70>
	  } while (c != '\n'); //Se asume que no se abre en modo binario (Windows compatible)
  800468:	e0bffe17 	ldw	r2,-8(fp)
  80046c:	10800298 	cmpnei	r2,r2,10
  800470:	103ff71e 	bne	r2,zero,800450 <eatComments+0x48>
    } while(1);
  800474:	003fe906 	br	80041c <eatComments+0x14>
	return;
}
  800478:	e037883a 	mov	sp,fp
  80047c:	dfc00117 	ldw	ra,4(sp)
  800480:	df000017 	ldw	fp,0(sp)
  800484:	dec00204 	addi	sp,sp,8
  800488:	f800283a 	ret

0080048c <pgmread>:

unsigned char** pgmread(char* filename, int* w, int* h)
{
  80048c:	deffb004 	addi	sp,sp,-320
  800490:	dfc04f15 	stw	ra,316(sp)
  800494:	df004e15 	stw	fp,312(sp)
  800498:	dc004d15 	stw	r16,308(sp)
  80049c:	df004d04 	addi	fp,sp,308
  8004a0:	e13ffc15 	stw	r4,-16(fp)
  8004a4:	e17ffd15 	stw	r5,-12(fp)
  8004a8:	e1bffe15 	stw	r6,-8(fp)
    int nread;
    int i,j, int_tmp;

    unsigned char** data;
    unsigned char*  bindata;
	printf("Debug: Opening image:\n");
  8004ac:	01002074 	movhi	r4,129
  8004b0:	21124c04 	addi	r4,r4,18736
  8004b4:	08047a80 	call	8047a8 <puts>
    if ((file = fopen(filename, "r")) == NULL)
  8004b8:	e13ffc17 	ldw	r4,-16(fp)
  8004bc:	01402074 	movhi	r5,129
  8004c0:	29525204 	addi	r5,r5,18760
  8004c4:	0802c4c0 	call	802c4c <fopen>
  8004c8:	e0bfb915 	stw	r2,-284(fp)
  8004cc:	e0bfb917 	ldw	r2,-284(fp)
  8004d0:	1004c03a 	cmpne	r2,r2,zero
  8004d4:	10000b1e 	bne	r2,zero,800504 <pgmread+0x78>
	{
	    printf("ERROR: file open failed\n");
  8004d8:	01002074 	movhi	r4,129
  8004dc:	21125304 	addi	r4,r4,18764
  8004e0:	08047a80 	call	8047a8 <puts>
	    *h = *w = 0;
  8004e4:	e0bffd17 	ldw	r2,-12(fp)
  8004e8:	10000015 	stw	zero,0(r2)
  8004ec:	e0bffd17 	ldw	r2,-12(fp)
  8004f0:	10c00017 	ldw	r3,0(r2)
  8004f4:	e0bffe17 	ldw	r2,-8(fp)
  8004f8:	10c00015 	stw	r3,0(r2)
	    return(NULL);
  8004fc:	e03fff15 	stw	zero,-4(fp)
  800500:	0000ec06 	br	8008b4 <pgmread+0x428>
	} else {
		printf("Debug: Image opened successfully!\n");
  800504:	01002074 	movhi	r4,129
  800508:	21125904 	addi	r4,r4,18788
  80050c:	08047a80 	call	8047a8 <puts>
	}
    fgets(line, 256, file);
  800510:	e13fba04 	addi	r4,fp,-280
  800514:	01404004 	movi	r5,256
  800518:	e1bfb917 	ldw	r6,-284(fp)
  80051c:	08028400 	call	802840 <fgets>
    if (strncmp(line,"P5", 2))
  800520:	e13fba04 	addi	r4,fp,-280
  800524:	01402074 	movhi	r5,129
  800528:	29526204 	addi	r5,r5,18824
  80052c:	01800084 	movi	r6,2
  800530:	0804d400 	call	804d40 <strncmp>
  800534:	1005003a 	cmpeq	r2,r2,zero
  800538:	1000141e 	bne	r2,zero,80058c <pgmread+0x100>
	{
	    if (strncmp(line,"P2", 2))
  80053c:	e13fba04 	addi	r4,fp,-280
  800540:	01402074 	movhi	r5,129
  800544:	29526304 	addi	r5,r5,18828
  800548:	01800084 	movi	r6,2
  80054c:	0804d400 	call	804d40 <strncmp>
  800550:	1005003a 	cmpeq	r2,r2,zero
  800554:	10000b1e 	bne	r2,zero,800584 <pgmread+0xf8>
		{
		    printf("pgm read: not a pgm file\n");
  800558:	01002074 	movhi	r4,129
  80055c:	21126404 	addi	r4,r4,18832
  800560:	08047a80 	call	8047a8 <puts>
		    *h = *w = 0;
  800564:	e0bffd17 	ldw	r2,-12(fp)
  800568:	10000015 	stw	zero,0(r2)
  80056c:	e0bffd17 	ldw	r2,-12(fp)
  800570:	10c00017 	ldw	r3,0(r2)
  800574:	e0bffe17 	ldw	r2,-8(fp)
  800578:	10c00015 	stw	r3,0(r2)
		    return(NULL);
  80057c:	e03fff15 	stw	zero,-4(fp)
  800580:	0000cc06 	br	8008b4 <pgmread+0x428>
		}
	    else
		binary = 0;
  800584:	e03fb815 	stw	zero,-288(fp)
  800588:	00000206 	br	800594 <pgmread+0x108>
	}
    else
	binary = 1;
  80058c:	00800044 	movi	r2,1
  800590:	e0bfb815 	stw	r2,-288(fp)

    fgets(line, 256, file);
  800594:	e13fba04 	addi	r4,fp,-280
  800598:	01404004 	movi	r5,256
  80059c:	e1bfb917 	ldw	r6,-284(fp)
  8005a0:	08028400 	call	802840 <fgets>
    while (line[0] == '#')
  8005a4:	00000406 	br	8005b8 <pgmread+0x12c>
    fgets(line, 256, file);
  8005a8:	e13fba04 	addi	r4,fp,-280
  8005ac:	01404004 	movi	r5,256
  8005b0:	e1bfb917 	ldw	r6,-284(fp)
  8005b4:	08028400 	call	802840 <fgets>
	}
    else
	binary = 1;

    fgets(line, 256, file);
    while (line[0] == '#')
  8005b8:	e0bfba03 	ldbu	r2,-280(fp)
  8005bc:	10803fcc 	andi	r2,r2,255
  8005c0:	1080201c 	xori	r2,r2,128
  8005c4:	10bfe004 	addi	r2,r2,-128
  8005c8:	108008e0 	cmpeqi	r2,r2,35
  8005cc:	103ff61e 	bne	r2,zero,8005a8 <pgmread+0x11c>
    fgets(line, 256, file);


    sscanf(line,"%d", w);
  8005d0:	e13fba04 	addi	r4,fp,-280
  8005d4:	01402074 	movhi	r5,129
  8005d8:	29526b04 	addi	r5,r5,18860
  8005dc:	e1bffd17 	ldw	r6,-12(fp)
  8005e0:	0804afc0 	call	804afc <sscanf>
    fgets(line, 256, file);
  8005e4:	e13fba04 	addi	r4,fp,-280
  8005e8:	01404004 	movi	r5,256
  8005ec:	e1bfb917 	ldw	r6,-284(fp)
  8005f0:	08028400 	call	802840 <fgets>
    sscanf(line,"%d", h);
  8005f4:	e13fba04 	addi	r4,fp,-280
  8005f8:	01402074 	movhi	r5,129
  8005fc:	29526b04 	addi	r5,r5,18860
  800600:	e1bffe17 	ldw	r6,-8(fp)
  800604:	0804afc0 	call	804afc <sscanf>
    fgets(line, 256, file);
  800608:	e13fba04 	addi	r4,fp,-280
  80060c:	01404004 	movi	r5,256
  800610:	e1bfb917 	ldw	r6,-284(fp)
  800614:	08028400 	call	802840 <fgets>
    sscanf(line, "%d", &maxval);
  800618:	e13fba04 	addi	r4,fp,-280
  80061c:	e1bffa04 	addi	r6,fp,-24
  800620:	01402074 	movhi	r5,129
  800624:	29526b04 	addi	r5,r5,18860
  800628:	0804afc0 	call	804afc <sscanf>


    if ((data = (unsigned char**)calloc((*w), sizeof(unsigned char*))) == NULL)
  80062c:	e0bffd17 	ldw	r2,-12(fp)
  800630:	10800017 	ldw	r2,0(r2)
  800634:	1009883a 	mov	r4,r2
  800638:	01400104 	movi	r5,4
  80063c:	08021600 	call	802160 <calloc>
  800640:	e0bfb415 	stw	r2,-304(fp)
  800644:	e0bfb417 	ldw	r2,-304(fp)
  800648:	1004c03a 	cmpne	r2,r2,zero
  80064c:	1000051e 	bne	r2,zero,800664 <pgmread+0x1d8>
    {
	printf("Memory allocation error. Exit program\n");
  800650:	01002074 	movhi	r4,129
  800654:	21126c04 	addi	r4,r4,18864
  800658:	08047a80 	call	8047a8 <puts>
	exit(1);
  80065c:	01000044 	movi	r4,1
  800660:	08022440 	call	802244 <exit>
    }
    for (j=0 ; j < (*w); j++)
  800664:	e03fb515 	stw	zero,-300(fp)
  800668:	00001706 	br	8006c8 <pgmread+0x23c>
        if ((data[j] = (unsigned char*)calloc((*h), sizeof(unsigned char))) == NULL)
  80066c:	e0bfb517 	ldw	r2,-300(fp)
  800670:	1085883a 	add	r2,r2,r2
  800674:	1085883a 	add	r2,r2,r2
  800678:	1007883a 	mov	r3,r2
  80067c:	e0bfb417 	ldw	r2,-304(fp)
  800680:	18a1883a 	add	r16,r3,r2
  800684:	e0bffe17 	ldw	r2,-8(fp)
  800688:	10800017 	ldw	r2,0(r2)
  80068c:	1009883a 	mov	r4,r2
  800690:	01400044 	movi	r5,1
  800694:	08021600 	call	802160 <calloc>
  800698:	80800015 	stw	r2,0(r16)
  80069c:	80800017 	ldw	r2,0(r16)
  8006a0:	1004c03a 	cmpne	r2,r2,zero
  8006a4:	1000051e 	bne	r2,zero,8006bc <pgmread+0x230>
        {
	   printf("Memory allocation error. Exit program\n");
  8006a8:	01002074 	movhi	r4,129
  8006ac:	21126c04 	addi	r4,r4,18864
  8006b0:	08047a80 	call	8047a8 <puts>
	   exit(1);
  8006b4:	01000044 	movi	r4,1
  8006b8:	08022440 	call	802244 <exit>
    if ((data = (unsigned char**)calloc((*w), sizeof(unsigned char*))) == NULL)
    {
	printf("Memory allocation error. Exit program\n");
	exit(1);
    }
    for (j=0 ; j < (*w); j++)
  8006bc:	e0bfb517 	ldw	r2,-300(fp)
  8006c0:	10800044 	addi	r2,r2,1
  8006c4:	e0bfb515 	stw	r2,-300(fp)
  8006c8:	e0bffd17 	ldw	r2,-12(fp)
  8006cc:	10c00017 	ldw	r3,0(r2)
  8006d0:	e0bfb517 	ldw	r2,-300(fp)
  8006d4:	10ffe516 	blt	r2,r3,80066c <pgmread+0x1e0>
	   printf("Memory allocation error. Exit program\n");
	   exit(1);
        }


    if (binary)
  8006d8:	e0bfb817 	ldw	r2,-288(fp)
  8006dc:	1005003a 	cmpeq	r2,r2,zero
  8006e0:	10004a1e 	bne	r2,zero,80080c <pgmread+0x380>
    {
	if ((bindata = (unsigned char*)calloc((*w)*(*h), sizeof(unsigned char))) == NULL)
  8006e4:	e0bffd17 	ldw	r2,-12(fp)
  8006e8:	11000017 	ldw	r4,0(r2)
  8006ec:	e0bffe17 	ldw	r2,-8(fp)
  8006f0:	11400017 	ldw	r5,0(r2)
  8006f4:	0801c5c0 	call	801c5c <__mulsi3>
  8006f8:	1009883a 	mov	r4,r2
  8006fc:	01400044 	movi	r5,1
  800700:	08021600 	call	802160 <calloc>
  800704:	e0bfb315 	stw	r2,-308(fp)
  800708:	e0bfb317 	ldw	r2,-308(fp)
  80070c:	1004c03a 	cmpne	r2,r2,zero
  800710:	1000051e 	bne	r2,zero,800728 <pgmread+0x29c>
        {
	   printf("Memory allocation error on bindata. Exit program\n");
  800714:	01002074 	movhi	r4,129
  800718:	21127604 	addi	r4,r4,18904
  80071c:	08047a80 	call	8047a8 <puts>
	   exit(1);
  800720:	01000044 	movi	r4,1
  800724:	08022440 	call	802244 <exit>
        }

	printf("Reading %s as binary.\n", filename);
  800728:	01002074 	movhi	r4,129
  80072c:	21128304 	addi	r4,r4,18956
  800730:	e17ffc17 	ldw	r5,-16(fp)
  800734:	08046900 	call	804690 <printf>

	nread = fread((void*)bindata, sizeof(unsigned char), (*w)*(*h), file);
  800738:	e0bffd17 	ldw	r2,-12(fp)
  80073c:	11000017 	ldw	r4,0(r2)
  800740:	e0bffe17 	ldw	r2,-8(fp)
  800744:	11400017 	ldw	r5,0(r2)
  800748:	0801c5c0 	call	801c5c <__mulsi3>
  80074c:	100d883a 	mov	r6,r2
  800750:	e13fb317 	ldw	r4,-308(fp)
  800754:	01400044 	movi	r5,1
  800758:	e1ffb917 	ldw	r7,-284(fp)
  80075c:	0802ed40 	call	802ed4 <fread>
  800760:	e0bfb715 	stw	r2,-292(fp)

	for(i=0; i< (*w); i++)
  800764:	e03fb615 	stw	zero,-296(fp)
  800768:	00002106 	br	8007f0 <pgmread+0x364>
           for(j=0; j< (*h); j++)
  80076c:	e03fb515 	stw	zero,-300(fp)
  800770:	00001806 	br	8007d4 <pgmread+0x348>
               data[i][j] = (unsigned char)bindata[(j*(*w))+i];
  800774:	e0bfb617 	ldw	r2,-296(fp)
  800778:	1085883a 	add	r2,r2,r2
  80077c:	1085883a 	add	r2,r2,r2
  800780:	1007883a 	mov	r3,r2
  800784:	e0bfb417 	ldw	r2,-304(fp)
  800788:	1885883a 	add	r2,r3,r2
  80078c:	10c00017 	ldw	r3,0(r2)
  800790:	e0bfb517 	ldw	r2,-300(fp)
  800794:	18a1883a 	add	r16,r3,r2
  800798:	e0bffd17 	ldw	r2,-12(fp)
  80079c:	11000017 	ldw	r4,0(r2)
  8007a0:	e17fb517 	ldw	r5,-300(fp)
  8007a4:	0801c5c0 	call	801c5c <__mulsi3>
  8007a8:	1007883a 	mov	r3,r2
  8007ac:	e0bfb617 	ldw	r2,-296(fp)
  8007b0:	1885883a 	add	r2,r3,r2
  8007b4:	1007883a 	mov	r3,r2
  8007b8:	e0bfb317 	ldw	r2,-308(fp)
  8007bc:	1885883a 	add	r2,r3,r2
  8007c0:	10800003 	ldbu	r2,0(r2)
  8007c4:	80800005 	stb	r2,0(r16)
	printf("Reading %s as binary.\n", filename);

	nread = fread((void*)bindata, sizeof(unsigned char), (*w)*(*h), file);

	for(i=0; i< (*w); i++)
           for(j=0; j< (*h); j++)
  8007c8:	e0bfb517 	ldw	r2,-300(fp)
  8007cc:	10800044 	addi	r2,r2,1
  8007d0:	e0bfb515 	stw	r2,-300(fp)
  8007d4:	e0bffe17 	ldw	r2,-8(fp)
  8007d8:	10c00017 	ldw	r3,0(r2)
  8007dc:	e0bfb517 	ldw	r2,-300(fp)
  8007e0:	10ffe416 	blt	r2,r3,800774 <pgmread+0x2e8>

	printf("Reading %s as binary.\n", filename);

	nread = fread((void*)bindata, sizeof(unsigned char), (*w)*(*h), file);

	for(i=0; i< (*w); i++)
  8007e4:	e0bfb617 	ldw	r2,-296(fp)
  8007e8:	10800044 	addi	r2,r2,1
  8007ec:	e0bfb615 	stw	r2,-296(fp)
  8007f0:	e0bffd17 	ldw	r2,-12(fp)
  8007f4:	10c00017 	ldw	r3,0(r2)
  8007f8:	e0bfb617 	ldw	r2,-296(fp)
  8007fc:	10ffdb16 	blt	r2,r3,80076c <pgmread+0x2e0>
           for(j=0; j< (*h); j++)
               data[i][j] = (unsigned char)bindata[(j*(*w))+i];

	free(bindata);
  800800:	e13fb317 	ldw	r4,-308(fp)
  800804:	0803c940 	call	803c94 <free>
  800808:	00002606 	br	8008a4 <pgmread+0x418>
    }
    else {
	printf("Reading %s as ascii.\n", filename);
  80080c:	01002074 	movhi	r4,129
  800810:	21128904 	addi	r4,r4,18980
  800814:	e17ffc17 	ldw	r5,-16(fp)
  800818:	08046900 	call	804690 <printf>

	for (i = 0; i < (*h); i++)
  80081c:	e03fb615 	stw	zero,-296(fp)
  800820:	00001c06 	br	800894 <pgmread+0x408>
	{
            for (j = 0; j < (*w); j++)
  800824:	e03fb515 	stw	zero,-300(fp)
  800828:	00001306 	br	800878 <pgmread+0x3ec>
	    {
		fscanf(file,"%d", &int_tmp);
  80082c:	e1bffb04 	addi	r6,fp,-20
  800830:	e13fb917 	ldw	r4,-284(fp)
  800834:	01402074 	movhi	r5,129
  800838:	29526b04 	addi	r5,r5,18860
  80083c:	080337c0 	call	80337c <fscanf>
		data[j][i] = (unsigned char)int_tmp;
  800840:	e0bfb517 	ldw	r2,-300(fp)
  800844:	1085883a 	add	r2,r2,r2
  800848:	1085883a 	add	r2,r2,r2
  80084c:	1007883a 	mov	r3,r2
  800850:	e0bfb417 	ldw	r2,-304(fp)
  800854:	1885883a 	add	r2,r3,r2
  800858:	10c00017 	ldw	r3,0(r2)
  80085c:	e0bfb617 	ldw	r2,-296(fp)
  800860:	1887883a 	add	r3,r3,r2
  800864:	e0bffb17 	ldw	r2,-20(fp)
  800868:	18800005 	stb	r2,0(r3)
    else {
	printf("Reading %s as ascii.\n", filename);

	for (i = 0; i < (*h); i++)
	{
            for (j = 0; j < (*w); j++)
  80086c:	e0bfb517 	ldw	r2,-300(fp)
  800870:	10800044 	addi	r2,r2,1
  800874:	e0bfb515 	stw	r2,-300(fp)
  800878:	e0bffd17 	ldw	r2,-12(fp)
  80087c:	10c00017 	ldw	r3,0(r2)
  800880:	e0bfb517 	ldw	r2,-300(fp)
  800884:	10ffe916 	blt	r2,r3,80082c <pgmread+0x3a0>
	free(bindata);
    }
    else {
	printf("Reading %s as ascii.\n", filename);

	for (i = 0; i < (*h); i++)
  800888:	e0bfb617 	ldw	r2,-296(fp)
  80088c:	10800044 	addi	r2,r2,1
  800890:	e0bfb615 	stw	r2,-296(fp)
  800894:	e0bffe17 	ldw	r2,-8(fp)
  800898:	10c00017 	ldw	r3,0(r2)
  80089c:	e0bfb617 	ldw	r2,-296(fp)
  8008a0:	10ffe016 	blt	r2,r3,800824 <pgmread+0x398>
        }

    }


    fclose(file);
  8008a4:	e13fb917 	ldw	r4,-284(fp)
  8008a8:	080238c0 	call	80238c <fclose>
    return(data);
  8008ac:	e0bfb417 	ldw	r2,-304(fp)
  8008b0:	e0bfff15 	stw	r2,-4(fp)
  8008b4:	e0bfff17 	ldw	r2,-4(fp)
}
  8008b8:	e037883a 	mov	sp,fp
  8008bc:	dfc00217 	ldw	ra,8(sp)
  8008c0:	df000117 	ldw	fp,4(sp)
  8008c4:	dc000017 	ldw	r16,0(sp)
  8008c8:	dec00304 	addi	sp,sp,12
  8008cc:	f800283a 	ret

008008d0 <pgmwrite>:
 * NOTE: this function assumes input bufefr "data" is in column dominant format.
 */

int pgmwrite(char* filename, int w, int h, unsigned char** data,
			char* comment_string, int binsave)
{
  8008d0:	deffb104 	addi	sp,sp,-316
  8008d4:	dfc04e15 	stw	ra,312(sp)
  8008d8:	df004d15 	stw	fp,308(sp)
  8008dc:	df004d04 	addi	fp,sp,308
  8008e0:	e13ffb15 	stw	r4,-20(fp)
  8008e4:	e17ffc15 	stw	r5,-16(fp)
  8008e8:	e1bffd15 	stw	r6,-12(fp)
  8008ec:	e1fffe15 	stw	r7,-8(fp)
    int binary;
    int nread;
    int i,j, int_tmp;
    unsigned char* temp;

    if ((file = fopen(filename, "w")) == NULL)
  8008f0:	e13ffb17 	ldw	r4,-20(fp)
  8008f4:	01402074 	movhi	r5,129
  8008f8:	29528f04 	addi	r5,r5,19004
  8008fc:	0802c4c0 	call	802c4c <fopen>
  800900:	e0bfba15 	stw	r2,-280(fp)
  800904:	e0bfba17 	ldw	r2,-280(fp)
  800908:	1004c03a 	cmpne	r2,r2,zero
  80090c:	1000061e 	bne	r2,zero,800928 <pgmwrite+0x58>
	{
	    printf("ERROR: file open failed\n");
  800910:	01002074 	movhi	r4,129
  800914:	21125304 	addi	r4,r4,18764
  800918:	08047a80 	call	8047a8 <puts>
	    return(-1);
  80091c:	00bfffc4 	movi	r2,-1
  800920:	e0bfff15 	stw	r2,-4(fp)
  800924:	0000b106 	br	800bec <pgmwrite+0x31c>
	}

   if (binsave == 1)
  800928:	e0800317 	ldw	r2,12(fp)
  80092c:	10800058 	cmpnei	r2,r2,1
  800930:	1000071e 	bne	r2,zero,800950 <pgmwrite+0x80>
      fprintf(file,"P5\n");
  800934:	01002074 	movhi	r4,129
  800938:	21129004 	addi	r4,r4,19008
  80093c:	01400044 	movi	r5,1
  800940:	018000c4 	movi	r6,3
  800944:	e1ffba17 	ldw	r7,-280(fp)
  800948:	0803ac00 	call	803ac0 <fwrite>
  80094c:	00000606 	br	800968 <pgmwrite+0x98>
   else
      fprintf(file,"P2\n");
  800950:	01002074 	movhi	r4,129
  800954:	21129104 	addi	r4,r4,19012
  800958:	01400044 	movi	r5,1
  80095c:	018000c4 	movi	r6,3
  800960:	e1ffba17 	ldw	r7,-280(fp)
  800964:	0803ac00 	call	803ac0 <fwrite>

    if (comment_string != NULL)
  800968:	e0800217 	ldw	r2,8(fp)
  80096c:	1005003a 	cmpeq	r2,r2,zero
  800970:	1000051e 	bne	r2,zero,800988 <pgmwrite+0xb8>
	fprintf(file,"# %s \n", comment_string);
  800974:	e13fba17 	ldw	r4,-280(fp)
  800978:	01402074 	movhi	r5,129
  80097c:	29529204 	addi	r5,r5,19016
  800980:	e1800217 	ldw	r6,8(fp)
  800984:	0802c680 	call	802c68 <fprintf>

    fprintf(file,"%d %d \n", w, h);
  800988:	e13fba17 	ldw	r4,-280(fp)
  80098c:	01402074 	movhi	r5,129
  800990:	29529404 	addi	r5,r5,19024
  800994:	e1bffc17 	ldw	r6,-16(fp)
  800998:	e1fffd17 	ldw	r7,-12(fp)
  80099c:	0802c680 	call	802c68 <fprintf>

    maxval = 0;
  8009a0:	e03fb915 	stw	zero,-284(fp)
    for (i = 0; i < w; i++)
  8009a4:	e03fb615 	stw	zero,-296(fp)
  8009a8:	00002406 	br	800a3c <pgmwrite+0x16c>
        for (j=0; j < h; j++)
  8009ac:	e03fb515 	stw	zero,-300(fp)
  8009b0:	00001c06 	br	800a24 <pgmwrite+0x154>
	    if ((int)data[i][j] > maxval)
  8009b4:	e0bfb617 	ldw	r2,-296(fp)
  8009b8:	1085883a 	add	r2,r2,r2
  8009bc:	1085883a 	add	r2,r2,r2
  8009c0:	1007883a 	mov	r3,r2
  8009c4:	e0bffe17 	ldw	r2,-8(fp)
  8009c8:	1885883a 	add	r2,r3,r2
  8009cc:	10c00017 	ldw	r3,0(r2)
  8009d0:	e0bfb517 	ldw	r2,-300(fp)
  8009d4:	1885883a 	add	r2,r3,r2
  8009d8:	10800003 	ldbu	r2,0(r2)
  8009dc:	10c03fcc 	andi	r3,r2,255
  8009e0:	e0bfb917 	ldw	r2,-284(fp)
  8009e4:	10c00c0e 	bge	r2,r3,800a18 <pgmwrite+0x148>
	        maxval = (int)data[i][j];
  8009e8:	e0bfb617 	ldw	r2,-296(fp)
  8009ec:	1085883a 	add	r2,r2,r2
  8009f0:	1085883a 	add	r2,r2,r2
  8009f4:	1007883a 	mov	r3,r2
  8009f8:	e0bffe17 	ldw	r2,-8(fp)
  8009fc:	1885883a 	add	r2,r3,r2
  800a00:	10c00017 	ldw	r3,0(r2)
  800a04:	e0bfb517 	ldw	r2,-300(fp)
  800a08:	1885883a 	add	r2,r3,r2
  800a0c:	10800003 	ldbu	r2,0(r2)
  800a10:	10803fcc 	andi	r2,r2,255
  800a14:	e0bfb915 	stw	r2,-284(fp)

    fprintf(file,"%d %d \n", w, h);

    maxval = 0;
    for (i = 0; i < w; i++)
        for (j=0; j < h; j++)
  800a18:	e0bfb517 	ldw	r2,-300(fp)
  800a1c:	10800044 	addi	r2,r2,1
  800a20:	e0bfb515 	stw	r2,-300(fp)
  800a24:	e0ffb517 	ldw	r3,-300(fp)
  800a28:	e0bffd17 	ldw	r2,-12(fp)
  800a2c:	18bfe116 	blt	r3,r2,8009b4 <pgmwrite+0xe4>
	fprintf(file,"# %s \n", comment_string);

    fprintf(file,"%d %d \n", w, h);

    maxval = 0;
    for (i = 0; i < w; i++)
  800a30:	e0bfb617 	ldw	r2,-296(fp)
  800a34:	10800044 	addi	r2,r2,1
  800a38:	e0bfb615 	stw	r2,-296(fp)
  800a3c:	e0ffb617 	ldw	r3,-296(fp)
  800a40:	e0bffc17 	ldw	r2,-16(fp)
  800a44:	18bfd916 	blt	r3,r2,8009ac <pgmwrite+0xdc>
        for (j=0; j < h; j++)
	    if ((int)data[i][j] > maxval)
	        maxval = (int)data[i][j];

    fprintf(file, "%d \n", maxval);
  800a48:	e13fba17 	ldw	r4,-280(fp)
  800a4c:	01402074 	movhi	r5,129
  800a50:	29529604 	addi	r5,r5,19032
  800a54:	e1bfb917 	ldw	r6,-284(fp)
  800a58:	0802c680 	call	802c68 <fprintf>

    if (binsave == 1)
  800a5c:	e0800317 	ldw	r2,12(fp)
  800a60:	10800058 	cmpnei	r2,r2,1
  800a64:	10003b1e 	bne	r2,zero,800b54 <pgmwrite+0x284>
    {
	temp = (unsigned char*)calloc(w*h, sizeof(unsigned char));
  800a68:	e13ffc17 	ldw	r4,-16(fp)
  800a6c:	e17ffd17 	ldw	r5,-12(fp)
  800a70:	0801c5c0 	call	801c5c <__mulsi3>
  800a74:	1009883a 	mov	r4,r2
  800a78:	01400044 	movi	r5,1
  800a7c:	08021600 	call	802160 <calloc>
  800a80:	e0bfb315 	stw	r2,-308(fp)

	for(i=0; i<w; i++)
  800a84:	e03fb615 	stw	zero,-296(fp)
  800a88:	00001f06 	br	800b08 <pgmwrite+0x238>
           for(j=0; j<h; j++)
  800a8c:	e03fb515 	stw	zero,-300(fp)
  800a90:	00001706 	br	800af0 <pgmwrite+0x220>
               temp[(j*w)+i]= (unsigned char)data[i][j];
  800a94:	e13fb517 	ldw	r4,-300(fp)
  800a98:	e17ffc17 	ldw	r5,-16(fp)
  800a9c:	0801c5c0 	call	801c5c <__mulsi3>
  800aa0:	1007883a 	mov	r3,r2
  800aa4:	e0bfb617 	ldw	r2,-296(fp)
  800aa8:	1885883a 	add	r2,r3,r2
  800aac:	1007883a 	mov	r3,r2
  800ab0:	e0bfb317 	ldw	r2,-308(fp)
  800ab4:	1889883a 	add	r4,r3,r2
  800ab8:	e0bfb617 	ldw	r2,-296(fp)
  800abc:	1085883a 	add	r2,r2,r2
  800ac0:	1085883a 	add	r2,r2,r2
  800ac4:	1007883a 	mov	r3,r2
  800ac8:	e0bffe17 	ldw	r2,-8(fp)
  800acc:	1885883a 	add	r2,r3,r2
  800ad0:	10c00017 	ldw	r3,0(r2)
  800ad4:	e0bfb517 	ldw	r2,-300(fp)
  800ad8:	1885883a 	add	r2,r3,r2
  800adc:	10800003 	ldbu	r2,0(r2)
  800ae0:	20800005 	stb	r2,0(r4)
    if (binsave == 1)
    {
	temp = (unsigned char*)calloc(w*h, sizeof(unsigned char));

	for(i=0; i<w; i++)
           for(j=0; j<h; j++)
  800ae4:	e0bfb517 	ldw	r2,-300(fp)
  800ae8:	10800044 	addi	r2,r2,1
  800aec:	e0bfb515 	stw	r2,-300(fp)
  800af0:	e0ffb517 	ldw	r3,-300(fp)
  800af4:	e0bffd17 	ldw	r2,-12(fp)
  800af8:	18bfe616 	blt	r3,r2,800a94 <pgmwrite+0x1c4>

    if (binsave == 1)
    {
	temp = (unsigned char*)calloc(w*h, sizeof(unsigned char));

	for(i=0; i<w; i++)
  800afc:	e0bfb617 	ldw	r2,-296(fp)
  800b00:	10800044 	addi	r2,r2,1
  800b04:	e0bfb615 	stw	r2,-296(fp)
  800b08:	e0ffb617 	ldw	r3,-296(fp)
  800b0c:	e0bffc17 	ldw	r2,-16(fp)
  800b10:	18bfde16 	blt	r3,r2,800a8c <pgmwrite+0x1bc>
           for(j=0; j<h; j++)
               temp[(j*w)+i]= (unsigned char)data[i][j];

        nread = fwrite((void*)temp, sizeof(unsigned char), (w)*(h), file);
  800b14:	e13ffc17 	ldw	r4,-16(fp)
  800b18:	e17ffd17 	ldw	r5,-12(fp)
  800b1c:	0801c5c0 	call	801c5c <__mulsi3>
  800b20:	100d883a 	mov	r6,r2
  800b24:	e13fb317 	ldw	r4,-308(fp)
  800b28:	01400044 	movi	r5,1
  800b2c:	e1ffba17 	ldw	r7,-280(fp)
  800b30:	0803ac00 	call	803ac0 <fwrite>
  800b34:	e0bfb715 	stw	r2,-292(fp)
	printf("Writing to %s as binary.\n", filename);
  800b38:	01002074 	movhi	r4,129
  800b3c:	21129804 	addi	r4,r4,19040
  800b40:	e17ffb17 	ldw	r5,-20(fp)
  800b44:	08046900 	call	804690 <printf>
        free(temp);
  800b48:	e13fb317 	ldw	r4,-308(fp)
  800b4c:	0803c940 	call	803c94 <free>
  800b50:	00002306 	br	800be0 <pgmwrite+0x310>

    }else{
	printf("Writing to %s as ascii.\n", filename);
  800b54:	01002074 	movhi	r4,129
  800b58:	21129f04 	addi	r4,r4,19068
  800b5c:	e17ffb17 	ldw	r5,-20(fp)
  800b60:	08046900 	call	804690 <printf>

	for(i=0; i<h; i++)
  800b64:	e03fb615 	stw	zero,-296(fp)
  800b68:	00001a06 	br	800bd4 <pgmwrite+0x304>
           for(j=0; j<w; j++)
  800b6c:	e03fb515 	stw	zero,-300(fp)
  800b70:	00001206 	br	800bbc <pgmwrite+0x2ec>
		fprintf(file,"%d ", (int)data[j][i]);
  800b74:	e0bfb517 	ldw	r2,-300(fp)
  800b78:	1085883a 	add	r2,r2,r2
  800b7c:	1085883a 	add	r2,r2,r2
  800b80:	1007883a 	mov	r3,r2
  800b84:	e0bffe17 	ldw	r2,-8(fp)
  800b88:	1885883a 	add	r2,r3,r2
  800b8c:	10c00017 	ldw	r3,0(r2)
  800b90:	e0bfb617 	ldw	r2,-296(fp)
  800b94:	1885883a 	add	r2,r3,r2
  800b98:	10800003 	ldbu	r2,0(r2)
  800b9c:	11803fcc 	andi	r6,r2,255
  800ba0:	e13fba17 	ldw	r4,-280(fp)
  800ba4:	01402074 	movhi	r5,129
  800ba8:	2952a604 	addi	r5,r5,19096
  800bac:	0802c680 	call	802c68 <fprintf>

    }else{
	printf("Writing to %s as ascii.\n", filename);

	for(i=0; i<h; i++)
           for(j=0; j<w; j++)
  800bb0:	e0bfb517 	ldw	r2,-300(fp)
  800bb4:	10800044 	addi	r2,r2,1
  800bb8:	e0bfb515 	stw	r2,-300(fp)
  800bbc:	e0ffb517 	ldw	r3,-300(fp)
  800bc0:	e0bffc17 	ldw	r2,-16(fp)
  800bc4:	18bfeb16 	blt	r3,r2,800b74 <pgmwrite+0x2a4>
        free(temp);

    }else{
	printf("Writing to %s as ascii.\n", filename);

	for(i=0; i<h; i++)
  800bc8:	e0bfb617 	ldw	r2,-296(fp)
  800bcc:	10800044 	addi	r2,r2,1
  800bd0:	e0bfb615 	stw	r2,-296(fp)
  800bd4:	e0ffb617 	ldw	r3,-296(fp)
  800bd8:	e0bffd17 	ldw	r2,-12(fp)
  800bdc:	18bfe316 	blt	r3,r2,800b6c <pgmwrite+0x29c>
           for(j=0; j<w; j++)
		fprintf(file,"%d ", (int)data[j][i]);

    }

    fclose(file);
  800be0:	e13fba17 	ldw	r4,-280(fp)
  800be4:	080238c0 	call	80238c <fclose>
    return(0);
  800be8:	e03fff15 	stw	zero,-4(fp)
  800bec:	e0bfff17 	ldw	r2,-4(fp)
}
  800bf0:	e037883a 	mov	sp,fp
  800bf4:	dfc00117 	ldw	ra,4(sp)
  800bf8:	df000017 	ldw	fp,0(sp)
  800bfc:	dec00204 	addi	sp,sp,8
  800c00:	f800283a 	ret

00800c04 <pgmread2>:
 *
 * NOTE: the image buffer returned is in row dominant format
 */

unsigned char** pgmread2(char* filename, int* row, int* col)
{
  800c04:	deffae04 	addi	sp,sp,-328
  800c08:	dfc05115 	stw	ra,324(sp)
  800c0c:	df005015 	stw	fp,320(sp)
  800c10:	dc004f15 	stw	r16,316(sp)
  800c14:	df004f04 	addi	fp,sp,316
  800c18:	e13ffc15 	stw	r4,-16(fp)
  800c1c:	e17ffd15 	stw	r5,-12(fp)
  800c20:	e1bffe15 	stw	r6,-8(fp)
    char firstchar;
    int count;
    unsigned char** data;
    unsigned char*  bindata;

    if ((file = fopen(filename, "r")) == NULL){
  800c24:	e13ffc17 	ldw	r4,-16(fp)
  800c28:	01402074 	movhi	r5,129
  800c2c:	29525204 	addi	r5,r5,18760
  800c30:	0802c4c0 	call	802c4c <fopen>
  800c34:	e0bfb915 	stw	r2,-284(fp)
  800c38:	e0bfb917 	ldw	r2,-284(fp)
  800c3c:	1004c03a 	cmpne	r2,r2,zero
  800c40:	10000b1e 	bne	r2,zero,800c70 <pgmread2+0x6c>
	    printf("ERROR: file open failed\n");
  800c44:	01002074 	movhi	r4,129
  800c48:	21125304 	addi	r4,r4,18764
  800c4c:	08047a80 	call	8047a8 <puts>
	    *row = *col = 0;
  800c50:	e0bffe17 	ldw	r2,-8(fp)
  800c54:	10000015 	stw	zero,0(r2)
  800c58:	e0bffe17 	ldw	r2,-8(fp)
  800c5c:	10c00017 	ldw	r3,0(r2)
  800c60:	e0bffd17 	ldw	r2,-12(fp)
  800c64:	10c00015 	stw	r3,0(r2)
	    return(NULL);
  800c68:	e03fff15 	stw	zero,-4(fp)
  800c6c:	00010306 	br	80107c <pgmread2+0x478>
	}
    count = readToWhitespace(file, line, 2);
  800c70:	e17fba04 	addi	r5,fp,-280
  800c74:	e13fb917 	ldw	r4,-284(fp)
  800c78:	01800084 	movi	r6,2
  800c7c:	08002000 	call	800200 <readToWhitespace>
  800c80:	e0bfb315 	stw	r2,-308(fp)
    line[count] = '\0'; //Solo por precaución
  800c84:	e0ffb317 	ldw	r3,-308(fp)
  800c88:	e0bfba04 	addi	r2,fp,-280
  800c8c:	10c5883a 	add	r2,r2,r3
  800c90:	10000005 	stb	zero,0(r2)

    if (strncmp(line,"P5", 2)){
  800c94:	e13fba04 	addi	r4,fp,-280
  800c98:	01402074 	movhi	r5,129
  800c9c:	29526204 	addi	r5,r5,18824
  800ca0:	01800084 	movi	r6,2
  800ca4:	0804d400 	call	804d40 <strncmp>
  800ca8:	1005003a 	cmpeq	r2,r2,zero
  800cac:	1000141e 	bne	r2,zero,800d00 <pgmread2+0xfc>
	    if (strncmp(line,"P2", 2)){
  800cb0:	e13fba04 	addi	r4,fp,-280
  800cb4:	01402074 	movhi	r5,129
  800cb8:	29526304 	addi	r5,r5,18828
  800cbc:	01800084 	movi	r6,2
  800cc0:	0804d400 	call	804d40 <strncmp>
  800cc4:	1005003a 	cmpeq	r2,r2,zero
  800cc8:	10000b1e 	bne	r2,zero,800cf8 <pgmread2+0xf4>
		    printf("pgm read: not a pgm file\n");
  800ccc:	01002074 	movhi	r4,129
  800cd0:	21126404 	addi	r4,r4,18832
  800cd4:	08047a80 	call	8047a8 <puts>
		    *row = *col = 0;
  800cd8:	e0bffe17 	ldw	r2,-8(fp)
  800cdc:	10000015 	stw	zero,0(r2)
  800ce0:	e0bffe17 	ldw	r2,-8(fp)
  800ce4:	10c00017 	ldw	r3,0(r2)
  800ce8:	e0bffd17 	ldw	r2,-12(fp)
  800cec:	10c00015 	stw	r3,0(r2)
		    return(NULL);
  800cf0:	e03fff15 	stw	zero,-4(fp)
  800cf4:	0000e106 	br	80107c <pgmread2+0x478>
		} else {
		    binary = 0; //fichero formato texto
  800cf8:	e03fb815 	stw	zero,-288(fp)
  800cfc:	00000206 	br	800d08 <pgmread2+0x104>
	    }
	} else {
	    binary = 1; //fichero con contenidos en binario
  800d00:	00800044 	movi	r2,1
  800d04:	e0bfb815 	stw	r2,-288(fp)
	}

    eatCommsWhitespaces(file); //Elim. comentarios y whitespace
  800d08:	e13fb917 	ldw	r4,-284(fp)
  800d0c:	08002c40 	call	8002c4 <eatCommsWhitespaces>
    count = readToWhitespace(file, line, 255);
  800d10:	e17fba04 	addi	r5,fp,-280
  800d14:	e13fb917 	ldw	r4,-284(fp)
  800d18:	01803fc4 	movi	r6,255
  800d1c:	08002000 	call	800200 <readToWhitespace>
  800d20:	e0bfb315 	stw	r2,-308(fp)
    line[count] = '\0';
  800d24:	e0ffb317 	ldw	r3,-308(fp)
  800d28:	e0bfba04 	addi	r2,fp,-280
  800d2c:	10c5883a 	add	r2,r2,r3
  800d30:	10000005 	stb	zero,0(r2)
    sscanf(line,"%d", col);
  800d34:	e13fba04 	addi	r4,fp,-280
  800d38:	01402074 	movhi	r5,129
  800d3c:	29526b04 	addi	r5,r5,18860
  800d40:	e1bffe17 	ldw	r6,-8(fp)
  800d44:	0804afc0 	call	804afc <sscanf>
    eatCommsWhitespaces(file); //Elim. comentarios y whitespace
  800d48:	e13fb917 	ldw	r4,-284(fp)
  800d4c:	08002c40 	call	8002c4 <eatCommsWhitespaces>
    count = readToWhitespace(file, line, 255);
  800d50:	e17fba04 	addi	r5,fp,-280
  800d54:	e13fb917 	ldw	r4,-284(fp)
  800d58:	01803fc4 	movi	r6,255
  800d5c:	08002000 	call	800200 <readToWhitespace>
  800d60:	e0bfb315 	stw	r2,-308(fp)
    line[count] = '\0';
  800d64:	e0ffb317 	ldw	r3,-308(fp)
  800d68:	e0bfba04 	addi	r2,fp,-280
  800d6c:	10c5883a 	add	r2,r2,r3
  800d70:	10000005 	stb	zero,0(r2)
    sscanf(line,"%d", row);
  800d74:	e13fba04 	addi	r4,fp,-280
  800d78:	01402074 	movhi	r5,129
  800d7c:	29526b04 	addi	r5,r5,18860
  800d80:	e1bffd17 	ldw	r6,-12(fp)
  800d84:	0804afc0 	call	804afc <sscanf>
    eatCommsWhitespaces(file); //Elim. comentarios y whitespace
  800d88:	e13fb917 	ldw	r4,-284(fp)
  800d8c:	08002c40 	call	8002c4 <eatCommsWhitespaces>
    count = readToWhitespace(file, line, 255);
  800d90:	e17fba04 	addi	r5,fp,-280
  800d94:	e13fb917 	ldw	r4,-284(fp)
  800d98:	01803fc4 	movi	r6,255
  800d9c:	08002000 	call	800200 <readToWhitespace>
  800da0:	e0bfb315 	stw	r2,-308(fp)
    line[count] = '\0';
  800da4:	e0ffb317 	ldw	r3,-308(fp)
  800da8:	e0bfba04 	addi	r2,fp,-280
  800dac:	10c5883a 	add	r2,r2,r3
  800db0:	10000005 	stb	zero,0(r2)
    sscanf(line, "%d", &maxval);
  800db4:	e13fba04 	addi	r4,fp,-280
  800db8:	e1bffa04 	addi	r6,fp,-24
  800dbc:	01402074 	movhi	r5,129
  800dc0:	29526b04 	addi	r5,r5,18860
  800dc4:	0804afc0 	call	804afc <sscanf>
    printf("row = %d\tcol = %d\tmaxval = %d\n", *row, *col, maxval);
  800dc8:	e0bffd17 	ldw	r2,-12(fp)
  800dcc:	11400017 	ldw	r5,0(r2)
  800dd0:	e0bffe17 	ldw	r2,-8(fp)
  800dd4:	11800017 	ldw	r6,0(r2)
  800dd8:	e1fffa17 	ldw	r7,-24(fp)
  800ddc:	01002074 	movhi	r4,129
  800de0:	2112a704 	addi	r4,r4,19100
  800de4:	08046900 	call	804690 <printf>
    eatWhitespaces(file, 1); //Eliminamos exactamente un caracter whitespace
  800de8:	e13fb917 	ldw	r4,-284(fp)
  800dec:	01400044 	movi	r5,1
  800df0:	080036c0 	call	80036c <eatWhitespaces>

    if ((data = (unsigned char**)calloc((*row), sizeof(unsigned char*))) == NULL){
  800df4:	e0bffd17 	ldw	r2,-12(fp)
  800df8:	10800017 	ldw	r2,0(r2)
  800dfc:	1009883a 	mov	r4,r2
  800e00:	01400104 	movi	r5,4
  800e04:	08021600 	call	802160 <calloc>
  800e08:	e0bfb215 	stw	r2,-312(fp)
  800e0c:	e0bfb217 	ldw	r2,-312(fp)
  800e10:	1004c03a 	cmpne	r2,r2,zero
  800e14:	1000051e 	bne	r2,zero,800e2c <pgmread2+0x228>
	    printf("Memory allocation error. Exit program\n");
  800e18:	01002074 	movhi	r4,129
  800e1c:	21126c04 	addi	r4,r4,18864
  800e20:	08047a80 	call	8047a8 <puts>
	    exit(1);
  800e24:	01000044 	movi	r4,1
  800e28:	08022440 	call	802244 <exit>
    }
    for (j=0; j<(*row); j++){
  800e2c:	e03fb515 	stw	zero,-300(fp)
  800e30:	00001706 	br	800e90 <pgmread2+0x28c>
        if ((data[j] = (unsigned char*)calloc((*col), sizeof(unsigned char))) == NULL){
  800e34:	e0bfb517 	ldw	r2,-300(fp)
  800e38:	1085883a 	add	r2,r2,r2
  800e3c:	1085883a 	add	r2,r2,r2
  800e40:	1007883a 	mov	r3,r2
  800e44:	e0bfb217 	ldw	r2,-312(fp)
  800e48:	18a1883a 	add	r16,r3,r2
  800e4c:	e0bffe17 	ldw	r2,-8(fp)
  800e50:	10800017 	ldw	r2,0(r2)
  800e54:	1009883a 	mov	r4,r2
  800e58:	01400044 	movi	r5,1
  800e5c:	08021600 	call	802160 <calloc>
  800e60:	80800015 	stw	r2,0(r16)
  800e64:	80800017 	ldw	r2,0(r16)
  800e68:	1004c03a 	cmpne	r2,r2,zero
  800e6c:	1000051e 	bne	r2,zero,800e84 <pgmread2+0x280>
	        printf("Memory allocation error. Exit program\n");
  800e70:	01002074 	movhi	r4,129
  800e74:	21126c04 	addi	r4,r4,18864
  800e78:	08047a80 	call	8047a8 <puts>
	        exit(1);
  800e7c:	01000044 	movi	r4,1
  800e80:	08022440 	call	802244 <exit>

    if ((data = (unsigned char**)calloc((*row), sizeof(unsigned char*))) == NULL){
	    printf("Memory allocation error. Exit program\n");
	    exit(1);
    }
    for (j=0; j<(*row); j++){
  800e84:	e0bfb517 	ldw	r2,-300(fp)
  800e88:	10800044 	addi	r2,r2,1
  800e8c:	e0bfb515 	stw	r2,-300(fp)
  800e90:	e0bffd17 	ldw	r2,-12(fp)
  800e94:	10c00017 	ldw	r3,0(r2)
  800e98:	e0bfb517 	ldw	r2,-300(fp)
  800e9c:	10ffe516 	blt	r2,r3,800e34 <pgmread2+0x230>
        if ((data[j] = (unsigned char*)calloc((*col), sizeof(unsigned char))) == NULL){
	        printf("Memory allocation error. Exit program\n");
	        exit(1);
        }
    }
    if (binary) {
  800ea0:	e0bfb817 	ldw	r2,-288(fp)
  800ea4:	1005003a 	cmpeq	r2,r2,zero
  800ea8:	10004a1e 	bne	r2,zero,800fd4 <pgmread2+0x3d0>
	    if ((bindata = (unsigned char*)calloc((*row)*(*col), sizeof(unsigned char))) == NULL) {
  800eac:	e0bffd17 	ldw	r2,-12(fp)
  800eb0:	11000017 	ldw	r4,0(r2)
  800eb4:	e0bffe17 	ldw	r2,-8(fp)
  800eb8:	11400017 	ldw	r5,0(r2)
  800ebc:	0801c5c0 	call	801c5c <__mulsi3>
  800ec0:	1009883a 	mov	r4,r2
  800ec4:	01400044 	movi	r5,1
  800ec8:	08021600 	call	802160 <calloc>
  800ecc:	e0bfb115 	stw	r2,-316(fp)
  800ed0:	e0bfb117 	ldw	r2,-316(fp)
  800ed4:	1004c03a 	cmpne	r2,r2,zero
  800ed8:	1000051e 	bne	r2,zero,800ef0 <pgmread2+0x2ec>
	        printf("Memory allocation error on bindata. Exit program\n");
  800edc:	01002074 	movhi	r4,129
  800ee0:	21127604 	addi	r4,r4,18904
  800ee4:	08047a80 	call	8047a8 <puts>
	        exit(1);
  800ee8:	01000044 	movi	r4,1
  800eec:	08022440 	call	802244 <exit>
        }
	    printf("Reading %s as binary.\n", filename);
  800ef0:	01002074 	movhi	r4,129
  800ef4:	21128304 	addi	r4,r4,18956
  800ef8:	e17ffc17 	ldw	r5,-16(fp)
  800efc:	08046900 	call	804690 <printf>
        nread = fread((void*)bindata, sizeof(unsigned char), (*row)*(*col), file);
  800f00:	e0bffd17 	ldw	r2,-12(fp)
  800f04:	11000017 	ldw	r4,0(r2)
  800f08:	e0bffe17 	ldw	r2,-8(fp)
  800f0c:	11400017 	ldw	r5,0(r2)
  800f10:	0801c5c0 	call	801c5c <__mulsi3>
  800f14:	100d883a 	mov	r6,r2
  800f18:	e13fb117 	ldw	r4,-316(fp)
  800f1c:	01400044 	movi	r5,1
  800f20:	e1ffb917 	ldw	r7,-284(fp)
  800f24:	0802ed40 	call	802ed4 <fread>
  800f28:	e0bfb715 	stw	r2,-292(fp)
        for (i=0; i<(*row); i++) {
  800f2c:	e03fb615 	stw	zero,-296(fp)
  800f30:	00002106 	br	800fb8 <pgmread2+0x3b4>
	        for (j=0; j< (*col); j++) {
  800f34:	e03fb515 	stw	zero,-300(fp)
  800f38:	00001806 	br	800f9c <pgmread2+0x398>
                data[i][j] = (unsigned char)bindata[(i*(*col))+j];
  800f3c:	e0bfb617 	ldw	r2,-296(fp)
  800f40:	1085883a 	add	r2,r2,r2
  800f44:	1085883a 	add	r2,r2,r2
  800f48:	1007883a 	mov	r3,r2
  800f4c:	e0bfb217 	ldw	r2,-312(fp)
  800f50:	1885883a 	add	r2,r3,r2
  800f54:	10c00017 	ldw	r3,0(r2)
  800f58:	e0bfb517 	ldw	r2,-300(fp)
  800f5c:	18a1883a 	add	r16,r3,r2
  800f60:	e0bffe17 	ldw	r2,-8(fp)
  800f64:	11000017 	ldw	r4,0(r2)
  800f68:	e17fb617 	ldw	r5,-296(fp)
  800f6c:	0801c5c0 	call	801c5c <__mulsi3>
  800f70:	1007883a 	mov	r3,r2
  800f74:	e0bfb517 	ldw	r2,-300(fp)
  800f78:	1885883a 	add	r2,r3,r2
  800f7c:	1007883a 	mov	r3,r2
  800f80:	e0bfb117 	ldw	r2,-316(fp)
  800f84:	1885883a 	add	r2,r3,r2
  800f88:	10800003 	ldbu	r2,0(r2)
  800f8c:	80800005 	stb	r2,0(r16)
	        exit(1);
        }
	    printf("Reading %s as binary.\n", filename);
        nread = fread((void*)bindata, sizeof(unsigned char), (*row)*(*col), file);
        for (i=0; i<(*row); i++) {
	        for (j=0; j< (*col); j++) {
  800f90:	e0bfb517 	ldw	r2,-300(fp)
  800f94:	10800044 	addi	r2,r2,1
  800f98:	e0bfb515 	stw	r2,-300(fp)
  800f9c:	e0bffe17 	ldw	r2,-8(fp)
  800fa0:	10c00017 	ldw	r3,0(r2)
  800fa4:	e0bfb517 	ldw	r2,-300(fp)
  800fa8:	10ffe416 	blt	r2,r3,800f3c <pgmread2+0x338>
	        printf("Memory allocation error on bindata. Exit program\n");
	        exit(1);
        }
	    printf("Reading %s as binary.\n", filename);
        nread = fread((void*)bindata, sizeof(unsigned char), (*row)*(*col), file);
        for (i=0; i<(*row); i++) {
  800fac:	e0bfb617 	ldw	r2,-296(fp)
  800fb0:	10800044 	addi	r2,r2,1
  800fb4:	e0bfb615 	stw	r2,-296(fp)
  800fb8:	e0bffd17 	ldw	r2,-12(fp)
  800fbc:	10c00017 	ldw	r3,0(r2)
  800fc0:	e0bfb617 	ldw	r2,-296(fp)
  800fc4:	10ffdb16 	blt	r2,r3,800f34 <pgmread2+0x330>
	        for (j=0; j< (*col); j++) {
                data[i][j] = (unsigned char)bindata[(i*(*col))+j];
	        }
        }
        free(bindata);
  800fc8:	e13fb117 	ldw	r4,-316(fp)
  800fcc:	0803c940 	call	803c94 <free>
  800fd0:	00002606 	br	80106c <pgmread2+0x468>
    } else {
	    printf("Reading %s as ascii.\n", filename);
  800fd4:	01002074 	movhi	r4,129
  800fd8:	21128904 	addi	r4,r4,18980
  800fdc:	e17ffc17 	ldw	r5,-16(fp)
  800fe0:	08046900 	call	804690 <printf>
        for (j=0; j<(*row); j++) {
  800fe4:	e03fb515 	stw	zero,-300(fp)
  800fe8:	00001c06 	br	80105c <pgmread2+0x458>
            for (i=0; i<(*col); i++) {
  800fec:	e03fb615 	stw	zero,-296(fp)
  800ff0:	00001306 	br	801040 <pgmread2+0x43c>
		        fscanf(file, "%d", &int_tmp);
  800ff4:	e1bffb04 	addi	r6,fp,-20
  800ff8:	e13fb917 	ldw	r4,-284(fp)
  800ffc:	01402074 	movhi	r5,129
  801000:	29526b04 	addi	r5,r5,18860
  801004:	080337c0 	call	80337c <fscanf>
		        data[j][i] = (unsigned char)int_tmp;
  801008:	e0bfb517 	ldw	r2,-300(fp)
  80100c:	1085883a 	add	r2,r2,r2
  801010:	1085883a 	add	r2,r2,r2
  801014:	1007883a 	mov	r3,r2
  801018:	e0bfb217 	ldw	r2,-312(fp)
  80101c:	1885883a 	add	r2,r3,r2
  801020:	10c00017 	ldw	r3,0(r2)
  801024:	e0bfb617 	ldw	r2,-296(fp)
  801028:	1887883a 	add	r3,r3,r2
  80102c:	e0bffb17 	ldw	r2,-20(fp)
  801030:	18800005 	stb	r2,0(r3)
        }
        free(bindata);
    } else {
	    printf("Reading %s as ascii.\n", filename);
        for (j=0; j<(*row); j++) {
            for (i=0; i<(*col); i++) {
  801034:	e0bfb617 	ldw	r2,-296(fp)
  801038:	10800044 	addi	r2,r2,1
  80103c:	e0bfb615 	stw	r2,-296(fp)
  801040:	e0bffe17 	ldw	r2,-8(fp)
  801044:	10c00017 	ldw	r3,0(r2)
  801048:	e0bfb617 	ldw	r2,-296(fp)
  80104c:	10ffe916 	blt	r2,r3,800ff4 <pgmread2+0x3f0>
	        }
        }
        free(bindata);
    } else {
	    printf("Reading %s as ascii.\n", filename);
        for (j=0; j<(*row); j++) {
  801050:	e0bfb517 	ldw	r2,-300(fp)
  801054:	10800044 	addi	r2,r2,1
  801058:	e0bfb515 	stw	r2,-300(fp)
  80105c:	e0bffd17 	ldw	r2,-12(fp)
  801060:	10c00017 	ldw	r3,0(r2)
  801064:	e0bfb517 	ldw	r2,-300(fp)
  801068:	10ffe016 	blt	r2,r3,800fec <pgmread2+0x3e8>
		        fscanf(file, "%d", &int_tmp);
		        data[j][i] = (unsigned char)int_tmp;
            }
        }
    }
    fclose(file);
  80106c:	e13fb917 	ldw	r4,-284(fp)
  801070:	080238c0 	call	80238c <fclose>
    return(data);
  801074:	e0bfb217 	ldw	r2,-312(fp)
  801078:	e0bfff15 	stw	r2,-4(fp)
  80107c:	e0bfff17 	ldw	r2,-4(fp)
}
  801080:	e037883a 	mov	sp,fp
  801084:	dfc00217 	ldw	ra,8(sp)
  801088:	df000117 	ldw	fp,4(sp)
  80108c:	dc000017 	ldw	r16,0(sp)
  801090:	dec00304 	addi	sp,sp,12
  801094:	f800283a 	ret

00801098 <pgmwrite2>:
 * NOTE: this function assumes input bufefr "data" is in row dominant format.
 */

int pgmwrite2(char* filename, int row, int col, unsigned char** data,
			char* comment_string, int binsave)
{
  801098:	deffb104 	addi	sp,sp,-316
  80109c:	dfc04e15 	stw	ra,312(sp)
  8010a0:	df004d15 	stw	fp,308(sp)
  8010a4:	df004d04 	addi	fp,sp,308
  8010a8:	e13ffb15 	stw	r4,-20(fp)
  8010ac:	e17ffc15 	stw	r5,-16(fp)
  8010b0:	e1bffd15 	stw	r6,-12(fp)
  8010b4:	e1fffe15 	stw	r7,-8(fp)
    int binary;
    int nread;
    int i,j, int_tmp;
    unsigned char* temp;

    if ((file = fopen(filename, "w")) == NULL) {
  8010b8:	e13ffb17 	ldw	r4,-20(fp)
  8010bc:	01402074 	movhi	r5,129
  8010c0:	29528f04 	addi	r5,r5,19004
  8010c4:	0802c4c0 	call	802c4c <fopen>
  8010c8:	e0bfba15 	stw	r2,-280(fp)
  8010cc:	e0bfba17 	ldw	r2,-280(fp)
  8010d0:	1004c03a 	cmpne	r2,r2,zero
  8010d4:	1000061e 	bne	r2,zero,8010f0 <pgmwrite2+0x58>
	    printf("ERROR: file open failed\n");
  8010d8:	01002074 	movhi	r4,129
  8010dc:	21125304 	addi	r4,r4,18764
  8010e0:	08047a80 	call	8047a8 <puts>
	    return(-1);
  8010e4:	00bfffc4 	movi	r2,-1
  8010e8:	e0bfff15 	stw	r2,-4(fp)
  8010ec:	0000b906 	br	8013d4 <pgmwrite2+0x33c>
	}
    if (binsave == 1) {
  8010f0:	e0800317 	ldw	r2,12(fp)
  8010f4:	10800058 	cmpnei	r2,r2,1
  8010f8:	1000071e 	bne	r2,zero,801118 <pgmwrite2+0x80>
        fprintf(file,"P5\n");
  8010fc:	01002074 	movhi	r4,129
  801100:	21129004 	addi	r4,r4,19008
  801104:	01400044 	movi	r5,1
  801108:	018000c4 	movi	r6,3
  80110c:	e1ffba17 	ldw	r7,-280(fp)
  801110:	0803ac00 	call	803ac0 <fwrite>
  801114:	00000606 	br	801130 <pgmwrite2+0x98>
    } else {
        fprintf(file,"P2\n");
  801118:	01002074 	movhi	r4,129
  80111c:	21129104 	addi	r4,r4,19012
  801120:	01400044 	movi	r5,1
  801124:	018000c4 	movi	r6,3
  801128:	e1ffba17 	ldw	r7,-280(fp)
  80112c:	0803ac00 	call	803ac0 <fwrite>
    }

    if (comment_string != NULL) {
  801130:	e0800217 	ldw	r2,8(fp)
  801134:	1005003a 	cmpeq	r2,r2,zero
  801138:	1000051e 	bne	r2,zero,801150 <pgmwrite2+0xb8>
	    fprintf(file,"# %s \n", comment_string);
  80113c:	e13fba17 	ldw	r4,-280(fp)
  801140:	01402074 	movhi	r5,129
  801144:	29529204 	addi	r5,r5,19016
  801148:	e1800217 	ldw	r6,8(fp)
  80114c:	0802c680 	call	802c68 <fprintf>
    }
    fprintf(file,"%d %d \n", col, row);
  801150:	e13fba17 	ldw	r4,-280(fp)
  801154:	01402074 	movhi	r5,129
  801158:	29529404 	addi	r5,r5,19024
  80115c:	e1bffd17 	ldw	r6,-12(fp)
  801160:	e1fffc17 	ldw	r7,-16(fp)
  801164:	0802c680 	call	802c68 <fprintf>
    maxval = 0;
  801168:	e03fb915 	stw	zero,-284(fp)
    for (i=0; i<row; i++) {
  80116c:	e03fb615 	stw	zero,-296(fp)
  801170:	00002406 	br	801204 <pgmwrite2+0x16c>
        for (j=0; j<col; j++) {
  801174:	e03fb515 	stw	zero,-300(fp)
  801178:	00001c06 	br	8011ec <pgmwrite2+0x154>
	        if ((int)data[i][j] > maxval) {
  80117c:	e0bfb617 	ldw	r2,-296(fp)
  801180:	1085883a 	add	r2,r2,r2
  801184:	1085883a 	add	r2,r2,r2
  801188:	1007883a 	mov	r3,r2
  80118c:	e0bffe17 	ldw	r2,-8(fp)
  801190:	1885883a 	add	r2,r3,r2
  801194:	10c00017 	ldw	r3,0(r2)
  801198:	e0bfb517 	ldw	r2,-300(fp)
  80119c:	1885883a 	add	r2,r3,r2
  8011a0:	10800003 	ldbu	r2,0(r2)
  8011a4:	10c03fcc 	andi	r3,r2,255
  8011a8:	e0bfb917 	ldw	r2,-284(fp)
  8011ac:	10c00c0e 	bge	r2,r3,8011e0 <pgmwrite2+0x148>
	            maxval = (int)data[i][j];
  8011b0:	e0bfb617 	ldw	r2,-296(fp)
  8011b4:	1085883a 	add	r2,r2,r2
  8011b8:	1085883a 	add	r2,r2,r2
  8011bc:	1007883a 	mov	r3,r2
  8011c0:	e0bffe17 	ldw	r2,-8(fp)
  8011c4:	1885883a 	add	r2,r3,r2
  8011c8:	10c00017 	ldw	r3,0(r2)
  8011cc:	e0bfb517 	ldw	r2,-300(fp)
  8011d0:	1885883a 	add	r2,r3,r2
  8011d4:	10800003 	ldbu	r2,0(r2)
  8011d8:	10803fcc 	andi	r2,r2,255
  8011dc:	e0bfb915 	stw	r2,-284(fp)
	    fprintf(file,"# %s \n", comment_string);
    }
    fprintf(file,"%d %d \n", col, row);
    maxval = 0;
    for (i=0; i<row; i++) {
        for (j=0; j<col; j++) {
  8011e0:	e0bfb517 	ldw	r2,-300(fp)
  8011e4:	10800044 	addi	r2,r2,1
  8011e8:	e0bfb515 	stw	r2,-300(fp)
  8011ec:	e0ffb517 	ldw	r3,-300(fp)
  8011f0:	e0bffd17 	ldw	r2,-12(fp)
  8011f4:	18bfe116 	blt	r3,r2,80117c <pgmwrite2+0xe4>
    if (comment_string != NULL) {
	    fprintf(file,"# %s \n", comment_string);
    }
    fprintf(file,"%d %d \n", col, row);
    maxval = 0;
    for (i=0; i<row; i++) {
  8011f8:	e0bfb617 	ldw	r2,-296(fp)
  8011fc:	10800044 	addi	r2,r2,1
  801200:	e0bfb615 	stw	r2,-296(fp)
  801204:	e0ffb617 	ldw	r3,-296(fp)
  801208:	e0bffc17 	ldw	r2,-16(fp)
  80120c:	18bfd916 	blt	r3,r2,801174 <pgmwrite2+0xdc>
	        if ((int)data[i][j] > maxval) {
	            maxval = (int)data[i][j];
	        }
        }
    }
    fprintf(file, "%d\n", maxval);
  801210:	e13fba17 	ldw	r4,-280(fp)
  801214:	01402074 	movhi	r5,129
  801218:	2952af04 	addi	r5,r5,19132
  80121c:	e1bfb917 	ldw	r6,-284(fp)
  801220:	0802c680 	call	802c68 <fprintf>
    if (binsave == 1) {
  801224:	e0800317 	ldw	r2,12(fp)
  801228:	10800058 	cmpnei	r2,r2,1
  80122c:	1000431e 	bne	r2,zero,80133c <pgmwrite2+0x2a4>
    	if ((temp = (unsigned char*)calloc(row*col, sizeof(unsigned char))) == NULL) {
  801230:	e13ffc17 	ldw	r4,-16(fp)
  801234:	e17ffd17 	ldw	r5,-12(fp)
  801238:	0801c5c0 	call	801c5c <__mulsi3>
  80123c:	1009883a 	mov	r4,r2
  801240:	01400044 	movi	r5,1
  801244:	08021600 	call	802160 <calloc>
  801248:	e0bfb315 	stw	r2,-308(fp)
  80124c:	e0bfb317 	ldw	r2,-308(fp)
  801250:	1004c03a 	cmpne	r2,r2,zero
  801254:	1000051e 	bne	r2,zero,80126c <pgmwrite2+0x1d4>
    		        printf("Memory allocation error. Exit program\n");
  801258:	01002074 	movhi	r4,129
  80125c:	21126c04 	addi	r4,r4,18864
  801260:	08047a80 	call	8047a8 <puts>
    		        exit(-1);
  801264:	013fffc4 	movi	r4,-1
  801268:	08022440 	call	802244 <exit>
    	}
	    for (i=0; i<row; i++) {
  80126c:	e03fb615 	stw	zero,-296(fp)
  801270:	00001f06 	br	8012f0 <pgmwrite2+0x258>
            for (j=0; j<col; j++) {
  801274:	e03fb515 	stw	zero,-300(fp)
  801278:	00001706 	br	8012d8 <pgmwrite2+0x240>
                temp[(i*col)+j] = (unsigned char)data[i][j];
  80127c:	e13fb617 	ldw	r4,-296(fp)
  801280:	e17ffd17 	ldw	r5,-12(fp)
  801284:	0801c5c0 	call	801c5c <__mulsi3>
  801288:	1007883a 	mov	r3,r2
  80128c:	e0bfb517 	ldw	r2,-300(fp)
  801290:	1885883a 	add	r2,r3,r2
  801294:	1007883a 	mov	r3,r2
  801298:	e0bfb317 	ldw	r2,-308(fp)
  80129c:	1889883a 	add	r4,r3,r2
  8012a0:	e0bfb617 	ldw	r2,-296(fp)
  8012a4:	1085883a 	add	r2,r2,r2
  8012a8:	1085883a 	add	r2,r2,r2
  8012ac:	1007883a 	mov	r3,r2
  8012b0:	e0bffe17 	ldw	r2,-8(fp)
  8012b4:	1885883a 	add	r2,r3,r2
  8012b8:	10c00017 	ldw	r3,0(r2)
  8012bc:	e0bfb517 	ldw	r2,-300(fp)
  8012c0:	1885883a 	add	r2,r3,r2
  8012c4:	10800003 	ldbu	r2,0(r2)
  8012c8:	20800005 	stb	r2,0(r4)
    	if ((temp = (unsigned char*)calloc(row*col, sizeof(unsigned char))) == NULL) {
    		        printf("Memory allocation error. Exit program\n");
    		        exit(-1);
    	}
	    for (i=0; i<row; i++) {
            for (j=0; j<col; j++) {
  8012cc:	e0bfb517 	ldw	r2,-300(fp)
  8012d0:	10800044 	addi	r2,r2,1
  8012d4:	e0bfb515 	stw	r2,-300(fp)
  8012d8:	e0ffb517 	ldw	r3,-300(fp)
  8012dc:	e0bffd17 	ldw	r2,-12(fp)
  8012e0:	18bfe616 	blt	r3,r2,80127c <pgmwrite2+0x1e4>
    if (binsave == 1) {
    	if ((temp = (unsigned char*)calloc(row*col, sizeof(unsigned char))) == NULL) {
    		        printf("Memory allocation error. Exit program\n");
    		        exit(-1);
    	}
	    for (i=0; i<row; i++) {
  8012e4:	e0bfb617 	ldw	r2,-296(fp)
  8012e8:	10800044 	addi	r2,r2,1
  8012ec:	e0bfb615 	stw	r2,-296(fp)
  8012f0:	e0ffb617 	ldw	r3,-296(fp)
  8012f4:	e0bffc17 	ldw	r2,-16(fp)
  8012f8:	18bfde16 	blt	r3,r2,801274 <pgmwrite2+0x1dc>
            for (j=0; j<col; j++) {
                temp[(i*col)+j] = (unsigned char)data[i][j];
            }
	    }
        nread = fwrite((void*)temp, sizeof(unsigned char), (row*col), file);
  8012fc:	e13ffc17 	ldw	r4,-16(fp)
  801300:	e17ffd17 	ldw	r5,-12(fp)
  801304:	0801c5c0 	call	801c5c <__mulsi3>
  801308:	100d883a 	mov	r6,r2
  80130c:	e13fb317 	ldw	r4,-308(fp)
  801310:	01400044 	movi	r5,1
  801314:	e1ffba17 	ldw	r7,-280(fp)
  801318:	0803ac00 	call	803ac0 <fwrite>
  80131c:	e0bfb715 	stw	r2,-292(fp)
	    printf("Writing to %s as binary.\n", filename);
  801320:	01002074 	movhi	r4,129
  801324:	21129804 	addi	r4,r4,19040
  801328:	e17ffb17 	ldw	r5,-20(fp)
  80132c:	08046900 	call	804690 <printf>
	    free(temp);
  801330:	e13fb317 	ldw	r4,-308(fp)
  801334:	0803c940 	call	803c94 <free>
  801338:	00002306 	br	8013c8 <pgmwrite2+0x330>
    } else {
        printf("Writing to %s as ascii.\n", filename);
  80133c:	01002074 	movhi	r4,129
  801340:	21129f04 	addi	r4,r4,19068
  801344:	e17ffb17 	ldw	r5,-20(fp)
  801348:	08046900 	call	804690 <printf>
	    for (j=0; j<row; j++) {
  80134c:	e03fb515 	stw	zero,-300(fp)
  801350:	00001a06 	br	8013bc <pgmwrite2+0x324>
	       for (i=0; i<col; i++) {
  801354:	e03fb615 	stw	zero,-296(fp)
  801358:	00001206 	br	8013a4 <pgmwrite2+0x30c>
	           fprintf(file,"%d ", (int)data[j][i]);
  80135c:	e0bfb517 	ldw	r2,-300(fp)
  801360:	1085883a 	add	r2,r2,r2
  801364:	1085883a 	add	r2,r2,r2
  801368:	1007883a 	mov	r3,r2
  80136c:	e0bffe17 	ldw	r2,-8(fp)
  801370:	1885883a 	add	r2,r3,r2
  801374:	10c00017 	ldw	r3,0(r2)
  801378:	e0bfb617 	ldw	r2,-296(fp)
  80137c:	1885883a 	add	r2,r3,r2
  801380:	10800003 	ldbu	r2,0(r2)
  801384:	11803fcc 	andi	r6,r2,255
  801388:	e13fba17 	ldw	r4,-280(fp)
  80138c:	01402074 	movhi	r5,129
  801390:	2952a604 	addi	r5,r5,19096
  801394:	0802c680 	call	802c68 <fprintf>
	    printf("Writing to %s as binary.\n", filename);
	    free(temp);
    } else {
        printf("Writing to %s as ascii.\n", filename);
	    for (j=0; j<row; j++) {
	       for (i=0; i<col; i++) {
  801398:	e0bfb617 	ldw	r2,-296(fp)
  80139c:	10800044 	addi	r2,r2,1
  8013a0:	e0bfb615 	stw	r2,-296(fp)
  8013a4:	e0ffb617 	ldw	r3,-296(fp)
  8013a8:	e0bffd17 	ldw	r2,-12(fp)
  8013ac:	18bfeb16 	blt	r3,r2,80135c <pgmwrite2+0x2c4>
        nread = fwrite((void*)temp, sizeof(unsigned char), (row*col), file);
	    printf("Writing to %s as binary.\n", filename);
	    free(temp);
    } else {
        printf("Writing to %s as ascii.\n", filename);
	    for (j=0; j<row; j++) {
  8013b0:	e0bfb517 	ldw	r2,-300(fp)
  8013b4:	10800044 	addi	r2,r2,1
  8013b8:	e0bfb515 	stw	r2,-300(fp)
  8013bc:	e0ffb517 	ldw	r3,-300(fp)
  8013c0:	e0bffc17 	ldw	r2,-16(fp)
  8013c4:	18bfe316 	blt	r3,r2,801354 <pgmwrite2+0x2bc>
	       for (i=0; i<col; i++) {
	           fprintf(file,"%d ", (int)data[j][i]);
	       }
	    }
    }
    fclose(file);
  8013c8:	e13fba17 	ldw	r4,-280(fp)
  8013cc:	080238c0 	call	80238c <fclose>
    return(0);
  8013d0:	e03fff15 	stw	zero,-4(fp)
  8013d4:	e0bfff17 	ldw	r2,-4(fp)
}
  8013d8:	e037883a 	mov	sp,fp
  8013dc:	dfc00117 	ldw	ra,4(sp)
  8013e0:	df000017 	ldw	fp,0(sp)
  8013e4:	dec00204 	addi	sp,sp,8
  8013e8:	f800283a 	ret

008013ec <ppmwrite2>:

int ppmwrite2(char* filename, int row, int col, unsigned char** datar,
  unsigned char** datag,unsigned char** datab,char* comment_string, int binsave)
{
  8013ec:	deffb004 	addi	sp,sp,-320
  8013f0:	dfc04f15 	stw	ra,316(sp)
  8013f4:	df004e15 	stw	fp,312(sp)
  8013f8:	df004e04 	addi	fp,sp,312
  8013fc:	e13ffb15 	stw	r4,-20(fp)
  801400:	e17ffc15 	stw	r5,-16(fp)
  801404:	e1bffd15 	stw	r6,-12(fp)
  801408:	e1fffe15 	stw	r7,-8(fp)
    int binary;
    int nread;
    int i,j, int_tmp;
    unsigned char* temp;

    if ((file = fopen(filename, "w")) == NULL) {
  80140c:	e13ffb17 	ldw	r4,-20(fp)
  801410:	01402074 	movhi	r5,129
  801414:	29528f04 	addi	r5,r5,19004
  801418:	0802c4c0 	call	802c4c <fopen>
  80141c:	e0bfba15 	stw	r2,-280(fp)
  801420:	e0bfba17 	ldw	r2,-280(fp)
  801424:	1004c03a 	cmpne	r2,r2,zero
  801428:	1000061e 	bne	r2,zero,801444 <ppmwrite2+0x58>
        printf("ERROR: file open failed\n");
  80142c:	01002074 	movhi	r4,129
  801430:	21125304 	addi	r4,r4,18764
  801434:	08047a80 	call	8047a8 <puts>
        return(-1);
  801438:	00bfffc4 	movi	r2,-1
  80143c:	e0bfff15 	stw	r2,-4(fp)
  801440:	00010506 	br	801858 <ppmwrite2+0x46c>
    }

   if (binsave == 1)
  801444:	e0800517 	ldw	r2,20(fp)
  801448:	10800058 	cmpnei	r2,r2,1
  80144c:	1000071e 	bne	r2,zero,80146c <ppmwrite2+0x80>
      fprintf(file,"P6\n");
  801450:	01002074 	movhi	r4,129
  801454:	2112b004 	addi	r4,r4,19136
  801458:	01400044 	movi	r5,1
  80145c:	018000c4 	movi	r6,3
  801460:	e1ffba17 	ldw	r7,-280(fp)
  801464:	0803ac00 	call	803ac0 <fwrite>
  801468:	00000606 	br	801484 <ppmwrite2+0x98>
   else
      fprintf(file,"P3\n");
  80146c:	01002074 	movhi	r4,129
  801470:	2112b104 	addi	r4,r4,19140
  801474:	01400044 	movi	r5,1
  801478:	018000c4 	movi	r6,3
  80147c:	e1ffba17 	ldw	r7,-280(fp)
  801480:	0803ac00 	call	803ac0 <fwrite>

    if (comment_string != NULL)
  801484:	e0800417 	ldw	r2,16(fp)
  801488:	1005003a 	cmpeq	r2,r2,zero
  80148c:	1000051e 	bne	r2,zero,8014a4 <ppmwrite2+0xb8>
        fprintf(file,"# %s \n", comment_string);
  801490:	e13fba17 	ldw	r4,-280(fp)
  801494:	01402074 	movhi	r5,129
  801498:	29529204 	addi	r5,r5,19016
  80149c:	e1800417 	ldw	r6,16(fp)
  8014a0:	0802c680 	call	802c68 <fprintf>

    fprintf(file,"%d %d \n", col, row);
  8014a4:	e13fba17 	ldw	r4,-280(fp)
  8014a8:	01402074 	movhi	r5,129
  8014ac:	29529404 	addi	r5,r5,19024
  8014b0:	e1bffd17 	ldw	r6,-12(fp)
  8014b4:	e1fffc17 	ldw	r7,-16(fp)
  8014b8:	0802c680 	call	802c68 <fprintf>

    maxval = 0;
  8014bc:	e03fb915 	stw	zero,-284(fp)
    for (i = 0; i < row; i++)
  8014c0:	e03fb615 	stw	zero,-296(fp)
  8014c4:	00002406 	br	801558 <ppmwrite2+0x16c>
        for (j=0; j < col; j++)
  8014c8:	e03fb515 	stw	zero,-300(fp)
  8014cc:	00001c06 	br	801540 <ppmwrite2+0x154>
            if ((int)datar[i][j] > maxval)
  8014d0:	e0bfb617 	ldw	r2,-296(fp)
  8014d4:	1085883a 	add	r2,r2,r2
  8014d8:	1085883a 	add	r2,r2,r2
  8014dc:	1007883a 	mov	r3,r2
  8014e0:	e0bffe17 	ldw	r2,-8(fp)
  8014e4:	1885883a 	add	r2,r3,r2
  8014e8:	10c00017 	ldw	r3,0(r2)
  8014ec:	e0bfb517 	ldw	r2,-300(fp)
  8014f0:	1885883a 	add	r2,r3,r2
  8014f4:	10800003 	ldbu	r2,0(r2)
  8014f8:	10c03fcc 	andi	r3,r2,255
  8014fc:	e0bfb917 	ldw	r2,-284(fp)
  801500:	10c00c0e 	bge	r2,r3,801534 <ppmwrite2+0x148>
                maxval = (int)datar[i][j];
  801504:	e0bfb617 	ldw	r2,-296(fp)
  801508:	1085883a 	add	r2,r2,r2
  80150c:	1085883a 	add	r2,r2,r2
  801510:	1007883a 	mov	r3,r2
  801514:	e0bffe17 	ldw	r2,-8(fp)
  801518:	1885883a 	add	r2,r3,r2
  80151c:	10c00017 	ldw	r3,0(r2)
  801520:	e0bfb517 	ldw	r2,-300(fp)
  801524:	1885883a 	add	r2,r3,r2
  801528:	10800003 	ldbu	r2,0(r2)
  80152c:	10803fcc 	andi	r2,r2,255
  801530:	e0bfb915 	stw	r2,-284(fp)

    fprintf(file,"%d %d \n", col, row);

    maxval = 0;
    for (i = 0; i < row; i++)
        for (j=0; j < col; j++)
  801534:	e0bfb517 	ldw	r2,-300(fp)
  801538:	10800044 	addi	r2,r2,1
  80153c:	e0bfb515 	stw	r2,-300(fp)
  801540:	e0ffb517 	ldw	r3,-300(fp)
  801544:	e0bffd17 	ldw	r2,-12(fp)
  801548:	18bfe116 	blt	r3,r2,8014d0 <ppmwrite2+0xe4>
        fprintf(file,"# %s \n", comment_string);

    fprintf(file,"%d %d \n", col, row);

    maxval = 0;
    for (i = 0; i < row; i++)
  80154c:	e0bfb617 	ldw	r2,-296(fp)
  801550:	10800044 	addi	r2,r2,1
  801554:	e0bfb615 	stw	r2,-296(fp)
  801558:	e0ffb617 	ldw	r3,-296(fp)
  80155c:	e0bffc17 	ldw	r2,-16(fp)
  801560:	18bfd916 	blt	r3,r2,8014c8 <ppmwrite2+0xdc>
        for (j=0; j < col; j++)
            if ((int)datar[i][j] > maxval)
                maxval = (int)datar[i][j];

    maxval = 255;
  801564:	00803fc4 	movi	r2,255
  801568:	e0bfb915 	stw	r2,-284(fp)
    fprintf(file, "%d\n", maxval);
  80156c:	e13fba17 	ldw	r4,-280(fp)
  801570:	01402074 	movhi	r5,129
  801574:	2952af04 	addi	r5,r5,19132
  801578:	e1bfb917 	ldw	r6,-284(fp)
  80157c:	0802c680 	call	802c68 <fprintf>

    if (binsave == 1)
  801580:	e0800517 	ldw	r2,20(fp)
  801584:	10800058 	cmpnei	r2,r2,1
  801588:	1000761e 	bne	r2,zero,801764 <ppmwrite2+0x378>
    {
        temp = (unsigned char*)calloc(3*row*col, sizeof(unsigned char));
  80158c:	e13ffc17 	ldw	r4,-16(fp)
  801590:	e17ffd17 	ldw	r5,-12(fp)
  801594:	0801c5c0 	call	801c5c <__mulsi3>
  801598:	1007883a 	mov	r3,r2
  80159c:	1805883a 	mov	r2,r3
  8015a0:	1085883a 	add	r2,r2,r2
  8015a4:	10c5883a 	add	r2,r2,r3
  8015a8:	1009883a 	mov	r4,r2
  8015ac:	01400044 	movi	r5,1
  8015b0:	08021600 	call	802160 <calloc>
  8015b4:	e0bfb315 	stw	r2,-308(fp)

        for(i=0; i<row; i++)
  8015b8:	e03fb615 	stw	zero,-296(fp)
  8015bc:	00005206 	br	801708 <ppmwrite2+0x31c>
           for(j=0; j<col; j++)
  8015c0:	e03fb515 	stw	zero,-300(fp)
  8015c4:	00004a06 	br	8016f0 <ppmwrite2+0x304>
		{
                temp[3*((i*col)+j)]= (unsigned char)datar[i][j];
  8015c8:	e13fb617 	ldw	r4,-296(fp)
  8015cc:	e17ffd17 	ldw	r5,-12(fp)
  8015d0:	0801c5c0 	call	801c5c <__mulsi3>
  8015d4:	1007883a 	mov	r3,r2
  8015d8:	e0bfb517 	ldw	r2,-300(fp)
  8015dc:	1887883a 	add	r3,r3,r2
  8015e0:	1805883a 	mov	r2,r3
  8015e4:	1085883a 	add	r2,r2,r2
  8015e8:	10c5883a 	add	r2,r2,r3
  8015ec:	1007883a 	mov	r3,r2
  8015f0:	e0bfb317 	ldw	r2,-308(fp)
  8015f4:	1889883a 	add	r4,r3,r2
  8015f8:	e0bfb617 	ldw	r2,-296(fp)
  8015fc:	1085883a 	add	r2,r2,r2
  801600:	1085883a 	add	r2,r2,r2
  801604:	1007883a 	mov	r3,r2
  801608:	e0bffe17 	ldw	r2,-8(fp)
  80160c:	1885883a 	add	r2,r3,r2
  801610:	10c00017 	ldw	r3,0(r2)
  801614:	e0bfb517 	ldw	r2,-300(fp)
  801618:	1885883a 	add	r2,r3,r2
  80161c:	10800003 	ldbu	r2,0(r2)
  801620:	20800005 	stb	r2,0(r4)
                temp[3*((i*col)+j)+1]= (unsigned char)datag[i][j];
  801624:	e13fb617 	ldw	r4,-296(fp)
  801628:	e17ffd17 	ldw	r5,-12(fp)
  80162c:	0801c5c0 	call	801c5c <__mulsi3>
  801630:	1007883a 	mov	r3,r2
  801634:	e0bfb517 	ldw	r2,-300(fp)
  801638:	1887883a 	add	r3,r3,r2
  80163c:	1805883a 	mov	r2,r3
  801640:	1085883a 	add	r2,r2,r2
  801644:	10c5883a 	add	r2,r2,r3
  801648:	1007883a 	mov	r3,r2
  80164c:	e0bfb317 	ldw	r2,-308(fp)
  801650:	1885883a 	add	r2,r3,r2
  801654:	11000044 	addi	r4,r2,1
  801658:	e0bfb617 	ldw	r2,-296(fp)
  80165c:	1085883a 	add	r2,r2,r2
  801660:	1085883a 	add	r2,r2,r2
  801664:	1007883a 	mov	r3,r2
  801668:	e0800217 	ldw	r2,8(fp)
  80166c:	1885883a 	add	r2,r3,r2
  801670:	10c00017 	ldw	r3,0(r2)
  801674:	e0bfb517 	ldw	r2,-300(fp)
  801678:	1885883a 	add	r2,r3,r2
  80167c:	10800003 	ldbu	r2,0(r2)
  801680:	20800005 	stb	r2,0(r4)
                temp[3*((i*col)+j)+2]= (unsigned char)datab[i][j];
  801684:	e13fb617 	ldw	r4,-296(fp)
  801688:	e17ffd17 	ldw	r5,-12(fp)
  80168c:	0801c5c0 	call	801c5c <__mulsi3>
  801690:	1007883a 	mov	r3,r2
  801694:	e0bfb517 	ldw	r2,-300(fp)
  801698:	1887883a 	add	r3,r3,r2
  80169c:	1805883a 	mov	r2,r3
  8016a0:	1085883a 	add	r2,r2,r2
  8016a4:	10c5883a 	add	r2,r2,r3
  8016a8:	1007883a 	mov	r3,r2
  8016ac:	e0bfb317 	ldw	r2,-308(fp)
  8016b0:	1885883a 	add	r2,r3,r2
  8016b4:	11000084 	addi	r4,r2,2
  8016b8:	e0bfb617 	ldw	r2,-296(fp)
  8016bc:	1085883a 	add	r2,r2,r2
  8016c0:	1085883a 	add	r2,r2,r2
  8016c4:	1007883a 	mov	r3,r2
  8016c8:	e0800317 	ldw	r2,12(fp)
  8016cc:	1885883a 	add	r2,r3,r2
  8016d0:	10c00017 	ldw	r3,0(r2)
  8016d4:	e0bfb517 	ldw	r2,-300(fp)
  8016d8:	1885883a 	add	r2,r3,r2
  8016dc:	10800003 	ldbu	r2,0(r2)
  8016e0:	20800005 	stb	r2,0(r4)
    if (binsave == 1)
    {
        temp = (unsigned char*)calloc(3*row*col, sizeof(unsigned char));

        for(i=0; i<row; i++)
           for(j=0; j<col; j++)
  8016e4:	e0bfb517 	ldw	r2,-300(fp)
  8016e8:	10800044 	addi	r2,r2,1
  8016ec:	e0bfb515 	stw	r2,-300(fp)
  8016f0:	e0ffb517 	ldw	r3,-300(fp)
  8016f4:	e0bffd17 	ldw	r2,-12(fp)
  8016f8:	18bfb316 	blt	r3,r2,8015c8 <ppmwrite2+0x1dc>

    if (binsave == 1)
    {
        temp = (unsigned char*)calloc(3*row*col, sizeof(unsigned char));

        for(i=0; i<row; i++)
  8016fc:	e0bfb617 	ldw	r2,-296(fp)
  801700:	10800044 	addi	r2,r2,1
  801704:	e0bfb615 	stw	r2,-296(fp)
  801708:	e0ffb617 	ldw	r3,-296(fp)
  80170c:	e0bffc17 	ldw	r2,-16(fp)
  801710:	18bfab16 	blt	r3,r2,8015c0 <ppmwrite2+0x1d4>
                temp[3*((i*col)+j)]= (unsigned char)datar[i][j];
                temp[3*((i*col)+j)+1]= (unsigned char)datag[i][j];
                temp[3*((i*col)+j)+2]= (unsigned char)datab[i][j];
		}

        nread = fwrite((void*)temp, sizeof(unsigned char), (3*row*col), file);
  801714:	e13ffc17 	ldw	r4,-16(fp)
  801718:	e17ffd17 	ldw	r5,-12(fp)
  80171c:	0801c5c0 	call	801c5c <__mulsi3>
  801720:	1007883a 	mov	r3,r2
  801724:	1805883a 	mov	r2,r3
  801728:	1085883a 	add	r2,r2,r2
  80172c:	10c5883a 	add	r2,r2,r3
  801730:	100d883a 	mov	r6,r2
  801734:	e13fb317 	ldw	r4,-308(fp)
  801738:	01400044 	movi	r5,1
  80173c:	e1ffba17 	ldw	r7,-280(fp)
  801740:	0803ac00 	call	803ac0 <fwrite>
  801744:	e0bfb715 	stw	r2,-292(fp)
        printf("Writing to %s as binary.\n", filename);
  801748:	01002074 	movhi	r4,129
  80174c:	21129804 	addi	r4,r4,19040
  801750:	e17ffb17 	ldw	r5,-20(fp)
  801754:	08046900 	call	804690 <printf>
        free(temp);
  801758:	e13fb317 	ldw	r4,-308(fp)
  80175c:	0803c940 	call	803c94 <free>
  801760:	00003a06 	br	80184c <ppmwrite2+0x460>

    }else{

        printf("Writing to %s as ascii.\n", filename);
  801764:	01002074 	movhi	r4,129
  801768:	21129f04 	addi	r4,r4,19068
  80176c:	e17ffb17 	ldw	r5,-20(fp)
  801770:	08046900 	call	804690 <printf>

        for(j=0; j<row; j++)
  801774:	e03fb515 	stw	zero,-300(fp)
  801778:	00003106 	br	801840 <ppmwrite2+0x454>
           for(i=0; i<col; i++)
  80177c:	e03fb615 	stw	zero,-296(fp)
  801780:	00002906 	br	801828 <ppmwrite2+0x43c>
              fprintf(file,"%d %d %d ", (int)datar[j][i],(int)datag[j][i],(int)datab[j][i]);
  801784:	e0bfb517 	ldw	r2,-300(fp)
  801788:	1085883a 	add	r2,r2,r2
  80178c:	1085883a 	add	r2,r2,r2
  801790:	1007883a 	mov	r3,r2
  801794:	e0bffe17 	ldw	r2,-8(fp)
  801798:	1885883a 	add	r2,r3,r2
  80179c:	10c00017 	ldw	r3,0(r2)
  8017a0:	e0bfb617 	ldw	r2,-296(fp)
  8017a4:	1885883a 	add	r2,r3,r2
  8017a8:	10800003 	ldbu	r2,0(r2)
  8017ac:	11803fcc 	andi	r6,r2,255
  8017b0:	e0bfb517 	ldw	r2,-300(fp)
  8017b4:	1085883a 	add	r2,r2,r2
  8017b8:	1085883a 	add	r2,r2,r2
  8017bc:	1007883a 	mov	r3,r2
  8017c0:	e0800217 	ldw	r2,8(fp)
  8017c4:	1885883a 	add	r2,r3,r2
  8017c8:	10c00017 	ldw	r3,0(r2)
  8017cc:	e0bfb617 	ldw	r2,-296(fp)
  8017d0:	1885883a 	add	r2,r3,r2
  8017d4:	10800003 	ldbu	r2,0(r2)
  8017d8:	11c03fcc 	andi	r7,r2,255
  8017dc:	e0bfb517 	ldw	r2,-300(fp)
  8017e0:	1085883a 	add	r2,r2,r2
  8017e4:	1085883a 	add	r2,r2,r2
  8017e8:	1007883a 	mov	r3,r2
  8017ec:	e0800317 	ldw	r2,12(fp)
  8017f0:	1885883a 	add	r2,r3,r2
  8017f4:	10c00017 	ldw	r3,0(r2)
  8017f8:	e0bfb617 	ldw	r2,-296(fp)
  8017fc:	1885883a 	add	r2,r3,r2
  801800:	10800003 	ldbu	r2,0(r2)
  801804:	10803fcc 	andi	r2,r2,255
  801808:	d8800015 	stw	r2,0(sp)
  80180c:	e13fba17 	ldw	r4,-280(fp)
  801810:	01402074 	movhi	r5,129
  801814:	2952b204 	addi	r5,r5,19144
  801818:	0802c680 	call	802c68 <fprintf>
    }else{

        printf("Writing to %s as ascii.\n", filename);

        for(j=0; j<row; j++)
           for(i=0; i<col; i++)
  80181c:	e0bfb617 	ldw	r2,-296(fp)
  801820:	10800044 	addi	r2,r2,1
  801824:	e0bfb615 	stw	r2,-296(fp)
  801828:	e0ffb617 	ldw	r3,-296(fp)
  80182c:	e0bffd17 	ldw	r2,-12(fp)
  801830:	18bfd416 	blt	r3,r2,801784 <ppmwrite2+0x398>

    }else{

        printf("Writing to %s as ascii.\n", filename);

        for(j=0; j<row; j++)
  801834:	e0bfb517 	ldw	r2,-300(fp)
  801838:	10800044 	addi	r2,r2,1
  80183c:	e0bfb515 	stw	r2,-300(fp)
  801840:	e0ffb517 	ldw	r3,-300(fp)
  801844:	e0bffc17 	ldw	r2,-16(fp)
  801848:	18bfcc16 	blt	r3,r2,80177c <ppmwrite2+0x390>
           for(i=0; i<col; i++)
              fprintf(file,"%d %d %d ", (int)datar[j][i],(int)datag[j][i],(int)datab[j][i]);

    }

    fclose(file);
  80184c:	e13fba17 	ldw	r4,-280(fp)
  801850:	080238c0 	call	80238c <fclose>
    return(0);
  801854:	e03fff15 	stw	zero,-4(fp)
  801858:	e0bfff17 	ldw	r2,-4(fp)
}
  80185c:	e037883a 	mov	sp,fp
  801860:	dfc00117 	ldw	ra,4(sp)
  801864:	df000017 	ldw	fp,0(sp)
  801868:	dec00204 	addi	sp,sp,8
  80186c:	f800283a 	ret

00801870 <__divdf3>:
  801870:	deffed04 	addi	sp,sp,-76
  801874:	dcc01115 	stw	r19,68(sp)
  801878:	dcc00404 	addi	r19,sp,16
  80187c:	2011883a 	mov	r8,r4
  801880:	2813883a 	mov	r9,r5
  801884:	dc000e15 	stw	r16,56(sp)
  801888:	d809883a 	mov	r4,sp
  80188c:	980b883a 	mov	r5,r19
  801890:	dc000904 	addi	r16,sp,36
  801894:	dfc01215 	stw	ra,72(sp)
  801898:	da400115 	stw	r9,4(sp)
  80189c:	d9c00315 	stw	r7,12(sp)
  8018a0:	da000015 	stw	r8,0(sp)
  8018a4:	d9800215 	stw	r6,8(sp)
  8018a8:	dc801015 	stw	r18,64(sp)
  8018ac:	dc400f15 	stw	r17,60(sp)
  8018b0:	08020280 	call	802028 <__unpack_d>
  8018b4:	d9000204 	addi	r4,sp,8
  8018b8:	800b883a 	mov	r5,r16
  8018bc:	08020280 	call	802028 <__unpack_d>
  8018c0:	d9000417 	ldw	r4,16(sp)
  8018c4:	00800044 	movi	r2,1
  8018c8:	11000b2e 	bgeu	r2,r4,8018f8 <__divdf3+0x88>
  8018cc:	d9400917 	ldw	r5,36(sp)
  8018d0:	1140762e 	bgeu	r2,r5,801aac <__divdf3+0x23c>
  8018d4:	d8800517 	ldw	r2,20(sp)
  8018d8:	d8c00a17 	ldw	r3,40(sp)
  8018dc:	01800104 	movi	r6,4
  8018e0:	10c4f03a 	xor	r2,r2,r3
  8018e4:	d8800515 	stw	r2,20(sp)
  8018e8:	21800226 	beq	r4,r6,8018f4 <__divdf3+0x84>
  8018ec:	00800084 	movi	r2,2
  8018f0:	2080141e 	bne	r4,r2,801944 <__divdf3+0xd4>
  8018f4:	29000926 	beq	r5,r4,80191c <__divdf3+0xac>
  8018f8:	9809883a 	mov	r4,r19
  8018fc:	0801d140 	call	801d14 <__pack_d>
  801900:	dfc01217 	ldw	ra,72(sp)
  801904:	dcc01117 	ldw	r19,68(sp)
  801908:	dc801017 	ldw	r18,64(sp)
  80190c:	dc400f17 	ldw	r17,60(sp)
  801910:	dc000e17 	ldw	r16,56(sp)
  801914:	dec01304 	addi	sp,sp,76
  801918:	f800283a 	ret
  80191c:	01002074 	movhi	r4,129
  801920:	2112b504 	addi	r4,r4,19156
  801924:	0801d140 	call	801d14 <__pack_d>
  801928:	dfc01217 	ldw	ra,72(sp)
  80192c:	dcc01117 	ldw	r19,68(sp)
  801930:	dc801017 	ldw	r18,64(sp)
  801934:	dc400f17 	ldw	r17,60(sp)
  801938:	dc000e17 	ldw	r16,56(sp)
  80193c:	dec01304 	addi	sp,sp,76
  801940:	f800283a 	ret
  801944:	29805b26 	beq	r5,r6,801ab4 <__divdf3+0x244>
  801948:	28802d26 	beq	r5,r2,801a00 <__divdf3+0x190>
  80194c:	d8c00617 	ldw	r3,24(sp)
  801950:	d8800b17 	ldw	r2,44(sp)
  801954:	d9c00817 	ldw	r7,32(sp)
  801958:	dc400d17 	ldw	r17,52(sp)
  80195c:	188bc83a 	sub	r5,r3,r2
  801960:	d9800717 	ldw	r6,28(sp)
  801964:	dc000c17 	ldw	r16,48(sp)
  801968:	d9400615 	stw	r5,24(sp)
  80196c:	3c403836 	bltu	r7,r17,801a50 <__divdf3+0x1e0>
  801970:	89c03626 	beq	r17,r7,801a4c <__divdf3+0x1dc>
  801974:	0015883a 	mov	r10,zero
  801978:	001d883a 	mov	r14,zero
  80197c:	02c40034 	movhi	r11,4096
  801980:	001f883a 	mov	r15,zero
  801984:	003f883a 	mov	ra,zero
  801988:	04800f44 	movi	r18,61
  80198c:	00000f06 	br	8019cc <__divdf3+0x15c>
  801990:	601d883a 	mov	r14,r12
  801994:	681f883a 	mov	r15,r13
  801998:	400d883a 	mov	r6,r8
  80199c:	100f883a 	mov	r7,r2
  8019a0:	3191883a 	add	r8,r6,r6
  8019a4:	5808d07a 	srli	r4,r11,1
  8019a8:	4185803a 	cmpltu	r2,r8,r6
  8019ac:	39d3883a 	add	r9,r7,r7
  8019b0:	28c6b03a 	or	r3,r5,r3
  8019b4:	1245883a 	add	r2,r2,r9
  8019b8:	1815883a 	mov	r10,r3
  8019bc:	2017883a 	mov	r11,r4
  8019c0:	400d883a 	mov	r6,r8
  8019c4:	100f883a 	mov	r7,r2
  8019c8:	fc801726 	beq	ra,r18,801a28 <__divdf3+0x1b8>
  8019cc:	580a97fa 	slli	r5,r11,31
  8019d0:	5006d07a 	srli	r3,r10,1
  8019d4:	ffc00044 	addi	ra,ra,1
  8019d8:	3c7ff136 	bltu	r7,r17,8019a0 <__divdf3+0x130>
  8019dc:	3411c83a 	sub	r8,r6,r16
  8019e0:	3205803a 	cmpltu	r2,r6,r8
  8019e4:	3c53c83a 	sub	r9,r7,r17
  8019e8:	7298b03a 	or	r12,r14,r10
  8019ec:	7adab03a 	or	r13,r15,r11
  8019f0:	4885c83a 	sub	r2,r9,r2
  8019f4:	89ffe61e 	bne	r17,r7,801990 <__divdf3+0x120>
  8019f8:	343fe936 	bltu	r6,r16,8019a0 <__divdf3+0x130>
  8019fc:	003fe406 	br	801990 <__divdf3+0x120>
  801a00:	9809883a 	mov	r4,r19
  801a04:	d9800415 	stw	r6,16(sp)
  801a08:	0801d140 	call	801d14 <__pack_d>
  801a0c:	dfc01217 	ldw	ra,72(sp)
  801a10:	dcc01117 	ldw	r19,68(sp)
  801a14:	dc801017 	ldw	r18,64(sp)
  801a18:	dc400f17 	ldw	r17,60(sp)
  801a1c:	dc000e17 	ldw	r16,56(sp)
  801a20:	dec01304 	addi	sp,sp,76
  801a24:	f800283a 	ret
  801a28:	00803fc4 	movi	r2,255
  801a2c:	7090703a 	and	r8,r14,r2
  801a30:	00802004 	movi	r2,128
  801a34:	0007883a 	mov	r3,zero
  801a38:	0013883a 	mov	r9,zero
  801a3c:	40800d26 	beq	r8,r2,801a74 <__divdf3+0x204>
  801a40:	dbc00815 	stw	r15,32(sp)
  801a44:	db800715 	stw	r14,28(sp)
  801a48:	003fab06 	br	8018f8 <__divdf3+0x88>
  801a4c:	343fc92e 	bgeu	r6,r16,801974 <__divdf3+0x104>
  801a50:	3185883a 	add	r2,r6,r6
  801a54:	1189803a 	cmpltu	r4,r2,r6
  801a58:	39c7883a 	add	r3,r7,r7
  801a5c:	20c9883a 	add	r4,r4,r3
  801a60:	297fffc4 	addi	r5,r5,-1
  801a64:	100d883a 	mov	r6,r2
  801a68:	200f883a 	mov	r7,r4
  801a6c:	d9400615 	stw	r5,24(sp)
  801a70:	003fc006 	br	801974 <__divdf3+0x104>
  801a74:	483ff21e 	bne	r9,zero,801a40 <__divdf3+0x1d0>
  801a78:	01004004 	movi	r4,256
  801a7c:	7104703a 	and	r2,r14,r4
  801a80:	10c4b03a 	or	r2,r2,r3
  801a84:	103fee1e 	bne	r2,zero,801a40 <__divdf3+0x1d0>
  801a88:	31c4b03a 	or	r2,r6,r7
  801a8c:	103fec26 	beq	r2,zero,801a40 <__divdf3+0x1d0>
  801a90:	7205883a 	add	r2,r14,r8
  801a94:	1391803a 	cmpltu	r8,r2,r14
  801a98:	43d1883a 	add	r8,r8,r15
  801a9c:	013fc004 	movi	r4,-256
  801aa0:	111c703a 	and	r14,r2,r4
  801aa4:	401f883a 	mov	r15,r8
  801aa8:	003fe506 	br	801a40 <__divdf3+0x1d0>
  801aac:	8009883a 	mov	r4,r16
  801ab0:	003f9206 	br	8018fc <__divdf3+0x8c>
  801ab4:	9809883a 	mov	r4,r19
  801ab8:	d8000715 	stw	zero,28(sp)
  801abc:	d8000815 	stw	zero,32(sp)
  801ac0:	d8000615 	stw	zero,24(sp)
  801ac4:	003f8d06 	br	8018fc <__divdf3+0x8c>

00801ac8 <__floatunsidf>:
  801ac8:	defff204 	addi	sp,sp,-56
  801acc:	dfc00d15 	stw	ra,52(sp)
  801ad0:	ddc00c15 	stw	r23,48(sp)
  801ad4:	dd800b15 	stw	r22,44(sp)
  801ad8:	dd400a15 	stw	r21,40(sp)
  801adc:	dd000915 	stw	r20,36(sp)
  801ae0:	dcc00815 	stw	r19,32(sp)
  801ae4:	dc800715 	stw	r18,28(sp)
  801ae8:	dc400615 	stw	r17,24(sp)
  801aec:	dc000515 	stw	r16,20(sp)
  801af0:	d8000115 	stw	zero,4(sp)
  801af4:	20000f1e 	bne	r4,zero,801b34 <__floatunsidf+0x6c>
  801af8:	00800084 	movi	r2,2
  801afc:	d8800015 	stw	r2,0(sp)
  801b00:	d809883a 	mov	r4,sp
  801b04:	0801d140 	call	801d14 <__pack_d>
  801b08:	dfc00d17 	ldw	ra,52(sp)
  801b0c:	ddc00c17 	ldw	r23,48(sp)
  801b10:	dd800b17 	ldw	r22,44(sp)
  801b14:	dd400a17 	ldw	r21,40(sp)
  801b18:	dd000917 	ldw	r20,36(sp)
  801b1c:	dcc00817 	ldw	r19,32(sp)
  801b20:	dc800717 	ldw	r18,28(sp)
  801b24:	dc400617 	ldw	r17,24(sp)
  801b28:	dc000517 	ldw	r16,20(sp)
  801b2c:	dec00e04 	addi	sp,sp,56
  801b30:	f800283a 	ret
  801b34:	008000c4 	movi	r2,3
  801b38:	00c00f04 	movi	r3,60
  801b3c:	002f883a 	mov	r23,zero
  801b40:	202d883a 	mov	r22,r4
  801b44:	d8800015 	stw	r2,0(sp)
  801b48:	d8c00215 	stw	r3,8(sp)
  801b4c:	d9000315 	stw	r4,12(sp)
  801b50:	ddc00415 	stw	r23,16(sp)
  801b54:	0801c940 	call	801c94 <__clzsi2>
  801b58:	12400744 	addi	r9,r2,29
  801b5c:	48000b16 	blt	r9,zero,801b8c <__floatunsidf+0xc4>
  801b60:	483fe726 	beq	r9,zero,801b00 <__floatunsidf+0x38>
  801b64:	10bfff44 	addi	r2,r2,-3
  801b68:	10002e16 	blt	r2,zero,801c24 <__floatunsidf+0x15c>
  801b6c:	b0a2983a 	sll	r17,r22,r2
  801b70:	0021883a 	mov	r16,zero
  801b74:	d8800217 	ldw	r2,8(sp)
  801b78:	dc400415 	stw	r17,16(sp)
  801b7c:	dc000315 	stw	r16,12(sp)
  801b80:	1245c83a 	sub	r2,r2,r9
  801b84:	d8800215 	stw	r2,8(sp)
  801b88:	003fdd06 	br	801b00 <__floatunsidf+0x38>
  801b8c:	0255c83a 	sub	r10,zero,r9
  801b90:	51bff804 	addi	r6,r10,-32
  801b94:	30001b16 	blt	r6,zero,801c04 <__floatunsidf+0x13c>
  801b98:	b9a8d83a 	srl	r20,r23,r6
  801b9c:	002b883a 	mov	r21,zero
  801ba0:	000f883a 	mov	r7,zero
  801ba4:	01000044 	movi	r4,1
  801ba8:	0011883a 	mov	r8,zero
  801bac:	30002516 	blt	r6,zero,801c44 <__floatunsidf+0x17c>
  801bb0:	21a6983a 	sll	r19,r4,r6
  801bb4:	0025883a 	mov	r18,zero
  801bb8:	00bfffc4 	movi	r2,-1
  801bbc:	9089883a 	add	r4,r18,r2
  801bc0:	988b883a 	add	r5,r19,r2
  801bc4:	248d803a 	cmpltu	r6,r4,r18
  801bc8:	314b883a 	add	r5,r6,r5
  801bcc:	b104703a 	and	r2,r22,r4
  801bd0:	b946703a 	and	r3,r23,r5
  801bd4:	10c4b03a 	or	r2,r2,r3
  801bd8:	10000226 	beq	r2,zero,801be4 <__floatunsidf+0x11c>
  801bdc:	01c00044 	movi	r7,1
  801be0:	0011883a 	mov	r8,zero
  801be4:	d9000217 	ldw	r4,8(sp)
  801be8:	a1c4b03a 	or	r2,r20,r7
  801bec:	aa06b03a 	or	r3,r21,r8
  801bf0:	2249c83a 	sub	r4,r4,r9
  801bf4:	d8c00415 	stw	r3,16(sp)
  801bf8:	d9000215 	stw	r4,8(sp)
  801bfc:	d8800315 	stw	r2,12(sp)
  801c00:	003fbf06 	br	801b00 <__floatunsidf+0x38>
  801c04:	bdc7883a 	add	r3,r23,r23
  801c08:	008007c4 	movi	r2,31
  801c0c:	1285c83a 	sub	r2,r2,r10
  801c10:	1886983a 	sll	r3,r3,r2
  801c14:	b2a8d83a 	srl	r20,r22,r10
  801c18:	baaad83a 	srl	r21,r23,r10
  801c1c:	1d28b03a 	or	r20,r3,r20
  801c20:	003fdf06 	br	801ba0 <__floatunsidf+0xd8>
  801c24:	b006d07a 	srli	r3,r22,1
  801c28:	008007c4 	movi	r2,31
  801c2c:	1245c83a 	sub	r2,r2,r9
  801c30:	1886d83a 	srl	r3,r3,r2
  801c34:	ba62983a 	sll	r17,r23,r9
  801c38:	b260983a 	sll	r16,r22,r9
  801c3c:	1c62b03a 	or	r17,r3,r17
  801c40:	003fcc06 	br	801b74 <__floatunsidf+0xac>
  801c44:	2006d07a 	srli	r3,r4,1
  801c48:	008007c4 	movi	r2,31
  801c4c:	1285c83a 	sub	r2,r2,r10
  801c50:	18a6d83a 	srl	r19,r3,r2
  801c54:	22a4983a 	sll	r18,r4,r10
  801c58:	003fd706 	br	801bb8 <__floatunsidf+0xf0>

00801c5c <__mulsi3>:
  801c5c:	20000a26 	beq	r4,zero,801c88 <__mulsi3+0x2c>
  801c60:	0007883a 	mov	r3,zero
  801c64:	2080004c 	andi	r2,r4,1
  801c68:	1005003a 	cmpeq	r2,r2,zero
  801c6c:	2008d07a 	srli	r4,r4,1
  801c70:	1000011e 	bne	r2,zero,801c78 <__mulsi3+0x1c>
  801c74:	1947883a 	add	r3,r3,r5
  801c78:	294b883a 	add	r5,r5,r5
  801c7c:	203ff91e 	bne	r4,zero,801c64 <__mulsi3+0x8>
  801c80:	1805883a 	mov	r2,r3
  801c84:	f800283a 	ret
  801c88:	0007883a 	mov	r3,zero
  801c8c:	1805883a 	mov	r2,r3
  801c90:	f800283a 	ret

00801c94 <__clzsi2>:
  801c94:	00bfffd4 	movui	r2,65535
  801c98:	11000e36 	bltu	r2,r4,801cd4 <__clzsi2+0x40>
  801c9c:	00803fc4 	movi	r2,255
  801ca0:	01400204 	movi	r5,8
  801ca4:	0007883a 	mov	r3,zero
  801ca8:	11001036 	bltu	r2,r4,801cec <__clzsi2+0x58>
  801cac:	000b883a 	mov	r5,zero
  801cb0:	20c6d83a 	srl	r3,r4,r3
  801cb4:	00802074 	movhi	r2,129
  801cb8:	1092ba04 	addi	r2,r2,19176
  801cbc:	1887883a 	add	r3,r3,r2
  801cc0:	18800003 	ldbu	r2,0(r3)
  801cc4:	00c00804 	movi	r3,32
  801cc8:	2885883a 	add	r2,r5,r2
  801ccc:	1885c83a 	sub	r2,r3,r2
  801cd0:	f800283a 	ret
  801cd4:	01400404 	movi	r5,16
  801cd8:	00804034 	movhi	r2,256
  801cdc:	10bfffc4 	addi	r2,r2,-1
  801ce0:	2807883a 	mov	r3,r5
  801ce4:	113ff22e 	bgeu	r2,r4,801cb0 <__clzsi2+0x1c>
  801ce8:	01400604 	movi	r5,24
  801cec:	2807883a 	mov	r3,r5
  801cf0:	20c6d83a 	srl	r3,r4,r3
  801cf4:	00802074 	movhi	r2,129
  801cf8:	1092ba04 	addi	r2,r2,19176
  801cfc:	1887883a 	add	r3,r3,r2
  801d00:	18800003 	ldbu	r2,0(r3)
  801d04:	00c00804 	movi	r3,32
  801d08:	2885883a 	add	r2,r5,r2
  801d0c:	1885c83a 	sub	r2,r3,r2
  801d10:	f800283a 	ret

00801d14 <__pack_d>:
  801d14:	20c00017 	ldw	r3,0(r4)
  801d18:	defffd04 	addi	sp,sp,-12
  801d1c:	dc000015 	stw	r16,0(sp)
  801d20:	dc800215 	stw	r18,8(sp)
  801d24:	dc400115 	stw	r17,4(sp)
  801d28:	00800044 	movi	r2,1
  801d2c:	22000317 	ldw	r8,12(r4)
  801d30:	001f883a 	mov	r15,zero
  801d34:	22400417 	ldw	r9,16(r4)
  801d38:	24000117 	ldw	r16,4(r4)
  801d3c:	10c0552e 	bgeu	r2,r3,801e94 <__pack_d+0x180>
  801d40:	00800104 	movi	r2,4
  801d44:	18804f26 	beq	r3,r2,801e84 <__pack_d+0x170>
  801d48:	00800084 	movi	r2,2
  801d4c:	18800226 	beq	r3,r2,801d58 <__pack_d+0x44>
  801d50:	4244b03a 	or	r2,r8,r9
  801d54:	10001a1e 	bne	r2,zero,801dc0 <__pack_d+0xac>
  801d58:	000d883a 	mov	r6,zero
  801d5c:	000f883a 	mov	r7,zero
  801d60:	0011883a 	mov	r8,zero
  801d64:	00800434 	movhi	r2,16
  801d68:	10bfffc4 	addi	r2,r2,-1
  801d6c:	301d883a 	mov	r14,r6
  801d70:	3884703a 	and	r2,r7,r2
  801d74:	400a953a 	slli	r5,r8,20
  801d78:	79bffc2c 	andhi	r6,r15,65520
  801d7c:	308cb03a 	or	r6,r6,r2
  801d80:	00e00434 	movhi	r3,32784
  801d84:	18ffffc4 	addi	r3,r3,-1
  801d88:	800497fa 	slli	r2,r16,31
  801d8c:	30c6703a 	and	r3,r6,r3
  801d90:	1946b03a 	or	r3,r3,r5
  801d94:	01600034 	movhi	r5,32768
  801d98:	297fffc4 	addi	r5,r5,-1
  801d9c:	194a703a 	and	r5,r3,r5
  801da0:	288ab03a 	or	r5,r5,r2
  801da4:	2807883a 	mov	r3,r5
  801da8:	7005883a 	mov	r2,r14
  801dac:	dc800217 	ldw	r18,8(sp)
  801db0:	dc400117 	ldw	r17,4(sp)
  801db4:	dc000017 	ldw	r16,0(sp)
  801db8:	dec00304 	addi	sp,sp,12
  801dbc:	f800283a 	ret
  801dc0:	21000217 	ldw	r4,8(r4)
  801dc4:	00bf0084 	movi	r2,-1022
  801dc8:	20803f16 	blt	r4,r2,801ec8 <__pack_d+0x1b4>
  801dcc:	0080ffc4 	movi	r2,1023
  801dd0:	11002c16 	blt	r2,r4,801e84 <__pack_d+0x170>
  801dd4:	00803fc4 	movi	r2,255
  801dd8:	408c703a 	and	r6,r8,r2
  801ddc:	00802004 	movi	r2,128
  801de0:	0007883a 	mov	r3,zero
  801de4:	000f883a 	mov	r7,zero
  801de8:	2280ffc4 	addi	r10,r4,1023
  801dec:	30801e26 	beq	r6,r2,801e68 <__pack_d+0x154>
  801df0:	00801fc4 	movi	r2,127
  801df4:	4089883a 	add	r4,r8,r2
  801df8:	220d803a 	cmpltu	r6,r4,r8
  801dfc:	324d883a 	add	r6,r6,r9
  801e00:	2011883a 	mov	r8,r4
  801e04:	3013883a 	mov	r9,r6
  801e08:	00880034 	movhi	r2,8192
  801e0c:	10bfffc4 	addi	r2,r2,-1
  801e10:	12400d36 	bltu	r2,r9,801e48 <__pack_d+0x134>
  801e14:	4804963a 	slli	r2,r9,24
  801e18:	400cd23a 	srli	r6,r8,8
  801e1c:	480ed23a 	srli	r7,r9,8
  801e20:	013fffc4 	movi	r4,-1
  801e24:	118cb03a 	or	r6,r2,r6
  801e28:	01400434 	movhi	r5,16
  801e2c:	297fffc4 	addi	r5,r5,-1
  801e30:	3104703a 	and	r2,r6,r4
  801e34:	3946703a 	and	r3,r7,r5
  801e38:	5201ffcc 	andi	r8,r10,2047
  801e3c:	100d883a 	mov	r6,r2
  801e40:	180f883a 	mov	r7,r3
  801e44:	003fc706 	br	801d64 <__pack_d+0x50>
  801e48:	480897fa 	slli	r4,r9,31
  801e4c:	4004d07a 	srli	r2,r8,1
  801e50:	4806d07a 	srli	r3,r9,1
  801e54:	52800044 	addi	r10,r10,1
  801e58:	2084b03a 	or	r2,r4,r2
  801e5c:	1011883a 	mov	r8,r2
  801e60:	1813883a 	mov	r9,r3
  801e64:	003feb06 	br	801e14 <__pack_d+0x100>
  801e68:	383fe11e 	bne	r7,zero,801df0 <__pack_d+0xdc>
  801e6c:	01004004 	movi	r4,256
  801e70:	4104703a 	and	r2,r8,r4
  801e74:	10c4b03a 	or	r2,r2,r3
  801e78:	103fe326 	beq	r2,zero,801e08 <__pack_d+0xf4>
  801e7c:	3005883a 	mov	r2,r6
  801e80:	003fdc06 	br	801df4 <__pack_d+0xe0>
  801e84:	000d883a 	mov	r6,zero
  801e88:	000f883a 	mov	r7,zero
  801e8c:	0201ffc4 	movi	r8,2047
  801e90:	003fb406 	br	801d64 <__pack_d+0x50>
  801e94:	0005883a 	mov	r2,zero
  801e98:	00c00234 	movhi	r3,8
  801e9c:	408cb03a 	or	r6,r8,r2
  801ea0:	48ceb03a 	or	r7,r9,r3
  801ea4:	013fffc4 	movi	r4,-1
  801ea8:	01400434 	movhi	r5,16
  801eac:	297fffc4 	addi	r5,r5,-1
  801eb0:	3104703a 	and	r2,r6,r4
  801eb4:	3946703a 	and	r3,r7,r5
  801eb8:	100d883a 	mov	r6,r2
  801ebc:	180f883a 	mov	r7,r3
  801ec0:	0201ffc4 	movi	r8,2047
  801ec4:	003fa706 	br	801d64 <__pack_d+0x50>
  801ec8:	1109c83a 	sub	r4,r2,r4
  801ecc:	00800e04 	movi	r2,56
  801ed0:	11004316 	blt	r2,r4,801fe0 <__pack_d+0x2cc>
  801ed4:	21fff804 	addi	r7,r4,-32
  801ed8:	38004516 	blt	r7,zero,801ff0 <__pack_d+0x2dc>
  801edc:	49d8d83a 	srl	r12,r9,r7
  801ee0:	001b883a 	mov	r13,zero
  801ee4:	0023883a 	mov	r17,zero
  801ee8:	01400044 	movi	r5,1
  801eec:	0025883a 	mov	r18,zero
  801ef0:	38004716 	blt	r7,zero,802010 <__pack_d+0x2fc>
  801ef4:	29d6983a 	sll	r11,r5,r7
  801ef8:	0015883a 	mov	r10,zero
  801efc:	00bfffc4 	movi	r2,-1
  801f00:	5089883a 	add	r4,r10,r2
  801f04:	588b883a 	add	r5,r11,r2
  801f08:	228d803a 	cmpltu	r6,r4,r10
  801f0c:	314b883a 	add	r5,r6,r5
  801f10:	4104703a 	and	r2,r8,r4
  801f14:	4946703a 	and	r3,r9,r5
  801f18:	10c4b03a 	or	r2,r2,r3
  801f1c:	10000226 	beq	r2,zero,801f28 <__pack_d+0x214>
  801f20:	04400044 	movi	r17,1
  801f24:	0025883a 	mov	r18,zero
  801f28:	00803fc4 	movi	r2,255
  801f2c:	644eb03a 	or	r7,r12,r17
  801f30:	3892703a 	and	r9,r7,r2
  801f34:	00802004 	movi	r2,128
  801f38:	6c90b03a 	or	r8,r13,r18
  801f3c:	0015883a 	mov	r10,zero
  801f40:	48801626 	beq	r9,r2,801f9c <__pack_d+0x288>
  801f44:	01001fc4 	movi	r4,127
  801f48:	3905883a 	add	r2,r7,r4
  801f4c:	11cd803a 	cmpltu	r6,r2,r7
  801f50:	320d883a 	add	r6,r6,r8
  801f54:	100f883a 	mov	r7,r2
  801f58:	00840034 	movhi	r2,4096
  801f5c:	10bfffc4 	addi	r2,r2,-1
  801f60:	3011883a 	mov	r8,r6
  801f64:	0007883a 	mov	r3,zero
  801f68:	11801b36 	bltu	r2,r6,801fd8 <__pack_d+0x2c4>
  801f6c:	4004963a 	slli	r2,r8,24
  801f70:	3808d23a 	srli	r4,r7,8
  801f74:	400ad23a 	srli	r5,r8,8
  801f78:	1813883a 	mov	r9,r3
  801f7c:	1108b03a 	or	r4,r2,r4
  801f80:	00bfffc4 	movi	r2,-1
  801f84:	00c00434 	movhi	r3,16
  801f88:	18ffffc4 	addi	r3,r3,-1
  801f8c:	208c703a 	and	r6,r4,r2
  801f90:	28ce703a 	and	r7,r5,r3
  801f94:	4a01ffcc 	andi	r8,r9,2047
  801f98:	003f7206 	br	801d64 <__pack_d+0x50>
  801f9c:	503fe91e 	bne	r10,zero,801f44 <__pack_d+0x230>
  801fa0:	01004004 	movi	r4,256
  801fa4:	3904703a 	and	r2,r7,r4
  801fa8:	0007883a 	mov	r3,zero
  801fac:	10c4b03a 	or	r2,r2,r3
  801fb0:	10000626 	beq	r2,zero,801fcc <__pack_d+0x2b8>
  801fb4:	3a45883a 	add	r2,r7,r9
  801fb8:	11cd803a 	cmpltu	r6,r2,r7
  801fbc:	320d883a 	add	r6,r6,r8
  801fc0:	100f883a 	mov	r7,r2
  801fc4:	3011883a 	mov	r8,r6
  801fc8:	0007883a 	mov	r3,zero
  801fcc:	00840034 	movhi	r2,4096
  801fd0:	10bfffc4 	addi	r2,r2,-1
  801fd4:	123fe52e 	bgeu	r2,r8,801f6c <__pack_d+0x258>
  801fd8:	00c00044 	movi	r3,1
  801fdc:	003fe306 	br	801f6c <__pack_d+0x258>
  801fe0:	0009883a 	mov	r4,zero
  801fe4:	0013883a 	mov	r9,zero
  801fe8:	000b883a 	mov	r5,zero
  801fec:	003fe406 	br	801f80 <__pack_d+0x26c>
  801ff0:	4a47883a 	add	r3,r9,r9
  801ff4:	008007c4 	movi	r2,31
  801ff8:	1105c83a 	sub	r2,r2,r4
  801ffc:	1886983a 	sll	r3,r3,r2
  802000:	4118d83a 	srl	r12,r8,r4
  802004:	491ad83a 	srl	r13,r9,r4
  802008:	1b18b03a 	or	r12,r3,r12
  80200c:	003fb506 	br	801ee4 <__pack_d+0x1d0>
  802010:	2806d07a 	srli	r3,r5,1
  802014:	008007c4 	movi	r2,31
  802018:	1105c83a 	sub	r2,r2,r4
  80201c:	1896d83a 	srl	r11,r3,r2
  802020:	2914983a 	sll	r10,r5,r4
  802024:	003fb506 	br	801efc <__pack_d+0x1e8>

00802028 <__unpack_d>:
  802028:	20c00117 	ldw	r3,4(r4)
  80202c:	22400017 	ldw	r9,0(r4)
  802030:	00800434 	movhi	r2,16
  802034:	10bfffc4 	addi	r2,r2,-1
  802038:	1808d53a 	srli	r4,r3,20
  80203c:	180cd7fa 	srli	r6,r3,31
  802040:	1894703a 	and	r10,r3,r2
  802044:	2201ffcc 	andi	r8,r4,2047
  802048:	281b883a 	mov	r13,r5
  80204c:	4817883a 	mov	r11,r9
  802050:	29800115 	stw	r6,4(r5)
  802054:	5019883a 	mov	r12,r10
  802058:	40001e1e 	bne	r8,zero,8020d4 <__unpack_d+0xac>
  80205c:	4a84b03a 	or	r2,r9,r10
  802060:	10001926 	beq	r2,zero,8020c8 <__unpack_d+0xa0>
  802064:	4804d63a 	srli	r2,r9,24
  802068:	500c923a 	slli	r6,r10,8
  80206c:	013f0084 	movi	r4,-1022
  802070:	00c40034 	movhi	r3,4096
  802074:	18ffffc4 	addi	r3,r3,-1
  802078:	118cb03a 	or	r6,r2,r6
  80207c:	008000c4 	movi	r2,3
  802080:	480a923a 	slli	r5,r9,8
  802084:	68800015 	stw	r2,0(r13)
  802088:	69000215 	stw	r4,8(r13)
  80208c:	19800b36 	bltu	r3,r6,8020bc <__unpack_d+0x94>
  802090:	200f883a 	mov	r7,r4
  802094:	1811883a 	mov	r8,r3
  802098:	2945883a 	add	r2,r5,r5
  80209c:	1149803a 	cmpltu	r4,r2,r5
  8020a0:	3187883a 	add	r3,r6,r6
  8020a4:	20c9883a 	add	r4,r4,r3
  8020a8:	100b883a 	mov	r5,r2
  8020ac:	200d883a 	mov	r6,r4
  8020b0:	39ffffc4 	addi	r7,r7,-1
  8020b4:	413ff82e 	bgeu	r8,r4,802098 <__unpack_d+0x70>
  8020b8:	69c00215 	stw	r7,8(r13)
  8020bc:	69800415 	stw	r6,16(r13)
  8020c0:	69400315 	stw	r5,12(r13)
  8020c4:	f800283a 	ret
  8020c8:	00800084 	movi	r2,2
  8020cc:	28800015 	stw	r2,0(r5)
  8020d0:	f800283a 	ret
  8020d4:	0081ffc4 	movi	r2,2047
  8020d8:	40800f26 	beq	r8,r2,802118 <__unpack_d+0xf0>
  8020dc:	480cd63a 	srli	r6,r9,24
  8020e0:	5006923a 	slli	r3,r10,8
  8020e4:	4804923a 	slli	r2,r9,8
  8020e8:	0009883a 	mov	r4,zero
  8020ec:	30c6b03a 	or	r3,r6,r3
  8020f0:	01440034 	movhi	r5,4096
  8020f4:	110cb03a 	or	r6,r2,r4
  8020f8:	423f0044 	addi	r8,r8,-1023
  8020fc:	194eb03a 	or	r7,r3,r5
  802100:	008000c4 	movi	r2,3
  802104:	69c00415 	stw	r7,16(r13)
  802108:	6a000215 	stw	r8,8(r13)
  80210c:	68800015 	stw	r2,0(r13)
  802110:	69800315 	stw	r6,12(r13)
  802114:	f800283a 	ret
  802118:	4a84b03a 	or	r2,r9,r10
  80211c:	1000031e 	bne	r2,zero,80212c <__unpack_d+0x104>
  802120:	00800104 	movi	r2,4
  802124:	28800015 	stw	r2,0(r5)
  802128:	f800283a 	ret
  80212c:	0009883a 	mov	r4,zero
  802130:	01400234 	movhi	r5,8
  802134:	4904703a 	and	r2,r9,r4
  802138:	5146703a 	and	r3,r10,r5
  80213c:	10c4b03a 	or	r2,r2,r3
  802140:	10000526 	beq	r2,zero,802158 <__unpack_d+0x130>
  802144:	00800044 	movi	r2,1
  802148:	68800015 	stw	r2,0(r13)
  80214c:	6b000415 	stw	r12,16(r13)
  802150:	6ac00315 	stw	r11,12(r13)
  802154:	f800283a 	ret
  802158:	68000015 	stw	zero,0(r13)
  80215c:	003ffb06 	br	80214c <__unpack_d+0x124>

00802160 <calloc>:
  802160:	01802074 	movhi	r6,129
  802164:	319ae304 	addi	r6,r6,27532
  802168:	2007883a 	mov	r3,r4
  80216c:	31000017 	ldw	r4,0(r6)
  802170:	280d883a 	mov	r6,r5
  802174:	180b883a 	mov	r5,r3
  802178:	080217c1 	jmpi	80217c <_calloc_r>

0080217c <_calloc_r>:
  80217c:	defffe04 	addi	sp,sp,-8
  802180:	dc400015 	stw	r17,0(sp)
  802184:	2023883a 	mov	r17,r4
  802188:	2809883a 	mov	r4,r5
  80218c:	300b883a 	mov	r5,r6
  802190:	dfc00115 	stw	ra,4(sp)
  802194:	0801c5c0 	call	801c5c <__mulsi3>
  802198:	100b883a 	mov	r5,r2
  80219c:	8809883a 	mov	r4,r17
  8021a0:	0803cbc0 	call	803cbc <_malloc_r>
  8021a4:	1023883a 	mov	r17,r2
  8021a8:	01c00904 	movi	r7,36
  8021ac:	10000d26 	beq	r2,zero,8021e4 <_calloc_r+0x68>
  8021b0:	10ffff17 	ldw	r3,-4(r2)
  8021b4:	1009883a 	mov	r4,r2
  8021b8:	00bfff04 	movi	r2,-4
  8021bc:	1886703a 	and	r3,r3,r2
  8021c0:	1887883a 	add	r3,r3,r2
  8021c4:	180d883a 	mov	r6,r3
  8021c8:	000b883a 	mov	r5,zero
  8021cc:	38c01736 	bltu	r7,r3,80222c <_calloc_r+0xb0>
  8021d0:	008004c4 	movi	r2,19
  8021d4:	10c00836 	bltu	r2,r3,8021f8 <_calloc_r+0x7c>
  8021d8:	20000215 	stw	zero,8(r4)
  8021dc:	20000015 	stw	zero,0(r4)
  8021e0:	20000115 	stw	zero,4(r4)
  8021e4:	8805883a 	mov	r2,r17
  8021e8:	dfc00117 	ldw	ra,4(sp)
  8021ec:	dc400017 	ldw	r17,0(sp)
  8021f0:	dec00204 	addi	sp,sp,8
  8021f4:	f800283a 	ret
  8021f8:	008006c4 	movi	r2,27
  8021fc:	88000015 	stw	zero,0(r17)
  802200:	88000115 	stw	zero,4(r17)
  802204:	89000204 	addi	r4,r17,8
  802208:	10fff32e 	bgeu	r2,r3,8021d8 <_calloc_r+0x5c>
  80220c:	88000215 	stw	zero,8(r17)
  802210:	88000315 	stw	zero,12(r17)
  802214:	89000404 	addi	r4,r17,16
  802218:	19ffef1e 	bne	r3,r7,8021d8 <_calloc_r+0x5c>
  80221c:	89000604 	addi	r4,r17,24
  802220:	88000415 	stw	zero,16(r17)
  802224:	88000515 	stw	zero,20(r17)
  802228:	003feb06 	br	8021d8 <_calloc_r+0x5c>
  80222c:	08045800 	call	804580 <memset>
  802230:	8805883a 	mov	r2,r17
  802234:	dfc00117 	ldw	ra,4(sp)
  802238:	dc400017 	ldw	r17,0(sp)
  80223c:	dec00204 	addi	sp,sp,8
  802240:	f800283a 	ret

00802244 <exit>:
  802244:	defffe04 	addi	sp,sp,-8
  802248:	000b883a 	mov	r5,zero
  80224c:	dc000015 	stw	r16,0(sp)
  802250:	dfc00115 	stw	ra,4(sp)
  802254:	2021883a 	mov	r16,r4
  802258:	08089440 	call	808944 <__call_exitprocs>
  80225c:	00802074 	movhi	r2,129
  802260:	109ae404 	addi	r2,r2,27536
  802264:	11000017 	ldw	r4,0(r2)
  802268:	20800f17 	ldw	r2,60(r4)
  80226c:	10000126 	beq	r2,zero,802274 <exit+0x30>
  802270:	103ee83a 	callr	r2
  802274:	8009883a 	mov	r4,r16
  802278:	08119240 	call	811924 <_exit>

0080227c <_fclose_r>:
  80227c:	defffc04 	addi	sp,sp,-16
  802280:	dc400115 	stw	r17,4(sp)
  802284:	dc000015 	stw	r16,0(sp)
  802288:	dfc00315 	stw	ra,12(sp)
  80228c:	dc800215 	stw	r18,8(sp)
  802290:	2821883a 	mov	r16,r5
  802294:	2023883a 	mov	r17,r4
  802298:	28002926 	beq	r5,zero,802340 <_fclose_r+0xc4>
  80229c:	08028bc0 	call	8028bc <__sfp_lock_acquire>
  8022a0:	88000226 	beq	r17,zero,8022ac <_fclose_r+0x30>
  8022a4:	88800e17 	ldw	r2,56(r17)
  8022a8:	10002d26 	beq	r2,zero,802360 <_fclose_r+0xe4>
  8022ac:	8080030f 	ldh	r2,12(r16)
  8022b0:	10002226 	beq	r2,zero,80233c <_fclose_r+0xc0>
  8022b4:	8809883a 	mov	r4,r17
  8022b8:	800b883a 	mov	r5,r16
  8022bc:	08023a00 	call	8023a0 <_fflush_r>
  8022c0:	1025883a 	mov	r18,r2
  8022c4:	80800b17 	ldw	r2,44(r16)
  8022c8:	10000426 	beq	r2,zero,8022dc <_fclose_r+0x60>
  8022cc:	81400717 	ldw	r5,28(r16)
  8022d0:	8809883a 	mov	r4,r17
  8022d4:	103ee83a 	callr	r2
  8022d8:	10002a16 	blt	r2,zero,802384 <_fclose_r+0x108>
  8022dc:	8080030b 	ldhu	r2,12(r16)
  8022e0:	1080200c 	andi	r2,r2,128
  8022e4:	1000231e 	bne	r2,zero,802374 <_fclose_r+0xf8>
  8022e8:	81400c17 	ldw	r5,48(r16)
  8022ec:	28000526 	beq	r5,zero,802304 <_fclose_r+0x88>
  8022f0:	80801004 	addi	r2,r16,64
  8022f4:	28800226 	beq	r5,r2,802300 <_fclose_r+0x84>
  8022f8:	8809883a 	mov	r4,r17
  8022fc:	08030400 	call	803040 <_free_r>
  802300:	80000c15 	stw	zero,48(r16)
  802304:	81401117 	ldw	r5,68(r16)
  802308:	28000326 	beq	r5,zero,802318 <_fclose_r+0x9c>
  80230c:	8809883a 	mov	r4,r17
  802310:	08030400 	call	803040 <_free_r>
  802314:	80001115 	stw	zero,68(r16)
  802318:	8000030d 	sth	zero,12(r16)
  80231c:	08028c00 	call	8028c0 <__sfp_lock_release>
  802320:	9005883a 	mov	r2,r18
  802324:	dfc00317 	ldw	ra,12(sp)
  802328:	dc800217 	ldw	r18,8(sp)
  80232c:	dc400117 	ldw	r17,4(sp)
  802330:	dc000017 	ldw	r16,0(sp)
  802334:	dec00404 	addi	sp,sp,16
  802338:	f800283a 	ret
  80233c:	08028c00 	call	8028c0 <__sfp_lock_release>
  802340:	0025883a 	mov	r18,zero
  802344:	9005883a 	mov	r2,r18
  802348:	dfc00317 	ldw	ra,12(sp)
  80234c:	dc800217 	ldw	r18,8(sp)
  802350:	dc400117 	ldw	r17,4(sp)
  802354:	dc000017 	ldw	r16,0(sp)
  802358:	dec00404 	addi	sp,sp,16
  80235c:	f800283a 	ret
  802360:	8809883a 	mov	r4,r17
  802364:	08028cc0 	call	8028cc <__sinit>
  802368:	8080030f 	ldh	r2,12(r16)
  80236c:	103fd11e 	bne	r2,zero,8022b4 <_fclose_r+0x38>
  802370:	003ff206 	br	80233c <_fclose_r+0xc0>
  802374:	81400417 	ldw	r5,16(r16)
  802378:	8809883a 	mov	r4,r17
  80237c:	08030400 	call	803040 <_free_r>
  802380:	003fd906 	br	8022e8 <_fclose_r+0x6c>
  802384:	04bfffc4 	movi	r18,-1
  802388:	003fd406 	br	8022dc <_fclose_r+0x60>

0080238c <fclose>:
  80238c:	00802074 	movhi	r2,129
  802390:	109ae304 	addi	r2,r2,27532
  802394:	200b883a 	mov	r5,r4
  802398:	11000017 	ldw	r4,0(r2)
  80239c:	080227c1 	jmpi	80227c <_fclose_r>

008023a0 <_fflush_r>:
  8023a0:	defffb04 	addi	sp,sp,-20
  8023a4:	dcc00315 	stw	r19,12(sp)
  8023a8:	dc800215 	stw	r18,8(sp)
  8023ac:	dfc00415 	stw	ra,16(sp)
  8023b0:	dc400115 	stw	r17,4(sp)
  8023b4:	dc000015 	stw	r16,0(sp)
  8023b8:	2027883a 	mov	r19,r4
  8023bc:	2825883a 	mov	r18,r5
  8023c0:	20000226 	beq	r4,zero,8023cc <_fflush_r+0x2c>
  8023c4:	20800e17 	ldw	r2,56(r4)
  8023c8:	10005626 	beq	r2,zero,802524 <_fflush_r+0x184>
  8023cc:	9100030b 	ldhu	r4,12(r18)
  8023d0:	20ffffcc 	andi	r3,r4,65535
  8023d4:	18e0001c 	xori	r3,r3,32768
  8023d8:	18e00004 	addi	r3,r3,-32768
  8023dc:	1880020c 	andi	r2,r3,8
  8023e0:	1000261e 	bne	r2,zero,80247c <_fflush_r+0xdc>
  8023e4:	90c00117 	ldw	r3,4(r18)
  8023e8:	20820014 	ori	r2,r4,2048
  8023ec:	9080030d 	sth	r2,12(r18)
  8023f0:	1009883a 	mov	r4,r2
  8023f4:	00c0400e 	bge	zero,r3,8024f8 <_fflush_r+0x158>
  8023f8:	92000a17 	ldw	r8,40(r18)
  8023fc:	40004026 	beq	r8,zero,802500 <_fflush_r+0x160>
  802400:	2084000c 	andi	r2,r4,4096
  802404:	10005326 	beq	r2,zero,802554 <_fflush_r+0x1b4>
  802408:	94001417 	ldw	r16,80(r18)
  80240c:	9080030b 	ldhu	r2,12(r18)
  802410:	1080010c 	andi	r2,r2,4
  802414:	1000481e 	bne	r2,zero,802538 <_fflush_r+0x198>
  802418:	91400717 	ldw	r5,28(r18)
  80241c:	9809883a 	mov	r4,r19
  802420:	800d883a 	mov	r6,r16
  802424:	000f883a 	mov	r7,zero
  802428:	403ee83a 	callr	r8
  80242c:	8080261e 	bne	r16,r2,8024c8 <_fflush_r+0x128>
  802430:	9080030b 	ldhu	r2,12(r18)
  802434:	91000417 	ldw	r4,16(r18)
  802438:	90000115 	stw	zero,4(r18)
  80243c:	10bdffcc 	andi	r2,r2,63487
  802440:	10ffffcc 	andi	r3,r2,65535
  802444:	18c4000c 	andi	r3,r3,4096
  802448:	9080030d 	sth	r2,12(r18)
  80244c:	91000015 	stw	r4,0(r18)
  802450:	18002b26 	beq	r3,zero,802500 <_fflush_r+0x160>
  802454:	0007883a 	mov	r3,zero
  802458:	1805883a 	mov	r2,r3
  80245c:	94001415 	stw	r16,80(r18)
  802460:	dfc00417 	ldw	ra,16(sp)
  802464:	dcc00317 	ldw	r19,12(sp)
  802468:	dc800217 	ldw	r18,8(sp)
  80246c:	dc400117 	ldw	r17,4(sp)
  802470:	dc000017 	ldw	r16,0(sp)
  802474:	dec00504 	addi	sp,sp,20
  802478:	f800283a 	ret
  80247c:	94400417 	ldw	r17,16(r18)
  802480:	88001f26 	beq	r17,zero,802500 <_fflush_r+0x160>
  802484:	90800017 	ldw	r2,0(r18)
  802488:	18c000cc 	andi	r3,r3,3
  80248c:	94400015 	stw	r17,0(r18)
  802490:	1461c83a 	sub	r16,r2,r17
  802494:	18002526 	beq	r3,zero,80252c <_fflush_r+0x18c>
  802498:	0005883a 	mov	r2,zero
  80249c:	90800215 	stw	r2,8(r18)
  8024a0:	0400170e 	bge	zero,r16,802500 <_fflush_r+0x160>
  8024a4:	90c00917 	ldw	r3,36(r18)
  8024a8:	91400717 	ldw	r5,28(r18)
  8024ac:	880d883a 	mov	r6,r17
  8024b0:	800f883a 	mov	r7,r16
  8024b4:	9809883a 	mov	r4,r19
  8024b8:	183ee83a 	callr	r3
  8024bc:	88a3883a 	add	r17,r17,r2
  8024c0:	80a1c83a 	sub	r16,r16,r2
  8024c4:	00bff616 	blt	zero,r2,8024a0 <_fflush_r+0x100>
  8024c8:	9080030b 	ldhu	r2,12(r18)
  8024cc:	00ffffc4 	movi	r3,-1
  8024d0:	10801014 	ori	r2,r2,64
  8024d4:	9080030d 	sth	r2,12(r18)
  8024d8:	1805883a 	mov	r2,r3
  8024dc:	dfc00417 	ldw	ra,16(sp)
  8024e0:	dcc00317 	ldw	r19,12(sp)
  8024e4:	dc800217 	ldw	r18,8(sp)
  8024e8:	dc400117 	ldw	r17,4(sp)
  8024ec:	dc000017 	ldw	r16,0(sp)
  8024f0:	dec00504 	addi	sp,sp,20
  8024f4:	f800283a 	ret
  8024f8:	90800f17 	ldw	r2,60(r18)
  8024fc:	00bfbe16 	blt	zero,r2,8023f8 <_fflush_r+0x58>
  802500:	0007883a 	mov	r3,zero
  802504:	1805883a 	mov	r2,r3
  802508:	dfc00417 	ldw	ra,16(sp)
  80250c:	dcc00317 	ldw	r19,12(sp)
  802510:	dc800217 	ldw	r18,8(sp)
  802514:	dc400117 	ldw	r17,4(sp)
  802518:	dc000017 	ldw	r16,0(sp)
  80251c:	dec00504 	addi	sp,sp,20
  802520:	f800283a 	ret
  802524:	08028cc0 	call	8028cc <__sinit>
  802528:	003fa806 	br	8023cc <_fflush_r+0x2c>
  80252c:	90800517 	ldw	r2,20(r18)
  802530:	90800215 	stw	r2,8(r18)
  802534:	003fda06 	br	8024a0 <_fflush_r+0x100>
  802538:	90800117 	ldw	r2,4(r18)
  80253c:	90c00c17 	ldw	r3,48(r18)
  802540:	80a1c83a 	sub	r16,r16,r2
  802544:	183fb426 	beq	r3,zero,802418 <_fflush_r+0x78>
  802548:	90800f17 	ldw	r2,60(r18)
  80254c:	80a1c83a 	sub	r16,r16,r2
  802550:	003fb106 	br	802418 <_fflush_r+0x78>
  802554:	91400717 	ldw	r5,28(r18)
  802558:	9809883a 	mov	r4,r19
  80255c:	000d883a 	mov	r6,zero
  802560:	01c00044 	movi	r7,1
  802564:	403ee83a 	callr	r8
  802568:	1021883a 	mov	r16,r2
  80256c:	00bfffc4 	movi	r2,-1
  802570:	80800226 	beq	r16,r2,80257c <_fflush_r+0x1dc>
  802574:	92000a17 	ldw	r8,40(r18)
  802578:	003fa406 	br	80240c <_fflush_r+0x6c>
  80257c:	98c00017 	ldw	r3,0(r19)
  802580:	00800744 	movi	r2,29
  802584:	18bfde26 	beq	r3,r2,802500 <_fflush_r+0x160>
  802588:	9080030b 	ldhu	r2,12(r18)
  80258c:	8007883a 	mov	r3,r16
  802590:	10801014 	ori	r2,r2,64
  802594:	9080030d 	sth	r2,12(r18)
  802598:	003fcf06 	br	8024d8 <_fflush_r+0x138>

0080259c <fflush>:
  80259c:	01402034 	movhi	r5,128
  8025a0:	2948e804 	addi	r5,r5,9120
  8025a4:	2007883a 	mov	r3,r4
  8025a8:	20000526 	beq	r4,zero,8025c0 <fflush+0x24>
  8025ac:	00802074 	movhi	r2,129
  8025b0:	109ae304 	addi	r2,r2,27532
  8025b4:	11000017 	ldw	r4,0(r2)
  8025b8:	180b883a 	mov	r5,r3
  8025bc:	08023a01 	jmpi	8023a0 <_fflush_r>
  8025c0:	00802074 	movhi	r2,129
  8025c4:	109ae404 	addi	r2,r2,27536
  8025c8:	11000017 	ldw	r4,0(r2)
  8025cc:	08038941 	jmpi	803894 <_fwalk_reent>

008025d0 <fgetc>:
  8025d0:	defffd04 	addi	sp,sp,-12
  8025d4:	dc400115 	stw	r17,4(sp)
  8025d8:	04402074 	movhi	r17,129
  8025dc:	8c5ae304 	addi	r17,r17,27532
  8025e0:	88c00017 	ldw	r3,0(r17)
  8025e4:	dc000015 	stw	r16,0(sp)
  8025e8:	dfc00215 	stw	ra,8(sp)
  8025ec:	2021883a 	mov	r16,r4
  8025f0:	18000326 	beq	r3,zero,802600 <fgetc+0x30>
  8025f4:	18800e17 	ldw	r2,56(r3)
  8025f8:	1809883a 	mov	r4,r3
  8025fc:	10000e26 	beq	r2,zero,802638 <fgetc+0x68>
  802600:	80800117 	ldw	r2,4(r16)
  802604:	800b883a 	mov	r5,r16
  802608:	10bfffc4 	addi	r2,r2,-1
  80260c:	80800115 	stw	r2,4(r16)
  802610:	10000f16 	blt	r2,zero,802650 <fgetc+0x80>
  802614:	80c00017 	ldw	r3,0(r16)
  802618:	18800003 	ldbu	r2,0(r3)
  80261c:	18c00044 	addi	r3,r3,1
  802620:	80c00015 	stw	r3,0(r16)
  802624:	dfc00217 	ldw	ra,8(sp)
  802628:	dc400117 	ldw	r17,4(sp)
  80262c:	dc000017 	ldw	r16,0(sp)
  802630:	dec00304 	addi	sp,sp,12
  802634:	f800283a 	ret
  802638:	08028cc0 	call	8028cc <__sinit>
  80263c:	80800117 	ldw	r2,4(r16)
  802640:	800b883a 	mov	r5,r16
  802644:	10bfffc4 	addi	r2,r2,-1
  802648:	80800115 	stw	r2,4(r16)
  80264c:	103ff10e 	bge	r2,zero,802614 <fgetc+0x44>
  802650:	89000017 	ldw	r4,0(r17)
  802654:	dfc00217 	ldw	ra,8(sp)
  802658:	dc400117 	ldw	r17,4(sp)
  80265c:	dc000017 	ldw	r16,0(sp)
  802660:	dec00304 	addi	sp,sp,12
  802664:	080499c1 	jmpi	80499c <__srget_r>

00802668 <_fgetc_r>:
  802668:	defffd04 	addi	sp,sp,-12
  80266c:	dc400115 	stw	r17,4(sp)
  802670:	dc000015 	stw	r16,0(sp)
  802674:	dfc00215 	stw	ra,8(sp)
  802678:	2021883a 	mov	r16,r4
  80267c:	2823883a 	mov	r17,r5
  802680:	20000226 	beq	r4,zero,80268c <_fgetc_r+0x24>
  802684:	20800e17 	ldw	r2,56(r4)
  802688:	10000f26 	beq	r2,zero,8026c8 <_fgetc_r+0x60>
  80268c:	88800117 	ldw	r2,4(r17)
  802690:	8009883a 	mov	r4,r16
  802694:	880b883a 	mov	r5,r17
  802698:	10bfffc4 	addi	r2,r2,-1
  80269c:	88800115 	stw	r2,4(r17)
  8026a0:	10001016 	blt	r2,zero,8026e4 <_fgetc_r+0x7c>
  8026a4:	88c00017 	ldw	r3,0(r17)
  8026a8:	18800003 	ldbu	r2,0(r3)
  8026ac:	18c00044 	addi	r3,r3,1
  8026b0:	88c00015 	stw	r3,0(r17)
  8026b4:	dfc00217 	ldw	ra,8(sp)
  8026b8:	dc400117 	ldw	r17,4(sp)
  8026bc:	dc000017 	ldw	r16,0(sp)
  8026c0:	dec00304 	addi	sp,sp,12
  8026c4:	f800283a 	ret
  8026c8:	08028cc0 	call	8028cc <__sinit>
  8026cc:	88800117 	ldw	r2,4(r17)
  8026d0:	8009883a 	mov	r4,r16
  8026d4:	880b883a 	mov	r5,r17
  8026d8:	10bfffc4 	addi	r2,r2,-1
  8026dc:	88800115 	stw	r2,4(r17)
  8026e0:	103ff00e 	bge	r2,zero,8026a4 <_fgetc_r+0x3c>
  8026e4:	dfc00217 	ldw	ra,8(sp)
  8026e8:	dc400117 	ldw	r17,4(sp)
  8026ec:	dc000017 	ldw	r16,0(sp)
  8026f0:	dec00304 	addi	sp,sp,12
  8026f4:	080499c1 	jmpi	80499c <__srget_r>

008026f8 <_fgets_r>:
  8026f8:	defff804 	addi	sp,sp,-32
  8026fc:	00800044 	movi	r2,1
  802700:	dd800615 	stw	r22,24(sp)
  802704:	dd400515 	stw	r21,20(sp)
  802708:	dc400115 	stw	r17,4(sp)
  80270c:	dc000015 	stw	r16,0(sp)
  802710:	dfc00715 	stw	ra,28(sp)
  802714:	dd000415 	stw	r20,16(sp)
  802718:	dcc00315 	stw	r19,12(sp)
  80271c:	dc800215 	stw	r18,8(sp)
  802720:	3021883a 	mov	r16,r6
  802724:	282d883a 	mov	r22,r5
  802728:	3823883a 	mov	r17,r7
  80272c:	202b883a 	mov	r21,r4
  802730:	1180410e 	bge	r2,r6,802838 <_fgets_r+0x140>
  802734:	20000226 	beq	r4,zero,802740 <_fgets_r+0x48>
  802738:	20800e17 	ldw	r2,56(r4)
  80273c:	10002e26 	beq	r2,zero,8027f8 <_fgets_r+0x100>
  802740:	853fffc4 	addi	r20,r16,-1
  802744:	b027883a 	mov	r19,r22
  802748:	88800117 	ldw	r2,4(r17)
  80274c:	a809883a 	mov	r4,r21
  802750:	880b883a 	mov	r5,r17
  802754:	100d883a 	mov	r6,r2
  802758:	1000031e 	bne	r2,zero,802768 <_fgets_r+0x70>
  80275c:	08047bc0 	call	8047bc <__srefill_r>
  802760:	1000341e 	bne	r2,zero,802834 <_fgets_r+0x13c>
  802764:	89800117 	ldw	r6,4(r17)
  802768:	01400284 	movi	r5,10
  80276c:	3021883a 	mov	r16,r6
  802770:	8c800017 	ldw	r18,0(r17)
  802774:	a180012e 	bgeu	r20,r6,80277c <_fgets_r+0x84>
  802778:	a021883a 	mov	r16,r20
  80277c:	9009883a 	mov	r4,r18
  802780:	800d883a 	mov	r6,r16
  802784:	08043fc0 	call	8043fc <memchr>
  802788:	1007883a 	mov	r3,r2
  80278c:	900b883a 	mov	r5,r18
  802790:	9809883a 	mov	r4,r19
  802794:	800d883a 	mov	r6,r16
  802798:	1000191e 	bne	r2,zero,802800 <_fgets_r+0x108>
  80279c:	88800117 	ldw	r2,4(r17)
  8027a0:	88c00017 	ldw	r3,0(r17)
  8027a4:	9c27883a 	add	r19,r19,r16
  8027a8:	1405c83a 	sub	r2,r2,r16
  8027ac:	1c07883a 	add	r3,r3,r16
  8027b0:	88c00015 	stw	r3,0(r17)
  8027b4:	88800115 	stw	r2,4(r17)
  8027b8:	08044e00 	call	8044e0 <memcpy>
  8027bc:	a407c83a 	sub	r3,r20,r16
  8027c0:	1829883a 	mov	r20,r3
  8027c4:	183fe01e 	bne	r3,zero,802748 <_fgets_r+0x50>
  8027c8:	98000005 	stb	zero,0(r19)
  8027cc:	b005883a 	mov	r2,r22
  8027d0:	dfc00717 	ldw	ra,28(sp)
  8027d4:	dd800617 	ldw	r22,24(sp)
  8027d8:	dd400517 	ldw	r21,20(sp)
  8027dc:	dd000417 	ldw	r20,16(sp)
  8027e0:	dcc00317 	ldw	r19,12(sp)
  8027e4:	dc800217 	ldw	r18,8(sp)
  8027e8:	dc400117 	ldw	r17,4(sp)
  8027ec:	dc000017 	ldw	r16,0(sp)
  8027f0:	dec00804 	addi	sp,sp,32
  8027f4:	f800283a 	ret
  8027f8:	08028cc0 	call	8028cc <__sinit>
  8027fc:	003fd006 	br	802740 <_fgets_r+0x48>
  802800:	88800117 	ldw	r2,4(r17)
  802804:	18c00044 	addi	r3,r3,1
  802808:	1ca1c83a 	sub	r16,r3,r18
  80280c:	1405c83a 	sub	r2,r2,r16
  802810:	800d883a 	mov	r6,r16
  802814:	88c00015 	stw	r3,0(r17)
  802818:	88800115 	stw	r2,4(r17)
  80281c:	900b883a 	mov	r5,r18
  802820:	9809883a 	mov	r4,r19
  802824:	08044e00 	call	8044e0 <memcpy>
  802828:	9c21883a 	add	r16,r19,r16
  80282c:	80000005 	stb	zero,0(r16)
  802830:	003fe606 	br	8027cc <_fgets_r+0xd4>
  802834:	9dbfe41e 	bne	r19,r22,8027c8 <_fgets_r+0xd0>
  802838:	002d883a 	mov	r22,zero
  80283c:	003fe306 	br	8027cc <_fgets_r+0xd4>

00802840 <fgets>:
  802840:	00802074 	movhi	r2,129
  802844:	109ae304 	addi	r2,r2,27532
  802848:	2013883a 	mov	r9,r4
  80284c:	11000017 	ldw	r4,0(r2)
  802850:	2805883a 	mov	r2,r5
  802854:	300f883a 	mov	r7,r6
  802858:	480b883a 	mov	r5,r9
  80285c:	100d883a 	mov	r6,r2
  802860:	08026f81 	jmpi	8026f8 <_fgets_r>

00802864 <std>:
  802864:	00802034 	movhi	r2,128
  802868:	1092e004 	addi	r2,r2,19328
  80286c:	20800b15 	stw	r2,44(r4)
  802870:	00802034 	movhi	r2,128
  802874:	10931b04 	addi	r2,r2,19564
  802878:	20800815 	stw	r2,32(r4)
  80287c:	00c02034 	movhi	r3,128
  802880:	18d2fc04 	addi	r3,r3,19440
  802884:	00802034 	movhi	r2,128
  802888:	1092e204 	addi	r2,r2,19336
  80288c:	2140030d 	sth	r5,12(r4)
  802890:	2180038d 	sth	r6,14(r4)
  802894:	20c00915 	stw	r3,36(r4)
  802898:	20800a15 	stw	r2,40(r4)
  80289c:	20000015 	stw	zero,0(r4)
  8028a0:	20000115 	stw	zero,4(r4)
  8028a4:	20000215 	stw	zero,8(r4)
  8028a8:	20000415 	stw	zero,16(r4)
  8028ac:	20000515 	stw	zero,20(r4)
  8028b0:	20000615 	stw	zero,24(r4)
  8028b4:	21000715 	stw	r4,28(r4)
  8028b8:	f800283a 	ret

008028bc <__sfp_lock_acquire>:
  8028bc:	f800283a 	ret

008028c0 <__sfp_lock_release>:
  8028c0:	f800283a 	ret

008028c4 <__sinit_lock_acquire>:
  8028c4:	f800283a 	ret

008028c8 <__sinit_lock_release>:
  8028c8:	f800283a 	ret

008028cc <__sinit>:
  8028cc:	20800e17 	ldw	r2,56(r4)
  8028d0:	defffd04 	addi	sp,sp,-12
  8028d4:	dc400115 	stw	r17,4(sp)
  8028d8:	dc000015 	stw	r16,0(sp)
  8028dc:	dfc00215 	stw	ra,8(sp)
  8028e0:	04400044 	movi	r17,1
  8028e4:	01400104 	movi	r5,4
  8028e8:	000d883a 	mov	r6,zero
  8028ec:	2021883a 	mov	r16,r4
  8028f0:	2200bb04 	addi	r8,r4,748
  8028f4:	200f883a 	mov	r7,r4
  8028f8:	10000526 	beq	r2,zero,802910 <__sinit+0x44>
  8028fc:	dfc00217 	ldw	ra,8(sp)
  802900:	dc400117 	ldw	r17,4(sp)
  802904:	dc000017 	ldw	r16,0(sp)
  802908:	dec00304 	addi	sp,sp,12
  80290c:	f800283a 	ret
  802910:	21000117 	ldw	r4,4(r4)
  802914:	00802034 	movhi	r2,128
  802918:	108a6c04 	addi	r2,r2,10672
  80291c:	00c000c4 	movi	r3,3
  802920:	80800f15 	stw	r2,60(r16)
  802924:	80c0b915 	stw	r3,740(r16)
  802928:	8200ba15 	stw	r8,744(r16)
  80292c:	84400e15 	stw	r17,56(r16)
  802930:	8000b815 	stw	zero,736(r16)
  802934:	08028640 	call	802864 <std>
  802938:	81000217 	ldw	r4,8(r16)
  80293c:	880d883a 	mov	r6,r17
  802940:	800f883a 	mov	r7,r16
  802944:	01400284 	movi	r5,10
  802948:	08028640 	call	802864 <std>
  80294c:	81000317 	ldw	r4,12(r16)
  802950:	800f883a 	mov	r7,r16
  802954:	01400484 	movi	r5,18
  802958:	01800084 	movi	r6,2
  80295c:	dfc00217 	ldw	ra,8(sp)
  802960:	dc400117 	ldw	r17,4(sp)
  802964:	dc000017 	ldw	r16,0(sp)
  802968:	dec00304 	addi	sp,sp,12
  80296c:	08028641 	jmpi	802864 <std>

00802970 <__fp_lock>:
  802970:	0005883a 	mov	r2,zero
  802974:	f800283a 	ret

00802978 <__fp_unlock>:
  802978:	0005883a 	mov	r2,zero
  80297c:	f800283a 	ret

00802980 <__fp_unlock_all>:
  802980:	00802074 	movhi	r2,129
  802984:	109ae304 	addi	r2,r2,27532
  802988:	11000017 	ldw	r4,0(r2)
  80298c:	01402034 	movhi	r5,128
  802990:	294a5e04 	addi	r5,r5,10616
  802994:	080395c1 	jmpi	80395c <_fwalk>

00802998 <__fp_lock_all>:
  802998:	00802074 	movhi	r2,129
  80299c:	109ae304 	addi	r2,r2,27532
  8029a0:	11000017 	ldw	r4,0(r2)
  8029a4:	01402034 	movhi	r5,128
  8029a8:	294a5c04 	addi	r5,r5,10608
  8029ac:	080395c1 	jmpi	80395c <_fwalk>

008029b0 <_cleanup_r>:
  8029b0:	01402034 	movhi	r5,128
  8029b4:	2948e304 	addi	r5,r5,9100
  8029b8:	080395c1 	jmpi	80395c <_fwalk>

008029bc <_cleanup>:
  8029bc:	00802074 	movhi	r2,129
  8029c0:	109ae404 	addi	r2,r2,27536
  8029c4:	11000017 	ldw	r4,0(r2)
  8029c8:	08029b01 	jmpi	8029b0 <_cleanup_r>

008029cc <__sfmoreglue>:
  8029cc:	defffc04 	addi	sp,sp,-16
  8029d0:	dc000015 	stw	r16,0(sp)
  8029d4:	2821883a 	mov	r16,r5
  8029d8:	dc400115 	stw	r17,4(sp)
  8029dc:	01401704 	movi	r5,92
  8029e0:	2023883a 	mov	r17,r4
  8029e4:	8009883a 	mov	r4,r16
  8029e8:	dfc00315 	stw	ra,12(sp)
  8029ec:	dcc00215 	stw	r19,8(sp)
  8029f0:	0801c5c0 	call	801c5c <__mulsi3>
  8029f4:	11400304 	addi	r5,r2,12
  8029f8:	8809883a 	mov	r4,r17
  8029fc:	1027883a 	mov	r19,r2
  802a00:	0803cbc0 	call	803cbc <_malloc_r>
  802a04:	10c00304 	addi	r3,r2,12
  802a08:	1023883a 	mov	r17,r2
  802a0c:	1809883a 	mov	r4,r3
  802a10:	980d883a 	mov	r6,r19
  802a14:	000b883a 	mov	r5,zero
  802a18:	10000b26 	beq	r2,zero,802a48 <__sfmoreglue+0x7c>
  802a1c:	14000115 	stw	r16,4(r2)
  802a20:	10c00215 	stw	r3,8(r2)
  802a24:	10000015 	stw	zero,0(r2)
  802a28:	08045800 	call	804580 <memset>
  802a2c:	8805883a 	mov	r2,r17
  802a30:	dfc00317 	ldw	ra,12(sp)
  802a34:	dcc00217 	ldw	r19,8(sp)
  802a38:	dc400117 	ldw	r17,4(sp)
  802a3c:	dc000017 	ldw	r16,0(sp)
  802a40:	dec00404 	addi	sp,sp,16
  802a44:	f800283a 	ret
  802a48:	0023883a 	mov	r17,zero
  802a4c:	8805883a 	mov	r2,r17
  802a50:	dfc00317 	ldw	ra,12(sp)
  802a54:	dcc00217 	ldw	r19,8(sp)
  802a58:	dc400117 	ldw	r17,4(sp)
  802a5c:	dc000017 	ldw	r16,0(sp)
  802a60:	dec00404 	addi	sp,sp,16
  802a64:	f800283a 	ret

00802a68 <__sfp>:
  802a68:	defffd04 	addi	sp,sp,-12
  802a6c:	00802074 	movhi	r2,129
  802a70:	109ae404 	addi	r2,r2,27536
  802a74:	dc000015 	stw	r16,0(sp)
  802a78:	14000017 	ldw	r16,0(r2)
  802a7c:	dc400115 	stw	r17,4(sp)
  802a80:	dfc00215 	stw	ra,8(sp)
  802a84:	80800e17 	ldw	r2,56(r16)
  802a88:	2023883a 	mov	r17,r4
  802a8c:	10002626 	beq	r2,zero,802b28 <__sfp+0xc0>
  802a90:	8400b804 	addi	r16,r16,736
  802a94:	80800117 	ldw	r2,4(r16)
  802a98:	81000217 	ldw	r4,8(r16)
  802a9c:	10ffffc4 	addi	r3,r2,-1
  802aa0:	18000916 	blt	r3,zero,802ac8 <__sfp+0x60>
  802aa4:	2080030f 	ldh	r2,12(r4)
  802aa8:	10000b26 	beq	r2,zero,802ad8 <__sfp+0x70>
  802aac:	017fffc4 	movi	r5,-1
  802ab0:	00000206 	br	802abc <__sfp+0x54>
  802ab4:	2080030f 	ldh	r2,12(r4)
  802ab8:	10000726 	beq	r2,zero,802ad8 <__sfp+0x70>
  802abc:	18ffffc4 	addi	r3,r3,-1
  802ac0:	21001704 	addi	r4,r4,92
  802ac4:	197ffb1e 	bne	r3,r5,802ab4 <__sfp+0x4c>
  802ac8:	80800017 	ldw	r2,0(r16)
  802acc:	10001926 	beq	r2,zero,802b34 <__sfp+0xcc>
  802ad0:	1021883a 	mov	r16,r2
  802ad4:	003fef06 	br	802a94 <__sfp+0x2c>
  802ad8:	00bfffc4 	movi	r2,-1
  802adc:	00c00044 	movi	r3,1
  802ae0:	2080038d 	sth	r2,14(r4)
  802ae4:	20c0030d 	sth	r3,12(r4)
  802ae8:	20000015 	stw	zero,0(r4)
  802aec:	20000215 	stw	zero,8(r4)
  802af0:	20000115 	stw	zero,4(r4)
  802af4:	20000415 	stw	zero,16(r4)
  802af8:	20000515 	stw	zero,20(r4)
  802afc:	20000615 	stw	zero,24(r4)
  802b00:	20000c15 	stw	zero,48(r4)
  802b04:	20000d15 	stw	zero,52(r4)
  802b08:	20001115 	stw	zero,68(r4)
  802b0c:	20001215 	stw	zero,72(r4)
  802b10:	2005883a 	mov	r2,r4
  802b14:	dfc00217 	ldw	ra,8(sp)
  802b18:	dc400117 	ldw	r17,4(sp)
  802b1c:	dc000017 	ldw	r16,0(sp)
  802b20:	dec00304 	addi	sp,sp,12
  802b24:	f800283a 	ret
  802b28:	8009883a 	mov	r4,r16
  802b2c:	08028cc0 	call	8028cc <__sinit>
  802b30:	003fd706 	br	802a90 <__sfp+0x28>
  802b34:	8809883a 	mov	r4,r17
  802b38:	01400104 	movi	r5,4
  802b3c:	08029cc0 	call	8029cc <__sfmoreglue>
  802b40:	80800015 	stw	r2,0(r16)
  802b44:	103fe21e 	bne	r2,zero,802ad0 <__sfp+0x68>
  802b48:	00800304 	movi	r2,12
  802b4c:	0009883a 	mov	r4,zero
  802b50:	88800015 	stw	r2,0(r17)
  802b54:	003fee06 	br	802b10 <__sfp+0xa8>

00802b58 <_fopen_r>:
  802b58:	defffa04 	addi	sp,sp,-24
  802b5c:	dcc00415 	stw	r19,16(sp)
  802b60:	2827883a 	mov	r19,r5
  802b64:	300b883a 	mov	r5,r6
  802b68:	d80d883a 	mov	r6,sp
  802b6c:	dc800315 	stw	r18,12(sp)
  802b70:	dc400215 	stw	r17,8(sp)
  802b74:	dc000115 	stw	r16,4(sp)
  802b78:	dfc00515 	stw	ra,20(sp)
  802b7c:	2021883a 	mov	r16,r4
  802b80:	080a35c0 	call	80a35c <__sflags>
  802b84:	1025883a 	mov	r18,r2
  802b88:	8009883a 	mov	r4,r16
  802b8c:	0023883a 	mov	r17,zero
  802b90:	1000081e 	bne	r2,zero,802bb4 <_fopen_r+0x5c>
  802b94:	8805883a 	mov	r2,r17
  802b98:	dfc00517 	ldw	ra,20(sp)
  802b9c:	dcc00417 	ldw	r19,16(sp)
  802ba0:	dc800317 	ldw	r18,12(sp)
  802ba4:	dc400217 	ldw	r17,8(sp)
  802ba8:	dc000117 	ldw	r16,4(sp)
  802bac:	dec00604 	addi	sp,sp,24
  802bb0:	f800283a 	ret
  802bb4:	0802a680 	call	802a68 <__sfp>
  802bb8:	1023883a 	mov	r17,r2
  802bbc:	980b883a 	mov	r5,r19
  802bc0:	8009883a 	mov	r4,r16
  802bc4:	01c06d84 	movi	r7,438
  802bc8:	103ff226 	beq	r2,zero,802b94 <_fopen_r+0x3c>
  802bcc:	d9800017 	ldw	r6,0(sp)
  802bd0:	08046180 	call	804618 <_open_r>
  802bd4:	10001816 	blt	r2,zero,802c38 <_fopen_r+0xe0>
  802bd8:	00c02034 	movhi	r3,128
  802bdc:	18d2fc04 	addi	r3,r3,19440
  802be0:	923fffcc 	andi	r8,r18,65535
  802be4:	8880038d 	sth	r2,14(r17)
  802be8:	00802034 	movhi	r2,128
  802bec:	10931b04 	addi	r2,r2,19564
  802bf0:	88800815 	stw	r2,32(r17)
  802bf4:	88c00915 	stw	r3,36(r17)
  802bf8:	00802034 	movhi	r2,128
  802bfc:	1092e204 	addi	r2,r2,19336
  802c00:	00c02034 	movhi	r3,128
  802c04:	18d2e004 	addi	r3,r3,19328
  802c08:	4200400c 	andi	r8,r8,256
  802c0c:	8c80030d 	sth	r18,12(r17)
  802c10:	8009883a 	mov	r4,r16
  802c14:	880b883a 	mov	r5,r17
  802c18:	000d883a 	mov	r6,zero
  802c1c:	01c00084 	movi	r7,2
  802c20:	88800a15 	stw	r2,40(r17)
  802c24:	88c00b15 	stw	r3,44(r17)
  802c28:	8c400715 	stw	r17,28(r17)
  802c2c:	403fd926 	beq	r8,zero,802b94 <_fopen_r+0x3c>
  802c30:	08033c00 	call	8033c0 <_fseek_r>
  802c34:	003fd706 	br	802b94 <_fopen_r+0x3c>
  802c38:	08028bc0 	call	8028bc <__sfp_lock_acquire>
  802c3c:	8800030d 	sth	zero,12(r17)
  802c40:	08028c00 	call	8028c0 <__sfp_lock_release>
  802c44:	0023883a 	mov	r17,zero
  802c48:	003fd206 	br	802b94 <_fopen_r+0x3c>

00802c4c <fopen>:
  802c4c:	01802074 	movhi	r6,129
  802c50:	319ae304 	addi	r6,r6,27532
  802c54:	2007883a 	mov	r3,r4
  802c58:	31000017 	ldw	r4,0(r6)
  802c5c:	280d883a 	mov	r6,r5
  802c60:	180b883a 	mov	r5,r3
  802c64:	0802b581 	jmpi	802b58 <_fopen_r>

00802c68 <fprintf>:
  802c68:	defffc04 	addi	sp,sp,-16
  802c6c:	dfc00115 	stw	ra,4(sp)
  802c70:	d9800215 	stw	r6,8(sp)
  802c74:	d9c00315 	stw	r7,12(sp)
  802c78:	d8800204 	addi	r2,sp,8
  802c7c:	100d883a 	mov	r6,r2
  802c80:	d8800015 	stw	r2,0(sp)
  802c84:	0806fe00 	call	806fe0 <__vfprintf_internal>
  802c88:	dfc00117 	ldw	ra,4(sp)
  802c8c:	dec00404 	addi	sp,sp,16
  802c90:	f800283a 	ret

00802c94 <_fprintf_r>:
  802c94:	defffd04 	addi	sp,sp,-12
  802c98:	2807883a 	mov	r3,r5
  802c9c:	dfc00115 	stw	ra,4(sp)
  802ca0:	d9c00215 	stw	r7,8(sp)
  802ca4:	d8800204 	addi	r2,sp,8
  802ca8:	300b883a 	mov	r5,r6
  802cac:	1809883a 	mov	r4,r3
  802cb0:	100d883a 	mov	r6,r2
  802cb4:	d8800015 	stw	r2,0(sp)
  802cb8:	0806fe00 	call	806fe0 <__vfprintf_internal>
  802cbc:	dfc00117 	ldw	ra,4(sp)
  802cc0:	dec00304 	addi	sp,sp,12
  802cc4:	f800283a 	ret

00802cc8 <_fread_r>:
  802cc8:	defff504 	addi	sp,sp,-44
  802ccc:	dd800715 	stw	r22,28(sp)
  802cd0:	dc000115 	stw	r16,4(sp)
  802cd4:	202d883a 	mov	r22,r4
  802cd8:	2821883a 	mov	r16,r5
  802cdc:	3809883a 	mov	r4,r7
  802ce0:	300b883a 	mov	r5,r6
  802ce4:	df000915 	stw	fp,36(sp)
  802ce8:	ddc00815 	stw	r23,32(sp)
  802cec:	dcc00415 	stw	r19,16(sp)
  802cf0:	dfc00a15 	stw	ra,40(sp)
  802cf4:	dd400615 	stw	r21,24(sp)
  802cf8:	dd000515 	stw	r20,20(sp)
  802cfc:	dc800315 	stw	r18,12(sp)
  802d00:	dc400215 	stw	r17,8(sp)
  802d04:	d9800015 	stw	r6,0(sp)
  802d08:	3839883a 	mov	fp,r7
  802d0c:	0801c5c0 	call	801c5c <__mulsi3>
  802d10:	102f883a 	mov	r23,r2
  802d14:	dcc00b17 	ldw	r19,44(sp)
  802d18:	10005926 	beq	r2,zero,802e80 <_fread_r+0x1b8>
  802d1c:	b0000226 	beq	r22,zero,802d28 <_fread_r+0x60>
  802d20:	b0800e17 	ldw	r2,56(r22)
  802d24:	10005826 	beq	r2,zero,802e88 <_fread_r+0x1c0>
  802d28:	9c400117 	ldw	r17,4(r19)
  802d2c:	88005a16 	blt	r17,zero,802e98 <_fread_r+0x1d0>
  802d30:	9880030b 	ldhu	r2,12(r19)
  802d34:	8029883a 	mov	r20,r16
  802d38:	1080008c 	andi	r2,r2,2
  802d3c:	1000221e 	bne	r2,zero,802dc8 <_fread_r+0x100>
  802d40:	b825883a 	mov	r18,r23
  802d44:	00000106 	br	802d4c <_fread_r+0x84>
  802d48:	9c400117 	ldw	r17,4(r19)
  802d4c:	a009883a 	mov	r4,r20
  802d50:	880d883a 	mov	r6,r17
  802d54:	8c80552e 	bgeu	r17,r18,802eac <_fread_r+0x1e4>
  802d58:	99400017 	ldw	r5,0(r19)
  802d5c:	a469883a 	add	r20,r20,r17
  802d60:	9465c83a 	sub	r18,r18,r17
  802d64:	08044e00 	call	8044e0 <memcpy>
  802d68:	98800017 	ldw	r2,0(r19)
  802d6c:	b009883a 	mov	r4,r22
  802d70:	980b883a 	mov	r5,r19
  802d74:	1461883a 	add	r16,r2,r17
  802d78:	9c000015 	stw	r16,0(r19)
  802d7c:	08047bc0 	call	8047bc <__srefill_r>
  802d80:	103ff126 	beq	r2,zero,802d48 <_fread_r+0x80>
  802d84:	d9400017 	ldw	r5,0(sp)
  802d88:	bc89c83a 	sub	r4,r23,r18
  802d8c:	08113840 	call	811384 <__udivsi3>
  802d90:	1039883a 	mov	fp,r2
  802d94:	e005883a 	mov	r2,fp
  802d98:	dfc00a17 	ldw	ra,40(sp)
  802d9c:	df000917 	ldw	fp,36(sp)
  802da0:	ddc00817 	ldw	r23,32(sp)
  802da4:	dd800717 	ldw	r22,28(sp)
  802da8:	dd400617 	ldw	r21,24(sp)
  802dac:	dd000517 	ldw	r20,20(sp)
  802db0:	dcc00417 	ldw	r19,16(sp)
  802db4:	dc800317 	ldw	r18,12(sp)
  802db8:	dc400217 	ldw	r17,8(sp)
  802dbc:	dc000117 	ldw	r16,4(sp)
  802dc0:	dec00b04 	addi	sp,sp,44
  802dc4:	f800283a 	ret
  802dc8:	b825883a 	mov	r18,r23
  802dcc:	8dc03536 	bltu	r17,r23,802ea4 <_fread_r+0x1dc>
  802dd0:	99400017 	ldw	r5,0(r19)
  802dd4:	a009883a 	mov	r4,r20
  802dd8:	900d883a 	mov	r6,r18
  802ddc:	08044e00 	call	8044e0 <memcpy>
  802de0:	9c000017 	ldw	r16,0(r19)
  802de4:	98800117 	ldw	r2,4(r19)
  802de8:	99400c17 	ldw	r5,48(r19)
  802dec:	84a1883a 	add	r16,r16,r18
  802df0:	14a3c83a 	sub	r17,r2,r18
  802df4:	a4ab883a 	add	r21,r20,r18
  802df8:	9c400115 	stw	r17,4(r19)
  802dfc:	9c000015 	stw	r16,0(r19)
  802e00:	bca9c83a 	sub	r20,r23,r18
  802e04:	28000826 	beq	r5,zero,802e28 <_fread_r+0x160>
  802e08:	a03fe226 	beq	r20,zero,802d94 <_fread_r+0xcc>
  802e0c:	98801004 	addi	r2,r19,64
  802e10:	28800326 	beq	r5,r2,802e20 <_fread_r+0x158>
  802e14:	b009883a 	mov	r4,r22
  802e18:	08030400 	call	803040 <_free_r>
  802e1c:	9c000017 	ldw	r16,0(r19)
  802e20:	98000c15 	stw	zero,48(r19)
  802e24:	00000106 	br	802e2c <_fread_r+0x164>
  802e28:	a03fda26 	beq	r20,zero,802d94 <_fread_r+0xcc>
  802e2c:	9c800417 	ldw	r18,16(r19)
  802e30:	9c400517 	ldw	r17,20(r19)
  802e34:	9d400015 	stw	r21,0(r19)
  802e38:	9d400415 	stw	r21,16(r19)
  802e3c:	9d000515 	stw	r20,20(r19)
  802e40:	b009883a 	mov	r4,r22
  802e44:	980b883a 	mov	r5,r19
  802e48:	08047bc0 	call	8047bc <__srefill_r>
  802e4c:	98c00117 	ldw	r3,4(r19)
  802e50:	9c800415 	stw	r18,16(r19)
  802e54:	9c400515 	stw	r17,20(r19)
  802e58:	a8eb883a 	add	r21,r21,r3
  802e5c:	9c000015 	stw	r16,0(r19)
  802e60:	a0e9c83a 	sub	r20,r20,r3
  802e64:	98000115 	stw	zero,4(r19)
  802e68:	103fef26 	beq	r2,zero,802e28 <_fread_r+0x160>
  802e6c:	d9400017 	ldw	r5,0(sp)
  802e70:	bd09c83a 	sub	r4,r23,r20
  802e74:	08113840 	call	811384 <__udivsi3>
  802e78:	1039883a 	mov	fp,r2
  802e7c:	003fc506 	br	802d94 <_fread_r+0xcc>
  802e80:	0039883a 	mov	fp,zero
  802e84:	003fc306 	br	802d94 <_fread_r+0xcc>
  802e88:	b009883a 	mov	r4,r22
  802e8c:	08028cc0 	call	8028cc <__sinit>
  802e90:	9c400117 	ldw	r17,4(r19)
  802e94:	883fa60e 	bge	r17,zero,802d30 <_fread_r+0x68>
  802e98:	0023883a 	mov	r17,zero
  802e9c:	98000115 	stw	zero,4(r19)
  802ea0:	003fa306 	br	802d30 <_fread_r+0x68>
  802ea4:	8825883a 	mov	r18,r17
  802ea8:	003fc906 	br	802dd0 <_fread_r+0x108>
  802eac:	99400017 	ldw	r5,0(r19)
  802eb0:	900d883a 	mov	r6,r18
  802eb4:	08044e00 	call	8044e0 <memcpy>
  802eb8:	98c00117 	ldw	r3,4(r19)
  802ebc:	98800017 	ldw	r2,0(r19)
  802ec0:	1c87c83a 	sub	r3,r3,r18
  802ec4:	1485883a 	add	r2,r2,r18
  802ec8:	98800015 	stw	r2,0(r19)
  802ecc:	98c00115 	stw	r3,4(r19)
  802ed0:	003fb006 	br	802d94 <_fread_r+0xcc>

00802ed4 <fread>:
  802ed4:	00802074 	movhi	r2,129
  802ed8:	109ae304 	addi	r2,r2,27532
  802edc:	2017883a 	mov	r11,r4
  802ee0:	11000017 	ldw	r4,0(r2)
  802ee4:	defffe04 	addi	sp,sp,-8
  802ee8:	3013883a 	mov	r9,r6
  802eec:	2805883a 	mov	r2,r5
  802ef0:	d9c00015 	stw	r7,0(sp)
  802ef4:	580b883a 	mov	r5,r11
  802ef8:	100d883a 	mov	r6,r2
  802efc:	480f883a 	mov	r7,r9
  802f00:	dfc00115 	stw	ra,4(sp)
  802f04:	0802cc80 	call	802cc8 <_fread_r>
  802f08:	dfc00117 	ldw	ra,4(sp)
  802f0c:	dec00204 	addi	sp,sp,8
  802f10:	f800283a 	ret

00802f14 <_malloc_trim_r>:
  802f14:	defffb04 	addi	sp,sp,-20
  802f18:	dcc00315 	stw	r19,12(sp)
  802f1c:	04c02074 	movhi	r19,129
  802f20:	9cd54704 	addi	r19,r19,21788
  802f24:	dc800215 	stw	r18,8(sp)
  802f28:	dc400115 	stw	r17,4(sp)
  802f2c:	dc000015 	stw	r16,0(sp)
  802f30:	2823883a 	mov	r17,r5
  802f34:	2025883a 	mov	r18,r4
  802f38:	dfc00415 	stw	ra,16(sp)
  802f3c:	0811e4c0 	call	811e4c <__malloc_lock>
  802f40:	98800217 	ldw	r2,8(r19)
  802f44:	9009883a 	mov	r4,r18
  802f48:	000b883a 	mov	r5,zero
  802f4c:	10c00117 	ldw	r3,4(r2)
  802f50:	00bfff04 	movi	r2,-4
  802f54:	18a0703a 	and	r16,r3,r2
  802f58:	8463c83a 	sub	r17,r16,r17
  802f5c:	8c43fbc4 	addi	r17,r17,4079
  802f60:	8822d33a 	srli	r17,r17,12
  802f64:	0083ffc4 	movi	r2,4095
  802f68:	8c7fffc4 	addi	r17,r17,-1
  802f6c:	8822933a 	slli	r17,r17,12
  802f70:	1440060e 	bge	r2,r17,802f8c <_malloc_trim_r+0x78>
  802f74:	08049fc0 	call	8049fc <_sbrk_r>
  802f78:	98c00217 	ldw	r3,8(r19)
  802f7c:	9009883a 	mov	r4,r18
  802f80:	044bc83a 	sub	r5,zero,r17
  802f84:	80c7883a 	add	r3,r16,r3
  802f88:	10c00926 	beq	r2,r3,802fb0 <_malloc_trim_r+0x9c>
  802f8c:	0811e6c0 	call	811e6c <__malloc_unlock>
  802f90:	0005883a 	mov	r2,zero
  802f94:	dfc00417 	ldw	ra,16(sp)
  802f98:	dcc00317 	ldw	r19,12(sp)
  802f9c:	dc800217 	ldw	r18,8(sp)
  802fa0:	dc400117 	ldw	r17,4(sp)
  802fa4:	dc000017 	ldw	r16,0(sp)
  802fa8:	dec00504 	addi	sp,sp,20
  802fac:	f800283a 	ret
  802fb0:	9009883a 	mov	r4,r18
  802fb4:	08049fc0 	call	8049fc <_sbrk_r>
  802fb8:	844dc83a 	sub	r6,r16,r17
  802fbc:	00ffffc4 	movi	r3,-1
  802fc0:	9009883a 	mov	r4,r18
  802fc4:	000b883a 	mov	r5,zero
  802fc8:	01c020b4 	movhi	r7,130
  802fcc:	39e1d204 	addi	r7,r7,-30904
  802fd0:	31800054 	ori	r6,r6,1
  802fd4:	10c00926 	beq	r2,r3,802ffc <_malloc_trim_r+0xe8>
  802fd8:	38800017 	ldw	r2,0(r7)
  802fdc:	98c00217 	ldw	r3,8(r19)
  802fe0:	9009883a 	mov	r4,r18
  802fe4:	1445c83a 	sub	r2,r2,r17
  802fe8:	38800015 	stw	r2,0(r7)
  802fec:	19800115 	stw	r6,4(r3)
  802ff0:	0811e6c0 	call	811e6c <__malloc_unlock>
  802ff4:	00800044 	movi	r2,1
  802ff8:	003fe606 	br	802f94 <_malloc_trim_r+0x80>
  802ffc:	08049fc0 	call	8049fc <_sbrk_r>
  803000:	99800217 	ldw	r6,8(r19)
  803004:	100f883a 	mov	r7,r2
  803008:	9009883a 	mov	r4,r18
  80300c:	1187c83a 	sub	r3,r2,r6
  803010:	008003c4 	movi	r2,15
  803014:	19400054 	ori	r5,r3,1
  803018:	10ffdc0e 	bge	r2,r3,802f8c <_malloc_trim_r+0x78>
  80301c:	00802074 	movhi	r2,129
  803020:	109ae604 	addi	r2,r2,27544
  803024:	10c00017 	ldw	r3,0(r2)
  803028:	008020b4 	movhi	r2,130
  80302c:	10a1d204 	addi	r2,r2,-30904
  803030:	31400115 	stw	r5,4(r6)
  803034:	38c7c83a 	sub	r3,r7,r3
  803038:	10c00015 	stw	r3,0(r2)
  80303c:	003fd306 	br	802f8c <_malloc_trim_r+0x78>

00803040 <_free_r>:
  803040:	defffd04 	addi	sp,sp,-12
  803044:	dc400115 	stw	r17,4(sp)
  803048:	dc000015 	stw	r16,0(sp)
  80304c:	dfc00215 	stw	ra,8(sp)
  803050:	2821883a 	mov	r16,r5
  803054:	2023883a 	mov	r17,r4
  803058:	28005a26 	beq	r5,zero,8031c4 <_free_r+0x184>
  80305c:	0811e4c0 	call	811e4c <__malloc_lock>
  803060:	823ffe04 	addi	r8,r16,-8
  803064:	41400117 	ldw	r5,4(r8)
  803068:	00bfff84 	movi	r2,-2
  80306c:	02802074 	movhi	r10,129
  803070:	52954704 	addi	r10,r10,21788
  803074:	288e703a 	and	r7,r5,r2
  803078:	41cd883a 	add	r6,r8,r7
  80307c:	30c00117 	ldw	r3,4(r6)
  803080:	51000217 	ldw	r4,8(r10)
  803084:	00bfff04 	movi	r2,-4
  803088:	1892703a 	and	r9,r3,r2
  80308c:	5017883a 	mov	r11,r10
  803090:	31006726 	beq	r6,r4,803230 <_free_r+0x1f0>
  803094:	2880004c 	andi	r2,r5,1
  803098:	1005003a 	cmpeq	r2,r2,zero
  80309c:	32400115 	stw	r9,4(r6)
  8030a0:	10001a1e 	bne	r2,zero,80310c <_free_r+0xcc>
  8030a4:	000b883a 	mov	r5,zero
  8030a8:	3247883a 	add	r3,r6,r9
  8030ac:	18800117 	ldw	r2,4(r3)
  8030b0:	1080004c 	andi	r2,r2,1
  8030b4:	1000231e 	bne	r2,zero,803144 <_free_r+0x104>
  8030b8:	280ac03a 	cmpne	r5,r5,zero
  8030bc:	3a4f883a 	add	r7,r7,r9
  8030c0:	2800451e 	bne	r5,zero,8031d8 <_free_r+0x198>
  8030c4:	31000217 	ldw	r4,8(r6)
  8030c8:	00802074 	movhi	r2,129
  8030cc:	10954904 	addi	r2,r2,21796
  8030d0:	20807b26 	beq	r4,r2,8032c0 <_free_r+0x280>
  8030d4:	30800317 	ldw	r2,12(r6)
  8030d8:	3a07883a 	add	r3,r7,r8
  8030dc:	19c00015 	stw	r7,0(r3)
  8030e0:	11000215 	stw	r4,8(r2)
  8030e4:	20800315 	stw	r2,12(r4)
  8030e8:	38800054 	ori	r2,r7,1
  8030ec:	40800115 	stw	r2,4(r8)
  8030f0:	28001a26 	beq	r5,zero,80315c <_free_r+0x11c>
  8030f4:	8809883a 	mov	r4,r17
  8030f8:	dfc00217 	ldw	ra,8(sp)
  8030fc:	dc400117 	ldw	r17,4(sp)
  803100:	dc000017 	ldw	r16,0(sp)
  803104:	dec00304 	addi	sp,sp,12
  803108:	0811e6c1 	jmpi	811e6c <__malloc_unlock>
  80310c:	80bffe17 	ldw	r2,-8(r16)
  803110:	50c00204 	addi	r3,r10,8
  803114:	4091c83a 	sub	r8,r8,r2
  803118:	41000217 	ldw	r4,8(r8)
  80311c:	388f883a 	add	r7,r7,r2
  803120:	20c06126 	beq	r4,r3,8032a8 <_free_r+0x268>
  803124:	40800317 	ldw	r2,12(r8)
  803128:	3247883a 	add	r3,r6,r9
  80312c:	000b883a 	mov	r5,zero
  803130:	11000215 	stw	r4,8(r2)
  803134:	20800315 	stw	r2,12(r4)
  803138:	18800117 	ldw	r2,4(r3)
  80313c:	1080004c 	andi	r2,r2,1
  803140:	103fdd26 	beq	r2,zero,8030b8 <_free_r+0x78>
  803144:	38800054 	ori	r2,r7,1
  803148:	3a07883a 	add	r3,r7,r8
  80314c:	280ac03a 	cmpne	r5,r5,zero
  803150:	40800115 	stw	r2,4(r8)
  803154:	19c00015 	stw	r7,0(r3)
  803158:	283fe61e 	bne	r5,zero,8030f4 <_free_r+0xb4>
  80315c:	00807fc4 	movi	r2,511
  803160:	11c01f2e 	bgeu	r2,r7,8031e0 <_free_r+0x1a0>
  803164:	3806d27a 	srli	r3,r7,9
  803168:	1800481e 	bne	r3,zero,80328c <_free_r+0x24c>
  80316c:	3804d0fa 	srli	r2,r7,3
  803170:	100690fa 	slli	r3,r2,3
  803174:	1acd883a 	add	r6,r3,r11
  803178:	31400217 	ldw	r5,8(r6)
  80317c:	31405926 	beq	r6,r5,8032e4 <_free_r+0x2a4>
  803180:	28800117 	ldw	r2,4(r5)
  803184:	00ffff04 	movi	r3,-4
  803188:	10c4703a 	and	r2,r2,r3
  80318c:	3880022e 	bgeu	r7,r2,803198 <_free_r+0x158>
  803190:	29400217 	ldw	r5,8(r5)
  803194:	317ffa1e 	bne	r6,r5,803180 <_free_r+0x140>
  803198:	29800317 	ldw	r6,12(r5)
  80319c:	41800315 	stw	r6,12(r8)
  8031a0:	41400215 	stw	r5,8(r8)
  8031a4:	8809883a 	mov	r4,r17
  8031a8:	2a000315 	stw	r8,12(r5)
  8031ac:	32000215 	stw	r8,8(r6)
  8031b0:	dfc00217 	ldw	ra,8(sp)
  8031b4:	dc400117 	ldw	r17,4(sp)
  8031b8:	dc000017 	ldw	r16,0(sp)
  8031bc:	dec00304 	addi	sp,sp,12
  8031c0:	0811e6c1 	jmpi	811e6c <__malloc_unlock>
  8031c4:	dfc00217 	ldw	ra,8(sp)
  8031c8:	dc400117 	ldw	r17,4(sp)
  8031cc:	dc000017 	ldw	r16,0(sp)
  8031d0:	dec00304 	addi	sp,sp,12
  8031d4:	f800283a 	ret
  8031d8:	31000217 	ldw	r4,8(r6)
  8031dc:	003fbd06 	br	8030d4 <_free_r+0x94>
  8031e0:	3806d0fa 	srli	r3,r7,3
  8031e4:	00800044 	movi	r2,1
  8031e8:	51400117 	ldw	r5,4(r10)
  8031ec:	180890fa 	slli	r4,r3,3
  8031f0:	1807d0ba 	srai	r3,r3,2
  8031f4:	22c9883a 	add	r4,r4,r11
  8031f8:	21800217 	ldw	r6,8(r4)
  8031fc:	10c4983a 	sll	r2,r2,r3
  803200:	41000315 	stw	r4,12(r8)
  803204:	41800215 	stw	r6,8(r8)
  803208:	288ab03a 	or	r5,r5,r2
  80320c:	22000215 	stw	r8,8(r4)
  803210:	8809883a 	mov	r4,r17
  803214:	51400115 	stw	r5,4(r10)
  803218:	32000315 	stw	r8,12(r6)
  80321c:	dfc00217 	ldw	ra,8(sp)
  803220:	dc400117 	ldw	r17,4(sp)
  803224:	dc000017 	ldw	r16,0(sp)
  803228:	dec00304 	addi	sp,sp,12
  80322c:	0811e6c1 	jmpi	811e6c <__malloc_unlock>
  803230:	2880004c 	andi	r2,r5,1
  803234:	3a4d883a 	add	r6,r7,r9
  803238:	1000071e 	bne	r2,zero,803258 <_free_r+0x218>
  80323c:	80bffe17 	ldw	r2,-8(r16)
  803240:	4091c83a 	sub	r8,r8,r2
  803244:	41000317 	ldw	r4,12(r8)
  803248:	40c00217 	ldw	r3,8(r8)
  80324c:	308d883a 	add	r6,r6,r2
  803250:	20c00215 	stw	r3,8(r4)
  803254:	19000315 	stw	r4,12(r3)
  803258:	00802074 	movhi	r2,129
  80325c:	109ae504 	addi	r2,r2,27540
  803260:	11000017 	ldw	r4,0(r2)
  803264:	30c00054 	ori	r3,r6,1
  803268:	52000215 	stw	r8,8(r10)
  80326c:	40c00115 	stw	r3,4(r8)
  803270:	313fa036 	bltu	r6,r4,8030f4 <_free_r+0xb4>
  803274:	008020b4 	movhi	r2,130
  803278:	10a1c404 	addi	r2,r2,-30960
  80327c:	11400017 	ldw	r5,0(r2)
  803280:	8809883a 	mov	r4,r17
  803284:	0802f140 	call	802f14 <_malloc_trim_r>
  803288:	003f9a06 	br	8030f4 <_free_r+0xb4>
  80328c:	00800104 	movi	r2,4
  803290:	10c0072e 	bgeu	r2,r3,8032b0 <_free_r+0x270>
  803294:	00800504 	movi	r2,20
  803298:	10c01936 	bltu	r2,r3,803300 <_free_r+0x2c0>
  80329c:	188016c4 	addi	r2,r3,91
  8032a0:	100690fa 	slli	r3,r2,3
  8032a4:	003fb306 	br	803174 <_free_r+0x134>
  8032a8:	01400044 	movi	r5,1
  8032ac:	003f7e06 	br	8030a8 <_free_r+0x68>
  8032b0:	3804d1ba 	srli	r2,r7,6
  8032b4:	10800e04 	addi	r2,r2,56
  8032b8:	100690fa 	slli	r3,r2,3
  8032bc:	003fad06 	br	803174 <_free_r+0x134>
  8032c0:	22000315 	stw	r8,12(r4)
  8032c4:	22000215 	stw	r8,8(r4)
  8032c8:	3a05883a 	add	r2,r7,r8
  8032cc:	38c00054 	ori	r3,r7,1
  8032d0:	11c00015 	stw	r7,0(r2)
  8032d4:	41000215 	stw	r4,8(r8)
  8032d8:	40c00115 	stw	r3,4(r8)
  8032dc:	41000315 	stw	r4,12(r8)
  8032e0:	003f8406 	br	8030f4 <_free_r+0xb4>
  8032e4:	1005d0ba 	srai	r2,r2,2
  8032e8:	00c00044 	movi	r3,1
  8032ec:	51000117 	ldw	r4,4(r10)
  8032f0:	1886983a 	sll	r3,r3,r2
  8032f4:	20c8b03a 	or	r4,r4,r3
  8032f8:	51000115 	stw	r4,4(r10)
  8032fc:	003fa706 	br	80319c <_free_r+0x15c>
  803300:	00801504 	movi	r2,84
  803304:	10c00436 	bltu	r2,r3,803318 <_free_r+0x2d8>
  803308:	3804d33a 	srli	r2,r7,12
  80330c:	10801b84 	addi	r2,r2,110
  803310:	100690fa 	slli	r3,r2,3
  803314:	003f9706 	br	803174 <_free_r+0x134>
  803318:	00805504 	movi	r2,340
  80331c:	10c00436 	bltu	r2,r3,803330 <_free_r+0x2f0>
  803320:	3804d3fa 	srli	r2,r7,15
  803324:	10801dc4 	addi	r2,r2,119
  803328:	100690fa 	slli	r3,r2,3
  80332c:	003f9106 	br	803174 <_free_r+0x134>
  803330:	00815504 	movi	r2,1364
  803334:	10c0032e 	bgeu	r2,r3,803344 <_free_r+0x304>
  803338:	00801f84 	movi	r2,126
  80333c:	00c0fc04 	movi	r3,1008
  803340:	003f8c06 	br	803174 <_free_r+0x134>
  803344:	3804d4ba 	srli	r2,r7,18
  803348:	10801f04 	addi	r2,r2,124
  80334c:	100690fa 	slli	r3,r2,3
  803350:	003f8806 	br	803174 <_free_r+0x134>

00803354 <_fscanf_r>:
  803354:	defffd04 	addi	sp,sp,-12
  803358:	dfc00115 	stw	ra,4(sp)
  80335c:	d9c00215 	stw	r7,8(sp)
  803360:	d8800204 	addi	r2,sp,8
  803364:	100f883a 	mov	r7,r2
  803368:	d8800015 	stw	r2,0(sp)
  80336c:	08070040 	call	807004 <__svfscanf_r>
  803370:	dfc00117 	ldw	ra,4(sp)
  803374:	dec00304 	addi	sp,sp,12
  803378:	f800283a 	ret

0080337c <fscanf>:
  80337c:	defffc04 	addi	sp,sp,-16
  803380:	2007883a 	mov	r3,r4
  803384:	dfc00115 	stw	ra,4(sp)
  803388:	d9800215 	stw	r6,8(sp)
  80338c:	d9c00315 	stw	r7,12(sp)
  803390:	01802074 	movhi	r6,129
  803394:	319ae304 	addi	r6,r6,27532
  803398:	31000017 	ldw	r4,0(r6)
  80339c:	d8800204 	addi	r2,sp,8
  8033a0:	280d883a 	mov	r6,r5
  8033a4:	100f883a 	mov	r7,r2
  8033a8:	180b883a 	mov	r5,r3
  8033ac:	d8800015 	stw	r2,0(sp)
  8033b0:	08070040 	call	807004 <__svfscanf_r>
  8033b4:	dfc00117 	ldw	ra,4(sp)
  8033b8:	dec00404 	addi	sp,sp,16
  8033bc:	f800283a 	ret

008033c0 <_fseek_r>:
  8033c0:	deffe804 	addi	sp,sp,-96
  8033c4:	dd801515 	stw	r22,84(sp)
  8033c8:	dcc01215 	stw	r19,72(sp)
  8033cc:	dc801115 	stw	r18,68(sp)
  8033d0:	dc000f15 	stw	r16,60(sp)
  8033d4:	dfc01715 	stw	ra,92(sp)
  8033d8:	ddc01615 	stw	r23,88(sp)
  8033dc:	dd401415 	stw	r21,80(sp)
  8033e0:	dd001315 	stw	r20,76(sp)
  8033e4:	dc401015 	stw	r17,64(sp)
  8033e8:	2025883a 	mov	r18,r4
  8033ec:	2821883a 	mov	r16,r5
  8033f0:	302d883a 	mov	r22,r6
  8033f4:	3827883a 	mov	r19,r7
  8033f8:	20000226 	beq	r4,zero,803404 <_fseek_r+0x44>
  8033fc:	20800e17 	ldw	r2,56(r4)
  803400:	10007826 	beq	r2,zero,8035e4 <_fseek_r+0x224>
  803404:	8080030b 	ldhu	r2,12(r16)
  803408:	00c04204 	movi	r3,264
  80340c:	1080420c 	andi	r2,r2,264
  803410:	10c07926 	beq	r2,r3,8035f8 <_fseek_r+0x238>
  803414:	85400a17 	ldw	r21,40(r16)
  803418:	a800ea26 	beq	r21,zero,8037c4 <_fseek_r+0x404>
  80341c:	00800044 	movi	r2,1
  803420:	98805f26 	beq	r19,r2,8035a0 <_fseek_r+0x1e0>
  803424:	00800084 	movi	r2,2
  803428:	98801026 	beq	r19,r2,80346c <_fseek_r+0xac>
  80342c:	98000f26 	beq	r19,zero,80346c <_fseek_r+0xac>
  803430:	00800584 	movi	r2,22
  803434:	013fffc4 	movi	r4,-1
  803438:	90800015 	stw	r2,0(r18)
  80343c:	2005883a 	mov	r2,r4
  803440:	dfc01717 	ldw	ra,92(sp)
  803444:	ddc01617 	ldw	r23,88(sp)
  803448:	dd801517 	ldw	r22,84(sp)
  80344c:	dd401417 	ldw	r21,80(sp)
  803450:	dd001317 	ldw	r20,76(sp)
  803454:	dcc01217 	ldw	r19,72(sp)
  803458:	dc801117 	ldw	r18,68(sp)
  80345c:	dc401017 	ldw	r17,64(sp)
  803460:	dc000f17 	ldw	r16,60(sp)
  803464:	dec01804 	addi	sp,sp,96
  803468:	f800283a 	ret
  80346c:	81800417 	ldw	r6,16(r16)
  803470:	0023883a 	mov	r17,zero
  803474:	002f883a 	mov	r23,zero
  803478:	3000a626 	beq	r6,zero,803714 <_fseek_r+0x354>
  80347c:	8100030b 	ldhu	r4,12(r16)
  803480:	2082068c 	andi	r2,r4,2074
  803484:	1000081e 	bne	r2,zero,8034a8 <_fseek_r+0xe8>
  803488:	2081000c 	andi	r2,r4,1024
  80348c:	10001b1e 	bne	r2,zero,8034fc <_fseek_r+0x13c>
  803490:	00802034 	movhi	r2,128
  803494:	1092e204 	addi	r2,r2,19336
  803498:	a8800926 	beq	r21,r2,8034c0 <_fseek_r+0x100>
  80349c:	8080030b 	ldhu	r2,12(r16)
  8034a0:	10820014 	ori	r2,r2,2048
  8034a4:	8080030d 	sth	r2,12(r16)
  8034a8:	9009883a 	mov	r4,r18
  8034ac:	800b883a 	mov	r5,r16
  8034b0:	08023a00 	call	8023a0 <_fflush_r>
  8034b4:	1000a326 	beq	r2,zero,803744 <_fseek_r+0x384>
  8034b8:	013fffc4 	movi	r4,-1
  8034bc:	003fdf06 	br	80343c <_fseek_r+0x7c>
  8034c0:	8140038f 	ldh	r5,14(r16)
  8034c4:	283ff516 	blt	r5,zero,80349c <_fseek_r+0xdc>
  8034c8:	9009883a 	mov	r4,r18
  8034cc:	d80d883a 	mov	r6,sp
  8034d0:	08038200 	call	803820 <_fstat_r>
  8034d4:	103ff11e 	bne	r2,zero,80349c <_fseek_r+0xdc>
  8034d8:	d8800117 	ldw	r2,4(sp)
  8034dc:	00e00014 	movui	r3,32768
  8034e0:	10bc000c 	andi	r2,r2,61440
  8034e4:	10ffed1e 	bne	r2,r3,80349c <_fseek_r+0xdc>
  8034e8:	80c0030b 	ldhu	r3,12(r16)
  8034ec:	00810004 	movi	r2,1024
  8034f0:	80801315 	stw	r2,76(r16)
  8034f4:	1886b03a 	or	r3,r3,r2
  8034f8:	80c0030d 	sth	r3,12(r16)
  8034fc:	9800701e 	bne	r19,zero,8036c0 <_fseek_r+0x300>
  803500:	b029883a 	mov	r20,r22
  803504:	b804c03a 	cmpne	r2,r23,zero
  803508:	10003f1e 	bne	r2,zero,803608 <_fseek_r+0x248>
  80350c:	8100030b 	ldhu	r4,12(r16)
  803510:	2084000c 	andi	r2,r4,4096
  803514:	1000a126 	beq	r2,zero,80379c <_fseek_r+0x3dc>
  803518:	81801417 	ldw	r6,80(r16)
  80351c:	80c00117 	ldw	r3,4(r16)
  803520:	81400c17 	ldw	r5,48(r16)
  803524:	30e3c83a 	sub	r17,r6,r3
  803528:	28008026 	beq	r5,zero,80372c <_fseek_r+0x36c>
  80352c:	81c00f17 	ldw	r7,60(r16)
  803530:	89e3c83a 	sub	r17,r17,r7
  803534:	80800e17 	ldw	r2,56(r16)
  803538:	81800417 	ldw	r6,16(r16)
  80353c:	88c7883a 	add	r3,r17,r3
  803540:	1185c83a 	sub	r2,r2,r6
  803544:	11cf883a 	add	r7,r2,r7
  803548:	1887c83a 	sub	r3,r3,r2
  80354c:	2088000c 	andi	r2,r4,8192
  803550:	10003e1e 	bne	r2,zero,80364c <_fseek_r+0x28c>
  803554:	a0c03d16 	blt	r20,r3,80364c <_fseek_r+0x28c>
  803558:	38c5883a 	add	r2,r7,r3
  80355c:	a0803b2e 	bgeu	r20,r2,80364c <_fseek_r+0x28c>
  803560:	a0c5c83a 	sub	r2,r20,r3
  803564:	3887c83a 	sub	r3,r7,r2
  803568:	3085883a 	add	r2,r6,r2
  80356c:	80800015 	stw	r2,0(r16)
  803570:	80c00115 	stw	r3,4(r16)
  803574:	28000526 	beq	r5,zero,80358c <_fseek_r+0x1cc>
  803578:	80801004 	addi	r2,r16,64
  80357c:	28800226 	beq	r5,r2,803588 <_fseek_r+0x1c8>
  803580:	9009883a 	mov	r4,r18
  803584:	08030400 	call	803040 <_free_r>
  803588:	80000c15 	stw	zero,48(r16)
  80358c:	8080030b 	ldhu	r2,12(r16)
  803590:	0009883a 	mov	r4,zero
  803594:	10bff7cc 	andi	r2,r2,65503
  803598:	8080030d 	sth	r2,12(r16)
  80359c:	003fa706 	br	80343c <_fseek_r+0x7c>
  8035a0:	9009883a 	mov	r4,r18
  8035a4:	800b883a 	mov	r5,r16
  8035a8:	08023a00 	call	8023a0 <_fflush_r>
  8035ac:	8100030b 	ldhu	r4,12(r16)
  8035b0:	2084000c 	andi	r2,r4,4096
  8035b4:	10008726 	beq	r2,zero,8037d4 <_fseek_r+0x414>
  8035b8:	84401417 	ldw	r17,80(r16)
  8035bc:	2080010c 	andi	r2,r4,4
  8035c0:	1000171e 	bne	r2,zero,803620 <_fseek_r+0x260>
  8035c4:	2080020c 	andi	r2,r4,8
  8035c8:	10003b26 	beq	r2,zero,8036b8 <_fseek_r+0x2f8>
  8035cc:	80800017 	ldw	r2,0(r16)
  8035d0:	10003926 	beq	r2,zero,8036b8 <_fseek_r+0x2f8>
  8035d4:	81800417 	ldw	r6,16(r16)
  8035d8:	1185c83a 	sub	r2,r2,r6
  8035dc:	88a3883a 	add	r17,r17,r2
  8035e0:	00001606 	br	80363c <_fseek_r+0x27c>
  8035e4:	08028cc0 	call	8028cc <__sinit>
  8035e8:	8080030b 	ldhu	r2,12(r16)
  8035ec:	00c04204 	movi	r3,264
  8035f0:	1080420c 	andi	r2,r2,264
  8035f4:	10ff871e 	bne	r2,r3,803414 <_fseek_r+0x54>
  8035f8:	9009883a 	mov	r4,r18
  8035fc:	800b883a 	mov	r5,r16
  803600:	08023a00 	call	8023a0 <_fflush_r>
  803604:	003f8306 	br	803414 <_fseek_r+0x54>
  803608:	81400c17 	ldw	r5,48(r16)
  80360c:	28004526 	beq	r5,zero,803724 <_fseek_r+0x364>
  803610:	8100030b 	ldhu	r4,12(r16)
  803614:	80c00117 	ldw	r3,4(r16)
  803618:	81c00f17 	ldw	r7,60(r16)
  80361c:	003fc506 	br	803534 <_fseek_r+0x174>
  803620:	80c00117 	ldw	r3,4(r16)
  803624:	80800c17 	ldw	r2,48(r16)
  803628:	88e3c83a 	sub	r17,r17,r3
  80362c:	10002226 	beq	r2,zero,8036b8 <_fseek_r+0x2f8>
  803630:	81c00f17 	ldw	r7,60(r16)
  803634:	81800417 	ldw	r6,16(r16)
  803638:	89e3c83a 	sub	r17,r17,r7
  80363c:	b46d883a 	add	r22,r22,r17
  803640:	0027883a 	mov	r19,zero
  803644:	05c00044 	movi	r23,1
  803648:	003f8b06 	br	803478 <_fseek_r+0xb8>
  80364c:	80801317 	ldw	r2,76(r16)
  803650:	81400717 	ldw	r5,28(r16)
  803654:	9009883a 	mov	r4,r18
  803658:	0085c83a 	sub	r2,zero,r2
  80365c:	a0a2703a 	and	r17,r20,r2
  803660:	880d883a 	mov	r6,r17
  803664:	000f883a 	mov	r7,zero
  803668:	a83ee83a 	callr	r21
  80366c:	00ffffc4 	movi	r3,-1
  803670:	10ff8d26 	beq	r2,r3,8034a8 <_fseek_r+0xe8>
  803674:	80800417 	ldw	r2,16(r16)
  803678:	81400c17 	ldw	r5,48(r16)
  80367c:	80000115 	stw	zero,4(r16)
  803680:	80800015 	stw	r2,0(r16)
  803684:	28000526 	beq	r5,zero,80369c <_fseek_r+0x2dc>
  803688:	80801004 	addi	r2,r16,64
  80368c:	28800226 	beq	r5,r2,803698 <_fseek_r+0x2d8>
  803690:	9009883a 	mov	r4,r18
  803694:	08030400 	call	803040 <_free_r>
  803698:	80000c15 	stw	zero,48(r16)
  80369c:	8080030b 	ldhu	r2,12(r16)
  8036a0:	a463c83a 	sub	r17,r20,r17
  8036a4:	10bff7cc 	andi	r2,r2,65503
  8036a8:	8080030d 	sth	r2,12(r16)
  8036ac:	88000c1e 	bne	r17,zero,8036e0 <_fseek_r+0x320>
  8036b0:	0009883a 	mov	r4,zero
  8036b4:	003f6106 	br	80343c <_fseek_r+0x7c>
  8036b8:	81800417 	ldw	r6,16(r16)
  8036bc:	003fdf06 	br	80363c <_fseek_r+0x27c>
  8036c0:	8140038f 	ldh	r5,14(r16)
  8036c4:	9009883a 	mov	r4,r18
  8036c8:	d80d883a 	mov	r6,sp
  8036cc:	08038200 	call	803820 <_fstat_r>
  8036d0:	103f751e 	bne	r2,zero,8034a8 <_fseek_r+0xe8>
  8036d4:	d8800417 	ldw	r2,16(sp)
  8036d8:	b0a9883a 	add	r20,r22,r2
  8036dc:	003f8906 	br	803504 <_fseek_r+0x144>
  8036e0:	9009883a 	mov	r4,r18
  8036e4:	800b883a 	mov	r5,r16
  8036e8:	08047bc0 	call	8047bc <__srefill_r>
  8036ec:	103f6e1e 	bne	r2,zero,8034a8 <_fseek_r+0xe8>
  8036f0:	80c00117 	ldw	r3,4(r16)
  8036f4:	1c7f6c36 	bltu	r3,r17,8034a8 <_fseek_r+0xe8>
  8036f8:	80800017 	ldw	r2,0(r16)
  8036fc:	1c47c83a 	sub	r3,r3,r17
  803700:	0009883a 	mov	r4,zero
  803704:	1445883a 	add	r2,r2,r17
  803708:	80c00115 	stw	r3,4(r16)
  80370c:	80800015 	stw	r2,0(r16)
  803710:	003f4a06 	br	80343c <_fseek_r+0x7c>
  803714:	9009883a 	mov	r4,r18
  803718:	800b883a 	mov	r5,r16
  80371c:	0803b000 	call	803b00 <__smakebuf_r>
  803720:	003f5606 	br	80347c <_fseek_r+0xbc>
  803724:	8100030b 	ldhu	r4,12(r16)
  803728:	80c00117 	ldw	r3,4(r16)
  80372c:	80800017 	ldw	r2,0(r16)
  803730:	81800417 	ldw	r6,16(r16)
  803734:	1185c83a 	sub	r2,r2,r6
  803738:	10cf883a 	add	r7,r2,r3
  80373c:	8887c83a 	sub	r3,r17,r2
  803740:	003f8206 	br	80354c <_fseek_r+0x18c>
  803744:	81400717 	ldw	r5,28(r16)
  803748:	b00d883a 	mov	r6,r22
  80374c:	980f883a 	mov	r7,r19
  803750:	9009883a 	mov	r4,r18
  803754:	a83ee83a 	callr	r21
  803758:	00ffffc4 	movi	r3,-1
  80375c:	10ff5626 	beq	r2,r3,8034b8 <_fseek_r+0xf8>
  803760:	81400c17 	ldw	r5,48(r16)
  803764:	28000526 	beq	r5,zero,80377c <_fseek_r+0x3bc>
  803768:	80801004 	addi	r2,r16,64
  80376c:	28800226 	beq	r5,r2,803778 <_fseek_r+0x3b8>
  803770:	9009883a 	mov	r4,r18
  803774:	08030400 	call	803040 <_free_r>
  803778:	80000c15 	stw	zero,48(r16)
  80377c:	8080030b 	ldhu	r2,12(r16)
  803780:	80c00417 	ldw	r3,16(r16)
  803784:	0009883a 	mov	r4,zero
  803788:	10bdf7cc 	andi	r2,r2,63455
  80378c:	8080030d 	sth	r2,12(r16)
  803790:	80c00015 	stw	r3,0(r16)
  803794:	80000115 	stw	zero,4(r16)
  803798:	003f2806 	br	80343c <_fseek_r+0x7c>
  80379c:	81400717 	ldw	r5,28(r16)
  8037a0:	000d883a 	mov	r6,zero
  8037a4:	9009883a 	mov	r4,r18
  8037a8:	01c00044 	movi	r7,1
  8037ac:	a83ee83a 	callr	r21
  8037b0:	100d883a 	mov	r6,r2
  8037b4:	00bfffc4 	movi	r2,-1
  8037b8:	30bf3b26 	beq	r6,r2,8034a8 <_fseek_r+0xe8>
  8037bc:	8100030b 	ldhu	r4,12(r16)
  8037c0:	003f5606 	br	80351c <_fseek_r+0x15c>
  8037c4:	00800744 	movi	r2,29
  8037c8:	013fffc4 	movi	r4,-1
  8037cc:	90800015 	stw	r2,0(r18)
  8037d0:	003f1a06 	br	80343c <_fseek_r+0x7c>
  8037d4:	81400717 	ldw	r5,28(r16)
  8037d8:	980f883a 	mov	r7,r19
  8037dc:	9009883a 	mov	r4,r18
  8037e0:	000d883a 	mov	r6,zero
  8037e4:	a83ee83a 	callr	r21
  8037e8:	1023883a 	mov	r17,r2
  8037ec:	00bfffc4 	movi	r2,-1
  8037f0:	88bf3126 	beq	r17,r2,8034b8 <_fseek_r+0xf8>
  8037f4:	8100030b 	ldhu	r4,12(r16)
  8037f8:	003f7006 	br	8035bc <_fseek_r+0x1fc>

008037fc <fseek>:
  8037fc:	00802074 	movhi	r2,129
  803800:	109ae304 	addi	r2,r2,27532
  803804:	2013883a 	mov	r9,r4
  803808:	11000017 	ldw	r4,0(r2)
  80380c:	2805883a 	mov	r2,r5
  803810:	300f883a 	mov	r7,r6
  803814:	480b883a 	mov	r5,r9
  803818:	100d883a 	mov	r6,r2
  80381c:	08033c01 	jmpi	8033c0 <_fseek_r>

00803820 <_fstat_r>:
  803820:	defffd04 	addi	sp,sp,-12
  803824:	dc000015 	stw	r16,0(sp)
  803828:	040020b4 	movhi	r16,130
  80382c:	8421c304 	addi	r16,r16,-30964
  803830:	dc400115 	stw	r17,4(sp)
  803834:	80000015 	stw	zero,0(r16)
  803838:	2023883a 	mov	r17,r4
  80383c:	2809883a 	mov	r4,r5
  803840:	300b883a 	mov	r5,r6
  803844:	dfc00215 	stw	ra,8(sp)
  803848:	08119440 	call	811944 <fstat>
  80384c:	1007883a 	mov	r3,r2
  803850:	00bfffc4 	movi	r2,-1
  803854:	18800626 	beq	r3,r2,803870 <_fstat_r+0x50>
  803858:	1805883a 	mov	r2,r3
  80385c:	dfc00217 	ldw	ra,8(sp)
  803860:	dc400117 	ldw	r17,4(sp)
  803864:	dc000017 	ldw	r16,0(sp)
  803868:	dec00304 	addi	sp,sp,12
  80386c:	f800283a 	ret
  803870:	80800017 	ldw	r2,0(r16)
  803874:	103ff826 	beq	r2,zero,803858 <_fstat_r+0x38>
  803878:	88800015 	stw	r2,0(r17)
  80387c:	1805883a 	mov	r2,r3
  803880:	dfc00217 	ldw	ra,8(sp)
  803884:	dc400117 	ldw	r17,4(sp)
  803888:	dc000017 	ldw	r16,0(sp)
  80388c:	dec00304 	addi	sp,sp,12
  803890:	f800283a 	ret

00803894 <_fwalk_reent>:
  803894:	defff704 	addi	sp,sp,-36
  803898:	dcc00315 	stw	r19,12(sp)
  80389c:	24c0b804 	addi	r19,r4,736
  8038a0:	dd800615 	stw	r22,24(sp)
  8038a4:	dd400515 	stw	r21,20(sp)
  8038a8:	dfc00815 	stw	ra,32(sp)
  8038ac:	ddc00715 	stw	r23,28(sp)
  8038b0:	dd000415 	stw	r20,16(sp)
  8038b4:	dc800215 	stw	r18,8(sp)
  8038b8:	dc400115 	stw	r17,4(sp)
  8038bc:	dc000015 	stw	r16,0(sp)
  8038c0:	202b883a 	mov	r21,r4
  8038c4:	282d883a 	mov	r22,r5
  8038c8:	08028bc0 	call	8028bc <__sfp_lock_acquire>
  8038cc:	98002126 	beq	r19,zero,803954 <_fwalk_reent+0xc0>
  8038d0:	002f883a 	mov	r23,zero
  8038d4:	9c800117 	ldw	r18,4(r19)
  8038d8:	9c000217 	ldw	r16,8(r19)
  8038dc:	90bfffc4 	addi	r2,r18,-1
  8038e0:	10000d16 	blt	r2,zero,803918 <_fwalk_reent+0x84>
  8038e4:	0023883a 	mov	r17,zero
  8038e8:	053fffc4 	movi	r20,-1
  8038ec:	8080030f 	ldh	r2,12(r16)
  8038f0:	8c400044 	addi	r17,r17,1
  8038f4:	10000626 	beq	r2,zero,803910 <_fwalk_reent+0x7c>
  8038f8:	8080038f 	ldh	r2,14(r16)
  8038fc:	800b883a 	mov	r5,r16
  803900:	a809883a 	mov	r4,r21
  803904:	15000226 	beq	r2,r20,803910 <_fwalk_reent+0x7c>
  803908:	b03ee83a 	callr	r22
  80390c:	b8aeb03a 	or	r23,r23,r2
  803910:	84001704 	addi	r16,r16,92
  803914:	947ff51e 	bne	r18,r17,8038ec <_fwalk_reent+0x58>
  803918:	9cc00017 	ldw	r19,0(r19)
  80391c:	983fed1e 	bne	r19,zero,8038d4 <_fwalk_reent+0x40>
  803920:	08028c00 	call	8028c0 <__sfp_lock_release>
  803924:	b805883a 	mov	r2,r23
  803928:	dfc00817 	ldw	ra,32(sp)
  80392c:	ddc00717 	ldw	r23,28(sp)
  803930:	dd800617 	ldw	r22,24(sp)
  803934:	dd400517 	ldw	r21,20(sp)
  803938:	dd000417 	ldw	r20,16(sp)
  80393c:	dcc00317 	ldw	r19,12(sp)
  803940:	dc800217 	ldw	r18,8(sp)
  803944:	dc400117 	ldw	r17,4(sp)
  803948:	dc000017 	ldw	r16,0(sp)
  80394c:	dec00904 	addi	sp,sp,36
  803950:	f800283a 	ret
  803954:	002f883a 	mov	r23,zero
  803958:	003ff106 	br	803920 <_fwalk_reent+0x8c>

0080395c <_fwalk>:
  80395c:	defff804 	addi	sp,sp,-32
  803960:	dcc00315 	stw	r19,12(sp)
  803964:	24c0b804 	addi	r19,r4,736
  803968:	dd400515 	stw	r21,20(sp)
  80396c:	dfc00715 	stw	ra,28(sp)
  803970:	dd800615 	stw	r22,24(sp)
  803974:	dd000415 	stw	r20,16(sp)
  803978:	dc800215 	stw	r18,8(sp)
  80397c:	dc400115 	stw	r17,4(sp)
  803980:	dc000015 	stw	r16,0(sp)
  803984:	282b883a 	mov	r21,r5
  803988:	08028bc0 	call	8028bc <__sfp_lock_acquire>
  80398c:	98001f26 	beq	r19,zero,803a0c <_fwalk+0xb0>
  803990:	002d883a 	mov	r22,zero
  803994:	9c800117 	ldw	r18,4(r19)
  803998:	9c000217 	ldw	r16,8(r19)
  80399c:	90bfffc4 	addi	r2,r18,-1
  8039a0:	10000c16 	blt	r2,zero,8039d4 <_fwalk+0x78>
  8039a4:	0023883a 	mov	r17,zero
  8039a8:	053fffc4 	movi	r20,-1
  8039ac:	8080030f 	ldh	r2,12(r16)
  8039b0:	8c400044 	addi	r17,r17,1
  8039b4:	10000526 	beq	r2,zero,8039cc <_fwalk+0x70>
  8039b8:	8080038f 	ldh	r2,14(r16)
  8039bc:	8009883a 	mov	r4,r16
  8039c0:	15000226 	beq	r2,r20,8039cc <_fwalk+0x70>
  8039c4:	a83ee83a 	callr	r21
  8039c8:	b0acb03a 	or	r22,r22,r2
  8039cc:	84001704 	addi	r16,r16,92
  8039d0:	947ff61e 	bne	r18,r17,8039ac <_fwalk+0x50>
  8039d4:	9cc00017 	ldw	r19,0(r19)
  8039d8:	983fee1e 	bne	r19,zero,803994 <_fwalk+0x38>
  8039dc:	08028c00 	call	8028c0 <__sfp_lock_release>
  8039e0:	b005883a 	mov	r2,r22
  8039e4:	dfc00717 	ldw	ra,28(sp)
  8039e8:	dd800617 	ldw	r22,24(sp)
  8039ec:	dd400517 	ldw	r21,20(sp)
  8039f0:	dd000417 	ldw	r20,16(sp)
  8039f4:	dcc00317 	ldw	r19,12(sp)
  8039f8:	dc800217 	ldw	r18,8(sp)
  8039fc:	dc400117 	ldw	r17,4(sp)
  803a00:	dc000017 	ldw	r16,0(sp)
  803a04:	dec00804 	addi	sp,sp,32
  803a08:	f800283a 	ret
  803a0c:	002d883a 	mov	r22,zero
  803a10:	003ff206 	br	8039dc <_fwalk+0x80>

00803a14 <_fwrite_r>:
  803a14:	defff604 	addi	sp,sp,-40
  803a18:	dc000515 	stw	r16,20(sp)
  803a1c:	d9400015 	stw	r5,0(sp)
  803a20:	2021883a 	mov	r16,r4
  803a24:	300b883a 	mov	r5,r6
  803a28:	3809883a 	mov	r4,r7
  803a2c:	dcc00815 	stw	r19,32(sp)
  803a30:	dc800715 	stw	r18,28(sp)
  803a34:	dc400615 	stw	r17,24(sp)
  803a38:	dfc00915 	stw	ra,36(sp)
  803a3c:	3825883a 	mov	r18,r7
  803a40:	3027883a 	mov	r19,r6
  803a44:	0801c5c0 	call	801c5c <__mulsi3>
  803a48:	1023883a 	mov	r17,r2
  803a4c:	00800044 	movi	r2,1
  803a50:	d8800315 	stw	r2,12(sp)
  803a54:	dc400115 	stw	r17,4(sp)
  803a58:	dc400415 	stw	r17,16(sp)
  803a5c:	dec00215 	stw	sp,8(sp)
  803a60:	80000326 	beq	r16,zero,803a70 <_fwrite_r+0x5c>
  803a64:	80800e17 	ldw	r2,56(r16)
  803a68:	8009883a 	mov	r4,r16
  803a6c:	10001226 	beq	r2,zero,803ab8 <_fwrite_r+0xa4>
  803a70:	d9400a17 	ldw	r5,40(sp)
  803a74:	8009883a 	mov	r4,r16
  803a78:	d9800204 	addi	r6,sp,8
  803a7c:	080a3fc0 	call	80a3fc <__sfvwrite_r>
  803a80:	980b883a 	mov	r5,r19
  803a84:	10000426 	beq	r2,zero,803a98 <_fwrite_r+0x84>
  803a88:	d9000417 	ldw	r4,16(sp)
  803a8c:	8909c83a 	sub	r4,r17,r4
  803a90:	08113840 	call	811384 <__udivsi3>
  803a94:	1025883a 	mov	r18,r2
  803a98:	9005883a 	mov	r2,r18
  803a9c:	dfc00917 	ldw	ra,36(sp)
  803aa0:	dcc00817 	ldw	r19,32(sp)
  803aa4:	dc800717 	ldw	r18,28(sp)
  803aa8:	dc400617 	ldw	r17,24(sp)
  803aac:	dc000517 	ldw	r16,20(sp)
  803ab0:	dec00a04 	addi	sp,sp,40
  803ab4:	f800283a 	ret
  803ab8:	08028cc0 	call	8028cc <__sinit>
  803abc:	003fec06 	br	803a70 <_fwrite_r+0x5c>

00803ac0 <fwrite>:
  803ac0:	00802074 	movhi	r2,129
  803ac4:	109ae304 	addi	r2,r2,27532
  803ac8:	2017883a 	mov	r11,r4
  803acc:	11000017 	ldw	r4,0(r2)
  803ad0:	defffe04 	addi	sp,sp,-8
  803ad4:	3013883a 	mov	r9,r6
  803ad8:	2805883a 	mov	r2,r5
  803adc:	d9c00015 	stw	r7,0(sp)
  803ae0:	580b883a 	mov	r5,r11
  803ae4:	100d883a 	mov	r6,r2
  803ae8:	480f883a 	mov	r7,r9
  803aec:	dfc00115 	stw	ra,4(sp)
  803af0:	0803a140 	call	803a14 <_fwrite_r>
  803af4:	dfc00117 	ldw	ra,4(sp)
  803af8:	dec00204 	addi	sp,sp,8
  803afc:	f800283a 	ret

00803b00 <__smakebuf_r>:
  803b00:	2880030b 	ldhu	r2,12(r5)
  803b04:	deffed04 	addi	sp,sp,-76
  803b08:	dc401015 	stw	r17,64(sp)
  803b0c:	1080008c 	andi	r2,r2,2
  803b10:	dc000f15 	stw	r16,60(sp)
  803b14:	dfc01215 	stw	ra,72(sp)
  803b18:	dc801115 	stw	r18,68(sp)
  803b1c:	2821883a 	mov	r16,r5
  803b20:	2023883a 	mov	r17,r4
  803b24:	10000b26 	beq	r2,zero,803b54 <__smakebuf_r+0x54>
  803b28:	28c010c4 	addi	r3,r5,67
  803b2c:	00800044 	movi	r2,1
  803b30:	28800515 	stw	r2,20(r5)
  803b34:	28c00415 	stw	r3,16(r5)
  803b38:	28c00015 	stw	r3,0(r5)
  803b3c:	dfc01217 	ldw	ra,72(sp)
  803b40:	dc801117 	ldw	r18,68(sp)
  803b44:	dc401017 	ldw	r17,64(sp)
  803b48:	dc000f17 	ldw	r16,60(sp)
  803b4c:	dec01304 	addi	sp,sp,76
  803b50:	f800283a 	ret
  803b54:	2940038f 	ldh	r5,14(r5)
  803b58:	28002116 	blt	r5,zero,803be0 <__smakebuf_r+0xe0>
  803b5c:	d80d883a 	mov	r6,sp
  803b60:	08038200 	call	803820 <_fstat_r>
  803b64:	10001e16 	blt	r2,zero,803be0 <__smakebuf_r+0xe0>
  803b68:	d8800117 	ldw	r2,4(sp)
  803b6c:	00e00014 	movui	r3,32768
  803b70:	113c000c 	andi	r4,r2,61440
  803b74:	20c03126 	beq	r4,r3,803c3c <__smakebuf_r+0x13c>
  803b78:	8080030b 	ldhu	r2,12(r16)
  803b7c:	00c80004 	movi	r3,8192
  803b80:	10820014 	ori	r2,r2,2048
  803b84:	8080030d 	sth	r2,12(r16)
  803b88:	20c01e26 	beq	r4,r3,803c04 <__smakebuf_r+0x104>
  803b8c:	04810004 	movi	r18,1024
  803b90:	8809883a 	mov	r4,r17
  803b94:	900b883a 	mov	r5,r18
  803b98:	0803cbc0 	call	803cbc <_malloc_r>
  803b9c:	1009883a 	mov	r4,r2
  803ba0:	10003126 	beq	r2,zero,803c68 <__smakebuf_r+0x168>
  803ba4:	80c0030b 	ldhu	r3,12(r16)
  803ba8:	00802034 	movhi	r2,128
  803bac:	108a6c04 	addi	r2,r2,10672
  803bb0:	88800f15 	stw	r2,60(r17)
  803bb4:	18c02014 	ori	r3,r3,128
  803bb8:	84800515 	stw	r18,20(r16)
  803bbc:	80c0030d 	sth	r3,12(r16)
  803bc0:	81000415 	stw	r4,16(r16)
  803bc4:	81000015 	stw	r4,0(r16)
  803bc8:	dfc01217 	ldw	ra,72(sp)
  803bcc:	dc801117 	ldw	r18,68(sp)
  803bd0:	dc401017 	ldw	r17,64(sp)
  803bd4:	dc000f17 	ldw	r16,60(sp)
  803bd8:	dec01304 	addi	sp,sp,76
  803bdc:	f800283a 	ret
  803be0:	80c0030b 	ldhu	r3,12(r16)
  803be4:	1880200c 	andi	r2,r3,128
  803be8:	10000426 	beq	r2,zero,803bfc <__smakebuf_r+0xfc>
  803bec:	04801004 	movi	r18,64
  803bf0:	18820014 	ori	r2,r3,2048
  803bf4:	8080030d 	sth	r2,12(r16)
  803bf8:	003fe506 	br	803b90 <__smakebuf_r+0x90>
  803bfc:	04810004 	movi	r18,1024
  803c00:	003ffb06 	br	803bf0 <__smakebuf_r+0xf0>
  803c04:	8140038f 	ldh	r5,14(r16)
  803c08:	8809883a 	mov	r4,r17
  803c0c:	080a8980 	call	80a898 <_isatty_r>
  803c10:	103fde26 	beq	r2,zero,803b8c <__smakebuf_r+0x8c>
  803c14:	8080030b 	ldhu	r2,12(r16)
  803c18:	80c010c4 	addi	r3,r16,67
  803c1c:	04810004 	movi	r18,1024
  803c20:	10800054 	ori	r2,r2,1
  803c24:	8080030d 	sth	r2,12(r16)
  803c28:	00800044 	movi	r2,1
  803c2c:	80c00415 	stw	r3,16(r16)
  803c30:	80800515 	stw	r2,20(r16)
  803c34:	80c00015 	stw	r3,0(r16)
  803c38:	003fd506 	br	803b90 <__smakebuf_r+0x90>
  803c3c:	80c00a17 	ldw	r3,40(r16)
  803c40:	00802034 	movhi	r2,128
  803c44:	1092e204 	addi	r2,r2,19336
  803c48:	18bfcb1e 	bne	r3,r2,803b78 <__smakebuf_r+0x78>
  803c4c:	8080030b 	ldhu	r2,12(r16)
  803c50:	00c10004 	movi	r3,1024
  803c54:	1825883a 	mov	r18,r3
  803c58:	10c4b03a 	or	r2,r2,r3
  803c5c:	8080030d 	sth	r2,12(r16)
  803c60:	80c01315 	stw	r3,76(r16)
  803c64:	003fca06 	br	803b90 <__smakebuf_r+0x90>
  803c68:	8100030b 	ldhu	r4,12(r16)
  803c6c:	2080800c 	andi	r2,r4,512
  803c70:	103fb21e 	bne	r2,zero,803b3c <__smakebuf_r+0x3c>
  803c74:	80c010c4 	addi	r3,r16,67
  803c78:	21000094 	ori	r4,r4,2
  803c7c:	00800044 	movi	r2,1
  803c80:	80800515 	stw	r2,20(r16)
  803c84:	8100030d 	sth	r4,12(r16)
  803c88:	80c00415 	stw	r3,16(r16)
  803c8c:	80c00015 	stw	r3,0(r16)
  803c90:	003faa06 	br	803b3c <__smakebuf_r+0x3c>

00803c94 <free>:
  803c94:	00802074 	movhi	r2,129
  803c98:	109ae304 	addi	r2,r2,27532
  803c9c:	200b883a 	mov	r5,r4
  803ca0:	11000017 	ldw	r4,0(r2)
  803ca4:	08030401 	jmpi	803040 <_free_r>

00803ca8 <malloc>:
  803ca8:	00802074 	movhi	r2,129
  803cac:	109ae304 	addi	r2,r2,27532
  803cb0:	200b883a 	mov	r5,r4
  803cb4:	11000017 	ldw	r4,0(r2)
  803cb8:	0803cbc1 	jmpi	803cbc <_malloc_r>

00803cbc <_malloc_r>:
  803cbc:	defff604 	addi	sp,sp,-40
  803cc0:	28c002c4 	addi	r3,r5,11
  803cc4:	00800584 	movi	r2,22
  803cc8:	dc800215 	stw	r18,8(sp)
  803ccc:	dfc00915 	stw	ra,36(sp)
  803cd0:	df000815 	stw	fp,32(sp)
  803cd4:	ddc00715 	stw	r23,28(sp)
  803cd8:	dd800615 	stw	r22,24(sp)
  803cdc:	dd400515 	stw	r21,20(sp)
  803ce0:	dd000415 	stw	r20,16(sp)
  803ce4:	dcc00315 	stw	r19,12(sp)
  803ce8:	dc400115 	stw	r17,4(sp)
  803cec:	dc000015 	stw	r16,0(sp)
  803cf0:	2025883a 	mov	r18,r4
  803cf4:	10c01236 	bltu	r2,r3,803d40 <_malloc_r+0x84>
  803cf8:	04400404 	movi	r17,16
  803cfc:	8940142e 	bgeu	r17,r5,803d50 <_malloc_r+0x94>
  803d00:	00800304 	movi	r2,12
  803d04:	0007883a 	mov	r3,zero
  803d08:	90800015 	stw	r2,0(r18)
  803d0c:	1805883a 	mov	r2,r3
  803d10:	dfc00917 	ldw	ra,36(sp)
  803d14:	df000817 	ldw	fp,32(sp)
  803d18:	ddc00717 	ldw	r23,28(sp)
  803d1c:	dd800617 	ldw	r22,24(sp)
  803d20:	dd400517 	ldw	r21,20(sp)
  803d24:	dd000417 	ldw	r20,16(sp)
  803d28:	dcc00317 	ldw	r19,12(sp)
  803d2c:	dc800217 	ldw	r18,8(sp)
  803d30:	dc400117 	ldw	r17,4(sp)
  803d34:	dc000017 	ldw	r16,0(sp)
  803d38:	dec00a04 	addi	sp,sp,40
  803d3c:	f800283a 	ret
  803d40:	00bffe04 	movi	r2,-8
  803d44:	18a2703a 	and	r17,r3,r2
  803d48:	883fed16 	blt	r17,zero,803d00 <_malloc_r+0x44>
  803d4c:	897fec36 	bltu	r17,r5,803d00 <_malloc_r+0x44>
  803d50:	9009883a 	mov	r4,r18
  803d54:	0811e4c0 	call	811e4c <__malloc_lock>
  803d58:	00807dc4 	movi	r2,503
  803d5c:	14402b2e 	bgeu	r2,r17,803e0c <_malloc_r+0x150>
  803d60:	8806d27a 	srli	r3,r17,9
  803d64:	18003f1e 	bne	r3,zero,803e64 <_malloc_r+0x1a8>
  803d68:	880cd0fa 	srli	r6,r17,3
  803d6c:	300490fa 	slli	r2,r6,3
  803d70:	02c02074 	movhi	r11,129
  803d74:	5ad54704 	addi	r11,r11,21788
  803d78:	12cb883a 	add	r5,r2,r11
  803d7c:	2c000317 	ldw	r16,12(r5)
  803d80:	580f883a 	mov	r7,r11
  803d84:	2c00041e 	bne	r5,r16,803d98 <_malloc_r+0xdc>
  803d88:	00000a06 	br	803db4 <_malloc_r+0xf8>
  803d8c:	1800860e 	bge	r3,zero,803fa8 <_malloc_r+0x2ec>
  803d90:	84000317 	ldw	r16,12(r16)
  803d94:	2c000726 	beq	r5,r16,803db4 <_malloc_r+0xf8>
  803d98:	80800117 	ldw	r2,4(r16)
  803d9c:	00ffff04 	movi	r3,-4
  803da0:	10c8703a 	and	r4,r2,r3
  803da4:	2447c83a 	sub	r3,r4,r17
  803da8:	008003c4 	movi	r2,15
  803dac:	10fff70e 	bge	r2,r3,803d8c <_malloc_r+0xd0>
  803db0:	31bfffc4 	addi	r6,r6,-1
  803db4:	32400044 	addi	r9,r6,1
  803db8:	02802074 	movhi	r10,129
  803dbc:	52954904 	addi	r10,r10,21796
  803dc0:	54000217 	ldw	r16,8(r10)
  803dc4:	8280a026 	beq	r16,r10,804048 <_malloc_r+0x38c>
  803dc8:	80800117 	ldw	r2,4(r16)
  803dcc:	00ffff04 	movi	r3,-4
  803dd0:	10ca703a 	and	r5,r2,r3
  803dd4:	2c4dc83a 	sub	r6,r5,r17
  803dd8:	008003c4 	movi	r2,15
  803ddc:	11808316 	blt	r2,r6,803fec <_malloc_r+0x330>
  803de0:	52800315 	stw	r10,12(r10)
  803de4:	52800215 	stw	r10,8(r10)
  803de8:	30002916 	blt	r6,zero,803e90 <_malloc_r+0x1d4>
  803dec:	8147883a 	add	r3,r16,r5
  803df0:	18800117 	ldw	r2,4(r3)
  803df4:	9009883a 	mov	r4,r18
  803df8:	10800054 	ori	r2,r2,1
  803dfc:	18800115 	stw	r2,4(r3)
  803e00:	0811e6c0 	call	811e6c <__malloc_unlock>
  803e04:	80c00204 	addi	r3,r16,8
  803e08:	003fc006 	br	803d0c <_malloc_r+0x50>
  803e0c:	02c02074 	movhi	r11,129
  803e10:	5ad54704 	addi	r11,r11,21788
  803e14:	8ac5883a 	add	r2,r17,r11
  803e18:	14000317 	ldw	r16,12(r2)
  803e1c:	580f883a 	mov	r7,r11
  803e20:	8806d0fa 	srli	r3,r17,3
  803e24:	14006c26 	beq	r2,r16,803fd8 <_malloc_r+0x31c>
  803e28:	80c00117 	ldw	r3,4(r16)
  803e2c:	00bfff04 	movi	r2,-4
  803e30:	81800317 	ldw	r6,12(r16)
  803e34:	1886703a 	and	r3,r3,r2
  803e38:	80c7883a 	add	r3,r16,r3
  803e3c:	18800117 	ldw	r2,4(r3)
  803e40:	81400217 	ldw	r5,8(r16)
  803e44:	9009883a 	mov	r4,r18
  803e48:	10800054 	ori	r2,r2,1
  803e4c:	18800115 	stw	r2,4(r3)
  803e50:	31400215 	stw	r5,8(r6)
  803e54:	29800315 	stw	r6,12(r5)
  803e58:	0811e6c0 	call	811e6c <__malloc_unlock>
  803e5c:	80c00204 	addi	r3,r16,8
  803e60:	003faa06 	br	803d0c <_malloc_r+0x50>
  803e64:	00800104 	movi	r2,4
  803e68:	10c0052e 	bgeu	r2,r3,803e80 <_malloc_r+0x1c4>
  803e6c:	00800504 	movi	r2,20
  803e70:	10c07836 	bltu	r2,r3,804054 <_malloc_r+0x398>
  803e74:	198016c4 	addi	r6,r3,91
  803e78:	300490fa 	slli	r2,r6,3
  803e7c:	003fbc06 	br	803d70 <_malloc_r+0xb4>
  803e80:	8804d1ba 	srli	r2,r17,6
  803e84:	11800e04 	addi	r6,r2,56
  803e88:	300490fa 	slli	r2,r6,3
  803e8c:	003fb806 	br	803d70 <_malloc_r+0xb4>
  803e90:	00807fc4 	movi	r2,511
  803e94:	1140bb36 	bltu	r2,r5,804184 <_malloc_r+0x4c8>
  803e98:	2806d0fa 	srli	r3,r5,3
  803e9c:	573ffe04 	addi	fp,r10,-8
  803ea0:	00800044 	movi	r2,1
  803ea4:	180890fa 	slli	r4,r3,3
  803ea8:	1807d0ba 	srai	r3,r3,2
  803eac:	e1c00117 	ldw	r7,4(fp)
  803eb0:	5909883a 	add	r4,r11,r4
  803eb4:	21400217 	ldw	r5,8(r4)
  803eb8:	10c4983a 	sll	r2,r2,r3
  803ebc:	81000315 	stw	r4,12(r16)
  803ec0:	81400215 	stw	r5,8(r16)
  803ec4:	388eb03a 	or	r7,r7,r2
  803ec8:	2c000315 	stw	r16,12(r5)
  803ecc:	24000215 	stw	r16,8(r4)
  803ed0:	e1c00115 	stw	r7,4(fp)
  803ed4:	4807883a 	mov	r3,r9
  803ed8:	4800cd16 	blt	r9,zero,804210 <_malloc_r+0x554>
  803edc:	1807d0ba 	srai	r3,r3,2
  803ee0:	00800044 	movi	r2,1
  803ee4:	10c8983a 	sll	r4,r2,r3
  803ee8:	39004436 	bltu	r7,r4,803ffc <_malloc_r+0x340>
  803eec:	21c4703a 	and	r2,r4,r7
  803ef0:	10000a1e 	bne	r2,zero,803f1c <_malloc_r+0x260>
  803ef4:	2109883a 	add	r4,r4,r4
  803ef8:	00bfff04 	movi	r2,-4
  803efc:	4884703a 	and	r2,r9,r2
  803f00:	3906703a 	and	r3,r7,r4
  803f04:	12400104 	addi	r9,r2,4
  803f08:	1800041e 	bne	r3,zero,803f1c <_malloc_r+0x260>
  803f0c:	2109883a 	add	r4,r4,r4
  803f10:	3904703a 	and	r2,r7,r4
  803f14:	4a400104 	addi	r9,r9,4
  803f18:	103ffc26 	beq	r2,zero,803f0c <_malloc_r+0x250>
  803f1c:	480490fa 	slli	r2,r9,3
  803f20:	4819883a 	mov	r12,r9
  803f24:	023fff04 	movi	r8,-4
  803f28:	589b883a 	add	r13,r11,r2
  803f2c:	6807883a 	mov	r3,r13
  803f30:	014003c4 	movi	r5,15
  803f34:	1c000317 	ldw	r16,12(r3)
  803f38:	1c00041e 	bne	r3,r16,803f4c <_malloc_r+0x290>
  803f3c:	0000a706 	br	8041dc <_malloc_r+0x520>
  803f40:	3000ab0e 	bge	r6,zero,8041f0 <_malloc_r+0x534>
  803f44:	84000317 	ldw	r16,12(r16)
  803f48:	1c00a426 	beq	r3,r16,8041dc <_malloc_r+0x520>
  803f4c:	80800117 	ldw	r2,4(r16)
  803f50:	1204703a 	and	r2,r2,r8
  803f54:	144dc83a 	sub	r6,r2,r17
  803f58:	29bff90e 	bge	r5,r6,803f40 <_malloc_r+0x284>
  803f5c:	81000317 	ldw	r4,12(r16)
  803f60:	80c00217 	ldw	r3,8(r16)
  803f64:	89400054 	ori	r5,r17,1
  803f68:	8445883a 	add	r2,r16,r17
  803f6c:	20c00215 	stw	r3,8(r4)
  803f70:	19000315 	stw	r4,12(r3)
  803f74:	81400115 	stw	r5,4(r16)
  803f78:	1187883a 	add	r3,r2,r6
  803f7c:	31000054 	ori	r4,r6,1
  803f80:	50800315 	stw	r2,12(r10)
  803f84:	50800215 	stw	r2,8(r10)
  803f88:	19800015 	stw	r6,0(r3)
  803f8c:	11000115 	stw	r4,4(r2)
  803f90:	12800215 	stw	r10,8(r2)
  803f94:	12800315 	stw	r10,12(r2)
  803f98:	9009883a 	mov	r4,r18
  803f9c:	0811e6c0 	call	811e6c <__malloc_unlock>
  803fa0:	80c00204 	addi	r3,r16,8
  803fa4:	003f5906 	br	803d0c <_malloc_r+0x50>
  803fa8:	8109883a 	add	r4,r16,r4
  803fac:	20800117 	ldw	r2,4(r4)
  803fb0:	80c00217 	ldw	r3,8(r16)
  803fb4:	81400317 	ldw	r5,12(r16)
  803fb8:	10800054 	ori	r2,r2,1
  803fbc:	20800115 	stw	r2,4(r4)
  803fc0:	28c00215 	stw	r3,8(r5)
  803fc4:	19400315 	stw	r5,12(r3)
  803fc8:	9009883a 	mov	r4,r18
  803fcc:	0811e6c0 	call	811e6c <__malloc_unlock>
  803fd0:	80c00204 	addi	r3,r16,8
  803fd4:	003f4d06 	br	803d0c <_malloc_r+0x50>
  803fd8:	80800204 	addi	r2,r16,8
  803fdc:	14000317 	ldw	r16,12(r2)
  803fe0:	143f911e 	bne	r2,r16,803e28 <_malloc_r+0x16c>
  803fe4:	1a400084 	addi	r9,r3,2
  803fe8:	003f7306 	br	803db8 <_malloc_r+0xfc>
  803fec:	88c00054 	ori	r3,r17,1
  803ff0:	8445883a 	add	r2,r16,r17
  803ff4:	80c00115 	stw	r3,4(r16)
  803ff8:	003fdf06 	br	803f78 <_malloc_r+0x2bc>
  803ffc:	e4000217 	ldw	r16,8(fp)
  804000:	00bfff04 	movi	r2,-4
  804004:	80c00117 	ldw	r3,4(r16)
  804008:	802d883a 	mov	r22,r16
  80400c:	18aa703a 	and	r21,r3,r2
  804010:	ac401636 	bltu	r21,r17,80406c <_malloc_r+0x3b0>
  804014:	ac49c83a 	sub	r4,r21,r17
  804018:	008003c4 	movi	r2,15
  80401c:	1100130e 	bge	r2,r4,80406c <_malloc_r+0x3b0>
  804020:	88800054 	ori	r2,r17,1
  804024:	8447883a 	add	r3,r16,r17
  804028:	80800115 	stw	r2,4(r16)
  80402c:	20800054 	ori	r2,r4,1
  804030:	18800115 	stw	r2,4(r3)
  804034:	e0c00215 	stw	r3,8(fp)
  804038:	9009883a 	mov	r4,r18
  80403c:	0811e6c0 	call	811e6c <__malloc_unlock>
  804040:	80c00204 	addi	r3,r16,8
  804044:	003f3106 	br	803d0c <_malloc_r+0x50>
  804048:	39c00117 	ldw	r7,4(r7)
  80404c:	573ffe04 	addi	fp,r10,-8
  804050:	003fa006 	br	803ed4 <_malloc_r+0x218>
  804054:	00801504 	movi	r2,84
  804058:	10c06736 	bltu	r2,r3,8041f8 <_malloc_r+0x53c>
  80405c:	8804d33a 	srli	r2,r17,12
  804060:	11801b84 	addi	r6,r2,110
  804064:	300490fa 	slli	r2,r6,3
  804068:	003f4106 	br	803d70 <_malloc_r+0xb4>
  80406c:	d0a6e217 	ldw	r2,-25720(gp)
  804070:	d0e00417 	ldw	r3,-32752(gp)
  804074:	053fffc4 	movi	r20,-1
  804078:	10800404 	addi	r2,r2,16
  80407c:	88a7883a 	add	r19,r17,r2
  804080:	1d000326 	beq	r3,r20,804090 <_malloc_r+0x3d4>
  804084:	98c3ffc4 	addi	r3,r19,4095
  804088:	00bc0004 	movi	r2,-4096
  80408c:	18a6703a 	and	r19,r3,r2
  804090:	9009883a 	mov	r4,r18
  804094:	980b883a 	mov	r5,r19
  804098:	08049fc0 	call	8049fc <_sbrk_r>
  80409c:	1009883a 	mov	r4,r2
  8040a0:	15000426 	beq	r2,r20,8040b4 <_malloc_r+0x3f8>
  8040a4:	854b883a 	add	r5,r16,r21
  8040a8:	1029883a 	mov	r20,r2
  8040ac:	11405a2e 	bgeu	r2,r5,804218 <_malloc_r+0x55c>
  8040b0:	87000c26 	beq	r16,fp,8040e4 <_malloc_r+0x428>
  8040b4:	e4000217 	ldw	r16,8(fp)
  8040b8:	80c00117 	ldw	r3,4(r16)
  8040bc:	00bfff04 	movi	r2,-4
  8040c0:	1884703a 	and	r2,r3,r2
  8040c4:	14400336 	bltu	r2,r17,8040d4 <_malloc_r+0x418>
  8040c8:	1449c83a 	sub	r4,r2,r17
  8040cc:	008003c4 	movi	r2,15
  8040d0:	113fd316 	blt	r2,r4,804020 <_malloc_r+0x364>
  8040d4:	9009883a 	mov	r4,r18
  8040d8:	0811e6c0 	call	811e6c <__malloc_unlock>
  8040dc:	0007883a 	mov	r3,zero
  8040e0:	003f0a06 	br	803d0c <_malloc_r+0x50>
  8040e4:	05c020b4 	movhi	r23,130
  8040e8:	bde1d204 	addi	r23,r23,-30904
  8040ec:	b8800017 	ldw	r2,0(r23)
  8040f0:	988d883a 	add	r6,r19,r2
  8040f4:	b9800015 	stw	r6,0(r23)
  8040f8:	d0e00417 	ldw	r3,-32752(gp)
  8040fc:	00bfffc4 	movi	r2,-1
  804100:	18808e26 	beq	r3,r2,80433c <_malloc_r+0x680>
  804104:	2145c83a 	sub	r2,r4,r5
  804108:	3085883a 	add	r2,r6,r2
  80410c:	b8800015 	stw	r2,0(r23)
  804110:	20c001cc 	andi	r3,r4,7
  804114:	18005f1e 	bne	r3,zero,804294 <_malloc_r+0x5d8>
  804118:	000b883a 	mov	r5,zero
  80411c:	a4c5883a 	add	r2,r20,r19
  804120:	1083ffcc 	andi	r2,r2,4095
  804124:	00c40004 	movi	r3,4096
  804128:	1887c83a 	sub	r3,r3,r2
  80412c:	28e7883a 	add	r19,r5,r3
  804130:	9009883a 	mov	r4,r18
  804134:	980b883a 	mov	r5,r19
  804138:	08049fc0 	call	8049fc <_sbrk_r>
  80413c:	1007883a 	mov	r3,r2
  804140:	00bfffc4 	movi	r2,-1
  804144:	18807a26 	beq	r3,r2,804330 <_malloc_r+0x674>
  804148:	1d05c83a 	sub	r2,r3,r20
  80414c:	9885883a 	add	r2,r19,r2
  804150:	10c00054 	ori	r3,r2,1
  804154:	b8800017 	ldw	r2,0(r23)
  804158:	a021883a 	mov	r16,r20
  80415c:	a0c00115 	stw	r3,4(r20)
  804160:	9885883a 	add	r2,r19,r2
  804164:	b8800015 	stw	r2,0(r23)
  804168:	e5000215 	stw	r20,8(fp)
  80416c:	b7003626 	beq	r22,fp,804248 <_malloc_r+0x58c>
  804170:	018003c4 	movi	r6,15
  804174:	35404b36 	bltu	r6,r21,8042a4 <_malloc_r+0x5e8>
  804178:	00800044 	movi	r2,1
  80417c:	a0800115 	stw	r2,4(r20)
  804180:	003fcd06 	br	8040b8 <_malloc_r+0x3fc>
  804184:	2808d27a 	srli	r4,r5,9
  804188:	2000371e 	bne	r4,zero,804268 <_malloc_r+0x5ac>
  80418c:	2808d0fa 	srli	r4,r5,3
  804190:	200690fa 	slli	r3,r4,3
  804194:	1ad1883a 	add	r8,r3,r11
  804198:	41800217 	ldw	r6,8(r8)
  80419c:	41805b26 	beq	r8,r6,80430c <_malloc_r+0x650>
  8041a0:	30800117 	ldw	r2,4(r6)
  8041a4:	00ffff04 	movi	r3,-4
  8041a8:	10c4703a 	and	r2,r2,r3
  8041ac:	2880022e 	bgeu	r5,r2,8041b8 <_malloc_r+0x4fc>
  8041b0:	31800217 	ldw	r6,8(r6)
  8041b4:	41bffa1e 	bne	r8,r6,8041a0 <_malloc_r+0x4e4>
  8041b8:	32000317 	ldw	r8,12(r6)
  8041bc:	39c00117 	ldw	r7,4(r7)
  8041c0:	82000315 	stw	r8,12(r16)
  8041c4:	81800215 	stw	r6,8(r16)
  8041c8:	07002074 	movhi	fp,129
  8041cc:	e7154704 	addi	fp,fp,21788
  8041d0:	34000315 	stw	r16,12(r6)
  8041d4:	44000215 	stw	r16,8(r8)
  8041d8:	003f3e06 	br	803ed4 <_malloc_r+0x218>
  8041dc:	63000044 	addi	r12,r12,1
  8041e0:	608000cc 	andi	r2,r12,3
  8041e4:	10005d26 	beq	r2,zero,80435c <_malloc_r+0x6a0>
  8041e8:	18c00204 	addi	r3,r3,8
  8041ec:	003f5106 	br	803f34 <_malloc_r+0x278>
  8041f0:	8089883a 	add	r4,r16,r2
  8041f4:	003f6d06 	br	803fac <_malloc_r+0x2f0>
  8041f8:	00805504 	movi	r2,340
  8041fc:	10c02036 	bltu	r2,r3,804280 <_malloc_r+0x5c4>
  804200:	8804d3fa 	srli	r2,r17,15
  804204:	11801dc4 	addi	r6,r2,119
  804208:	300490fa 	slli	r2,r6,3
  80420c:	003ed806 	br	803d70 <_malloc_r+0xb4>
  804210:	48c000c4 	addi	r3,r9,3
  804214:	003f3106 	br	803edc <_malloc_r+0x220>
  804218:	05c020b4 	movhi	r23,130
  80421c:	bde1d204 	addi	r23,r23,-30904
  804220:	b8800017 	ldw	r2,0(r23)
  804224:	988d883a 	add	r6,r19,r2
  804228:	b9800015 	stw	r6,0(r23)
  80422c:	293fb21e 	bne	r5,r4,8040f8 <_malloc_r+0x43c>
  804230:	2083ffcc 	andi	r2,r4,4095
  804234:	103fb01e 	bne	r2,zero,8040f8 <_malloc_r+0x43c>
  804238:	e4000217 	ldw	r16,8(fp)
  80423c:	9d45883a 	add	r2,r19,r21
  804240:	10800054 	ori	r2,r2,1
  804244:	80800115 	stw	r2,4(r16)
  804248:	b8c00017 	ldw	r3,0(r23)
  80424c:	d0a6e317 	ldw	r2,-25716(gp)
  804250:	10c0012e 	bgeu	r2,r3,804258 <_malloc_r+0x59c>
  804254:	d0e6e315 	stw	r3,-25716(gp)
  804258:	d0a6e417 	ldw	r2,-25712(gp)
  80425c:	10ff962e 	bgeu	r2,r3,8040b8 <_malloc_r+0x3fc>
  804260:	d0e6e415 	stw	r3,-25712(gp)
  804264:	003f9406 	br	8040b8 <_malloc_r+0x3fc>
  804268:	00800104 	movi	r2,4
  80426c:	11001e36 	bltu	r2,r4,8042e8 <_malloc_r+0x62c>
  804270:	2804d1ba 	srli	r2,r5,6
  804274:	11000e04 	addi	r4,r2,56
  804278:	200690fa 	slli	r3,r4,3
  80427c:	003fc506 	br	804194 <_malloc_r+0x4d8>
  804280:	00815504 	movi	r2,1364
  804284:	10c01d2e 	bgeu	r2,r3,8042fc <_malloc_r+0x640>
  804288:	01801f84 	movi	r6,126
  80428c:	0080fc04 	movi	r2,1008
  804290:	003eb706 	br	803d70 <_malloc_r+0xb4>
  804294:	00800204 	movi	r2,8
  804298:	10cbc83a 	sub	r5,r2,r3
  80429c:	2169883a 	add	r20,r4,r5
  8042a0:	003f9e06 	br	80411c <_malloc_r+0x460>
  8042a4:	00bffe04 	movi	r2,-8
  8042a8:	a93ffd04 	addi	r4,r21,-12
  8042ac:	2088703a 	and	r4,r4,r2
  8042b0:	b10b883a 	add	r5,r22,r4
  8042b4:	00c00144 	movi	r3,5
  8042b8:	28c00215 	stw	r3,8(r5)
  8042bc:	28c00115 	stw	r3,4(r5)
  8042c0:	b0800117 	ldw	r2,4(r22)
  8042c4:	1080004c 	andi	r2,r2,1
  8042c8:	2084b03a 	or	r2,r4,r2
  8042cc:	b0800115 	stw	r2,4(r22)
  8042d0:	313fdd2e 	bgeu	r6,r4,804248 <_malloc_r+0x58c>
  8042d4:	b1400204 	addi	r5,r22,8
  8042d8:	9009883a 	mov	r4,r18
  8042dc:	08030400 	call	803040 <_free_r>
  8042e0:	e4000217 	ldw	r16,8(fp)
  8042e4:	003fd806 	br	804248 <_malloc_r+0x58c>
  8042e8:	00800504 	movi	r2,20
  8042ec:	11001536 	bltu	r2,r4,804344 <_malloc_r+0x688>
  8042f0:	210016c4 	addi	r4,r4,91
  8042f4:	200690fa 	slli	r3,r4,3
  8042f8:	003fa606 	br	804194 <_malloc_r+0x4d8>
  8042fc:	8804d4ba 	srli	r2,r17,18
  804300:	11801f04 	addi	r6,r2,124
  804304:	300490fa 	slli	r2,r6,3
  804308:	003e9906 	br	803d70 <_malloc_r+0xb4>
  80430c:	2009d0ba 	srai	r4,r4,2
  804310:	01402074 	movhi	r5,129
  804314:	29554704 	addi	r5,r5,21788
  804318:	00c00044 	movi	r3,1
  80431c:	28800117 	ldw	r2,4(r5)
  804320:	1906983a 	sll	r3,r3,r4
  804324:	10c4b03a 	or	r2,r2,r3
  804328:	28800115 	stw	r2,4(r5)
  80432c:	003fa306 	br	8041bc <_malloc_r+0x500>
  804330:	0027883a 	mov	r19,zero
  804334:	00c00044 	movi	r3,1
  804338:	003f8606 	br	804154 <_malloc_r+0x498>
  80433c:	d1200415 	stw	r4,-32752(gp)
  804340:	003f7306 	br	804110 <_malloc_r+0x454>
  804344:	00801504 	movi	r2,84
  804348:	11001936 	bltu	r2,r4,8043b0 <_malloc_r+0x6f4>
  80434c:	2804d33a 	srli	r2,r5,12
  804350:	11001b84 	addi	r4,r2,110
  804354:	200690fa 	slli	r3,r4,3
  804358:	003f8e06 	br	804194 <_malloc_r+0x4d8>
  80435c:	480b883a 	mov	r5,r9
  804360:	6807883a 	mov	r3,r13
  804364:	288000cc 	andi	r2,r5,3
  804368:	18fffe04 	addi	r3,r3,-8
  80436c:	297fffc4 	addi	r5,r5,-1
  804370:	10001526 	beq	r2,zero,8043c8 <_malloc_r+0x70c>
  804374:	18800217 	ldw	r2,8(r3)
  804378:	10fffa26 	beq	r2,r3,804364 <_malloc_r+0x6a8>
  80437c:	2109883a 	add	r4,r4,r4
  804380:	393f1e36 	bltu	r7,r4,803ffc <_malloc_r+0x340>
  804384:	203f1d26 	beq	r4,zero,803ffc <_malloc_r+0x340>
  804388:	21c4703a 	and	r2,r4,r7
  80438c:	10000226 	beq	r2,zero,804398 <_malloc_r+0x6dc>
  804390:	6013883a 	mov	r9,r12
  804394:	003ee106 	br	803f1c <_malloc_r+0x260>
  804398:	2109883a 	add	r4,r4,r4
  80439c:	3904703a 	and	r2,r7,r4
  8043a0:	63000104 	addi	r12,r12,4
  8043a4:	103ffc26 	beq	r2,zero,804398 <_malloc_r+0x6dc>
  8043a8:	6013883a 	mov	r9,r12
  8043ac:	003edb06 	br	803f1c <_malloc_r+0x260>
  8043b0:	00805504 	movi	r2,340
  8043b4:	11000836 	bltu	r2,r4,8043d8 <_malloc_r+0x71c>
  8043b8:	2804d3fa 	srli	r2,r5,15
  8043bc:	11001dc4 	addi	r4,r2,119
  8043c0:	200690fa 	slli	r3,r4,3
  8043c4:	003f7306 	br	804194 <_malloc_r+0x4d8>
  8043c8:	0104303a 	nor	r2,zero,r4
  8043cc:	388e703a 	and	r7,r7,r2
  8043d0:	e1c00115 	stw	r7,4(fp)
  8043d4:	003fe906 	br	80437c <_malloc_r+0x6c0>
  8043d8:	00815504 	movi	r2,1364
  8043dc:	1100032e 	bgeu	r2,r4,8043ec <_malloc_r+0x730>
  8043e0:	01001f84 	movi	r4,126
  8043e4:	00c0fc04 	movi	r3,1008
  8043e8:	003f6a06 	br	804194 <_malloc_r+0x4d8>
  8043ec:	2804d4ba 	srli	r2,r5,18
  8043f0:	11001f04 	addi	r4,r2,124
  8043f4:	200690fa 	slli	r3,r4,3
  8043f8:	003f6606 	br	804194 <_malloc_r+0x4d8>

008043fc <memchr>:
  8043fc:	008000c4 	movi	r2,3
  804400:	29403fcc 	andi	r5,r5,255
  804404:	2007883a 	mov	r3,r4
  804408:	1180022e 	bgeu	r2,r6,804414 <memchr+0x18>
  80440c:	2084703a 	and	r2,r4,r2
  804410:	10000b26 	beq	r2,zero,804440 <memchr+0x44>
  804414:	313fffc4 	addi	r4,r6,-1
  804418:	3000051e 	bne	r6,zero,804430 <memchr+0x34>
  80441c:	00002c06 	br	8044d0 <memchr+0xd4>
  804420:	213fffc4 	addi	r4,r4,-1
  804424:	00bfffc4 	movi	r2,-1
  804428:	18c00044 	addi	r3,r3,1
  80442c:	20802826 	beq	r4,r2,8044d0 <memchr+0xd4>
  804430:	18800003 	ldbu	r2,0(r3)
  804434:	28bffa1e 	bne	r5,r2,804420 <memchr+0x24>
  804438:	1805883a 	mov	r2,r3
  80443c:	f800283a 	ret
  804440:	0011883a 	mov	r8,zero
  804444:	0007883a 	mov	r3,zero
  804448:	01c00104 	movi	r7,4
  80444c:	4004923a 	slli	r2,r8,8
  804450:	18c00044 	addi	r3,r3,1
  804454:	1151883a 	add	r8,r2,r5
  804458:	19fffc1e 	bne	r3,r7,80444c <memchr+0x50>
  80445c:	02bfbff4 	movhi	r10,65279
  804460:	52bfbfc4 	addi	r10,r10,-257
  804464:	02602074 	movhi	r9,32897
  804468:	4a602004 	addi	r9,r9,-32640
  80446c:	02c000c4 	movi	r11,3
  804470:	20800017 	ldw	r2,0(r4)
  804474:	31bfff04 	addi	r6,r6,-4
  804478:	200f883a 	mov	r7,r4
  80447c:	1204f03a 	xor	r2,r2,r8
  804480:	1287883a 	add	r3,r2,r10
  804484:	1a46703a 	and	r3,r3,r9
  804488:	0084303a 	nor	r2,zero,r2
  80448c:	10c4703a 	and	r2,r2,r3
  804490:	10000b26 	beq	r2,zero,8044c0 <memchr+0xc4>
  804494:	20800003 	ldbu	r2,0(r4)
  804498:	28800f26 	beq	r5,r2,8044d8 <memchr+0xdc>
  80449c:	20800043 	ldbu	r2,1(r4)
  8044a0:	21c00044 	addi	r7,r4,1
  8044a4:	28800c26 	beq	r5,r2,8044d8 <memchr+0xdc>
  8044a8:	20800083 	ldbu	r2,2(r4)
  8044ac:	21c00084 	addi	r7,r4,2
  8044b0:	28800926 	beq	r5,r2,8044d8 <memchr+0xdc>
  8044b4:	208000c3 	ldbu	r2,3(r4)
  8044b8:	21c000c4 	addi	r7,r4,3
  8044bc:	28800626 	beq	r5,r2,8044d8 <memchr+0xdc>
  8044c0:	21000104 	addi	r4,r4,4
  8044c4:	59bfea36 	bltu	r11,r6,804470 <memchr+0x74>
  8044c8:	2007883a 	mov	r3,r4
  8044cc:	003fd106 	br	804414 <memchr+0x18>
  8044d0:	0005883a 	mov	r2,zero
  8044d4:	f800283a 	ret
  8044d8:	3805883a 	mov	r2,r7
  8044dc:	f800283a 	ret

008044e0 <memcpy>:
  8044e0:	01c003c4 	movi	r7,15
  8044e4:	2007883a 	mov	r3,r4
  8044e8:	3980032e 	bgeu	r7,r6,8044f8 <memcpy+0x18>
  8044ec:	2904b03a 	or	r2,r5,r4
  8044f0:	108000cc 	andi	r2,r2,3
  8044f4:	10000926 	beq	r2,zero,80451c <memcpy+0x3c>
  8044f8:	30000626 	beq	r6,zero,804514 <memcpy+0x34>
  8044fc:	30cd883a 	add	r6,r6,r3
  804500:	28800003 	ldbu	r2,0(r5)
  804504:	29400044 	addi	r5,r5,1
  804508:	18800005 	stb	r2,0(r3)
  80450c:	18c00044 	addi	r3,r3,1
  804510:	30fffb1e 	bne	r6,r3,804500 <memcpy+0x20>
  804514:	2005883a 	mov	r2,r4
  804518:	f800283a 	ret
  80451c:	3811883a 	mov	r8,r7
  804520:	200f883a 	mov	r7,r4
  804524:	28c00017 	ldw	r3,0(r5)
  804528:	31bffc04 	addi	r6,r6,-16
  80452c:	38c00015 	stw	r3,0(r7)
  804530:	28800117 	ldw	r2,4(r5)
  804534:	38800115 	stw	r2,4(r7)
  804538:	28c00217 	ldw	r3,8(r5)
  80453c:	38c00215 	stw	r3,8(r7)
  804540:	28800317 	ldw	r2,12(r5)
  804544:	29400404 	addi	r5,r5,16
  804548:	38800315 	stw	r2,12(r7)
  80454c:	39c00404 	addi	r7,r7,16
  804550:	41bff436 	bltu	r8,r6,804524 <memcpy+0x44>
  804554:	008000c4 	movi	r2,3
  804558:	1180072e 	bgeu	r2,r6,804578 <memcpy+0x98>
  80455c:	1007883a 	mov	r3,r2
  804560:	28800017 	ldw	r2,0(r5)
  804564:	31bfff04 	addi	r6,r6,-4
  804568:	29400104 	addi	r5,r5,4
  80456c:	38800015 	stw	r2,0(r7)
  804570:	39c00104 	addi	r7,r7,4
  804574:	19bffa36 	bltu	r3,r6,804560 <memcpy+0x80>
  804578:	3807883a 	mov	r3,r7
  80457c:	003fde06 	br	8044f8 <memcpy+0x18>

00804580 <memset>:
  804580:	008000c4 	movi	r2,3
  804584:	29403fcc 	andi	r5,r5,255
  804588:	2007883a 	mov	r3,r4
  80458c:	1180022e 	bgeu	r2,r6,804598 <memset+0x18>
  804590:	2084703a 	and	r2,r4,r2
  804594:	10000826 	beq	r2,zero,8045b8 <memset+0x38>
  804598:	30000526 	beq	r6,zero,8045b0 <memset+0x30>
  80459c:	2805883a 	mov	r2,r5
  8045a0:	30cd883a 	add	r6,r6,r3
  8045a4:	18800005 	stb	r2,0(r3)
  8045a8:	18c00044 	addi	r3,r3,1
  8045ac:	19bffd1e 	bne	r3,r6,8045a4 <memset+0x24>
  8045b0:	2005883a 	mov	r2,r4
  8045b4:	f800283a 	ret
  8045b8:	2804923a 	slli	r2,r5,8
  8045bc:	020003c4 	movi	r8,15
  8045c0:	200f883a 	mov	r7,r4
  8045c4:	2884b03a 	or	r2,r5,r2
  8045c8:	1006943a 	slli	r3,r2,16
  8045cc:	10c6b03a 	or	r3,r2,r3
  8045d0:	41800a2e 	bgeu	r8,r6,8045fc <memset+0x7c>
  8045d4:	4005883a 	mov	r2,r8
  8045d8:	31bffc04 	addi	r6,r6,-16
  8045dc:	38c00015 	stw	r3,0(r7)
  8045e0:	38c00115 	stw	r3,4(r7)
  8045e4:	38c00215 	stw	r3,8(r7)
  8045e8:	38c00315 	stw	r3,12(r7)
  8045ec:	39c00404 	addi	r7,r7,16
  8045f0:	11bff936 	bltu	r2,r6,8045d8 <memset+0x58>
  8045f4:	008000c4 	movi	r2,3
  8045f8:	1180052e 	bgeu	r2,r6,804610 <memset+0x90>
  8045fc:	31bfff04 	addi	r6,r6,-4
  804600:	008000c4 	movi	r2,3
  804604:	38c00015 	stw	r3,0(r7)
  804608:	39c00104 	addi	r7,r7,4
  80460c:	11bffb36 	bltu	r2,r6,8045fc <memset+0x7c>
  804610:	3807883a 	mov	r3,r7
  804614:	003fe006 	br	804598 <memset+0x18>

00804618 <_open_r>:
  804618:	defffd04 	addi	sp,sp,-12
  80461c:	dc000015 	stw	r16,0(sp)
  804620:	040020b4 	movhi	r16,130
  804624:	8421c304 	addi	r16,r16,-30964
  804628:	dc400115 	stw	r17,4(sp)
  80462c:	80000015 	stw	zero,0(r16)
  804630:	2023883a 	mov	r17,r4
  804634:	2809883a 	mov	r4,r5
  804638:	300b883a 	mov	r5,r6
  80463c:	380d883a 	mov	r6,r7
  804640:	dfc00215 	stw	ra,8(sp)
  804644:	0811f840 	call	811f84 <open>
  804648:	1007883a 	mov	r3,r2
  80464c:	00bfffc4 	movi	r2,-1
  804650:	18800626 	beq	r3,r2,80466c <_open_r+0x54>
  804654:	1805883a 	mov	r2,r3
  804658:	dfc00217 	ldw	ra,8(sp)
  80465c:	dc400117 	ldw	r17,4(sp)
  804660:	dc000017 	ldw	r16,0(sp)
  804664:	dec00304 	addi	sp,sp,12
  804668:	f800283a 	ret
  80466c:	80800017 	ldw	r2,0(r16)
  804670:	103ff826 	beq	r2,zero,804654 <_open_r+0x3c>
  804674:	88800015 	stw	r2,0(r17)
  804678:	1805883a 	mov	r2,r3
  80467c:	dfc00217 	ldw	ra,8(sp)
  804680:	dc400117 	ldw	r17,4(sp)
  804684:	dc000017 	ldw	r16,0(sp)
  804688:	dec00304 	addi	sp,sp,12
  80468c:	f800283a 	ret

00804690 <printf>:
  804690:	defffb04 	addi	sp,sp,-20
  804694:	dfc00115 	stw	ra,4(sp)
  804698:	d9400215 	stw	r5,8(sp)
  80469c:	d9800315 	stw	r6,12(sp)
  8046a0:	d9c00415 	stw	r7,16(sp)
  8046a4:	00802074 	movhi	r2,129
  8046a8:	109ae304 	addi	r2,r2,27532
  8046ac:	10c00017 	ldw	r3,0(r2)
  8046b0:	200b883a 	mov	r5,r4
  8046b4:	d8800204 	addi	r2,sp,8
  8046b8:	19000217 	ldw	r4,8(r3)
  8046bc:	100d883a 	mov	r6,r2
  8046c0:	d8800015 	stw	r2,0(sp)
  8046c4:	0806fe00 	call	806fe0 <__vfprintf_internal>
  8046c8:	dfc00117 	ldw	ra,4(sp)
  8046cc:	dec00504 	addi	sp,sp,20
  8046d0:	f800283a 	ret

008046d4 <_printf_r>:
  8046d4:	defffc04 	addi	sp,sp,-16
  8046d8:	dfc00115 	stw	ra,4(sp)
  8046dc:	d9800215 	stw	r6,8(sp)
  8046e0:	d9c00315 	stw	r7,12(sp)
  8046e4:	280d883a 	mov	r6,r5
  8046e8:	21400217 	ldw	r5,8(r4)
  8046ec:	d8c00204 	addi	r3,sp,8
  8046f0:	180f883a 	mov	r7,r3
  8046f4:	d8c00015 	stw	r3,0(sp)
  8046f8:	080511c0 	call	80511c <___vfprintf_internal_r>
  8046fc:	dfc00117 	ldw	ra,4(sp)
  804700:	dec00404 	addi	sp,sp,16
  804704:	f800283a 	ret

00804708 <_puts_r>:
  804708:	defff604 	addi	sp,sp,-40
  80470c:	dc400715 	stw	r17,28(sp)
  804710:	2023883a 	mov	r17,r4
  804714:	2809883a 	mov	r4,r5
  804718:	dfc00915 	stw	ra,36(sp)
  80471c:	dcc00815 	stw	r19,32(sp)
  804720:	2827883a 	mov	r19,r5
  804724:	0804ccc0 	call	804ccc <strlen>
  804728:	89400217 	ldw	r5,8(r17)
  80472c:	00c02074 	movhi	r3,129
  804730:	18d39c04 	addi	r3,r3,20080
  804734:	01c00044 	movi	r7,1
  804738:	12000044 	addi	r8,r2,1
  80473c:	d8c00515 	stw	r3,20(sp)
  804740:	d9c00615 	stw	r7,24(sp)
  804744:	d8c00304 	addi	r3,sp,12
  804748:	01c00084 	movi	r7,2
  80474c:	8809883a 	mov	r4,r17
  804750:	d80d883a 	mov	r6,sp
  804754:	d8c00015 	stw	r3,0(sp)
  804758:	dcc00315 	stw	r19,12(sp)
  80475c:	da000215 	stw	r8,8(sp)
  804760:	d9c00115 	stw	r7,4(sp)
  804764:	d8800415 	stw	r2,16(sp)
  804768:	080a3fc0 	call	80a3fc <__sfvwrite_r>
  80476c:	00ffffc4 	movi	r3,-1
  804770:	10000626 	beq	r2,zero,80478c <_puts_r+0x84>
  804774:	1805883a 	mov	r2,r3
  804778:	dfc00917 	ldw	ra,36(sp)
  80477c:	dcc00817 	ldw	r19,32(sp)
  804780:	dc400717 	ldw	r17,28(sp)
  804784:	dec00a04 	addi	sp,sp,40
  804788:	f800283a 	ret
  80478c:	00c00284 	movi	r3,10
  804790:	1805883a 	mov	r2,r3
  804794:	dfc00917 	ldw	ra,36(sp)
  804798:	dcc00817 	ldw	r19,32(sp)
  80479c:	dc400717 	ldw	r17,28(sp)
  8047a0:	dec00a04 	addi	sp,sp,40
  8047a4:	f800283a 	ret

008047a8 <puts>:
  8047a8:	00802074 	movhi	r2,129
  8047ac:	109ae304 	addi	r2,r2,27532
  8047b0:	200b883a 	mov	r5,r4
  8047b4:	11000017 	ldw	r4,0(r2)
  8047b8:	08047081 	jmpi	804708 <_puts_r>

008047bc <__srefill_r>:
  8047bc:	defffd04 	addi	sp,sp,-12
  8047c0:	dc400115 	stw	r17,4(sp)
  8047c4:	dc000015 	stw	r16,0(sp)
  8047c8:	dfc00215 	stw	ra,8(sp)
  8047cc:	2023883a 	mov	r17,r4
  8047d0:	2821883a 	mov	r16,r5
  8047d4:	20000226 	beq	r4,zero,8047e0 <__srefill_r+0x24>
  8047d8:	20800e17 	ldw	r2,56(r4)
  8047dc:	10004126 	beq	r2,zero,8048e4 <__srefill_r+0x128>
  8047e0:	80c0030b 	ldhu	r3,12(r16)
  8047e4:	80000115 	stw	zero,4(r16)
  8047e8:	1880080c 	andi	r2,r3,32
  8047ec:	1000361e 	bne	r2,zero,8048c8 <__srefill_r+0x10c>
  8047f0:	1880010c 	andi	r2,r3,4
  8047f4:	1000211e 	bne	r2,zero,80487c <__srefill_r+0xc0>
  8047f8:	1880040c 	andi	r2,r3,16
  8047fc:	10005026 	beq	r2,zero,804940 <__srefill_r+0x184>
  804800:	1880020c 	andi	r2,r3,8
  804804:	1000541e 	bne	r2,zero,804958 <__srefill_r+0x19c>
  804808:	8080030b 	ldhu	r2,12(r16)
  80480c:	10800114 	ori	r2,r2,4
  804810:	8080030d 	sth	r2,12(r16)
  804814:	80800417 	ldw	r2,16(r16)
  804818:	10004526 	beq	r2,zero,804930 <__srefill_r+0x174>
  80481c:	8080030b 	ldhu	r2,12(r16)
  804820:	108000cc 	andi	r2,r2,3
  804824:	1000361e 	bne	r2,zero,804900 <__srefill_r+0x144>
  804828:	81800417 	ldw	r6,16(r16)
  80482c:	80c00817 	ldw	r3,32(r16)
  804830:	81400717 	ldw	r5,28(r16)
  804834:	81c00517 	ldw	r7,20(r16)
  804838:	8809883a 	mov	r4,r17
  80483c:	81800015 	stw	r6,0(r16)
  804840:	183ee83a 	callr	r3
  804844:	80c0030b 	ldhu	r3,12(r16)
  804848:	1009883a 	mov	r4,r2
  80484c:	80800115 	stw	r2,4(r16)
  804850:	00b7ffc4 	movi	r2,-8193
  804854:	1884703a 	and	r2,r3,r2
  804858:	8080030d 	sth	r2,12(r16)
  80485c:	0100230e 	bge	zero,r4,8048ec <__srefill_r+0x130>
  804860:	0009883a 	mov	r4,zero
  804864:	2005883a 	mov	r2,r4
  804868:	dfc00217 	ldw	ra,8(sp)
  80486c:	dc400117 	ldw	r17,4(sp)
  804870:	dc000017 	ldw	r16,0(sp)
  804874:	dec00304 	addi	sp,sp,12
  804878:	f800283a 	ret
  80487c:	81400c17 	ldw	r5,48(r16)
  804880:	283fe426 	beq	r5,zero,804814 <__srefill_r+0x58>
  804884:	80801004 	addi	r2,r16,64
  804888:	28800226 	beq	r5,r2,804894 <__srefill_r+0xd8>
  80488c:	8809883a 	mov	r4,r17
  804890:	08030400 	call	803040 <_free_r>
  804894:	80800f17 	ldw	r2,60(r16)
  804898:	80000c15 	stw	zero,48(r16)
  80489c:	80800115 	stw	r2,4(r16)
  8048a0:	103fdc26 	beq	r2,zero,804814 <__srefill_r+0x58>
  8048a4:	80800e17 	ldw	r2,56(r16)
  8048a8:	0009883a 	mov	r4,zero
  8048ac:	80800015 	stw	r2,0(r16)
  8048b0:	2005883a 	mov	r2,r4
  8048b4:	dfc00217 	ldw	ra,8(sp)
  8048b8:	dc400117 	ldw	r17,4(sp)
  8048bc:	dc000017 	ldw	r16,0(sp)
  8048c0:	dec00304 	addi	sp,sp,12
  8048c4:	f800283a 	ret
  8048c8:	013fffc4 	movi	r4,-1
  8048cc:	2005883a 	mov	r2,r4
  8048d0:	dfc00217 	ldw	ra,8(sp)
  8048d4:	dc400117 	ldw	r17,4(sp)
  8048d8:	dc000017 	ldw	r16,0(sp)
  8048dc:	dec00304 	addi	sp,sp,12
  8048e0:	f800283a 	ret
  8048e4:	08028cc0 	call	8028cc <__sinit>
  8048e8:	003fbd06 	br	8047e0 <__srefill_r+0x24>
  8048ec:	20000b1e 	bne	r4,zero,80491c <__srefill_r+0x160>
  8048f0:	10800814 	ori	r2,r2,32
  8048f4:	013fffc4 	movi	r4,-1
  8048f8:	8080030d 	sth	r2,12(r16)
  8048fc:	003fd906 	br	804864 <__srefill_r+0xa8>
  804900:	00802074 	movhi	r2,129
  804904:	109ae404 	addi	r2,r2,27536
  804908:	11000017 	ldw	r4,0(r2)
  80490c:	01402034 	movhi	r5,128
  804910:	29526004 	addi	r5,r5,18816
  804914:	080395c0 	call	80395c <_fwalk>
  804918:	003fc306 	br	804828 <__srefill_r+0x6c>
  80491c:	10801014 	ori	r2,r2,64
  804920:	013fffc4 	movi	r4,-1
  804924:	8080030d 	sth	r2,12(r16)
  804928:	80000115 	stw	zero,4(r16)
  80492c:	003fcd06 	br	804864 <__srefill_r+0xa8>
  804930:	8809883a 	mov	r4,r17
  804934:	800b883a 	mov	r5,r16
  804938:	0803b000 	call	803b00 <__smakebuf_r>
  80493c:	003fb706 	br	80481c <__srefill_r+0x60>
  804940:	18c01014 	ori	r3,r3,64
  804944:	00800244 	movi	r2,9
  804948:	013fffc4 	movi	r4,-1
  80494c:	88800015 	stw	r2,0(r17)
  804950:	80c0030d 	sth	r3,12(r16)
  804954:	003fc306 	br	804864 <__srefill_r+0xa8>
  804958:	8809883a 	mov	r4,r17
  80495c:	800b883a 	mov	r5,r16
  804960:	08023a00 	call	8023a0 <_fflush_r>
  804964:	103fd81e 	bne	r2,zero,8048c8 <__srefill_r+0x10c>
  804968:	8080030b 	ldhu	r2,12(r16)
  80496c:	80000215 	stw	zero,8(r16)
  804970:	80000615 	stw	zero,24(r16)
  804974:	10bffdcc 	andi	r2,r2,65527
  804978:	8080030d 	sth	r2,12(r16)
  80497c:	003fa206 	br	804808 <__srefill_r+0x4c>

00804980 <lflush>:
  804980:	20c0030b 	ldhu	r3,12(r4)
  804984:	01400244 	movi	r5,9
  804988:	0005883a 	mov	r2,zero
  80498c:	18c0024c 	andi	r3,r3,9
  804990:	19400126 	beq	r3,r5,804998 <lflush+0x18>
  804994:	f800283a 	ret
  804998:	080259c1 	jmpi	80259c <fflush>

0080499c <__srget_r>:
  80499c:	defffe04 	addi	sp,sp,-8
  8049a0:	dc000015 	stw	r16,0(sp)
  8049a4:	dfc00115 	stw	ra,4(sp)
  8049a8:	2821883a 	mov	r16,r5
  8049ac:	08047bc0 	call	8047bc <__srefill_r>
  8049b0:	013fffc4 	movi	r4,-1
  8049b4:	1000071e 	bne	r2,zero,8049d4 <__srget_r+0x38>
  8049b8:	80800117 	ldw	r2,4(r16)
  8049bc:	81000017 	ldw	r4,0(r16)
  8049c0:	10bfffc4 	addi	r2,r2,-1
  8049c4:	20c00044 	addi	r3,r4,1
  8049c8:	80800115 	stw	r2,4(r16)
  8049cc:	21000003 	ldbu	r4,0(r4)
  8049d0:	80c00015 	stw	r3,0(r16)
  8049d4:	2005883a 	mov	r2,r4
  8049d8:	dfc00117 	ldw	ra,4(sp)
  8049dc:	dc000017 	ldw	r16,0(sp)
  8049e0:	dec00204 	addi	sp,sp,8
  8049e4:	f800283a 	ret

008049e8 <__srget>:
  8049e8:	00802074 	movhi	r2,129
  8049ec:	109ae304 	addi	r2,r2,27532
  8049f0:	200b883a 	mov	r5,r4
  8049f4:	11000017 	ldw	r4,0(r2)
  8049f8:	080499c1 	jmpi	80499c <__srget_r>

008049fc <_sbrk_r>:
  8049fc:	defffd04 	addi	sp,sp,-12
  804a00:	dc000015 	stw	r16,0(sp)
  804a04:	040020b4 	movhi	r16,130
  804a08:	8421c304 	addi	r16,r16,-30964
  804a0c:	dc400115 	stw	r17,4(sp)
  804a10:	80000015 	stw	zero,0(r16)
  804a14:	2023883a 	mov	r17,r4
  804a18:	2809883a 	mov	r4,r5
  804a1c:	dfc00215 	stw	ra,8(sp)
  804a20:	081236c0 	call	81236c <sbrk>
  804a24:	1007883a 	mov	r3,r2
  804a28:	00bfffc4 	movi	r2,-1
  804a2c:	18800626 	beq	r3,r2,804a48 <_sbrk_r+0x4c>
  804a30:	1805883a 	mov	r2,r3
  804a34:	dfc00217 	ldw	ra,8(sp)
  804a38:	dc400117 	ldw	r17,4(sp)
  804a3c:	dc000017 	ldw	r16,0(sp)
  804a40:	dec00304 	addi	sp,sp,12
  804a44:	f800283a 	ret
  804a48:	80800017 	ldw	r2,0(r16)
  804a4c:	103ff826 	beq	r2,zero,804a30 <_sbrk_r+0x34>
  804a50:	88800015 	stw	r2,0(r17)
  804a54:	1805883a 	mov	r2,r3
  804a58:	dfc00217 	ldw	ra,8(sp)
  804a5c:	dc400117 	ldw	r17,4(sp)
  804a60:	dc000017 	ldw	r16,0(sp)
  804a64:	dec00304 	addi	sp,sp,12
  804a68:	f800283a 	ret

00804a6c <eofread>:
  804a6c:	0005883a 	mov	r2,zero
  804a70:	f800283a 	ret

00804a74 <_sscanf_r>:
  804a74:	deffe404 	addi	sp,sp,-112
  804a78:	dcc01915 	stw	r19,100(sp)
  804a7c:	2027883a 	mov	r19,r4
  804a80:	dfc01a15 	stw	ra,104(sp)
  804a84:	dc401815 	stw	r17,96(sp)
  804a88:	d9c01b15 	stw	r7,108(sp)
  804a8c:	00808104 	movi	r2,516
  804a90:	2809883a 	mov	r4,r5
  804a94:	3023883a 	mov	r17,r6
  804a98:	d9400115 	stw	r5,4(sp)
  804a9c:	d9400515 	stw	r5,20(sp)
  804aa0:	d880040d 	sth	r2,16(sp)
  804aa4:	0804ccc0 	call	804ccc <strlen>
  804aa8:	d8c01b04 	addi	r3,sp,108
  804aac:	d8c00015 	stw	r3,0(sp)
  804ab0:	180f883a 	mov	r7,r3
  804ab4:	023fffc4 	movi	r8,-1
  804ab8:	00c02034 	movhi	r3,128
  804abc:	18d29b04 	addi	r3,r3,19052
  804ac0:	9809883a 	mov	r4,r19
  804ac4:	880d883a 	mov	r6,r17
  804ac8:	d9400104 	addi	r5,sp,4
  804acc:	d8800615 	stw	r2,24(sp)
  804ad0:	d8c00915 	stw	r3,36(sp)
  804ad4:	da00048d 	sth	r8,18(sp)
  804ad8:	d8800215 	stw	r2,8(sp)
  804adc:	d8000d15 	stw	zero,52(sp)
  804ae0:	d8001215 	stw	zero,72(sp)
  804ae4:	08070040 	call	807004 <__svfscanf_r>
  804ae8:	dfc01a17 	ldw	ra,104(sp)
  804aec:	dcc01917 	ldw	r19,100(sp)
  804af0:	dc401817 	ldw	r17,96(sp)
  804af4:	dec01c04 	addi	sp,sp,112
  804af8:	f800283a 	ret

00804afc <sscanf>:
  804afc:	deffe404 	addi	sp,sp,-112
  804b00:	dfc01915 	stw	ra,100(sp)
  804b04:	dc401815 	stw	r17,96(sp)
  804b08:	d9801a15 	stw	r6,104(sp)
  804b0c:	d9c01b15 	stw	r7,108(sp)
  804b10:	00808104 	movi	r2,516
  804b14:	2823883a 	mov	r17,r5
  804b18:	d9000515 	stw	r4,20(sp)
  804b1c:	d9000115 	stw	r4,4(sp)
  804b20:	d880040d 	sth	r2,16(sp)
  804b24:	0804ccc0 	call	804ccc <strlen>
  804b28:	d8c01a04 	addi	r3,sp,104
  804b2c:	d8c00015 	stw	r3,0(sp)
  804b30:	00c02074 	movhi	r3,129
  804b34:	18dae304 	addi	r3,r3,27532
  804b38:	19000017 	ldw	r4,0(r3)
  804b3c:	d9c00017 	ldw	r7,0(sp)
  804b40:	00c02034 	movhi	r3,128
  804b44:	18d29b04 	addi	r3,r3,19052
  804b48:	023fffc4 	movi	r8,-1
  804b4c:	880d883a 	mov	r6,r17
  804b50:	d9400104 	addi	r5,sp,4
  804b54:	d8800615 	stw	r2,24(sp)
  804b58:	d8c00915 	stw	r3,36(sp)
  804b5c:	da00048d 	sth	r8,18(sp)
  804b60:	d8800215 	stw	r2,8(sp)
  804b64:	d8000d15 	stw	zero,52(sp)
  804b68:	d8001215 	stw	zero,72(sp)
  804b6c:	08070040 	call	807004 <__svfscanf_r>
  804b70:	dfc01917 	ldw	ra,100(sp)
  804b74:	dc401817 	ldw	r17,96(sp)
  804b78:	dec01c04 	addi	sp,sp,112
  804b7c:	f800283a 	ret

00804b80 <__sclose>:
  804b80:	2940038f 	ldh	r5,14(r5)
  804b84:	0808af41 	jmpi	808af4 <_close_r>

00804b88 <__sseek>:
  804b88:	defffe04 	addi	sp,sp,-8
  804b8c:	dc000015 	stw	r16,0(sp)
  804b90:	2821883a 	mov	r16,r5
  804b94:	2940038f 	ldh	r5,14(r5)
  804b98:	dfc00115 	stw	ra,4(sp)
  804b9c:	080a9f80 	call	80a9f8 <_lseek_r>
  804ba0:	1007883a 	mov	r3,r2
  804ba4:	00bfffc4 	movi	r2,-1
  804ba8:	18800926 	beq	r3,r2,804bd0 <__sseek+0x48>
  804bac:	8080030b 	ldhu	r2,12(r16)
  804bb0:	80c01415 	stw	r3,80(r16)
  804bb4:	10840014 	ori	r2,r2,4096
  804bb8:	8080030d 	sth	r2,12(r16)
  804bbc:	1805883a 	mov	r2,r3
  804bc0:	dfc00117 	ldw	ra,4(sp)
  804bc4:	dc000017 	ldw	r16,0(sp)
  804bc8:	dec00204 	addi	sp,sp,8
  804bcc:	f800283a 	ret
  804bd0:	8080030b 	ldhu	r2,12(r16)
  804bd4:	10bbffcc 	andi	r2,r2,61439
  804bd8:	8080030d 	sth	r2,12(r16)
  804bdc:	1805883a 	mov	r2,r3
  804be0:	dfc00117 	ldw	ra,4(sp)
  804be4:	dc000017 	ldw	r16,0(sp)
  804be8:	dec00204 	addi	sp,sp,8
  804bec:	f800283a 	ret

00804bf0 <__swrite>:
  804bf0:	2880030b 	ldhu	r2,12(r5)
  804bf4:	defffb04 	addi	sp,sp,-20
  804bf8:	dcc00315 	stw	r19,12(sp)
  804bfc:	1080400c 	andi	r2,r2,256
  804c00:	dc800215 	stw	r18,8(sp)
  804c04:	dc400115 	stw	r17,4(sp)
  804c08:	dc000015 	stw	r16,0(sp)
  804c0c:	3027883a 	mov	r19,r6
  804c10:	3825883a 	mov	r18,r7
  804c14:	dfc00415 	stw	ra,16(sp)
  804c18:	2821883a 	mov	r16,r5
  804c1c:	000d883a 	mov	r6,zero
  804c20:	01c00084 	movi	r7,2
  804c24:	2023883a 	mov	r17,r4
  804c28:	10000226 	beq	r2,zero,804c34 <__swrite+0x44>
  804c2c:	2940038f 	ldh	r5,14(r5)
  804c30:	080a9f80 	call	80a9f8 <_lseek_r>
  804c34:	8080030b 	ldhu	r2,12(r16)
  804c38:	8140038f 	ldh	r5,14(r16)
  804c3c:	8809883a 	mov	r4,r17
  804c40:	10bbffcc 	andi	r2,r2,61439
  804c44:	980d883a 	mov	r6,r19
  804c48:	900f883a 	mov	r7,r18
  804c4c:	8080030d 	sth	r2,12(r16)
  804c50:	dfc00417 	ldw	ra,16(sp)
  804c54:	dcc00317 	ldw	r19,12(sp)
  804c58:	dc800217 	ldw	r18,8(sp)
  804c5c:	dc400117 	ldw	r17,4(sp)
  804c60:	dc000017 	ldw	r16,0(sp)
  804c64:	dec00504 	addi	sp,sp,20
  804c68:	080878c1 	jmpi	80878c <_write_r>

00804c6c <__sread>:
  804c6c:	defffe04 	addi	sp,sp,-8
  804c70:	dc000015 	stw	r16,0(sp)
  804c74:	2821883a 	mov	r16,r5
  804c78:	2940038f 	ldh	r5,14(r5)
  804c7c:	dfc00115 	stw	ra,4(sp)
  804c80:	080bcdc0 	call	80bcdc <_read_r>
  804c84:	1007883a 	mov	r3,r2
  804c88:	10000816 	blt	r2,zero,804cac <__sread+0x40>
  804c8c:	80801417 	ldw	r2,80(r16)
  804c90:	10c5883a 	add	r2,r2,r3
  804c94:	80801415 	stw	r2,80(r16)
  804c98:	1805883a 	mov	r2,r3
  804c9c:	dfc00117 	ldw	ra,4(sp)
  804ca0:	dc000017 	ldw	r16,0(sp)
  804ca4:	dec00204 	addi	sp,sp,8
  804ca8:	f800283a 	ret
  804cac:	8080030b 	ldhu	r2,12(r16)
  804cb0:	10bbffcc 	andi	r2,r2,61439
  804cb4:	8080030d 	sth	r2,12(r16)
  804cb8:	1805883a 	mov	r2,r3
  804cbc:	dfc00117 	ldw	ra,4(sp)
  804cc0:	dc000017 	ldw	r16,0(sp)
  804cc4:	dec00204 	addi	sp,sp,8
  804cc8:	f800283a 	ret

00804ccc <strlen>:
  804ccc:	208000cc 	andi	r2,r4,3
  804cd0:	2011883a 	mov	r8,r4
  804cd4:	1000161e 	bne	r2,zero,804d30 <strlen+0x64>
  804cd8:	20c00017 	ldw	r3,0(r4)
  804cdc:	017fbff4 	movhi	r5,65279
  804ce0:	297fbfc4 	addi	r5,r5,-257
  804ce4:	01e02074 	movhi	r7,32897
  804ce8:	39e02004 	addi	r7,r7,-32640
  804cec:	1945883a 	add	r2,r3,r5
  804cf0:	11c4703a 	and	r2,r2,r7
  804cf4:	00c6303a 	nor	r3,zero,r3
  804cf8:	1886703a 	and	r3,r3,r2
  804cfc:	18000c1e 	bne	r3,zero,804d30 <strlen+0x64>
  804d00:	280d883a 	mov	r6,r5
  804d04:	380b883a 	mov	r5,r7
  804d08:	21000104 	addi	r4,r4,4
  804d0c:	20800017 	ldw	r2,0(r4)
  804d10:	1187883a 	add	r3,r2,r6
  804d14:	1946703a 	and	r3,r3,r5
  804d18:	0084303a 	nor	r2,zero,r2
  804d1c:	10c4703a 	and	r2,r2,r3
  804d20:	103ff926 	beq	r2,zero,804d08 <strlen+0x3c>
  804d24:	20800007 	ldb	r2,0(r4)
  804d28:	10000326 	beq	r2,zero,804d38 <strlen+0x6c>
  804d2c:	21000044 	addi	r4,r4,1
  804d30:	20800007 	ldb	r2,0(r4)
  804d34:	103ffd1e 	bne	r2,zero,804d2c <strlen+0x60>
  804d38:	2205c83a 	sub	r2,r4,r8
  804d3c:	f800283a 	ret

00804d40 <strncmp>:
  804d40:	30003926 	beq	r6,zero,804e28 <strncmp+0xe8>
  804d44:	2144b03a 	or	r2,r4,r5
  804d48:	108000cc 	andi	r2,r2,3
  804d4c:	028000c4 	movi	r10,3
  804d50:	1000241e 	bne	r2,zero,804de4 <strncmp+0xa4>
  804d54:	2011883a 	mov	r8,r4
  804d58:	280f883a 	mov	r7,r5
  804d5c:	51801f2e 	bgeu	r10,r6,804ddc <strncmp+0x9c>
  804d60:	21000017 	ldw	r4,0(r4)
  804d64:	28800017 	ldw	r2,0(r5)
  804d68:	20801c1e 	bne	r4,r2,804ddc <strncmp+0x9c>
  804d6c:	31bfff04 	addi	r6,r6,-4
  804d70:	30002d26 	beq	r6,zero,804e28 <strncmp+0xe8>
  804d74:	027fbff4 	movhi	r9,65279
  804d78:	4a7fbfc4 	addi	r9,r9,-257
  804d7c:	2247883a 	add	r3,r4,r9
  804d80:	01602074 	movhi	r5,32897
  804d84:	29602004 	addi	r5,r5,-32640
  804d88:	1946703a 	and	r3,r3,r5
  804d8c:	0104303a 	nor	r2,zero,r4
  804d90:	10c4703a 	and	r2,r2,r3
  804d94:	1000241e 	bne	r2,zero,804e28 <strncmp+0xe8>
  804d98:	5017883a 	mov	r11,r10
  804d9c:	4815883a 	mov	r10,r9
  804da0:	2813883a 	mov	r9,r5
  804da4:	00000a06 	br	804dd0 <strncmp+0x90>
  804da8:	41000017 	ldw	r4,0(r8)
  804dac:	39400017 	ldw	r5,0(r7)
  804db0:	2285883a 	add	r2,r4,r10
  804db4:	1244703a 	and	r2,r2,r9
  804db8:	0106303a 	nor	r3,zero,r4
  804dbc:	1886703a 	and	r3,r3,r2
  804dc0:	2140061e 	bne	r4,r5,804ddc <strncmp+0x9c>
  804dc4:	31bfff04 	addi	r6,r6,-4
  804dc8:	30001726 	beq	r6,zero,804e28 <strncmp+0xe8>
  804dcc:	1800161e 	bne	r3,zero,804e28 <strncmp+0xe8>
  804dd0:	42000104 	addi	r8,r8,4
  804dd4:	39c00104 	addi	r7,r7,4
  804dd8:	59bff336 	bltu	r11,r6,804da8 <strncmp+0x68>
  804ddc:	4009883a 	mov	r4,r8
  804de0:	380b883a 	mov	r5,r7
  804de4:	31bfffc4 	addi	r6,r6,-1
  804de8:	01ffffc4 	movi	r7,-1
  804dec:	31c00a1e 	bne	r6,r7,804e18 <strncmp+0xd8>
  804df0:	20c00003 	ldbu	r3,0(r4)
  804df4:	28800003 	ldbu	r2,0(r5)
  804df8:	1885c83a 	sub	r2,r3,r2
  804dfc:	f800283a 	ret
  804e00:	30000926 	beq	r6,zero,804e28 <strncmp+0xe8>
  804e04:	18000826 	beq	r3,zero,804e28 <strncmp+0xe8>
  804e08:	31bfffc4 	addi	r6,r6,-1
  804e0c:	21000044 	addi	r4,r4,1
  804e10:	29400044 	addi	r5,r5,1
  804e14:	31fff626 	beq	r6,r7,804df0 <strncmp+0xb0>
  804e18:	20c00007 	ldb	r3,0(r4)
  804e1c:	28800007 	ldb	r2,0(r5)
  804e20:	18bff726 	beq	r3,r2,804e00 <strncmp+0xc0>
  804e24:	003ff206 	br	804df0 <strncmp+0xb0>
  804e28:	0005883a 	mov	r2,zero
  804e2c:	f800283a 	ret

00804e30 <__submore>:
  804e30:	defffa04 	addi	sp,sp,-24
  804e34:	28c00c17 	ldw	r3,48(r5)
  804e38:	dc800215 	stw	r18,8(sp)
  804e3c:	2825883a 	mov	r18,r5
  804e40:	dc000015 	stw	r16,0(sp)
  804e44:	90801004 	addi	r2,r18,64
  804e48:	04010004 	movi	r16,1024
  804e4c:	dfc00515 	stw	ra,20(sp)
  804e50:	dd000415 	stw	r20,16(sp)
  804e54:	dcc00315 	stw	r19,12(sp)
  804e58:	dc400115 	stw	r17,4(sp)
  804e5c:	800b883a 	mov	r5,r16
  804e60:	18801b26 	beq	r3,r2,804ed0 <__submore+0xa0>
  804e64:	94400d17 	ldw	r17,52(r18)
  804e68:	180b883a 	mov	r5,r3
  804e6c:	8c69883a 	add	r20,r17,r17
  804e70:	a00d883a 	mov	r6,r20
  804e74:	080bd540 	call	80bd54 <_realloc_r>
  804e78:	1467883a 	add	r19,r2,r17
  804e7c:	1021883a 	mov	r16,r2
  804e80:	880d883a 	mov	r6,r17
  804e84:	9809883a 	mov	r4,r19
  804e88:	100b883a 	mov	r5,r2
  804e8c:	10000e26 	beq	r2,zero,804ec8 <__submore+0x98>
  804e90:	08044e00 	call	8044e0 <memcpy>
  804e94:	000d883a 	mov	r6,zero
  804e98:	95000d15 	stw	r20,52(r18)
  804e9c:	94c00015 	stw	r19,0(r18)
  804ea0:	94000c15 	stw	r16,48(r18)
  804ea4:	3005883a 	mov	r2,r6
  804ea8:	dfc00517 	ldw	ra,20(sp)
  804eac:	dd000417 	ldw	r20,16(sp)
  804eb0:	dcc00317 	ldw	r19,12(sp)
  804eb4:	dc800217 	ldw	r18,8(sp)
  804eb8:	dc400117 	ldw	r17,4(sp)
  804ebc:	dc000017 	ldw	r16,0(sp)
  804ec0:	dec00604 	addi	sp,sp,24
  804ec4:	f800283a 	ret
  804ec8:	01bfffc4 	movi	r6,-1
  804ecc:	003ff506 	br	804ea4 <__submore+0x74>
  804ed0:	0803cbc0 	call	803cbc <_malloc_r>
  804ed4:	1009883a 	mov	r4,r2
  804ed8:	1140ff44 	addi	r5,r2,1021
  804edc:	000d883a 	mov	r6,zero
  804ee0:	103ff926 	beq	r2,zero,804ec8 <__submore+0x98>
  804ee4:	90801083 	ldbu	r2,66(r18)
  804ee8:	94000d15 	stw	r16,52(r18)
  804eec:	91000c15 	stw	r4,48(r18)
  804ef0:	28800085 	stb	r2,2(r5)
  804ef4:	90c01043 	ldbu	r3,65(r18)
  804ef8:	28c00045 	stb	r3,1(r5)
  804efc:	90801003 	ldbu	r2,64(r18)
  804f00:	2080ff45 	stb	r2,1021(r4)
  804f04:	91400015 	stw	r5,0(r18)
  804f08:	003fe606 	br	804ea4 <__submore+0x74>

00804f0c <_ungetc_r>:
  804f0c:	defffc04 	addi	sp,sp,-16
  804f10:	00bfffc4 	movi	r2,-1
  804f14:	dc400215 	stw	r17,8(sp)
  804f18:	dc000115 	stw	r16,4(sp)
  804f1c:	dfc00315 	stw	ra,12(sp)
  804f20:	2821883a 	mov	r16,r5
  804f24:	2023883a 	mov	r17,r4
  804f28:	28801826 	beq	r5,r2,804f8c <_ungetc_r+0x80>
  804f2c:	20000226 	beq	r4,zero,804f38 <_ungetc_r+0x2c>
  804f30:	20800e17 	ldw	r2,56(r4)
  804f34:	10001b26 	beq	r2,zero,804fa4 <_ungetc_r+0x98>
  804f38:	3100030b 	ldhu	r4,12(r6)
  804f3c:	00bff7c4 	movi	r2,-33
  804f40:	2084703a 	and	r2,r4,r2
  804f44:	117fffcc 	andi	r5,r2,65535
  804f48:	28c0010c 	andi	r3,r5,4
  804f4c:	1009883a 	mov	r4,r2
  804f50:	3080030d 	sth	r2,12(r6)
  804f54:	18003526 	beq	r3,zero,80502c <_ungetc_r+0x120>
  804f58:	30800c17 	ldw	r2,48(r6)
  804f5c:	84003fcc 	andi	r16,r16,255
  804f60:	10001426 	beq	r2,zero,804fb4 <_ungetc_r+0xa8>
  804f64:	30c00117 	ldw	r3,4(r6)
  804f68:	30800d17 	ldw	r2,52(r6)
  804f6c:	1880380e 	bge	r3,r2,805050 <_ungetc_r+0x144>
  804f70:	30c00017 	ldw	r3,0(r6)
  804f74:	19ffffc4 	addi	r7,r3,-1
  804f78:	31c00015 	stw	r7,0(r6)
  804f7c:	1c3fffc5 	stb	r16,-1(r3)
  804f80:	30800117 	ldw	r2,4(r6)
  804f84:	10800044 	addi	r2,r2,1
  804f88:	30800115 	stw	r2,4(r6)
  804f8c:	8005883a 	mov	r2,r16
  804f90:	dfc00317 	ldw	ra,12(sp)
  804f94:	dc400217 	ldw	r17,8(sp)
  804f98:	dc000117 	ldw	r16,4(sp)
  804f9c:	dec00404 	addi	sp,sp,16
  804fa0:	f800283a 	ret
  804fa4:	d9800015 	stw	r6,0(sp)
  804fa8:	08028cc0 	call	8028cc <__sinit>
  804fac:	d9800017 	ldw	r6,0(sp)
  804fb0:	003fe106 	br	804f38 <_ungetc_r+0x2c>
  804fb4:	30800417 	ldw	r2,16(r6)
  804fb8:	10002326 	beq	r2,zero,805048 <_ungetc_r+0x13c>
  804fbc:	31c00017 	ldw	r7,0(r6)
  804fc0:	11c0022e 	bgeu	r2,r7,804fcc <_ungetc_r+0xc0>
  804fc4:	38bfffc3 	ldbu	r2,-1(r7)
  804fc8:	80801226 	beq	r16,r2,805014 <_ungetc_r+0x108>
  804fcc:	30c00117 	ldw	r3,4(r6)
  804fd0:	00800044 	movi	r2,1
  804fd4:	30800115 	stw	r2,4(r6)
  804fd8:	008000c4 	movi	r2,3
  804fdc:	31001004 	addi	r4,r6,64
  804fe0:	31401084 	addi	r5,r6,66
  804fe4:	30800d15 	stw	r2,52(r6)
  804fe8:	8005883a 	mov	r2,r16
  804fec:	30c00f15 	stw	r3,60(r6)
  804ff0:	31c00e15 	stw	r7,56(r6)
  804ff4:	31000c15 	stw	r4,48(r6)
  804ff8:	31400015 	stw	r5,0(r6)
  804ffc:	34001085 	stb	r16,66(r6)
  805000:	dfc00317 	ldw	ra,12(sp)
  805004:	dc400217 	ldw	r17,8(sp)
  805008:	dc000117 	ldw	r16,4(sp)
  80500c:	dec00404 	addi	sp,sp,16
  805010:	f800283a 	ret
  805014:	30800117 	ldw	r2,4(r6)
  805018:	39ffffc4 	addi	r7,r7,-1
  80501c:	31c00015 	stw	r7,0(r6)
  805020:	10800044 	addi	r2,r2,1
  805024:	30800115 	stw	r2,4(r6)
  805028:	003fd806 	br	804f8c <_ungetc_r+0x80>
  80502c:	2880040c 	andi	r2,r5,16
  805030:	10000d26 	beq	r2,zero,805068 <_ungetc_r+0x15c>
  805034:	2880020c 	andi	r2,r5,8
  805038:	10000d1e 	bne	r2,zero,805070 <_ungetc_r+0x164>
  80503c:	20800114 	ori	r2,r4,4
  805040:	3080030d 	sth	r2,12(r6)
  805044:	003fc406 	br	804f58 <_ungetc_r+0x4c>
  805048:	31c00017 	ldw	r7,0(r6)
  80504c:	003fdf06 	br	804fcc <_ungetc_r+0xc0>
  805050:	300b883a 	mov	r5,r6
  805054:	8809883a 	mov	r4,r17
  805058:	d9800015 	stw	r6,0(sp)
  80505c:	0804e300 	call	804e30 <__submore>
  805060:	d9800017 	ldw	r6,0(sp)
  805064:	103fc226 	beq	r2,zero,804f70 <_ungetc_r+0x64>
  805068:	043fffc4 	movi	r16,-1
  80506c:	003fc706 	br	804f8c <_ungetc_r+0x80>
  805070:	300b883a 	mov	r5,r6
  805074:	8809883a 	mov	r4,r17
  805078:	d9800015 	stw	r6,0(sp)
  80507c:	08023a00 	call	8023a0 <_fflush_r>
  805080:	d9800017 	ldw	r6,0(sp)
  805084:	103ff81e 	bne	r2,zero,805068 <_ungetc_r+0x15c>
  805088:	3100030b 	ldhu	r4,12(r6)
  80508c:	00bffdc4 	movi	r2,-9
  805090:	30000215 	stw	zero,8(r6)
  805094:	2084703a 	and	r2,r4,r2
  805098:	1009883a 	mov	r4,r2
  80509c:	3080030d 	sth	r2,12(r6)
  8050a0:	30000615 	stw	zero,24(r6)
  8050a4:	003fe506 	br	80503c <_ungetc_r+0x130>

008050a8 <ungetc>:
  8050a8:	01802074 	movhi	r6,129
  8050ac:	319ae304 	addi	r6,r6,27532
  8050b0:	2007883a 	mov	r3,r4
  8050b4:	31000017 	ldw	r4,0(r6)
  8050b8:	280d883a 	mov	r6,r5
  8050bc:	180b883a 	mov	r5,r3
  8050c0:	0804f0c1 	jmpi	804f0c <_ungetc_r>

008050c4 <__sprint_r>:
  8050c4:	30800217 	ldw	r2,8(r6)
  8050c8:	defffe04 	addi	sp,sp,-8
  8050cc:	dc000015 	stw	r16,0(sp)
  8050d0:	dfc00115 	stw	ra,4(sp)
  8050d4:	3021883a 	mov	r16,r6
  8050d8:	0007883a 	mov	r3,zero
  8050dc:	1000061e 	bne	r2,zero,8050f8 <__sprint_r+0x34>
  8050e0:	1805883a 	mov	r2,r3
  8050e4:	30000115 	stw	zero,4(r6)
  8050e8:	dfc00117 	ldw	ra,4(sp)
  8050ec:	dc000017 	ldw	r16,0(sp)
  8050f0:	dec00204 	addi	sp,sp,8
  8050f4:	f800283a 	ret
  8050f8:	080a3fc0 	call	80a3fc <__sfvwrite_r>
  8050fc:	1007883a 	mov	r3,r2
  805100:	1805883a 	mov	r2,r3
  805104:	80000115 	stw	zero,4(r16)
  805108:	80000215 	stw	zero,8(r16)
  80510c:	dfc00117 	ldw	ra,4(sp)
  805110:	dc000017 	ldw	r16,0(sp)
  805114:	dec00204 	addi	sp,sp,8
  805118:	f800283a 	ret

0080511c <___vfprintf_internal_r>:
  80511c:	defea404 	addi	sp,sp,-1392
  805120:	dd815815 	stw	r22,1376(sp)
  805124:	dc015215 	stw	r16,1352(sp)
  805128:	d9c15115 	stw	r7,1348(sp)
  80512c:	dfc15b15 	stw	ra,1388(sp)
  805130:	df015a15 	stw	fp,1384(sp)
  805134:	ddc15915 	stw	r23,1380(sp)
  805138:	dd415715 	stw	r21,1372(sp)
  80513c:	dd015615 	stw	r20,1368(sp)
  805140:	dcc15515 	stw	r19,1364(sp)
  805144:	dc815415 	stw	r18,1360(sp)
  805148:	dc415315 	stw	r17,1356(sp)
  80514c:	282d883a 	mov	r22,r5
  805150:	3021883a 	mov	r16,r6
  805154:	d9014f15 	stw	r4,1340(sp)
  805158:	080a93c0 	call	80a93c <_localeconv_r>
  80515c:	10800017 	ldw	r2,0(r2)
  805160:	d9c15117 	ldw	r7,1348(sp)
  805164:	d8814915 	stw	r2,1316(sp)
  805168:	d8814f17 	ldw	r2,1340(sp)
  80516c:	10000226 	beq	r2,zero,805178 <___vfprintf_internal_r+0x5c>
  805170:	10800e17 	ldw	r2,56(r2)
  805174:	10020d26 	beq	r2,zero,8059ac <___vfprintf_internal_r+0x890>
  805178:	b080030b 	ldhu	r2,12(r22)
  80517c:	1080020c 	andi	r2,r2,8
  805180:	10020e26 	beq	r2,zero,8059bc <___vfprintf_internal_r+0x8a0>
  805184:	b0800417 	ldw	r2,16(r22)
  805188:	10020c26 	beq	r2,zero,8059bc <___vfprintf_internal_r+0x8a0>
  80518c:	b200030b 	ldhu	r8,12(r22)
  805190:	00800284 	movi	r2,10
  805194:	40c0068c 	andi	r3,r8,26
  805198:	18802f1e 	bne	r3,r2,805258 <___vfprintf_internal_r+0x13c>
  80519c:	b080038f 	ldh	r2,14(r22)
  8051a0:	10002d16 	blt	r2,zero,805258 <___vfprintf_internal_r+0x13c>
  8051a4:	b240038b 	ldhu	r9,14(r22)
  8051a8:	b2800717 	ldw	r10,28(r22)
  8051ac:	b2c00917 	ldw	r11,36(r22)
  8051b0:	d9014f17 	ldw	r4,1340(sp)
  8051b4:	dc402904 	addi	r17,sp,164
  8051b8:	d8804004 	addi	r2,sp,256
  8051bc:	00c10004 	movi	r3,1024
  8051c0:	423fff4c 	andi	r8,r8,65533
  8051c4:	800d883a 	mov	r6,r16
  8051c8:	880b883a 	mov	r5,r17
  8051cc:	da002c0d 	sth	r8,176(sp)
  8051d0:	da402c8d 	sth	r9,178(sp)
  8051d4:	da803015 	stw	r10,192(sp)
  8051d8:	dac03215 	stw	r11,200(sp)
  8051dc:	d8802d15 	stw	r2,180(sp)
  8051e0:	d8c02e15 	stw	r3,184(sp)
  8051e4:	d8802915 	stw	r2,164(sp)
  8051e8:	d8c02b15 	stw	r3,172(sp)
  8051ec:	d8002f15 	stw	zero,188(sp)
  8051f0:	080511c0 	call	80511c <___vfprintf_internal_r>
  8051f4:	d8814b15 	stw	r2,1324(sp)
  8051f8:	10000416 	blt	r2,zero,80520c <___vfprintf_internal_r+0xf0>
  8051fc:	d9014f17 	ldw	r4,1340(sp)
  805200:	880b883a 	mov	r5,r17
  805204:	08023a00 	call	8023a0 <_fflush_r>
  805208:	1002321e 	bne	r2,zero,805ad4 <___vfprintf_internal_r+0x9b8>
  80520c:	d8802c0b 	ldhu	r2,176(sp)
  805210:	1080100c 	andi	r2,r2,64
  805214:	10000326 	beq	r2,zero,805224 <___vfprintf_internal_r+0x108>
  805218:	b080030b 	ldhu	r2,12(r22)
  80521c:	10801014 	ori	r2,r2,64
  805220:	b080030d 	sth	r2,12(r22)
  805224:	d8814b17 	ldw	r2,1324(sp)
  805228:	dfc15b17 	ldw	ra,1388(sp)
  80522c:	df015a17 	ldw	fp,1384(sp)
  805230:	ddc15917 	ldw	r23,1380(sp)
  805234:	dd815817 	ldw	r22,1376(sp)
  805238:	dd415717 	ldw	r21,1372(sp)
  80523c:	dd015617 	ldw	r20,1368(sp)
  805240:	dcc15517 	ldw	r19,1364(sp)
  805244:	dc815417 	ldw	r18,1360(sp)
  805248:	dc415317 	ldw	r17,1356(sp)
  80524c:	dc015217 	ldw	r16,1352(sp)
  805250:	dec15c04 	addi	sp,sp,1392
  805254:	f800283a 	ret
  805258:	0005883a 	mov	r2,zero
  80525c:	0007883a 	mov	r3,zero
  805260:	dd401904 	addi	r21,sp,100
  805264:	d8814215 	stw	r2,1288(sp)
  805268:	802f883a 	mov	r23,r16
  80526c:	d8c14315 	stw	r3,1292(sp)
  805270:	d8014b15 	stw	zero,1324(sp)
  805274:	d8014815 	stw	zero,1312(sp)
  805278:	d8014415 	stw	zero,1296(sp)
  80527c:	d8014715 	stw	zero,1308(sp)
  805280:	dd400c15 	stw	r21,48(sp)
  805284:	d8000e15 	stw	zero,56(sp)
  805288:	d8000d15 	stw	zero,52(sp)
  80528c:	b8800007 	ldb	r2,0(r23)
  805290:	10001926 	beq	r2,zero,8052f8 <___vfprintf_internal_r+0x1dc>
  805294:	00c00944 	movi	r3,37
  805298:	10c01726 	beq	r2,r3,8052f8 <___vfprintf_internal_r+0x1dc>
  80529c:	b821883a 	mov	r16,r23
  8052a0:	00000106 	br	8052a8 <___vfprintf_internal_r+0x18c>
  8052a4:	10c00326 	beq	r2,r3,8052b4 <___vfprintf_internal_r+0x198>
  8052a8:	84000044 	addi	r16,r16,1
  8052ac:	80800007 	ldb	r2,0(r16)
  8052b0:	103ffc1e 	bne	r2,zero,8052a4 <___vfprintf_internal_r+0x188>
  8052b4:	85e7c83a 	sub	r19,r16,r23
  8052b8:	98000e26 	beq	r19,zero,8052f4 <___vfprintf_internal_r+0x1d8>
  8052bc:	dc800e17 	ldw	r18,56(sp)
  8052c0:	dc400d17 	ldw	r17,52(sp)
  8052c4:	008001c4 	movi	r2,7
  8052c8:	94e5883a 	add	r18,r18,r19
  8052cc:	8c400044 	addi	r17,r17,1
  8052d0:	adc00015 	stw	r23,0(r21)
  8052d4:	dc800e15 	stw	r18,56(sp)
  8052d8:	acc00115 	stw	r19,4(r21)
  8052dc:	dc400d15 	stw	r17,52(sp)
  8052e0:	14428b16 	blt	r2,r17,805d10 <___vfprintf_internal_r+0xbf4>
  8052e4:	ad400204 	addi	r21,r21,8
  8052e8:	d9014b17 	ldw	r4,1324(sp)
  8052ec:	24c9883a 	add	r4,r4,r19
  8052f0:	d9014b15 	stw	r4,1324(sp)
  8052f4:	802f883a 	mov	r23,r16
  8052f8:	b8800007 	ldb	r2,0(r23)
  8052fc:	10013c26 	beq	r2,zero,8057f0 <___vfprintf_internal_r+0x6d4>
  805300:	bdc00044 	addi	r23,r23,1
  805304:	d8000405 	stb	zero,16(sp)
  805308:	b8c00007 	ldb	r3,0(r23)
  80530c:	04ffffc4 	movi	r19,-1
  805310:	d8014c15 	stw	zero,1328(sp)
  805314:	d8014a15 	stw	zero,1320(sp)
  805318:	d8c14d15 	stw	r3,1332(sp)
  80531c:	bdc00044 	addi	r23,r23,1
  805320:	d9414d17 	ldw	r5,1332(sp)
  805324:	00801604 	movi	r2,88
  805328:	28fff804 	addi	r3,r5,-32
  80532c:	10c06036 	bltu	r2,r3,8054b0 <___vfprintf_internal_r+0x394>
  805330:	18c5883a 	add	r2,r3,r3
  805334:	1085883a 	add	r2,r2,r2
  805338:	00c02034 	movhi	r3,128
  80533c:	18d4d304 	addi	r3,r3,21324
  805340:	10c5883a 	add	r2,r2,r3
  805344:	11000017 	ldw	r4,0(r2)
  805348:	2000683a 	jmp	r4
  80534c:	008062c0 	call	8062c <__alt_mem_sdram-0x77f9d4>
  805350:	008054b0 	cmpltui	r2,zero,338
  805354:	008054b0 	cmpltui	r2,zero,338
  805358:	008062ac 	andhi	r2,zero,394
  80535c:	008054b0 	cmpltui	r2,zero,338
  805360:	008054b0 	cmpltui	r2,zero,338
  805364:	008054b0 	cmpltui	r2,zero,338
  805368:	008054b0 	cmpltui	r2,zero,338
  80536c:	008054b0 	cmpltui	r2,zero,338
  805370:	008054b0 	cmpltui	r2,zero,338
  805374:	0080608c 	andi	r2,zero,386
  805378:	0080629c 	xori	r2,zero,394
  80537c:	008054b0 	cmpltui	r2,zero,338
  805380:	008060a4 	muli	r2,zero,386
  805384:	00806344 	movi	r2,397
  805388:	008054b0 	cmpltui	r2,zero,338
  80538c:	00806330 	cmpltui	r2,zero,396
  805390:	008062ec 	andhi	r2,zero,395
  805394:	008062ec 	andhi	r2,zero,395
  805398:	008062ec 	andhi	r2,zero,395
  80539c:	008062ec 	andhi	r2,zero,395
  8053a0:	008062ec 	andhi	r2,zero,395
  8053a4:	008062ec 	andhi	r2,zero,395
  8053a8:	008062ec 	andhi	r2,zero,395
  8053ac:	008062ec 	andhi	r2,zero,395
  8053b0:	008062ec 	andhi	r2,zero,395
  8053b4:	008054b0 	cmpltui	r2,zero,338
  8053b8:	008054b0 	cmpltui	r2,zero,338
  8053bc:	008054b0 	cmpltui	r2,zero,338
  8053c0:	008054b0 	cmpltui	r2,zero,338
  8053c4:	008054b0 	cmpltui	r2,zero,338
  8053c8:	008054b0 	cmpltui	r2,zero,338
  8053cc:	008054b0 	cmpltui	r2,zero,338
  8053d0:	008054b0 	cmpltui	r2,zero,338
  8053d4:	008054b0 	cmpltui	r2,zero,338
  8053d8:	008054b0 	cmpltui	r2,zero,338
  8053dc:	00805b08 	cmpgei	r2,zero,364
  8053e0:	00806174 	movhi	r2,389
  8053e4:	008054b0 	cmpltui	r2,zero,338
  8053e8:	00806174 	movhi	r2,389
  8053ec:	008054b0 	cmpltui	r2,zero,338
  8053f0:	008054b0 	cmpltui	r2,zero,338
  8053f4:	008054b0 	cmpltui	r2,zero,338
  8053f8:	008054b0 	cmpltui	r2,zero,338
  8053fc:	008062d8 	cmpnei	r2,zero,395
  805400:	008054b0 	cmpltui	r2,zero,338
  805404:	008054b0 	cmpltui	r2,zero,338
  805408:	00805bbc 	xorhi	r2,zero,366
  80540c:	008054b0 	cmpltui	r2,zero,338
  805410:	008054b0 	cmpltui	r2,zero,338
  805414:	008054b0 	cmpltui	r2,zero,338
  805418:	008054b0 	cmpltui	r2,zero,338
  80541c:	008054b0 	cmpltui	r2,zero,338
  805420:	00805c08 	cmpgei	r2,zero,368
  805424:	008054b0 	cmpltui	r2,zero,338
  805428:	008054b0 	cmpltui	r2,zero,338
  80542c:	00806228 	cmpgeui	r2,zero,392
  805430:	008054b0 	cmpltui	r2,zero,338
  805434:	008054b0 	cmpltui	r2,zero,338
  805438:	008054b0 	cmpltui	r2,zero,338
  80543c:	008054b0 	cmpltui	r2,zero,338
  805440:	008054b0 	cmpltui	r2,zero,338
  805444:	008054b0 	cmpltui	r2,zero,338
  805448:	008054b0 	cmpltui	r2,zero,338
  80544c:	008054b0 	cmpltui	r2,zero,338
  805450:	008054b0 	cmpltui	r2,zero,338
  805454:	008054b0 	cmpltui	r2,zero,338
  805458:	008061fc 	xorhi	r2,zero,391
  80545c:	00805b14 	movui	r2,364
  805460:	00806174 	movhi	r2,389
  805464:	00806174 	movhi	r2,389
  805468:	00806174 	movhi	r2,389
  80546c:	00806160 	cmpeqi	r2,zero,389
  805470:	00805b14 	movui	r2,364
  805474:	008054b0 	cmpltui	r2,zero,338
  805478:	008054b0 	cmpltui	r2,zero,338
  80547c:	008060e8 	cmpgeui	r2,zero,387
  805480:	008054b0 	cmpltui	r2,zero,338
  805484:	008060b8 	rdprs	r2,zero,386
  805488:	00805bc8 	cmpgei	r2,zero,367
  80548c:	00806118 	cmpnei	r2,zero,388
  805490:	00806104 	movi	r2,388
  805494:	008054b0 	cmpltui	r2,zero,338
  805498:	008063ac 	andhi	r2,zero,398
  80549c:	008054b0 	cmpltui	r2,zero,338
  8054a0:	00805c14 	movui	r2,368
  8054a4:	008054b0 	cmpltui	r2,zero,338
  8054a8:	008054b0 	cmpltui	r2,zero,338
  8054ac:	0080628c 	andi	r2,zero,394
  8054b0:	d9014d17 	ldw	r4,1332(sp)
  8054b4:	2000ce26 	beq	r4,zero,8057f0 <___vfprintf_internal_r+0x6d4>
  8054b8:	01400044 	movi	r5,1
  8054bc:	d9800f04 	addi	r6,sp,60
  8054c0:	d9c14015 	stw	r7,1280(sp)
  8054c4:	d9414515 	stw	r5,1300(sp)
  8054c8:	d9814115 	stw	r6,1284(sp)
  8054cc:	280f883a 	mov	r7,r5
  8054d0:	d9000f05 	stb	r4,60(sp)
  8054d4:	d8000405 	stb	zero,16(sp)
  8054d8:	d8014615 	stw	zero,1304(sp)
  8054dc:	d8c14c17 	ldw	r3,1328(sp)
  8054e0:	1880008c 	andi	r2,r3,2
  8054e4:	1005003a 	cmpeq	r2,r2,zero
  8054e8:	d8815015 	stw	r2,1344(sp)
  8054ec:	1000031e 	bne	r2,zero,8054fc <___vfprintf_internal_r+0x3e0>
  8054f0:	d9014517 	ldw	r4,1300(sp)
  8054f4:	21000084 	addi	r4,r4,2
  8054f8:	d9014515 	stw	r4,1300(sp)
  8054fc:	d9414c17 	ldw	r5,1328(sp)
  805500:	2940210c 	andi	r5,r5,132
  805504:	d9414e15 	stw	r5,1336(sp)
  805508:	28002d1e 	bne	r5,zero,8055c0 <___vfprintf_internal_r+0x4a4>
  80550c:	d9814a17 	ldw	r6,1320(sp)
  805510:	d8814517 	ldw	r2,1300(sp)
  805514:	30a1c83a 	sub	r16,r6,r2
  805518:	0400290e 	bge	zero,r16,8055c0 <___vfprintf_internal_r+0x4a4>
  80551c:	00800404 	movi	r2,16
  805520:	14045e0e 	bge	r2,r16,80669c <___vfprintf_internal_r+0x1580>
  805524:	dc800e17 	ldw	r18,56(sp)
  805528:	dc400d17 	ldw	r17,52(sp)
  80552c:	1027883a 	mov	r19,r2
  805530:	07002074 	movhi	fp,129
  805534:	e713b884 	addi	fp,fp,20194
  805538:	050001c4 	movi	r20,7
  80553c:	00000306 	br	80554c <___vfprintf_internal_r+0x430>
  805540:	843ffc04 	addi	r16,r16,-16
  805544:	ad400204 	addi	r21,r21,8
  805548:	9c00130e 	bge	r19,r16,805598 <___vfprintf_internal_r+0x47c>
  80554c:	94800404 	addi	r18,r18,16
  805550:	8c400044 	addi	r17,r17,1
  805554:	af000015 	stw	fp,0(r21)
  805558:	acc00115 	stw	r19,4(r21)
  80555c:	dc800e15 	stw	r18,56(sp)
  805560:	dc400d15 	stw	r17,52(sp)
  805564:	a47ff60e 	bge	r20,r17,805540 <___vfprintf_internal_r+0x424>
  805568:	d9014f17 	ldw	r4,1340(sp)
  80556c:	b00b883a 	mov	r5,r22
  805570:	d9800c04 	addi	r6,sp,48
  805574:	d9c15115 	stw	r7,1348(sp)
  805578:	08050c40 	call	8050c4 <__sprint_r>
  80557c:	d9c15117 	ldw	r7,1348(sp)
  805580:	10009e1e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  805584:	843ffc04 	addi	r16,r16,-16
  805588:	dc800e17 	ldw	r18,56(sp)
  80558c:	dc400d17 	ldw	r17,52(sp)
  805590:	dd401904 	addi	r21,sp,100
  805594:	9c3fed16 	blt	r19,r16,80554c <___vfprintf_internal_r+0x430>
  805598:	9425883a 	add	r18,r18,r16
  80559c:	8c400044 	addi	r17,r17,1
  8055a0:	008001c4 	movi	r2,7
  8055a4:	af000015 	stw	fp,0(r21)
  8055a8:	ac000115 	stw	r16,4(r21)
  8055ac:	dc800e15 	stw	r18,56(sp)
  8055b0:	dc400d15 	stw	r17,52(sp)
  8055b4:	1441f516 	blt	r2,r17,805d8c <___vfprintf_internal_r+0xc70>
  8055b8:	ad400204 	addi	r21,r21,8
  8055bc:	00000206 	br	8055c8 <___vfprintf_internal_r+0x4ac>
  8055c0:	dc800e17 	ldw	r18,56(sp)
  8055c4:	dc400d17 	ldw	r17,52(sp)
  8055c8:	d8800407 	ldb	r2,16(sp)
  8055cc:	10000b26 	beq	r2,zero,8055fc <___vfprintf_internal_r+0x4e0>
  8055d0:	00800044 	movi	r2,1
  8055d4:	94800044 	addi	r18,r18,1
  8055d8:	8c400044 	addi	r17,r17,1
  8055dc:	a8800115 	stw	r2,4(r21)
  8055e0:	d8c00404 	addi	r3,sp,16
  8055e4:	008001c4 	movi	r2,7
  8055e8:	a8c00015 	stw	r3,0(r21)
  8055ec:	dc800e15 	stw	r18,56(sp)
  8055f0:	dc400d15 	stw	r17,52(sp)
  8055f4:	1441da16 	blt	r2,r17,805d60 <___vfprintf_internal_r+0xc44>
  8055f8:	ad400204 	addi	r21,r21,8
  8055fc:	d9015017 	ldw	r4,1344(sp)
  805600:	20000b1e 	bne	r4,zero,805630 <___vfprintf_internal_r+0x514>
  805604:	d8800444 	addi	r2,sp,17
  805608:	94800084 	addi	r18,r18,2
  80560c:	8c400044 	addi	r17,r17,1
  805610:	a8800015 	stw	r2,0(r21)
  805614:	00c00084 	movi	r3,2
  805618:	008001c4 	movi	r2,7
  80561c:	a8c00115 	stw	r3,4(r21)
  805620:	dc800e15 	stw	r18,56(sp)
  805624:	dc400d15 	stw	r17,52(sp)
  805628:	1441c216 	blt	r2,r17,805d34 <___vfprintf_internal_r+0xc18>
  80562c:	ad400204 	addi	r21,r21,8
  805630:	d9414e17 	ldw	r5,1336(sp)
  805634:	00802004 	movi	r2,128
  805638:	2880b126 	beq	r5,r2,805900 <___vfprintf_internal_r+0x7e4>
  80563c:	d8c14617 	ldw	r3,1304(sp)
  805640:	19e1c83a 	sub	r16,r3,r7
  805644:	0400260e 	bge	zero,r16,8056e0 <___vfprintf_internal_r+0x5c4>
  805648:	00800404 	movi	r2,16
  80564c:	1403cf0e 	bge	r2,r16,80658c <___vfprintf_internal_r+0x1470>
  805650:	1027883a 	mov	r19,r2
  805654:	07002074 	movhi	fp,129
  805658:	e713b484 	addi	fp,fp,20178
  80565c:	050001c4 	movi	r20,7
  805660:	00000306 	br	805670 <___vfprintf_internal_r+0x554>
  805664:	843ffc04 	addi	r16,r16,-16
  805668:	ad400204 	addi	r21,r21,8
  80566c:	9c00130e 	bge	r19,r16,8056bc <___vfprintf_internal_r+0x5a0>
  805670:	94800404 	addi	r18,r18,16
  805674:	8c400044 	addi	r17,r17,1
  805678:	af000015 	stw	fp,0(r21)
  80567c:	acc00115 	stw	r19,4(r21)
  805680:	dc800e15 	stw	r18,56(sp)
  805684:	dc400d15 	stw	r17,52(sp)
  805688:	a47ff60e 	bge	r20,r17,805664 <___vfprintf_internal_r+0x548>
  80568c:	d9014f17 	ldw	r4,1340(sp)
  805690:	b00b883a 	mov	r5,r22
  805694:	d9800c04 	addi	r6,sp,48
  805698:	d9c15115 	stw	r7,1348(sp)
  80569c:	08050c40 	call	8050c4 <__sprint_r>
  8056a0:	d9c15117 	ldw	r7,1348(sp)
  8056a4:	1000551e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  8056a8:	843ffc04 	addi	r16,r16,-16
  8056ac:	dc800e17 	ldw	r18,56(sp)
  8056b0:	dc400d17 	ldw	r17,52(sp)
  8056b4:	dd401904 	addi	r21,sp,100
  8056b8:	9c3fed16 	blt	r19,r16,805670 <___vfprintf_internal_r+0x554>
  8056bc:	9425883a 	add	r18,r18,r16
  8056c0:	8c400044 	addi	r17,r17,1
  8056c4:	008001c4 	movi	r2,7
  8056c8:	af000015 	stw	fp,0(r21)
  8056cc:	ac000115 	stw	r16,4(r21)
  8056d0:	dc800e15 	stw	r18,56(sp)
  8056d4:	dc400d15 	stw	r17,52(sp)
  8056d8:	14418216 	blt	r2,r17,805ce4 <___vfprintf_internal_r+0xbc8>
  8056dc:	ad400204 	addi	r21,r21,8
  8056e0:	d9014c17 	ldw	r4,1328(sp)
  8056e4:	2080400c 	andi	r2,r4,256
  8056e8:	10004a1e 	bne	r2,zero,805814 <___vfprintf_internal_r+0x6f8>
  8056ec:	d9414117 	ldw	r5,1284(sp)
  8056f0:	91e5883a 	add	r18,r18,r7
  8056f4:	8c400044 	addi	r17,r17,1
  8056f8:	008001c4 	movi	r2,7
  8056fc:	a9400015 	stw	r5,0(r21)
  805700:	a9c00115 	stw	r7,4(r21)
  805704:	dc800e15 	stw	r18,56(sp)
  805708:	dc400d15 	stw	r17,52(sp)
  80570c:	14416716 	blt	r2,r17,805cac <___vfprintf_internal_r+0xb90>
  805710:	a8c00204 	addi	r3,r21,8
  805714:	d9814c17 	ldw	r6,1328(sp)
  805718:	3080010c 	andi	r2,r6,4
  80571c:	10002826 	beq	r2,zero,8057c0 <___vfprintf_internal_r+0x6a4>
  805720:	d8814a17 	ldw	r2,1320(sp)
  805724:	d9014517 	ldw	r4,1300(sp)
  805728:	1121c83a 	sub	r16,r2,r4
  80572c:	0400240e 	bge	zero,r16,8057c0 <___vfprintf_internal_r+0x6a4>
  805730:	00800404 	movi	r2,16
  805734:	1404550e 	bge	r2,r16,80688c <___vfprintf_internal_r+0x1770>
  805738:	dc400d17 	ldw	r17,52(sp)
  80573c:	1027883a 	mov	r19,r2
  805740:	07002074 	movhi	fp,129
  805744:	e713b884 	addi	fp,fp,20194
  805748:	050001c4 	movi	r20,7
  80574c:	00000306 	br	80575c <___vfprintf_internal_r+0x640>
  805750:	843ffc04 	addi	r16,r16,-16
  805754:	18c00204 	addi	r3,r3,8
  805758:	9c00110e 	bge	r19,r16,8057a0 <___vfprintf_internal_r+0x684>
  80575c:	94800404 	addi	r18,r18,16
  805760:	8c400044 	addi	r17,r17,1
  805764:	1f000015 	stw	fp,0(r3)
  805768:	1cc00115 	stw	r19,4(r3)
  80576c:	dc800e15 	stw	r18,56(sp)
  805770:	dc400d15 	stw	r17,52(sp)
  805774:	a47ff60e 	bge	r20,r17,805750 <___vfprintf_internal_r+0x634>
  805778:	d9014f17 	ldw	r4,1340(sp)
  80577c:	b00b883a 	mov	r5,r22
  805780:	d9800c04 	addi	r6,sp,48
  805784:	08050c40 	call	8050c4 <__sprint_r>
  805788:	10001c1e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  80578c:	843ffc04 	addi	r16,r16,-16
  805790:	dc800e17 	ldw	r18,56(sp)
  805794:	dc400d17 	ldw	r17,52(sp)
  805798:	d8c01904 	addi	r3,sp,100
  80579c:	9c3fef16 	blt	r19,r16,80575c <___vfprintf_internal_r+0x640>
  8057a0:	9425883a 	add	r18,r18,r16
  8057a4:	8c400044 	addi	r17,r17,1
  8057a8:	008001c4 	movi	r2,7
  8057ac:	1f000015 	stw	fp,0(r3)
  8057b0:	1c000115 	stw	r16,4(r3)
  8057b4:	dc800e15 	stw	r18,56(sp)
  8057b8:	dc400d15 	stw	r17,52(sp)
  8057bc:	1440cb16 	blt	r2,r17,805aec <___vfprintf_internal_r+0x9d0>
  8057c0:	d8814a17 	ldw	r2,1320(sp)
  8057c4:	d9414517 	ldw	r5,1300(sp)
  8057c8:	1140010e 	bge	r2,r5,8057d0 <___vfprintf_internal_r+0x6b4>
  8057cc:	2805883a 	mov	r2,r5
  8057d0:	d9814b17 	ldw	r6,1324(sp)
  8057d4:	308d883a 	add	r6,r6,r2
  8057d8:	d9814b15 	stw	r6,1324(sp)
  8057dc:	90013b1e 	bne	r18,zero,805ccc <___vfprintf_internal_r+0xbb0>
  8057e0:	d9c14017 	ldw	r7,1280(sp)
  8057e4:	dd401904 	addi	r21,sp,100
  8057e8:	d8000d15 	stw	zero,52(sp)
  8057ec:	003ea706 	br	80528c <___vfprintf_internal_r+0x170>
  8057f0:	d8800e17 	ldw	r2,56(sp)
  8057f4:	1005451e 	bne	r2,zero,806d0c <___vfprintf_internal_r+0x1bf0>
  8057f8:	d8000d15 	stw	zero,52(sp)
  8057fc:	b080030b 	ldhu	r2,12(r22)
  805800:	1080100c 	andi	r2,r2,64
  805804:	103e8726 	beq	r2,zero,805224 <___vfprintf_internal_r+0x108>
  805808:	00bfffc4 	movi	r2,-1
  80580c:	d8814b15 	stw	r2,1324(sp)
  805810:	003e8406 	br	805224 <___vfprintf_internal_r+0x108>
  805814:	d9814d17 	ldw	r6,1332(sp)
  805818:	00801944 	movi	r2,101
  80581c:	11806e16 	blt	r2,r6,8059d8 <___vfprintf_internal_r+0x8bc>
  805820:	d9414717 	ldw	r5,1308(sp)
  805824:	00c00044 	movi	r3,1
  805828:	1943490e 	bge	r3,r5,806550 <___vfprintf_internal_r+0x1434>
  80582c:	d8814117 	ldw	r2,1284(sp)
  805830:	94800044 	addi	r18,r18,1
  805834:	8c400044 	addi	r17,r17,1
  805838:	a8800015 	stw	r2,0(r21)
  80583c:	008001c4 	movi	r2,7
  805840:	a8c00115 	stw	r3,4(r21)
  805844:	dc800e15 	stw	r18,56(sp)
  805848:	dc400d15 	stw	r17,52(sp)
  80584c:	1441ca16 	blt	r2,r17,805f78 <___vfprintf_internal_r+0xe5c>
  805850:	a8c00204 	addi	r3,r21,8
  805854:	d9014917 	ldw	r4,1316(sp)
  805858:	00800044 	movi	r2,1
  80585c:	94800044 	addi	r18,r18,1
  805860:	8c400044 	addi	r17,r17,1
  805864:	18800115 	stw	r2,4(r3)
  805868:	008001c4 	movi	r2,7
  80586c:	19000015 	stw	r4,0(r3)
  805870:	dc800e15 	stw	r18,56(sp)
  805874:	dc400d15 	stw	r17,52(sp)
  805878:	1441b616 	blt	r2,r17,805f54 <___vfprintf_internal_r+0xe38>
  80587c:	1cc00204 	addi	r19,r3,8
  805880:	d9014217 	ldw	r4,1288(sp)
  805884:	d9414317 	ldw	r5,1292(sp)
  805888:	000d883a 	mov	r6,zero
  80588c:	000f883a 	mov	r7,zero
  805890:	0810d5c0 	call	810d5c <__nedf2>
  805894:	10017426 	beq	r2,zero,805e68 <___vfprintf_internal_r+0xd4c>
  805898:	d9414717 	ldw	r5,1308(sp)
  80589c:	d9814117 	ldw	r6,1284(sp)
  8058a0:	8c400044 	addi	r17,r17,1
  8058a4:	2c85883a 	add	r2,r5,r18
  8058a8:	14bfffc4 	addi	r18,r2,-1
  8058ac:	28bfffc4 	addi	r2,r5,-1
  8058b0:	30c00044 	addi	r3,r6,1
  8058b4:	98800115 	stw	r2,4(r19)
  8058b8:	008001c4 	movi	r2,7
  8058bc:	98c00015 	stw	r3,0(r19)
  8058c0:	dc800e15 	stw	r18,56(sp)
  8058c4:	dc400d15 	stw	r17,52(sp)
  8058c8:	14418e16 	blt	r2,r17,805f04 <___vfprintf_internal_r+0xde8>
  8058cc:	9cc00204 	addi	r19,r19,8
  8058d0:	d9414817 	ldw	r5,1312(sp)
  8058d4:	d8800804 	addi	r2,sp,32
  8058d8:	8c400044 	addi	r17,r17,1
  8058dc:	9165883a 	add	r18,r18,r5
  8058e0:	98800015 	stw	r2,0(r19)
  8058e4:	008001c4 	movi	r2,7
  8058e8:	99400115 	stw	r5,4(r19)
  8058ec:	dc800e15 	stw	r18,56(sp)
  8058f0:	dc400d15 	stw	r17,52(sp)
  8058f4:	1440ed16 	blt	r2,r17,805cac <___vfprintf_internal_r+0xb90>
  8058f8:	98c00204 	addi	r3,r19,8
  8058fc:	003f8506 	br	805714 <___vfprintf_internal_r+0x5f8>
  805900:	d9814a17 	ldw	r6,1320(sp)
  805904:	d8814517 	ldw	r2,1300(sp)
  805908:	30a1c83a 	sub	r16,r6,r2
  80590c:	043f4b0e 	bge	zero,r16,80563c <___vfprintf_internal_r+0x520>
  805910:	00800404 	movi	r2,16
  805914:	14043a0e 	bge	r2,r16,806a00 <___vfprintf_internal_r+0x18e4>
  805918:	1027883a 	mov	r19,r2
  80591c:	07002074 	movhi	fp,129
  805920:	e713b484 	addi	fp,fp,20178
  805924:	050001c4 	movi	r20,7
  805928:	00000306 	br	805938 <___vfprintf_internal_r+0x81c>
  80592c:	843ffc04 	addi	r16,r16,-16
  805930:	ad400204 	addi	r21,r21,8
  805934:	9c00130e 	bge	r19,r16,805984 <___vfprintf_internal_r+0x868>
  805938:	94800404 	addi	r18,r18,16
  80593c:	8c400044 	addi	r17,r17,1
  805940:	af000015 	stw	fp,0(r21)
  805944:	acc00115 	stw	r19,4(r21)
  805948:	dc800e15 	stw	r18,56(sp)
  80594c:	dc400d15 	stw	r17,52(sp)
  805950:	a47ff60e 	bge	r20,r17,80592c <___vfprintf_internal_r+0x810>
  805954:	d9014f17 	ldw	r4,1340(sp)
  805958:	b00b883a 	mov	r5,r22
  80595c:	d9800c04 	addi	r6,sp,48
  805960:	d9c15115 	stw	r7,1348(sp)
  805964:	08050c40 	call	8050c4 <__sprint_r>
  805968:	d9c15117 	ldw	r7,1348(sp)
  80596c:	103fa31e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  805970:	843ffc04 	addi	r16,r16,-16
  805974:	dc800e17 	ldw	r18,56(sp)
  805978:	dc400d17 	ldw	r17,52(sp)
  80597c:	dd401904 	addi	r21,sp,100
  805980:	9c3fed16 	blt	r19,r16,805938 <___vfprintf_internal_r+0x81c>
  805984:	9425883a 	add	r18,r18,r16
  805988:	8c400044 	addi	r17,r17,1
  80598c:	008001c4 	movi	r2,7
  805990:	af000015 	stw	fp,0(r21)
  805994:	ac000115 	stw	r16,4(r21)
  805998:	dc800e15 	stw	r18,56(sp)
  80599c:	dc400d15 	stw	r17,52(sp)
  8059a0:	14416116 	blt	r2,r17,805f28 <___vfprintf_internal_r+0xe0c>
  8059a4:	ad400204 	addi	r21,r21,8
  8059a8:	003f2406 	br	80563c <___vfprintf_internal_r+0x520>
  8059ac:	d9014f17 	ldw	r4,1340(sp)
  8059b0:	08028cc0 	call	8028cc <__sinit>
  8059b4:	d9c15117 	ldw	r7,1348(sp)
  8059b8:	003def06 	br	805178 <___vfprintf_internal_r+0x5c>
  8059bc:	d9014f17 	ldw	r4,1340(sp)
  8059c0:	b00b883a 	mov	r5,r22
  8059c4:	d9c15115 	stw	r7,1348(sp)
  8059c8:	08088040 	call	808804 <__swsetup_r>
  8059cc:	d9c15117 	ldw	r7,1348(sp)
  8059d0:	103dee26 	beq	r2,zero,80518c <___vfprintf_internal_r+0x70>
  8059d4:	003f8c06 	br	805808 <___vfprintf_internal_r+0x6ec>
  8059d8:	d9014217 	ldw	r4,1288(sp)
  8059dc:	d9414317 	ldw	r5,1292(sp)
  8059e0:	000d883a 	mov	r6,zero
  8059e4:	000f883a 	mov	r7,zero
  8059e8:	0810cd40 	call	810cd4 <__eqdf2>
  8059ec:	1000f21e 	bne	r2,zero,805db8 <___vfprintf_internal_r+0xc9c>
  8059f0:	00802074 	movhi	r2,129
  8059f4:	1093b404 	addi	r2,r2,20176
  8059f8:	94800044 	addi	r18,r18,1
  8059fc:	8c400044 	addi	r17,r17,1
  805a00:	a8800015 	stw	r2,0(r21)
  805a04:	00c00044 	movi	r3,1
  805a08:	008001c4 	movi	r2,7
  805a0c:	a8c00115 	stw	r3,4(r21)
  805a10:	dc800e15 	stw	r18,56(sp)
  805a14:	dc400d15 	stw	r17,52(sp)
  805a18:	14430016 	blt	r2,r17,80661c <___vfprintf_internal_r+0x1500>
  805a1c:	a8c00204 	addi	r3,r21,8
  805a20:	d8800517 	ldw	r2,20(sp)
  805a24:	d9014717 	ldw	r4,1308(sp)
  805a28:	11015c0e 	bge	r2,r4,805f9c <___vfprintf_internal_r+0xe80>
  805a2c:	dc400d17 	ldw	r17,52(sp)
  805a30:	d9814917 	ldw	r6,1316(sp)
  805a34:	00800044 	movi	r2,1
  805a38:	94800044 	addi	r18,r18,1
  805a3c:	8c400044 	addi	r17,r17,1
  805a40:	18800115 	stw	r2,4(r3)
  805a44:	008001c4 	movi	r2,7
  805a48:	19800015 	stw	r6,0(r3)
  805a4c:	dc800e15 	stw	r18,56(sp)
  805a50:	dc400d15 	stw	r17,52(sp)
  805a54:	14431616 	blt	r2,r17,8066b0 <___vfprintf_internal_r+0x1594>
  805a58:	18c00204 	addi	r3,r3,8
  805a5c:	d8814717 	ldw	r2,1308(sp)
  805a60:	143fffc4 	addi	r16,r2,-1
  805a64:	043f2b0e 	bge	zero,r16,805714 <___vfprintf_internal_r+0x5f8>
  805a68:	00800404 	movi	r2,16
  805a6c:	1402a80e 	bge	r2,r16,806510 <___vfprintf_internal_r+0x13f4>
  805a70:	dc400d17 	ldw	r17,52(sp)
  805a74:	1027883a 	mov	r19,r2
  805a78:	07002074 	movhi	fp,129
  805a7c:	e713b484 	addi	fp,fp,20178
  805a80:	050001c4 	movi	r20,7
  805a84:	00000306 	br	805a94 <___vfprintf_internal_r+0x978>
  805a88:	18c00204 	addi	r3,r3,8
  805a8c:	843ffc04 	addi	r16,r16,-16
  805a90:	9c02a20e 	bge	r19,r16,80651c <___vfprintf_internal_r+0x1400>
  805a94:	94800404 	addi	r18,r18,16
  805a98:	8c400044 	addi	r17,r17,1
  805a9c:	1f000015 	stw	fp,0(r3)
  805aa0:	1cc00115 	stw	r19,4(r3)
  805aa4:	dc800e15 	stw	r18,56(sp)
  805aa8:	dc400d15 	stw	r17,52(sp)
  805aac:	a47ff60e 	bge	r20,r17,805a88 <___vfprintf_internal_r+0x96c>
  805ab0:	d9014f17 	ldw	r4,1340(sp)
  805ab4:	b00b883a 	mov	r5,r22
  805ab8:	d9800c04 	addi	r6,sp,48
  805abc:	08050c40 	call	8050c4 <__sprint_r>
  805ac0:	103f4e1e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  805ac4:	dc800e17 	ldw	r18,56(sp)
  805ac8:	dc400d17 	ldw	r17,52(sp)
  805acc:	d8c01904 	addi	r3,sp,100
  805ad0:	003fee06 	br	805a8c <___vfprintf_internal_r+0x970>
  805ad4:	d8802c0b 	ldhu	r2,176(sp)
  805ad8:	00ffffc4 	movi	r3,-1
  805adc:	d8c14b15 	stw	r3,1324(sp)
  805ae0:	1080100c 	andi	r2,r2,64
  805ae4:	103dcc1e 	bne	r2,zero,805218 <___vfprintf_internal_r+0xfc>
  805ae8:	003dce06 	br	805224 <___vfprintf_internal_r+0x108>
  805aec:	d9014f17 	ldw	r4,1340(sp)
  805af0:	b00b883a 	mov	r5,r22
  805af4:	d9800c04 	addi	r6,sp,48
  805af8:	08050c40 	call	8050c4 <__sprint_r>
  805afc:	103f3f1e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  805b00:	dc800e17 	ldw	r18,56(sp)
  805b04:	003f2e06 	br	8057c0 <___vfprintf_internal_r+0x6a4>
  805b08:	d9414c17 	ldw	r5,1328(sp)
  805b0c:	29400414 	ori	r5,r5,16
  805b10:	d9414c15 	stw	r5,1328(sp)
  805b14:	d9814c17 	ldw	r6,1328(sp)
  805b18:	3080080c 	andi	r2,r6,32
  805b1c:	10014f1e 	bne	r2,zero,80605c <___vfprintf_internal_r+0xf40>
  805b20:	d8c14c17 	ldw	r3,1328(sp)
  805b24:	1880040c 	andi	r2,r3,16
  805b28:	1002f01e 	bne	r2,zero,8066ec <___vfprintf_internal_r+0x15d0>
  805b2c:	d9014c17 	ldw	r4,1328(sp)
  805b30:	2080100c 	andi	r2,r4,64
  805b34:	1002ed26 	beq	r2,zero,8066ec <___vfprintf_internal_r+0x15d0>
  805b38:	3880000f 	ldh	r2,0(r7)
  805b3c:	39c00104 	addi	r7,r7,4
  805b40:	d9c14015 	stw	r7,1280(sp)
  805b44:	1023d7fa 	srai	r17,r2,31
  805b48:	1021883a 	mov	r16,r2
  805b4c:	88037816 	blt	r17,zero,806930 <___vfprintf_internal_r+0x1814>
  805b50:	01000044 	movi	r4,1
  805b54:	98000416 	blt	r19,zero,805b68 <___vfprintf_internal_r+0xa4c>
  805b58:	d8c14c17 	ldw	r3,1328(sp)
  805b5c:	00bfdfc4 	movi	r2,-129
  805b60:	1886703a 	and	r3,r3,r2
  805b64:	d8c14c15 	stw	r3,1328(sp)
  805b68:	8444b03a 	or	r2,r16,r17
  805b6c:	10022c1e 	bne	r2,zero,806420 <___vfprintf_internal_r+0x1304>
  805b70:	98022b1e 	bne	r19,zero,806420 <___vfprintf_internal_r+0x1304>
  805b74:	20803fcc 	andi	r2,r4,255
  805b78:	1002a126 	beq	r2,zero,806600 <___vfprintf_internal_r+0x14e4>
  805b7c:	d8c01904 	addi	r3,sp,100
  805b80:	dd000f04 	addi	r20,sp,60
  805b84:	d8c14115 	stw	r3,1284(sp)
  805b88:	d8c14117 	ldw	r3,1284(sp)
  805b8c:	dcc14515 	stw	r19,1300(sp)
  805b90:	a0c5c83a 	sub	r2,r20,r3
  805b94:	11c00a04 	addi	r7,r2,40
  805b98:	99c0010e 	bge	r19,r7,805ba0 <___vfprintf_internal_r+0xa84>
  805b9c:	d9c14515 	stw	r7,1300(sp)
  805ba0:	dcc14615 	stw	r19,1304(sp)
  805ba4:	d8800407 	ldb	r2,16(sp)
  805ba8:	103e4c26 	beq	r2,zero,8054dc <___vfprintf_internal_r+0x3c0>
  805bac:	d8814517 	ldw	r2,1300(sp)
  805bb0:	10800044 	addi	r2,r2,1
  805bb4:	d8814515 	stw	r2,1300(sp)
  805bb8:	003e4806 	br	8054dc <___vfprintf_internal_r+0x3c0>
  805bbc:	d9814c17 	ldw	r6,1328(sp)
  805bc0:	31800414 	ori	r6,r6,16
  805bc4:	d9814c15 	stw	r6,1328(sp)
  805bc8:	d8c14c17 	ldw	r3,1328(sp)
  805bcc:	1880080c 	andi	r2,r3,32
  805bd0:	1001271e 	bne	r2,zero,806070 <___vfprintf_internal_r+0xf54>
  805bd4:	d9414c17 	ldw	r5,1328(sp)
  805bd8:	2880040c 	andi	r2,r5,16
  805bdc:	1002bc1e 	bne	r2,zero,8066d0 <___vfprintf_internal_r+0x15b4>
  805be0:	d9814c17 	ldw	r6,1328(sp)
  805be4:	3080100c 	andi	r2,r6,64
  805be8:	1002b926 	beq	r2,zero,8066d0 <___vfprintf_internal_r+0x15b4>
  805bec:	3c00000b 	ldhu	r16,0(r7)
  805bf0:	0009883a 	mov	r4,zero
  805bf4:	39c00104 	addi	r7,r7,4
  805bf8:	0023883a 	mov	r17,zero
  805bfc:	d9c14015 	stw	r7,1280(sp)
  805c00:	d8000405 	stb	zero,16(sp)
  805c04:	003fd306 	br	805b54 <___vfprintf_internal_r+0xa38>
  805c08:	d9014c17 	ldw	r4,1328(sp)
  805c0c:	21000414 	ori	r4,r4,16
  805c10:	d9014c15 	stw	r4,1328(sp)
  805c14:	d9414c17 	ldw	r5,1328(sp)
  805c18:	2880080c 	andi	r2,r5,32
  805c1c:	1001081e 	bne	r2,zero,806040 <___vfprintf_internal_r+0xf24>
  805c20:	d8c14c17 	ldw	r3,1328(sp)
  805c24:	1880040c 	andi	r2,r3,16
  805c28:	1002b61e 	bne	r2,zero,806704 <___vfprintf_internal_r+0x15e8>
  805c2c:	d9014c17 	ldw	r4,1328(sp)
  805c30:	2080100c 	andi	r2,r4,64
  805c34:	1002b326 	beq	r2,zero,806704 <___vfprintf_internal_r+0x15e8>
  805c38:	3c00000b 	ldhu	r16,0(r7)
  805c3c:	01000044 	movi	r4,1
  805c40:	39c00104 	addi	r7,r7,4
  805c44:	0023883a 	mov	r17,zero
  805c48:	d9c14015 	stw	r7,1280(sp)
  805c4c:	d8000405 	stb	zero,16(sp)
  805c50:	003fc006 	br	805b54 <___vfprintf_internal_r+0xa38>
  805c54:	d9014f17 	ldw	r4,1340(sp)
  805c58:	b00b883a 	mov	r5,r22
  805c5c:	d9800c04 	addi	r6,sp,48
  805c60:	08050c40 	call	8050c4 <__sprint_r>
  805c64:	103ee51e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  805c68:	dc800e17 	ldw	r18,56(sp)
  805c6c:	d8c01904 	addi	r3,sp,100
  805c70:	d9814c17 	ldw	r6,1328(sp)
  805c74:	3080004c 	andi	r2,r6,1
  805c78:	1005003a 	cmpeq	r2,r2,zero
  805c7c:	103ea51e 	bne	r2,zero,805714 <___vfprintf_internal_r+0x5f8>
  805c80:	00800044 	movi	r2,1
  805c84:	dc400d17 	ldw	r17,52(sp)
  805c88:	18800115 	stw	r2,4(r3)
  805c8c:	d8814917 	ldw	r2,1316(sp)
  805c90:	94800044 	addi	r18,r18,1
  805c94:	8c400044 	addi	r17,r17,1
  805c98:	18800015 	stw	r2,0(r3)
  805c9c:	008001c4 	movi	r2,7
  805ca0:	dc800e15 	stw	r18,56(sp)
  805ca4:	dc400d15 	stw	r17,52(sp)
  805ca8:	1442240e 	bge	r2,r17,80653c <___vfprintf_internal_r+0x1420>
  805cac:	d9014f17 	ldw	r4,1340(sp)
  805cb0:	b00b883a 	mov	r5,r22
  805cb4:	d9800c04 	addi	r6,sp,48
  805cb8:	08050c40 	call	8050c4 <__sprint_r>
  805cbc:	103ecf1e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  805cc0:	dc800e17 	ldw	r18,56(sp)
  805cc4:	d8c01904 	addi	r3,sp,100
  805cc8:	003e9206 	br	805714 <___vfprintf_internal_r+0x5f8>
  805ccc:	d9014f17 	ldw	r4,1340(sp)
  805cd0:	b00b883a 	mov	r5,r22
  805cd4:	d9800c04 	addi	r6,sp,48
  805cd8:	08050c40 	call	8050c4 <__sprint_r>
  805cdc:	103ec026 	beq	r2,zero,8057e0 <___vfprintf_internal_r+0x6c4>
  805ce0:	003ec606 	br	8057fc <___vfprintf_internal_r+0x6e0>
  805ce4:	d9014f17 	ldw	r4,1340(sp)
  805ce8:	b00b883a 	mov	r5,r22
  805cec:	d9800c04 	addi	r6,sp,48
  805cf0:	d9c15115 	stw	r7,1348(sp)
  805cf4:	08050c40 	call	8050c4 <__sprint_r>
  805cf8:	d9c15117 	ldw	r7,1348(sp)
  805cfc:	103ebf1e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  805d00:	dc800e17 	ldw	r18,56(sp)
  805d04:	dc400d17 	ldw	r17,52(sp)
  805d08:	dd401904 	addi	r21,sp,100
  805d0c:	003e7406 	br	8056e0 <___vfprintf_internal_r+0x5c4>
  805d10:	d9014f17 	ldw	r4,1340(sp)
  805d14:	b00b883a 	mov	r5,r22
  805d18:	d9800c04 	addi	r6,sp,48
  805d1c:	d9c15115 	stw	r7,1348(sp)
  805d20:	08050c40 	call	8050c4 <__sprint_r>
  805d24:	d9c15117 	ldw	r7,1348(sp)
  805d28:	103eb41e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  805d2c:	dd401904 	addi	r21,sp,100
  805d30:	003d6d06 	br	8052e8 <___vfprintf_internal_r+0x1cc>
  805d34:	d9014f17 	ldw	r4,1340(sp)
  805d38:	b00b883a 	mov	r5,r22
  805d3c:	d9800c04 	addi	r6,sp,48
  805d40:	d9c15115 	stw	r7,1348(sp)
  805d44:	08050c40 	call	8050c4 <__sprint_r>
  805d48:	d9c15117 	ldw	r7,1348(sp)
  805d4c:	103eab1e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  805d50:	dc800e17 	ldw	r18,56(sp)
  805d54:	dc400d17 	ldw	r17,52(sp)
  805d58:	dd401904 	addi	r21,sp,100
  805d5c:	003e3406 	br	805630 <___vfprintf_internal_r+0x514>
  805d60:	d9014f17 	ldw	r4,1340(sp)
  805d64:	b00b883a 	mov	r5,r22
  805d68:	d9800c04 	addi	r6,sp,48
  805d6c:	d9c15115 	stw	r7,1348(sp)
  805d70:	08050c40 	call	8050c4 <__sprint_r>
  805d74:	d9c15117 	ldw	r7,1348(sp)
  805d78:	103ea01e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  805d7c:	dc800e17 	ldw	r18,56(sp)
  805d80:	dc400d17 	ldw	r17,52(sp)
  805d84:	dd401904 	addi	r21,sp,100
  805d88:	003e1c06 	br	8055fc <___vfprintf_internal_r+0x4e0>
  805d8c:	d9014f17 	ldw	r4,1340(sp)
  805d90:	b00b883a 	mov	r5,r22
  805d94:	d9800c04 	addi	r6,sp,48
  805d98:	d9c15115 	stw	r7,1348(sp)
  805d9c:	08050c40 	call	8050c4 <__sprint_r>
  805da0:	d9c15117 	ldw	r7,1348(sp)
  805da4:	103e951e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  805da8:	dc800e17 	ldw	r18,56(sp)
  805dac:	dc400d17 	ldw	r17,52(sp)
  805db0:	dd401904 	addi	r21,sp,100
  805db4:	003e0406 	br	8055c8 <___vfprintf_internal_r+0x4ac>
  805db8:	d9000517 	ldw	r4,20(sp)
  805dbc:	0102580e 	bge	zero,r4,806720 <___vfprintf_internal_r+0x1604>
  805dc0:	d9814717 	ldw	r6,1308(sp)
  805dc4:	21807a16 	blt	r4,r6,805fb0 <___vfprintf_internal_r+0xe94>
  805dc8:	d8814117 	ldw	r2,1284(sp)
  805dcc:	91a5883a 	add	r18,r18,r6
  805dd0:	8c400044 	addi	r17,r17,1
  805dd4:	a8800015 	stw	r2,0(r21)
  805dd8:	008001c4 	movi	r2,7
  805ddc:	a9800115 	stw	r6,4(r21)
  805de0:	dc800e15 	stw	r18,56(sp)
  805de4:	dc400d15 	stw	r17,52(sp)
  805de8:	1442fc16 	blt	r2,r17,8069dc <___vfprintf_internal_r+0x18c0>
  805dec:	a8c00204 	addi	r3,r21,8
  805df0:	d9414717 	ldw	r5,1308(sp)
  805df4:	2161c83a 	sub	r16,r4,r5
  805df8:	043f9d0e 	bge	zero,r16,805c70 <___vfprintf_internal_r+0xb54>
  805dfc:	00800404 	movi	r2,16
  805e00:	1402190e 	bge	r2,r16,806668 <___vfprintf_internal_r+0x154c>
  805e04:	dc400d17 	ldw	r17,52(sp)
  805e08:	1027883a 	mov	r19,r2
  805e0c:	07002074 	movhi	fp,129
  805e10:	e713b484 	addi	fp,fp,20178
  805e14:	050001c4 	movi	r20,7
  805e18:	00000306 	br	805e28 <___vfprintf_internal_r+0xd0c>
  805e1c:	18c00204 	addi	r3,r3,8
  805e20:	843ffc04 	addi	r16,r16,-16
  805e24:	9c02130e 	bge	r19,r16,806674 <___vfprintf_internal_r+0x1558>
  805e28:	94800404 	addi	r18,r18,16
  805e2c:	8c400044 	addi	r17,r17,1
  805e30:	1f000015 	stw	fp,0(r3)
  805e34:	1cc00115 	stw	r19,4(r3)
  805e38:	dc800e15 	stw	r18,56(sp)
  805e3c:	dc400d15 	stw	r17,52(sp)
  805e40:	a47ff60e 	bge	r20,r17,805e1c <___vfprintf_internal_r+0xd00>
  805e44:	d9014f17 	ldw	r4,1340(sp)
  805e48:	b00b883a 	mov	r5,r22
  805e4c:	d9800c04 	addi	r6,sp,48
  805e50:	08050c40 	call	8050c4 <__sprint_r>
  805e54:	103e691e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  805e58:	dc800e17 	ldw	r18,56(sp)
  805e5c:	dc400d17 	ldw	r17,52(sp)
  805e60:	d8c01904 	addi	r3,sp,100
  805e64:	003fee06 	br	805e20 <___vfprintf_internal_r+0xd04>
  805e68:	d8814717 	ldw	r2,1308(sp)
  805e6c:	143fffc4 	addi	r16,r2,-1
  805e70:	043e970e 	bge	zero,r16,8058d0 <___vfprintf_internal_r+0x7b4>
  805e74:	00800404 	movi	r2,16
  805e78:	1400180e 	bge	r2,r16,805edc <___vfprintf_internal_r+0xdc0>
  805e7c:	1029883a 	mov	r20,r2
  805e80:	07002074 	movhi	fp,129
  805e84:	e713b484 	addi	fp,fp,20178
  805e88:	054001c4 	movi	r21,7
  805e8c:	00000306 	br	805e9c <___vfprintf_internal_r+0xd80>
  805e90:	9cc00204 	addi	r19,r19,8
  805e94:	843ffc04 	addi	r16,r16,-16
  805e98:	a400120e 	bge	r20,r16,805ee4 <___vfprintf_internal_r+0xdc8>
  805e9c:	94800404 	addi	r18,r18,16
  805ea0:	8c400044 	addi	r17,r17,1
  805ea4:	9f000015 	stw	fp,0(r19)
  805ea8:	9d000115 	stw	r20,4(r19)
  805eac:	dc800e15 	stw	r18,56(sp)
  805eb0:	dc400d15 	stw	r17,52(sp)
  805eb4:	ac7ff60e 	bge	r21,r17,805e90 <___vfprintf_internal_r+0xd74>
  805eb8:	d9014f17 	ldw	r4,1340(sp)
  805ebc:	b00b883a 	mov	r5,r22
  805ec0:	d9800c04 	addi	r6,sp,48
  805ec4:	08050c40 	call	8050c4 <__sprint_r>
  805ec8:	103e4c1e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  805ecc:	dc800e17 	ldw	r18,56(sp)
  805ed0:	dc400d17 	ldw	r17,52(sp)
  805ed4:	dcc01904 	addi	r19,sp,100
  805ed8:	003fee06 	br	805e94 <___vfprintf_internal_r+0xd78>
  805edc:	07002074 	movhi	fp,129
  805ee0:	e713b484 	addi	fp,fp,20178
  805ee4:	9425883a 	add	r18,r18,r16
  805ee8:	8c400044 	addi	r17,r17,1
  805eec:	008001c4 	movi	r2,7
  805ef0:	9f000015 	stw	fp,0(r19)
  805ef4:	9c000115 	stw	r16,4(r19)
  805ef8:	dc800e15 	stw	r18,56(sp)
  805efc:	dc400d15 	stw	r17,52(sp)
  805f00:	147e720e 	bge	r2,r17,8058cc <___vfprintf_internal_r+0x7b0>
  805f04:	d9014f17 	ldw	r4,1340(sp)
  805f08:	b00b883a 	mov	r5,r22
  805f0c:	d9800c04 	addi	r6,sp,48
  805f10:	08050c40 	call	8050c4 <__sprint_r>
  805f14:	103e391e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  805f18:	dc800e17 	ldw	r18,56(sp)
  805f1c:	dc400d17 	ldw	r17,52(sp)
  805f20:	dcc01904 	addi	r19,sp,100
  805f24:	003e6a06 	br	8058d0 <___vfprintf_internal_r+0x7b4>
  805f28:	d9014f17 	ldw	r4,1340(sp)
  805f2c:	b00b883a 	mov	r5,r22
  805f30:	d9800c04 	addi	r6,sp,48
  805f34:	d9c15115 	stw	r7,1348(sp)
  805f38:	08050c40 	call	8050c4 <__sprint_r>
  805f3c:	d9c15117 	ldw	r7,1348(sp)
  805f40:	103e2e1e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  805f44:	dc800e17 	ldw	r18,56(sp)
  805f48:	dc400d17 	ldw	r17,52(sp)
  805f4c:	dd401904 	addi	r21,sp,100
  805f50:	003dba06 	br	80563c <___vfprintf_internal_r+0x520>
  805f54:	d9014f17 	ldw	r4,1340(sp)
  805f58:	b00b883a 	mov	r5,r22
  805f5c:	d9800c04 	addi	r6,sp,48
  805f60:	08050c40 	call	8050c4 <__sprint_r>
  805f64:	103e251e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  805f68:	dc800e17 	ldw	r18,56(sp)
  805f6c:	dc400d17 	ldw	r17,52(sp)
  805f70:	dcc01904 	addi	r19,sp,100
  805f74:	003e4206 	br	805880 <___vfprintf_internal_r+0x764>
  805f78:	d9014f17 	ldw	r4,1340(sp)
  805f7c:	b00b883a 	mov	r5,r22
  805f80:	d9800c04 	addi	r6,sp,48
  805f84:	08050c40 	call	8050c4 <__sprint_r>
  805f88:	103e1c1e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  805f8c:	dc800e17 	ldw	r18,56(sp)
  805f90:	dc400d17 	ldw	r17,52(sp)
  805f94:	d8c01904 	addi	r3,sp,100
  805f98:	003e2e06 	br	805854 <___vfprintf_internal_r+0x738>
  805f9c:	d9414c17 	ldw	r5,1328(sp)
  805fa0:	2880004c 	andi	r2,r5,1
  805fa4:	1005003a 	cmpeq	r2,r2,zero
  805fa8:	103dda1e 	bne	r2,zero,805714 <___vfprintf_internal_r+0x5f8>
  805fac:	003e9f06 	br	805a2c <___vfprintf_internal_r+0x910>
  805fb0:	d8c14117 	ldw	r3,1284(sp)
  805fb4:	9125883a 	add	r18,r18,r4
  805fb8:	8c400044 	addi	r17,r17,1
  805fbc:	008001c4 	movi	r2,7
  805fc0:	a8c00015 	stw	r3,0(r21)
  805fc4:	a9000115 	stw	r4,4(r21)
  805fc8:	dc800e15 	stw	r18,56(sp)
  805fcc:	dc400d15 	stw	r17,52(sp)
  805fd0:	14426c16 	blt	r2,r17,806984 <___vfprintf_internal_r+0x1868>
  805fd4:	a8c00204 	addi	r3,r21,8
  805fd8:	d9414917 	ldw	r5,1316(sp)
  805fdc:	00800044 	movi	r2,1
  805fe0:	94800044 	addi	r18,r18,1
  805fe4:	8c400044 	addi	r17,r17,1
  805fe8:	18800115 	stw	r2,4(r3)
  805fec:	008001c4 	movi	r2,7
  805ff0:	19400015 	stw	r5,0(r3)
  805ff4:	dc800e15 	stw	r18,56(sp)
  805ff8:	dc400d15 	stw	r17,52(sp)
  805ffc:	2021883a 	mov	r16,r4
  806000:	14425616 	blt	r2,r17,80695c <___vfprintf_internal_r+0x1840>
  806004:	19400204 	addi	r5,r3,8
  806008:	d9814717 	ldw	r6,1308(sp)
  80600c:	8c400044 	addi	r17,r17,1
  806010:	dc400d15 	stw	r17,52(sp)
  806014:	3107c83a 	sub	r3,r6,r4
  806018:	d9014117 	ldw	r4,1284(sp)
  80601c:	90e5883a 	add	r18,r18,r3
  806020:	28c00115 	stw	r3,4(r5)
  806024:	8105883a 	add	r2,r16,r4
  806028:	28800015 	stw	r2,0(r5)
  80602c:	008001c4 	movi	r2,7
  806030:	dc800e15 	stw	r18,56(sp)
  806034:	147f1d16 	blt	r2,r17,805cac <___vfprintf_internal_r+0xb90>
  806038:	28c00204 	addi	r3,r5,8
  80603c:	003db506 	br	805714 <___vfprintf_internal_r+0x5f8>
  806040:	3c000017 	ldw	r16,0(r7)
  806044:	3c400117 	ldw	r17,4(r7)
  806048:	39800204 	addi	r6,r7,8
  80604c:	01000044 	movi	r4,1
  806050:	d9814015 	stw	r6,1280(sp)
  806054:	d8000405 	stb	zero,16(sp)
  806058:	003ebe06 	br	805b54 <___vfprintf_internal_r+0xa38>
  80605c:	3c000017 	ldw	r16,0(r7)
  806060:	3c400117 	ldw	r17,4(r7)
  806064:	38800204 	addi	r2,r7,8
  806068:	d8814015 	stw	r2,1280(sp)
  80606c:	003eb706 	br	805b4c <___vfprintf_internal_r+0xa30>
  806070:	3c000017 	ldw	r16,0(r7)
  806074:	3c400117 	ldw	r17,4(r7)
  806078:	39000204 	addi	r4,r7,8
  80607c:	d9014015 	stw	r4,1280(sp)
  806080:	0009883a 	mov	r4,zero
  806084:	d8000405 	stb	zero,16(sp)
  806088:	003eb206 	br	805b54 <___vfprintf_internal_r+0xa38>
  80608c:	38c00017 	ldw	r3,0(r7)
  806090:	39c00104 	addi	r7,r7,4
  806094:	d8c14a15 	stw	r3,1320(sp)
  806098:	1800d70e 	bge	r3,zero,8063f8 <___vfprintf_internal_r+0x12dc>
  80609c:	00c7c83a 	sub	r3,zero,r3
  8060a0:	d8c14a15 	stw	r3,1320(sp)
  8060a4:	d9014c17 	ldw	r4,1328(sp)
  8060a8:	b8c00007 	ldb	r3,0(r23)
  8060ac:	21000114 	ori	r4,r4,4
  8060b0:	d9014c15 	stw	r4,1328(sp)
  8060b4:	003c9806 	br	805318 <___vfprintf_internal_r+0x1fc>
  8060b8:	d9814c17 	ldw	r6,1328(sp)
  8060bc:	3080080c 	andi	r2,r6,32
  8060c0:	1001f626 	beq	r2,zero,80689c <___vfprintf_internal_r+0x1780>
  8060c4:	d9014b17 	ldw	r4,1324(sp)
  8060c8:	38800017 	ldw	r2,0(r7)
  8060cc:	39c00104 	addi	r7,r7,4
  8060d0:	d9c14015 	stw	r7,1280(sp)
  8060d4:	2007d7fa 	srai	r3,r4,31
  8060d8:	d9c14017 	ldw	r7,1280(sp)
  8060dc:	11000015 	stw	r4,0(r2)
  8060e0:	10c00115 	stw	r3,4(r2)
  8060e4:	003c6906 	br	80528c <___vfprintf_internal_r+0x170>
  8060e8:	b8c00007 	ldb	r3,0(r23)
  8060ec:	00801b04 	movi	r2,108
  8060f0:	18825526 	beq	r3,r2,806a48 <___vfprintf_internal_r+0x192c>
  8060f4:	d9414c17 	ldw	r5,1328(sp)
  8060f8:	29400414 	ori	r5,r5,16
  8060fc:	d9414c15 	stw	r5,1328(sp)
  806100:	003c8506 	br	805318 <___vfprintf_internal_r+0x1fc>
  806104:	d9814c17 	ldw	r6,1328(sp)
  806108:	b8c00007 	ldb	r3,0(r23)
  80610c:	31800814 	ori	r6,r6,32
  806110:	d9814c15 	stw	r6,1328(sp)
  806114:	003c8006 	br	805318 <___vfprintf_internal_r+0x1fc>
  806118:	d8814c17 	ldw	r2,1328(sp)
  80611c:	3c000017 	ldw	r16,0(r7)
  806120:	00c01e04 	movi	r3,120
  806124:	10800094 	ori	r2,r2,2
  806128:	d8814c15 	stw	r2,1328(sp)
  80612c:	39c00104 	addi	r7,r7,4
  806130:	01402074 	movhi	r5,129
  806134:	29539d04 	addi	r5,r5,20084
  806138:	00800c04 	movi	r2,48
  80613c:	0023883a 	mov	r17,zero
  806140:	01000084 	movi	r4,2
  806144:	d9c14015 	stw	r7,1280(sp)
  806148:	d8c14d15 	stw	r3,1332(sp)
  80614c:	d9414415 	stw	r5,1296(sp)
  806150:	d8800445 	stb	r2,17(sp)
  806154:	d8c00485 	stb	r3,18(sp)
  806158:	d8000405 	stb	zero,16(sp)
  80615c:	003e7d06 	br	805b54 <___vfprintf_internal_r+0xa38>
  806160:	d8814c17 	ldw	r2,1328(sp)
  806164:	b8c00007 	ldb	r3,0(r23)
  806168:	10801014 	ori	r2,r2,64
  80616c:	d8814c15 	stw	r2,1328(sp)
  806170:	003c6906 	br	805318 <___vfprintf_internal_r+0x1fc>
  806174:	d9414c17 	ldw	r5,1328(sp)
  806178:	2880020c 	andi	r2,r5,8
  80617c:	1001e526 	beq	r2,zero,806914 <___vfprintf_internal_r+0x17f8>
  806180:	39800017 	ldw	r6,0(r7)
  806184:	38800204 	addi	r2,r7,8
  806188:	d8814015 	stw	r2,1280(sp)
  80618c:	d9814215 	stw	r6,1288(sp)
  806190:	39c00117 	ldw	r7,4(r7)
  806194:	d9c14315 	stw	r7,1292(sp)
  806198:	d9014217 	ldw	r4,1288(sp)
  80619c:	d9414317 	ldw	r5,1292(sp)
  8061a0:	080c3480 	call	80c348 <__isinfd>
  8061a4:	10021d26 	beq	r2,zero,806a1c <___vfprintf_internal_r+0x1900>
  8061a8:	d9014217 	ldw	r4,1288(sp)
  8061ac:	d9414317 	ldw	r5,1292(sp)
  8061b0:	000d883a 	mov	r6,zero
  8061b4:	000f883a 	mov	r7,zero
  8061b8:	0810ef40 	call	810ef4 <__ltdf2>
  8061bc:	1002d016 	blt	r2,zero,806d00 <___vfprintf_internal_r+0x1be4>
  8061c0:	d9414d17 	ldw	r5,1332(sp)
  8061c4:	008011c4 	movi	r2,71
  8061c8:	11421016 	blt	r2,r5,806a0c <___vfprintf_internal_r+0x18f0>
  8061cc:	01802074 	movhi	r6,129
  8061d0:	3193a204 	addi	r6,r6,20104
  8061d4:	d9814115 	stw	r6,1284(sp)
  8061d8:	d9014c17 	ldw	r4,1328(sp)
  8061dc:	00c000c4 	movi	r3,3
  8061e0:	00bfdfc4 	movi	r2,-129
  8061e4:	2088703a 	and	r4,r4,r2
  8061e8:	180f883a 	mov	r7,r3
  8061ec:	d8c14515 	stw	r3,1300(sp)
  8061f0:	d9014c15 	stw	r4,1328(sp)
  8061f4:	d8014615 	stw	zero,1304(sp)
  8061f8:	003e6a06 	br	805ba4 <___vfprintf_internal_r+0xa88>
  8061fc:	38800017 	ldw	r2,0(r7)
  806200:	00c00044 	movi	r3,1
  806204:	39c00104 	addi	r7,r7,4
  806208:	d9c14015 	stw	r7,1280(sp)
  80620c:	d9000f04 	addi	r4,sp,60
  806210:	180f883a 	mov	r7,r3
  806214:	d8c14515 	stw	r3,1300(sp)
  806218:	d9014115 	stw	r4,1284(sp)
  80621c:	d8800f05 	stb	r2,60(sp)
  806220:	d8000405 	stb	zero,16(sp)
  806224:	003cac06 	br	8054d8 <___vfprintf_internal_r+0x3bc>
  806228:	01402074 	movhi	r5,129
  80622c:	2953a804 	addi	r5,r5,20128
  806230:	d9414415 	stw	r5,1296(sp)
  806234:	d9814c17 	ldw	r6,1328(sp)
  806238:	3080080c 	andi	r2,r6,32
  80623c:	1000ff26 	beq	r2,zero,80663c <___vfprintf_internal_r+0x1520>
  806240:	3c000017 	ldw	r16,0(r7)
  806244:	3c400117 	ldw	r17,4(r7)
  806248:	38800204 	addi	r2,r7,8
  80624c:	d8814015 	stw	r2,1280(sp)
  806250:	d9414c17 	ldw	r5,1328(sp)
  806254:	2880004c 	andi	r2,r5,1
  806258:	1005003a 	cmpeq	r2,r2,zero
  80625c:	1000b91e 	bne	r2,zero,806544 <___vfprintf_internal_r+0x1428>
  806260:	8444b03a 	or	r2,r16,r17
  806264:	1000b726 	beq	r2,zero,806544 <___vfprintf_internal_r+0x1428>
  806268:	d9814d17 	ldw	r6,1332(sp)
  80626c:	29400094 	ori	r5,r5,2
  806270:	00800c04 	movi	r2,48
  806274:	01000084 	movi	r4,2
  806278:	d9414c15 	stw	r5,1328(sp)
  80627c:	d8800445 	stb	r2,17(sp)
  806280:	d9800485 	stb	r6,18(sp)
  806284:	d8000405 	stb	zero,16(sp)
  806288:	003e3206 	br	805b54 <___vfprintf_internal_r+0xa38>
  80628c:	01802074 	movhi	r6,129
  806290:	31939d04 	addi	r6,r6,20084
  806294:	d9814415 	stw	r6,1296(sp)
  806298:	003fe606 	br	806234 <___vfprintf_internal_r+0x1118>
  80629c:	00800ac4 	movi	r2,43
  8062a0:	d8800405 	stb	r2,16(sp)
  8062a4:	b8c00007 	ldb	r3,0(r23)
  8062a8:	003c1b06 	br	805318 <___vfprintf_internal_r+0x1fc>
  8062ac:	d8814c17 	ldw	r2,1328(sp)
  8062b0:	b8c00007 	ldb	r3,0(r23)
  8062b4:	10800054 	ori	r2,r2,1
  8062b8:	d8814c15 	stw	r2,1328(sp)
  8062bc:	003c1606 	br	805318 <___vfprintf_internal_r+0x1fc>
  8062c0:	d8800407 	ldb	r2,16(sp)
  8062c4:	10004c1e 	bne	r2,zero,8063f8 <___vfprintf_internal_r+0x12dc>
  8062c8:	00800804 	movi	r2,32
  8062cc:	d8800405 	stb	r2,16(sp)
  8062d0:	b8c00007 	ldb	r3,0(r23)
  8062d4:	003c1006 	br	805318 <___vfprintf_internal_r+0x1fc>
  8062d8:	d9814c17 	ldw	r6,1328(sp)
  8062dc:	b8c00007 	ldb	r3,0(r23)
  8062e0:	31800214 	ori	r6,r6,8
  8062e4:	d9814c15 	stw	r6,1328(sp)
  8062e8:	003c0b06 	br	805318 <___vfprintf_internal_r+0x1fc>
  8062ec:	0009883a 	mov	r4,zero
  8062f0:	04000244 	movi	r16,9
  8062f4:	01400284 	movi	r5,10
  8062f8:	d9c15115 	stw	r7,1348(sp)
  8062fc:	0801c5c0 	call	801c5c <__mulsi3>
  806300:	b9000007 	ldb	r4,0(r23)
  806304:	d8c14d17 	ldw	r3,1332(sp)
  806308:	bdc00044 	addi	r23,r23,1
  80630c:	d9014d15 	stw	r4,1332(sp)
  806310:	d9414d17 	ldw	r5,1332(sp)
  806314:	1885883a 	add	r2,r3,r2
  806318:	113ff404 	addi	r4,r2,-48
  80631c:	28bff404 	addi	r2,r5,-48
  806320:	d9c15117 	ldw	r7,1348(sp)
  806324:	80bff32e 	bgeu	r16,r2,8062f4 <___vfprintf_internal_r+0x11d8>
  806328:	d9014a15 	stw	r4,1320(sp)
  80632c:	003bfc06 	br	805320 <___vfprintf_internal_r+0x204>
  806330:	d8814c17 	ldw	r2,1328(sp)
  806334:	b8c00007 	ldb	r3,0(r23)
  806338:	10802014 	ori	r2,r2,128
  80633c:	d8814c15 	stw	r2,1328(sp)
  806340:	003bf506 	br	805318 <___vfprintf_internal_r+0x1fc>
  806344:	b8c00007 	ldb	r3,0(r23)
  806348:	00800a84 	movi	r2,42
  80634c:	bdc00044 	addi	r23,r23,1
  806350:	18831826 	beq	r3,r2,806fb4 <___vfprintf_internal_r+0x1e98>
  806354:	d8c14d15 	stw	r3,1332(sp)
  806358:	18bff404 	addi	r2,r3,-48
  80635c:	00c00244 	movi	r3,9
  806360:	18827b36 	bltu	r3,r2,806d50 <___vfprintf_internal_r+0x1c34>
  806364:	1821883a 	mov	r16,r3
  806368:	0009883a 	mov	r4,zero
  80636c:	01400284 	movi	r5,10
  806370:	d9c15115 	stw	r7,1348(sp)
  806374:	0801c5c0 	call	801c5c <__mulsi3>
  806378:	d9414d17 	ldw	r5,1332(sp)
  80637c:	b9800007 	ldb	r6,0(r23)
  806380:	d9c15117 	ldw	r7,1348(sp)
  806384:	1145883a 	add	r2,r2,r5
  806388:	113ff404 	addi	r4,r2,-48
  80638c:	30bff404 	addi	r2,r6,-48
  806390:	d9814d15 	stw	r6,1332(sp)
  806394:	bdc00044 	addi	r23,r23,1
  806398:	80bff42e 	bgeu	r16,r2,80636c <___vfprintf_internal_r+0x1250>
  80639c:	2027883a 	mov	r19,r4
  8063a0:	203bdf0e 	bge	r4,zero,805320 <___vfprintf_internal_r+0x204>
  8063a4:	04ffffc4 	movi	r19,-1
  8063a8:	003bdd06 	br	805320 <___vfprintf_internal_r+0x204>
  8063ac:	d8000405 	stb	zero,16(sp)
  8063b0:	39800017 	ldw	r6,0(r7)
  8063b4:	39c00104 	addi	r7,r7,4
  8063b8:	d9c14015 	stw	r7,1280(sp)
  8063bc:	d9814115 	stw	r6,1284(sp)
  8063c0:	3001c926 	beq	r6,zero,806ae8 <___vfprintf_internal_r+0x19cc>
  8063c4:	98000e16 	blt	r19,zero,806400 <___vfprintf_internal_r+0x12e4>
  8063c8:	d9014117 	ldw	r4,1284(sp)
  8063cc:	000b883a 	mov	r5,zero
  8063d0:	980d883a 	mov	r6,r19
  8063d4:	08043fc0 	call	8043fc <memchr>
  8063d8:	10025926 	beq	r2,zero,806d40 <___vfprintf_internal_r+0x1c24>
  8063dc:	d8c14117 	ldw	r3,1284(sp)
  8063e0:	10cfc83a 	sub	r7,r2,r3
  8063e4:	99c19e16 	blt	r19,r7,806a60 <___vfprintf_internal_r+0x1944>
  8063e8:	d9c14515 	stw	r7,1300(sp)
  8063ec:	38000916 	blt	r7,zero,806414 <___vfprintf_internal_r+0x12f8>
  8063f0:	d8014615 	stw	zero,1304(sp)
  8063f4:	003deb06 	br	805ba4 <___vfprintf_internal_r+0xa88>
  8063f8:	b8c00007 	ldb	r3,0(r23)
  8063fc:	003bc606 	br	805318 <___vfprintf_internal_r+0x1fc>
  806400:	d9014117 	ldw	r4,1284(sp)
  806404:	0804ccc0 	call	804ccc <strlen>
  806408:	d8814515 	stw	r2,1300(sp)
  80640c:	100f883a 	mov	r7,r2
  806410:	103ff70e 	bge	r2,zero,8063f0 <___vfprintf_internal_r+0x12d4>
  806414:	d8014515 	stw	zero,1300(sp)
  806418:	d8014615 	stw	zero,1304(sp)
  80641c:	003de106 	br	805ba4 <___vfprintf_internal_r+0xa88>
  806420:	20c03fcc 	andi	r3,r4,255
  806424:	00800044 	movi	r2,1
  806428:	18802d26 	beq	r3,r2,8064e0 <___vfprintf_internal_r+0x13c4>
  80642c:	18800e36 	bltu	r3,r2,806468 <___vfprintf_internal_r+0x134c>
  806430:	00800084 	movi	r2,2
  806434:	1880fa26 	beq	r3,r2,806820 <___vfprintf_internal_r+0x1704>
  806438:	01002074 	movhi	r4,129
  80643c:	2113ad04 	addi	r4,r4,20148
  806440:	0804ccc0 	call	804ccc <strlen>
  806444:	100f883a 	mov	r7,r2
  806448:	dcc14515 	stw	r19,1300(sp)
  80644c:	9880010e 	bge	r19,r2,806454 <___vfprintf_internal_r+0x1338>
  806450:	d8814515 	stw	r2,1300(sp)
  806454:	00802074 	movhi	r2,129
  806458:	1093ad04 	addi	r2,r2,20148
  80645c:	dcc14615 	stw	r19,1304(sp)
  806460:	d8814115 	stw	r2,1284(sp)
  806464:	003dcf06 	br	805ba4 <___vfprintf_internal_r+0xa88>
  806468:	d9401904 	addi	r5,sp,100
  80646c:	dd000f04 	addi	r20,sp,60
  806470:	d9414115 	stw	r5,1284(sp)
  806474:	880a977a 	slli	r5,r17,29
  806478:	d9814117 	ldw	r6,1284(sp)
  80647c:	8004d0fa 	srli	r2,r16,3
  806480:	8806d0fa 	srli	r3,r17,3
  806484:	810001cc 	andi	r4,r16,7
  806488:	2884b03a 	or	r2,r5,r2
  80648c:	31bfffc4 	addi	r6,r6,-1
  806490:	21000c04 	addi	r4,r4,48
  806494:	d9814115 	stw	r6,1284(sp)
  806498:	10cab03a 	or	r5,r2,r3
  80649c:	31000005 	stb	r4,0(r6)
  8064a0:	1021883a 	mov	r16,r2
  8064a4:	1823883a 	mov	r17,r3
  8064a8:	283ff21e 	bne	r5,zero,806474 <___vfprintf_internal_r+0x1358>
  8064ac:	d8c14c17 	ldw	r3,1328(sp)
  8064b0:	1880004c 	andi	r2,r3,1
  8064b4:	1005003a 	cmpeq	r2,r2,zero
  8064b8:	103db31e 	bne	r2,zero,805b88 <___vfprintf_internal_r+0xa6c>
  8064bc:	20803fcc 	andi	r2,r4,255
  8064c0:	1080201c 	xori	r2,r2,128
  8064c4:	10bfe004 	addi	r2,r2,-128
  8064c8:	00c00c04 	movi	r3,48
  8064cc:	10fdae26 	beq	r2,r3,805b88 <___vfprintf_internal_r+0xa6c>
  8064d0:	31bfffc4 	addi	r6,r6,-1
  8064d4:	d9814115 	stw	r6,1284(sp)
  8064d8:	30c00005 	stb	r3,0(r6)
  8064dc:	003daa06 	br	805b88 <___vfprintf_internal_r+0xa6c>
  8064e0:	88800068 	cmpgeui	r2,r17,1
  8064e4:	10002c1e 	bne	r2,zero,806598 <___vfprintf_internal_r+0x147c>
  8064e8:	8800021e 	bne	r17,zero,8064f4 <___vfprintf_internal_r+0x13d8>
  8064ec:	00800244 	movi	r2,9
  8064f0:	14002936 	bltu	r2,r16,806598 <___vfprintf_internal_r+0x147c>
  8064f4:	d90018c4 	addi	r4,sp,99
  8064f8:	dd000f04 	addi	r20,sp,60
  8064fc:	d9014115 	stw	r4,1284(sp)
  806500:	d9014117 	ldw	r4,1284(sp)
  806504:	80800c04 	addi	r2,r16,48
  806508:	20800005 	stb	r2,0(r4)
  80650c:	003d9e06 	br	805b88 <___vfprintf_internal_r+0xa6c>
  806510:	dc400d17 	ldw	r17,52(sp)
  806514:	07002074 	movhi	fp,129
  806518:	e713b484 	addi	fp,fp,20178
  80651c:	9425883a 	add	r18,r18,r16
  806520:	8c400044 	addi	r17,r17,1
  806524:	008001c4 	movi	r2,7
  806528:	1f000015 	stw	fp,0(r3)
  80652c:	1c000115 	stw	r16,4(r3)
  806530:	dc800e15 	stw	r18,56(sp)
  806534:	dc400d15 	stw	r17,52(sp)
  806538:	147ddc16 	blt	r2,r17,805cac <___vfprintf_internal_r+0xb90>
  80653c:	18c00204 	addi	r3,r3,8
  806540:	003c7406 	br	805714 <___vfprintf_internal_r+0x5f8>
  806544:	01000084 	movi	r4,2
  806548:	d8000405 	stb	zero,16(sp)
  80654c:	003d8106 	br	805b54 <___vfprintf_internal_r+0xa38>
  806550:	d9814c17 	ldw	r6,1328(sp)
  806554:	30c4703a 	and	r2,r6,r3
  806558:	1005003a 	cmpeq	r2,r2,zero
  80655c:	103cb326 	beq	r2,zero,80582c <___vfprintf_internal_r+0x710>
  806560:	d9014117 	ldw	r4,1284(sp)
  806564:	94800044 	addi	r18,r18,1
  806568:	8c400044 	addi	r17,r17,1
  80656c:	008001c4 	movi	r2,7
  806570:	a9000015 	stw	r4,0(r21)
  806574:	a8c00115 	stw	r3,4(r21)
  806578:	dc800e15 	stw	r18,56(sp)
  80657c:	dc400d15 	stw	r17,52(sp)
  806580:	147e6016 	blt	r2,r17,805f04 <___vfprintf_internal_r+0xde8>
  806584:	acc00204 	addi	r19,r21,8
  806588:	003cd106 	br	8058d0 <___vfprintf_internal_r+0x7b4>
  80658c:	07002074 	movhi	fp,129
  806590:	e713b484 	addi	fp,fp,20178
  806594:	003c4906 	br	8056bc <___vfprintf_internal_r+0x5a0>
  806598:	dd000f04 	addi	r20,sp,60
  80659c:	dc801904 	addi	r18,sp,100
  8065a0:	8009883a 	mov	r4,r16
  8065a4:	880b883a 	mov	r5,r17
  8065a8:	01800284 	movi	r6,10
  8065ac:	000f883a 	mov	r7,zero
  8065b0:	080fc440 	call	80fc44 <__umoddi3>
  8065b4:	12000c04 	addi	r8,r2,48
  8065b8:	94bfffc4 	addi	r18,r18,-1
  8065bc:	8009883a 	mov	r4,r16
  8065c0:	880b883a 	mov	r5,r17
  8065c4:	01800284 	movi	r6,10
  8065c8:	000f883a 	mov	r7,zero
  8065cc:	92000005 	stb	r8,0(r18)
  8065d0:	080f5d80 	call	80f5d8 <__udivdi3>
  8065d4:	1009883a 	mov	r4,r2
  8065d8:	1021883a 	mov	r16,r2
  8065dc:	18800068 	cmpgeui	r2,r3,1
  8065e0:	1823883a 	mov	r17,r3
  8065e4:	103fee1e 	bne	r2,zero,8065a0 <___vfprintf_internal_r+0x1484>
  8065e8:	1800021e 	bne	r3,zero,8065f4 <___vfprintf_internal_r+0x14d8>
  8065ec:	00800244 	movi	r2,9
  8065f0:	113feb36 	bltu	r2,r4,8065a0 <___vfprintf_internal_r+0x1484>
  8065f4:	94bfffc4 	addi	r18,r18,-1
  8065f8:	dc814115 	stw	r18,1284(sp)
  8065fc:	003fc006 	br	806500 <___vfprintf_internal_r+0x13e4>
  806600:	d9014c17 	ldw	r4,1328(sp)
  806604:	2080004c 	andi	r2,r4,1
  806608:	10009a1e 	bne	r2,zero,806874 <___vfprintf_internal_r+0x1758>
  80660c:	d9401904 	addi	r5,sp,100
  806610:	dd000f04 	addi	r20,sp,60
  806614:	d9414115 	stw	r5,1284(sp)
  806618:	003d5b06 	br	805b88 <___vfprintf_internal_r+0xa6c>
  80661c:	d9014f17 	ldw	r4,1340(sp)
  806620:	b00b883a 	mov	r5,r22
  806624:	d9800c04 	addi	r6,sp,48
  806628:	08050c40 	call	8050c4 <__sprint_r>
  80662c:	103c731e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  806630:	dc800e17 	ldw	r18,56(sp)
  806634:	d8c01904 	addi	r3,sp,100
  806638:	003cf906 	br	805a20 <___vfprintf_internal_r+0x904>
  80663c:	d8c14c17 	ldw	r3,1328(sp)
  806640:	1880040c 	andi	r2,r3,16
  806644:	1000711e 	bne	r2,zero,80680c <___vfprintf_internal_r+0x16f0>
  806648:	d9014c17 	ldw	r4,1328(sp)
  80664c:	2080100c 	andi	r2,r4,64
  806650:	10006e26 	beq	r2,zero,80680c <___vfprintf_internal_r+0x16f0>
  806654:	3c00000b 	ldhu	r16,0(r7)
  806658:	0023883a 	mov	r17,zero
  80665c:	39c00104 	addi	r7,r7,4
  806660:	d9c14015 	stw	r7,1280(sp)
  806664:	003efa06 	br	806250 <___vfprintf_internal_r+0x1134>
  806668:	dc400d17 	ldw	r17,52(sp)
  80666c:	07002074 	movhi	fp,129
  806670:	e713b484 	addi	fp,fp,20178
  806674:	9425883a 	add	r18,r18,r16
  806678:	8c400044 	addi	r17,r17,1
  80667c:	008001c4 	movi	r2,7
  806680:	1f000015 	stw	fp,0(r3)
  806684:	1c000115 	stw	r16,4(r3)
  806688:	dc800e15 	stw	r18,56(sp)
  80668c:	dc400d15 	stw	r17,52(sp)
  806690:	147d7016 	blt	r2,r17,805c54 <___vfprintf_internal_r+0xb38>
  806694:	18c00204 	addi	r3,r3,8
  806698:	003d7506 	br	805c70 <___vfprintf_internal_r+0xb54>
  80669c:	dc800e17 	ldw	r18,56(sp)
  8066a0:	dc400d17 	ldw	r17,52(sp)
  8066a4:	07002074 	movhi	fp,129
  8066a8:	e713b884 	addi	fp,fp,20194
  8066ac:	003bba06 	br	805598 <___vfprintf_internal_r+0x47c>
  8066b0:	d9014f17 	ldw	r4,1340(sp)
  8066b4:	b00b883a 	mov	r5,r22
  8066b8:	d9800c04 	addi	r6,sp,48
  8066bc:	08050c40 	call	8050c4 <__sprint_r>
  8066c0:	103c4e1e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  8066c4:	dc800e17 	ldw	r18,56(sp)
  8066c8:	d8c01904 	addi	r3,sp,100
  8066cc:	003ce306 	br	805a5c <___vfprintf_internal_r+0x940>
  8066d0:	3c000017 	ldw	r16,0(r7)
  8066d4:	0009883a 	mov	r4,zero
  8066d8:	39c00104 	addi	r7,r7,4
  8066dc:	0023883a 	mov	r17,zero
  8066e0:	d9c14015 	stw	r7,1280(sp)
  8066e4:	d8000405 	stb	zero,16(sp)
  8066e8:	003d1a06 	br	805b54 <___vfprintf_internal_r+0xa38>
  8066ec:	38800017 	ldw	r2,0(r7)
  8066f0:	39c00104 	addi	r7,r7,4
  8066f4:	d9c14015 	stw	r7,1280(sp)
  8066f8:	1023d7fa 	srai	r17,r2,31
  8066fc:	1021883a 	mov	r16,r2
  806700:	003d1206 	br	805b4c <___vfprintf_internal_r+0xa30>
  806704:	3c000017 	ldw	r16,0(r7)
  806708:	01000044 	movi	r4,1
  80670c:	39c00104 	addi	r7,r7,4
  806710:	0023883a 	mov	r17,zero
  806714:	d9c14015 	stw	r7,1280(sp)
  806718:	d8000405 	stb	zero,16(sp)
  80671c:	003d0d06 	br	805b54 <___vfprintf_internal_r+0xa38>
  806720:	00802074 	movhi	r2,129
  806724:	1093b404 	addi	r2,r2,20176
  806728:	94800044 	addi	r18,r18,1
  80672c:	8c400044 	addi	r17,r17,1
  806730:	a8800015 	stw	r2,0(r21)
  806734:	00c00044 	movi	r3,1
  806738:	008001c4 	movi	r2,7
  80673c:	a8c00115 	stw	r3,4(r21)
  806740:	dc800e15 	stw	r18,56(sp)
  806744:	dc400d15 	stw	r17,52(sp)
  806748:	1440ca16 	blt	r2,r17,806a74 <___vfprintf_internal_r+0x1958>
  80674c:	a8c00204 	addi	r3,r21,8
  806750:	2000061e 	bne	r4,zero,80676c <___vfprintf_internal_r+0x1650>
  806754:	d9414717 	ldw	r5,1308(sp)
  806758:	2800041e 	bne	r5,zero,80676c <___vfprintf_internal_r+0x1650>
  80675c:	d9814c17 	ldw	r6,1328(sp)
  806760:	3080004c 	andi	r2,r6,1
  806764:	1005003a 	cmpeq	r2,r2,zero
  806768:	103bea1e 	bne	r2,zero,805714 <___vfprintf_internal_r+0x5f8>
  80676c:	00800044 	movi	r2,1
  806770:	dc400d17 	ldw	r17,52(sp)
  806774:	18800115 	stw	r2,4(r3)
  806778:	d8814917 	ldw	r2,1316(sp)
  80677c:	94800044 	addi	r18,r18,1
  806780:	8c400044 	addi	r17,r17,1
  806784:	18800015 	stw	r2,0(r3)
  806788:	008001c4 	movi	r2,7
  80678c:	dc800e15 	stw	r18,56(sp)
  806790:	dc400d15 	stw	r17,52(sp)
  806794:	1440ca16 	blt	r2,r17,806ac0 <___vfprintf_internal_r+0x19a4>
  806798:	18c00204 	addi	r3,r3,8
  80679c:	0121c83a 	sub	r16,zero,r4
  8067a0:	0400500e 	bge	zero,r16,8068e4 <___vfprintf_internal_r+0x17c8>
  8067a4:	00800404 	movi	r2,16
  8067a8:	1400800e 	bge	r2,r16,8069ac <___vfprintf_internal_r+0x1890>
  8067ac:	1027883a 	mov	r19,r2
  8067b0:	07002074 	movhi	fp,129
  8067b4:	e713b484 	addi	fp,fp,20178
  8067b8:	050001c4 	movi	r20,7
  8067bc:	00000306 	br	8067cc <___vfprintf_internal_r+0x16b0>
  8067c0:	18c00204 	addi	r3,r3,8
  8067c4:	843ffc04 	addi	r16,r16,-16
  8067c8:	9c007a0e 	bge	r19,r16,8069b4 <___vfprintf_internal_r+0x1898>
  8067cc:	94800404 	addi	r18,r18,16
  8067d0:	8c400044 	addi	r17,r17,1
  8067d4:	1f000015 	stw	fp,0(r3)
  8067d8:	1cc00115 	stw	r19,4(r3)
  8067dc:	dc800e15 	stw	r18,56(sp)
  8067e0:	dc400d15 	stw	r17,52(sp)
  8067e4:	a47ff60e 	bge	r20,r17,8067c0 <___vfprintf_internal_r+0x16a4>
  8067e8:	d9014f17 	ldw	r4,1340(sp)
  8067ec:	b00b883a 	mov	r5,r22
  8067f0:	d9800c04 	addi	r6,sp,48
  8067f4:	08050c40 	call	8050c4 <__sprint_r>
  8067f8:	103c001e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  8067fc:	dc800e17 	ldw	r18,56(sp)
  806800:	dc400d17 	ldw	r17,52(sp)
  806804:	d8c01904 	addi	r3,sp,100
  806808:	003fee06 	br	8067c4 <___vfprintf_internal_r+0x16a8>
  80680c:	3c000017 	ldw	r16,0(r7)
  806810:	0023883a 	mov	r17,zero
  806814:	39c00104 	addi	r7,r7,4
  806818:	d9c14015 	stw	r7,1280(sp)
  80681c:	003e8c06 	br	806250 <___vfprintf_internal_r+0x1134>
  806820:	d9401904 	addi	r5,sp,100
  806824:	dd000f04 	addi	r20,sp,60
  806828:	d9414115 	stw	r5,1284(sp)
  80682c:	d9814417 	ldw	r6,1296(sp)
  806830:	880a973a 	slli	r5,r17,28
  806834:	8004d13a 	srli	r2,r16,4
  806838:	810003cc 	andi	r4,r16,15
  80683c:	3109883a 	add	r4,r6,r4
  806840:	2884b03a 	or	r2,r5,r2
  806844:	21400003 	ldbu	r5,0(r4)
  806848:	d9014117 	ldw	r4,1284(sp)
  80684c:	8806d13a 	srli	r3,r17,4
  806850:	1021883a 	mov	r16,r2
  806854:	213fffc4 	addi	r4,r4,-1
  806858:	d9014115 	stw	r4,1284(sp)
  80685c:	d9814117 	ldw	r6,1284(sp)
  806860:	10c8b03a 	or	r4,r2,r3
  806864:	1823883a 	mov	r17,r3
  806868:	31400005 	stb	r5,0(r6)
  80686c:	203fef1e 	bne	r4,zero,80682c <___vfprintf_internal_r+0x1710>
  806870:	003cc506 	br	805b88 <___vfprintf_internal_r+0xa6c>
  806874:	00800c04 	movi	r2,48
  806878:	d98018c4 	addi	r6,sp,99
  80687c:	dd000f04 	addi	r20,sp,60
  806880:	d88018c5 	stb	r2,99(sp)
  806884:	d9814115 	stw	r6,1284(sp)
  806888:	003cbf06 	br	805b88 <___vfprintf_internal_r+0xa6c>
  80688c:	dc400d17 	ldw	r17,52(sp)
  806890:	07002074 	movhi	fp,129
  806894:	e713b884 	addi	fp,fp,20194
  806898:	003bc106 	br	8057a0 <___vfprintf_internal_r+0x684>
  80689c:	d9414c17 	ldw	r5,1328(sp)
  8068a0:	2880040c 	andi	r2,r5,16
  8068a4:	10007c26 	beq	r2,zero,806a98 <___vfprintf_internal_r+0x197c>
  8068a8:	38800017 	ldw	r2,0(r7)
  8068ac:	39c00104 	addi	r7,r7,4
  8068b0:	d9c14015 	stw	r7,1280(sp)
  8068b4:	d9814b17 	ldw	r6,1324(sp)
  8068b8:	d9c14017 	ldw	r7,1280(sp)
  8068bc:	11800015 	stw	r6,0(r2)
  8068c0:	003a7206 	br	80528c <___vfprintf_internal_r+0x170>
  8068c4:	d9014f17 	ldw	r4,1340(sp)
  8068c8:	b00b883a 	mov	r5,r22
  8068cc:	d9800c04 	addi	r6,sp,48
  8068d0:	08050c40 	call	8050c4 <__sprint_r>
  8068d4:	103bc91e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  8068d8:	dc800e17 	ldw	r18,56(sp)
  8068dc:	dc400d17 	ldw	r17,52(sp)
  8068e0:	d8c01904 	addi	r3,sp,100
  8068e4:	d9014717 	ldw	r4,1308(sp)
  8068e8:	d9414117 	ldw	r5,1284(sp)
  8068ec:	8c400044 	addi	r17,r17,1
  8068f0:	9125883a 	add	r18,r18,r4
  8068f4:	008001c4 	movi	r2,7
  8068f8:	19400015 	stw	r5,0(r3)
  8068fc:	19000115 	stw	r4,4(r3)
  806900:	dc800e15 	stw	r18,56(sp)
  806904:	dc400d15 	stw	r17,52(sp)
  806908:	147ce816 	blt	r2,r17,805cac <___vfprintf_internal_r+0xb90>
  80690c:	18c00204 	addi	r3,r3,8
  806910:	003b8006 	br	805714 <___vfprintf_internal_r+0x5f8>
  806914:	38c00017 	ldw	r3,0(r7)
  806918:	39000204 	addi	r4,r7,8
  80691c:	d9014015 	stw	r4,1280(sp)
  806920:	d8c14215 	stw	r3,1288(sp)
  806924:	39c00117 	ldw	r7,4(r7)
  806928:	d9c14315 	stw	r7,1292(sp)
  80692c:	003e1a06 	br	806198 <___vfprintf_internal_r+0x107c>
  806930:	0005883a 	mov	r2,zero
  806934:	1409c83a 	sub	r4,r2,r16
  806938:	1105803a 	cmpltu	r2,r2,r4
  80693c:	044bc83a 	sub	r5,zero,r17
  806940:	2885c83a 	sub	r2,r5,r2
  806944:	2021883a 	mov	r16,r4
  806948:	1023883a 	mov	r17,r2
  80694c:	01000044 	movi	r4,1
  806950:	00800b44 	movi	r2,45
  806954:	d8800405 	stb	r2,16(sp)
  806958:	003c7e06 	br	805b54 <___vfprintf_internal_r+0xa38>
  80695c:	d9014f17 	ldw	r4,1340(sp)
  806960:	b00b883a 	mov	r5,r22
  806964:	d9800c04 	addi	r6,sp,48
  806968:	08050c40 	call	8050c4 <__sprint_r>
  80696c:	103ba31e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  806970:	dc800e17 	ldw	r18,56(sp)
  806974:	dc400d17 	ldw	r17,52(sp)
  806978:	d9000517 	ldw	r4,20(sp)
  80697c:	d9401904 	addi	r5,sp,100
  806980:	003da106 	br	806008 <___vfprintf_internal_r+0xeec>
  806984:	d9014f17 	ldw	r4,1340(sp)
  806988:	b00b883a 	mov	r5,r22
  80698c:	d9800c04 	addi	r6,sp,48
  806990:	08050c40 	call	8050c4 <__sprint_r>
  806994:	103b991e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  806998:	dc800e17 	ldw	r18,56(sp)
  80699c:	dc400d17 	ldw	r17,52(sp)
  8069a0:	d9000517 	ldw	r4,20(sp)
  8069a4:	d8c01904 	addi	r3,sp,100
  8069a8:	003d8b06 	br	805fd8 <___vfprintf_internal_r+0xebc>
  8069ac:	07002074 	movhi	fp,129
  8069b0:	e713b484 	addi	fp,fp,20178
  8069b4:	9425883a 	add	r18,r18,r16
  8069b8:	8c400044 	addi	r17,r17,1
  8069bc:	008001c4 	movi	r2,7
  8069c0:	1f000015 	stw	fp,0(r3)
  8069c4:	1c000115 	stw	r16,4(r3)
  8069c8:	dc800e15 	stw	r18,56(sp)
  8069cc:	dc400d15 	stw	r17,52(sp)
  8069d0:	147fbc16 	blt	r2,r17,8068c4 <___vfprintf_internal_r+0x17a8>
  8069d4:	18c00204 	addi	r3,r3,8
  8069d8:	003fc206 	br	8068e4 <___vfprintf_internal_r+0x17c8>
  8069dc:	d9014f17 	ldw	r4,1340(sp)
  8069e0:	b00b883a 	mov	r5,r22
  8069e4:	d9800c04 	addi	r6,sp,48
  8069e8:	08050c40 	call	8050c4 <__sprint_r>
  8069ec:	103b831e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  8069f0:	dc800e17 	ldw	r18,56(sp)
  8069f4:	d9000517 	ldw	r4,20(sp)
  8069f8:	d8c01904 	addi	r3,sp,100
  8069fc:	003cfc06 	br	805df0 <___vfprintf_internal_r+0xcd4>
  806a00:	07002074 	movhi	fp,129
  806a04:	e713b484 	addi	fp,fp,20178
  806a08:	003bde06 	br	805984 <___vfprintf_internal_r+0x868>
  806a0c:	00802074 	movhi	r2,129
  806a10:	1093a304 	addi	r2,r2,20108
  806a14:	d8814115 	stw	r2,1284(sp)
  806a18:	003def06 	br	8061d8 <___vfprintf_internal_r+0x10bc>
  806a1c:	d9014217 	ldw	r4,1288(sp)
  806a20:	d9414317 	ldw	r5,1292(sp)
  806a24:	080c3880 	call	80c388 <__isnand>
  806a28:	10003926 	beq	r2,zero,806b10 <___vfprintf_internal_r+0x19f4>
  806a2c:	d9414d17 	ldw	r5,1332(sp)
  806a30:	008011c4 	movi	r2,71
  806a34:	1140ce16 	blt	r2,r5,806d70 <___vfprintf_internal_r+0x1c54>
  806a38:	01802074 	movhi	r6,129
  806a3c:	3193a404 	addi	r6,r6,20112
  806a40:	d9814115 	stw	r6,1284(sp)
  806a44:	003de406 	br	8061d8 <___vfprintf_internal_r+0x10bc>
  806a48:	d9014c17 	ldw	r4,1328(sp)
  806a4c:	bdc00044 	addi	r23,r23,1
  806a50:	b8c00007 	ldb	r3,0(r23)
  806a54:	21000814 	ori	r4,r4,32
  806a58:	d9014c15 	stw	r4,1328(sp)
  806a5c:	003a2e06 	br	805318 <___vfprintf_internal_r+0x1fc>
  806a60:	dcc14515 	stw	r19,1300(sp)
  806a64:	98011016 	blt	r19,zero,806ea8 <___vfprintf_internal_r+0x1d8c>
  806a68:	980f883a 	mov	r7,r19
  806a6c:	d8014615 	stw	zero,1304(sp)
  806a70:	003c4c06 	br	805ba4 <___vfprintf_internal_r+0xa88>
  806a74:	d9014f17 	ldw	r4,1340(sp)
  806a78:	b00b883a 	mov	r5,r22
  806a7c:	d9800c04 	addi	r6,sp,48
  806a80:	08050c40 	call	8050c4 <__sprint_r>
  806a84:	103b5d1e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  806a88:	dc800e17 	ldw	r18,56(sp)
  806a8c:	d9000517 	ldw	r4,20(sp)
  806a90:	d8c01904 	addi	r3,sp,100
  806a94:	003f2e06 	br	806750 <___vfprintf_internal_r+0x1634>
  806a98:	d8c14c17 	ldw	r3,1328(sp)
  806a9c:	1880100c 	andi	r2,r3,64
  806aa0:	1000a026 	beq	r2,zero,806d24 <___vfprintf_internal_r+0x1c08>
  806aa4:	38800017 	ldw	r2,0(r7)
  806aa8:	39c00104 	addi	r7,r7,4
  806aac:	d9c14015 	stw	r7,1280(sp)
  806ab0:	d9014b17 	ldw	r4,1324(sp)
  806ab4:	d9c14017 	ldw	r7,1280(sp)
  806ab8:	1100000d 	sth	r4,0(r2)
  806abc:	0039f306 	br	80528c <___vfprintf_internal_r+0x170>
  806ac0:	d9014f17 	ldw	r4,1340(sp)
  806ac4:	b00b883a 	mov	r5,r22
  806ac8:	d9800c04 	addi	r6,sp,48
  806acc:	08050c40 	call	8050c4 <__sprint_r>
  806ad0:	103b4a1e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  806ad4:	dc800e17 	ldw	r18,56(sp)
  806ad8:	dc400d17 	ldw	r17,52(sp)
  806adc:	d9000517 	ldw	r4,20(sp)
  806ae0:	d8c01904 	addi	r3,sp,100
  806ae4:	003f2d06 	br	80679c <___vfprintf_internal_r+0x1680>
  806ae8:	00800184 	movi	r2,6
  806aec:	14c09a36 	bltu	r2,r19,806d58 <___vfprintf_internal_r+0x1c3c>
  806af0:	dcc14515 	stw	r19,1300(sp)
  806af4:	9800010e 	bge	r19,zero,806afc <___vfprintf_internal_r+0x19e0>
  806af8:	d8014515 	stw	zero,1300(sp)
  806afc:	00802074 	movhi	r2,129
  806b00:	1093a604 	addi	r2,r2,20120
  806b04:	980f883a 	mov	r7,r19
  806b08:	d8814115 	stw	r2,1284(sp)
  806b0c:	003a7206 	br	8054d8 <___vfprintf_internal_r+0x3bc>
  806b10:	00bfffc4 	movi	r2,-1
  806b14:	9880e226 	beq	r19,r2,806ea0 <___vfprintf_internal_r+0x1d84>
  806b18:	d9414d17 	ldw	r5,1332(sp)
  806b1c:	008019c4 	movi	r2,103
  806b20:	2880dc26 	beq	r5,r2,806e94 <___vfprintf_internal_r+0x1d78>
  806b24:	008011c4 	movi	r2,71
  806b28:	2880da26 	beq	r5,r2,806e94 <___vfprintf_internal_r+0x1d78>
  806b2c:	d9414c17 	ldw	r5,1328(sp)
  806b30:	d9014317 	ldw	r4,1292(sp)
  806b34:	d9814217 	ldw	r6,1288(sp)
  806b38:	29404014 	ori	r5,r5,256
  806b3c:	d9414c15 	stw	r5,1328(sp)
  806b40:	2000cc16 	blt	r4,zero,806e74 <___vfprintf_internal_r+0x1d58>
  806b44:	3021883a 	mov	r16,r6
  806b48:	2023883a 	mov	r17,r4
  806b4c:	0039883a 	mov	fp,zero
  806b50:	d9414d17 	ldw	r5,1332(sp)
  806b54:	00801984 	movi	r2,102
  806b58:	2880b726 	beq	r5,r2,806e38 <___vfprintf_internal_r+0x1d1c>
  806b5c:	00801184 	movi	r2,70
  806b60:	2880b526 	beq	r5,r2,806e38 <___vfprintf_internal_r+0x1d1c>
  806b64:	00801944 	movi	r2,101
  806b68:	2880c826 	beq	r5,r2,806e8c <___vfprintf_internal_r+0x1d70>
  806b6c:	00801144 	movi	r2,69
  806b70:	2880c626 	beq	r5,r2,806e8c <___vfprintf_internal_r+0x1d70>
  806b74:	9829883a 	mov	r20,r19
  806b78:	d9014f17 	ldw	r4,1340(sp)
  806b7c:	d8800504 	addi	r2,sp,20
  806b80:	880d883a 	mov	r6,r17
  806b84:	d8800115 	stw	r2,4(sp)
  806b88:	d8c00604 	addi	r3,sp,24
  806b8c:	d8800704 	addi	r2,sp,28
  806b90:	800b883a 	mov	r5,r16
  806b94:	01c00084 	movi	r7,2
  806b98:	d8c00215 	stw	r3,8(sp)
  806b9c:	d8800315 	stw	r2,12(sp)
  806ba0:	dd000015 	stw	r20,0(sp)
  806ba4:	0808da80 	call	808da8 <_dtoa_r>
  806ba8:	d9814d17 	ldw	r6,1332(sp)
  806bac:	d8814115 	stw	r2,1284(sp)
  806bb0:	008019c4 	movi	r2,103
  806bb4:	30809526 	beq	r6,r2,806e0c <___vfprintf_internal_r+0x1cf0>
  806bb8:	d8c14d17 	ldw	r3,1332(sp)
  806bbc:	008011c4 	movi	r2,71
  806bc0:	18809226 	beq	r3,r2,806e0c <___vfprintf_internal_r+0x1cf0>
  806bc4:	d9414117 	ldw	r5,1284(sp)
  806bc8:	d9814d17 	ldw	r6,1332(sp)
  806bcc:	00801984 	movi	r2,102
  806bd0:	2d25883a 	add	r18,r5,r20
  806bd4:	30808626 	beq	r6,r2,806df0 <___vfprintf_internal_r+0x1cd4>
  806bd8:	00801184 	movi	r2,70
  806bdc:	30808426 	beq	r6,r2,806df0 <___vfprintf_internal_r+0x1cd4>
  806be0:	000d883a 	mov	r6,zero
  806be4:	000f883a 	mov	r7,zero
  806be8:	880b883a 	mov	r5,r17
  806bec:	8009883a 	mov	r4,r16
  806bf0:	0810cd40 	call	810cd4 <__eqdf2>
  806bf4:	1000751e 	bne	r2,zero,806dcc <___vfprintf_internal_r+0x1cb0>
  806bf8:	9005883a 	mov	r2,r18
  806bfc:	dc800715 	stw	r18,28(sp)
  806c00:	d9014117 	ldw	r4,1284(sp)
  806c04:	d9414d17 	ldw	r5,1332(sp)
  806c08:	00c019c4 	movi	r3,103
  806c0c:	1125c83a 	sub	r18,r2,r4
  806c10:	28c06826 	beq	r5,r3,806db4 <___vfprintf_internal_r+0x1c98>
  806c14:	008011c4 	movi	r2,71
  806c18:	28806626 	beq	r5,r2,806db4 <___vfprintf_internal_r+0x1c98>
  806c1c:	d9000517 	ldw	r4,20(sp)
  806c20:	d8c14d17 	ldw	r3,1332(sp)
  806c24:	00801944 	movi	r2,101
  806c28:	10c05516 	blt	r2,r3,806d80 <___vfprintf_internal_r+0x1c64>
  806c2c:	213fffc4 	addi	r4,r4,-1
  806c30:	d9000515 	stw	r4,20(sp)
  806c34:	d8c00805 	stb	r3,32(sp)
  806c38:	2021883a 	mov	r16,r4
  806c3c:	2000c116 	blt	r4,zero,806f44 <___vfprintf_internal_r+0x1e28>
  806c40:	00800ac4 	movi	r2,43
  806c44:	d8800845 	stb	r2,33(sp)
  806c48:	00800244 	movi	r2,9
  806c4c:	1400af0e 	bge	r2,r16,806f0c <___vfprintf_internal_r+0x1df0>
  806c50:	1027883a 	mov	r19,r2
  806c54:	dc400b84 	addi	r17,sp,46
  806c58:	8009883a 	mov	r4,r16
  806c5c:	01400284 	movi	r5,10
  806c60:	08113240 	call	811324 <__modsi3>
  806c64:	10800c04 	addi	r2,r2,48
  806c68:	8c7fffc4 	addi	r17,r17,-1
  806c6c:	8009883a 	mov	r4,r16
  806c70:	01400284 	movi	r5,10
  806c74:	88800005 	stb	r2,0(r17)
  806c78:	08112c40 	call	8112c4 <__divsi3>
  806c7c:	1021883a 	mov	r16,r2
  806c80:	98bff516 	blt	r19,r2,806c58 <___vfprintf_internal_r+0x1b3c>
  806c84:	10c00c04 	addi	r3,r2,48
  806c88:	d88009c4 	addi	r2,sp,39
  806c8c:	108001c4 	addi	r2,r2,7
  806c90:	897fffc4 	addi	r5,r17,-1
  806c94:	88ffffc5 	stb	r3,-1(r17)
  806c98:	2880a72e 	bgeu	r5,r2,806f38 <___vfprintf_internal_r+0x1e1c>
  806c9c:	1009883a 	mov	r4,r2
  806ca0:	d9800804 	addi	r6,sp,32
  806ca4:	d8c00884 	addi	r3,sp,34
  806ca8:	28800003 	ldbu	r2,0(r5)
  806cac:	29400044 	addi	r5,r5,1
  806cb0:	18800005 	stb	r2,0(r3)
  806cb4:	18c00044 	addi	r3,r3,1
  806cb8:	293ffb36 	bltu	r5,r4,806ca8 <___vfprintf_internal_r+0x1b8c>
  806cbc:	1987c83a 	sub	r3,r3,r6
  806cc0:	00800044 	movi	r2,1
  806cc4:	d8c14815 	stw	r3,1312(sp)
  806cc8:	90cf883a 	add	r7,r18,r3
  806ccc:	1480960e 	bge	r2,r18,806f28 <___vfprintf_internal_r+0x1e0c>
  806cd0:	39c00044 	addi	r7,r7,1
  806cd4:	d9c14515 	stw	r7,1300(sp)
  806cd8:	38003416 	blt	r7,zero,806dac <___vfprintf_internal_r+0x1c90>
  806cdc:	e0803fcc 	andi	r2,fp,255
  806ce0:	1080201c 	xori	r2,r2,128
  806ce4:	10bfe004 	addi	r2,r2,-128
  806ce8:	10004e26 	beq	r2,zero,806e24 <___vfprintf_internal_r+0x1d08>
  806cec:	00800b44 	movi	r2,45
  806cf0:	dc814715 	stw	r18,1308(sp)
  806cf4:	d8014615 	stw	zero,1304(sp)
  806cf8:	d8800405 	stb	r2,16(sp)
  806cfc:	003bab06 	br	805bac <___vfprintf_internal_r+0xa90>
  806d00:	00800b44 	movi	r2,45
  806d04:	d8800405 	stb	r2,16(sp)
  806d08:	003d2d06 	br	8061c0 <___vfprintf_internal_r+0x10a4>
  806d0c:	d9014f17 	ldw	r4,1340(sp)
  806d10:	b00b883a 	mov	r5,r22
  806d14:	d9800c04 	addi	r6,sp,48
  806d18:	08050c40 	call	8050c4 <__sprint_r>
  806d1c:	103ab71e 	bne	r2,zero,8057fc <___vfprintf_internal_r+0x6e0>
  806d20:	003ab506 	br	8057f8 <___vfprintf_internal_r+0x6dc>
  806d24:	38800017 	ldw	r2,0(r7)
  806d28:	39c00104 	addi	r7,r7,4
  806d2c:	d9c14015 	stw	r7,1280(sp)
  806d30:	d9414b17 	ldw	r5,1324(sp)
  806d34:	d9c14017 	ldw	r7,1280(sp)
  806d38:	11400015 	stw	r5,0(r2)
  806d3c:	00395306 	br	80528c <___vfprintf_internal_r+0x170>
  806d40:	980f883a 	mov	r7,r19
  806d44:	dcc14515 	stw	r19,1300(sp)
  806d48:	d8014615 	stw	zero,1304(sp)
  806d4c:	003b9506 	br	805ba4 <___vfprintf_internal_r+0xa88>
  806d50:	0027883a 	mov	r19,zero
  806d54:	00397206 	br	805320 <___vfprintf_internal_r+0x204>
  806d58:	00c02074 	movhi	r3,129
  806d5c:	18d3a604 	addi	r3,r3,20120
  806d60:	100f883a 	mov	r7,r2
  806d64:	d8814515 	stw	r2,1300(sp)
  806d68:	d8c14115 	stw	r3,1284(sp)
  806d6c:	0039da06 	br	8054d8 <___vfprintf_internal_r+0x3bc>
  806d70:	00802074 	movhi	r2,129
  806d74:	1093a504 	addi	r2,r2,20116
  806d78:	d8814115 	stw	r2,1284(sp)
  806d7c:	003d1606 	br	8061d8 <___vfprintf_internal_r+0x10bc>
  806d80:	d9414d17 	ldw	r5,1332(sp)
  806d84:	00801984 	movi	r2,102
  806d88:	28804926 	beq	r5,r2,806eb0 <___vfprintf_internal_r+0x1d94>
  806d8c:	200f883a 	mov	r7,r4
  806d90:	24805716 	blt	r4,r18,806ef0 <___vfprintf_internal_r+0x1dd4>
  806d94:	d9414c17 	ldw	r5,1328(sp)
  806d98:	2880004c 	andi	r2,r5,1
  806d9c:	10000126 	beq	r2,zero,806da4 <___vfprintf_internal_r+0x1c88>
  806da0:	21c00044 	addi	r7,r4,1
  806da4:	d9c14515 	stw	r7,1300(sp)
  806da8:	383fcc0e 	bge	r7,zero,806cdc <___vfprintf_internal_r+0x1bc0>
  806dac:	d8014515 	stw	zero,1300(sp)
  806db0:	003fca06 	br	806cdc <___vfprintf_internal_r+0x1bc0>
  806db4:	d9000517 	ldw	r4,20(sp)
  806db8:	00bfff04 	movi	r2,-4
  806dbc:	1100480e 	bge	r2,r4,806ee0 <___vfprintf_internal_r+0x1dc4>
  806dc0:	99004716 	blt	r19,r4,806ee0 <___vfprintf_internal_r+0x1dc4>
  806dc4:	d8c14d15 	stw	r3,1332(sp)
  806dc8:	003ff006 	br	806d8c <___vfprintf_internal_r+0x1c70>
  806dcc:	d8800717 	ldw	r2,28(sp)
  806dd0:	14bf8b2e 	bgeu	r2,r18,806c00 <___vfprintf_internal_r+0x1ae4>
  806dd4:	9007883a 	mov	r3,r18
  806dd8:	01000c04 	movi	r4,48
  806ddc:	11000005 	stb	r4,0(r2)
  806de0:	10800044 	addi	r2,r2,1
  806de4:	d8800715 	stw	r2,28(sp)
  806de8:	18bffc1e 	bne	r3,r2,806ddc <___vfprintf_internal_r+0x1cc0>
  806dec:	003f8406 	br	806c00 <___vfprintf_internal_r+0x1ae4>
  806df0:	d8814117 	ldw	r2,1284(sp)
  806df4:	10c00007 	ldb	r3,0(r2)
  806df8:	00800c04 	movi	r2,48
  806dfc:	18805b26 	beq	r3,r2,806f6c <___vfprintf_internal_r+0x1e50>
  806e00:	d9000517 	ldw	r4,20(sp)
  806e04:	9125883a 	add	r18,r18,r4
  806e08:	003f7506 	br	806be0 <___vfprintf_internal_r+0x1ac4>
  806e0c:	d9014c17 	ldw	r4,1328(sp)
  806e10:	2080004c 	andi	r2,r4,1
  806e14:	1005003a 	cmpeq	r2,r2,zero
  806e18:	103f6a26 	beq	r2,zero,806bc4 <___vfprintf_internal_r+0x1aa8>
  806e1c:	d8800717 	ldw	r2,28(sp)
  806e20:	003f7706 	br	806c00 <___vfprintf_internal_r+0x1ae4>
  806e24:	d9c14515 	stw	r7,1300(sp)
  806e28:	38004d16 	blt	r7,zero,806f60 <___vfprintf_internal_r+0x1e44>
  806e2c:	dc814715 	stw	r18,1308(sp)
  806e30:	d8014615 	stw	zero,1304(sp)
  806e34:	003b5b06 	br	805ba4 <___vfprintf_internal_r+0xa88>
  806e38:	d9014f17 	ldw	r4,1340(sp)
  806e3c:	d8800504 	addi	r2,sp,20
  806e40:	d8800115 	stw	r2,4(sp)
  806e44:	d8c00604 	addi	r3,sp,24
  806e48:	d8800704 	addi	r2,sp,28
  806e4c:	800b883a 	mov	r5,r16
  806e50:	880d883a 	mov	r6,r17
  806e54:	01c000c4 	movi	r7,3
  806e58:	d8c00215 	stw	r3,8(sp)
  806e5c:	d8800315 	stw	r2,12(sp)
  806e60:	dcc00015 	stw	r19,0(sp)
  806e64:	9829883a 	mov	r20,r19
  806e68:	0808da80 	call	808da8 <_dtoa_r>
  806e6c:	d8814115 	stw	r2,1284(sp)
  806e70:	003f5106 	br	806bb8 <___vfprintf_internal_r+0x1a9c>
  806e74:	d8c14217 	ldw	r3,1288(sp)
  806e78:	d9014317 	ldw	r4,1292(sp)
  806e7c:	07000b44 	movi	fp,45
  806e80:	1821883a 	mov	r16,r3
  806e84:	2460003c 	xorhi	r17,r4,32768
  806e88:	003f3106 	br	806b50 <___vfprintf_internal_r+0x1a34>
  806e8c:	9d000044 	addi	r20,r19,1
  806e90:	003f3906 	br	806b78 <___vfprintf_internal_r+0x1a5c>
  806e94:	983f251e 	bne	r19,zero,806b2c <___vfprintf_internal_r+0x1a10>
  806e98:	04c00044 	movi	r19,1
  806e9c:	003f2306 	br	806b2c <___vfprintf_internal_r+0x1a10>
  806ea0:	04c00184 	movi	r19,6
  806ea4:	003f2106 	br	806b2c <___vfprintf_internal_r+0x1a10>
  806ea8:	d8014515 	stw	zero,1300(sp)
  806eac:	003eee06 	br	806a68 <___vfprintf_internal_r+0x194c>
  806eb0:	200f883a 	mov	r7,r4
  806eb4:	0100370e 	bge	zero,r4,806f94 <___vfprintf_internal_r+0x1e78>
  806eb8:	9800031e 	bne	r19,zero,806ec8 <___vfprintf_internal_r+0x1dac>
  806ebc:	d9814c17 	ldw	r6,1328(sp)
  806ec0:	3080004c 	andi	r2,r6,1
  806ec4:	103fb726 	beq	r2,zero,806da4 <___vfprintf_internal_r+0x1c88>
  806ec8:	20800044 	addi	r2,r4,1
  806ecc:	98a7883a 	add	r19,r19,r2
  806ed0:	dcc14515 	stw	r19,1300(sp)
  806ed4:	980f883a 	mov	r7,r19
  806ed8:	983f800e 	bge	r19,zero,806cdc <___vfprintf_internal_r+0x1bc0>
  806edc:	003fb306 	br	806dac <___vfprintf_internal_r+0x1c90>
  806ee0:	d9814d17 	ldw	r6,1332(sp)
  806ee4:	31bfff84 	addi	r6,r6,-2
  806ee8:	d9814d15 	stw	r6,1332(sp)
  806eec:	003f4c06 	br	806c20 <___vfprintf_internal_r+0x1b04>
  806ef0:	0100180e 	bge	zero,r4,806f54 <___vfprintf_internal_r+0x1e38>
  806ef4:	00800044 	movi	r2,1
  806ef8:	1485883a 	add	r2,r2,r18
  806efc:	d8814515 	stw	r2,1300(sp)
  806f00:	100f883a 	mov	r7,r2
  806f04:	103f750e 	bge	r2,zero,806cdc <___vfprintf_internal_r+0x1bc0>
  806f08:	003fa806 	br	806dac <___vfprintf_internal_r+0x1c90>
  806f0c:	80c00c04 	addi	r3,r16,48
  806f10:	00800c04 	movi	r2,48
  806f14:	d8c008c5 	stb	r3,35(sp)
  806f18:	d9800804 	addi	r6,sp,32
  806f1c:	d8c00904 	addi	r3,sp,36
  806f20:	d8800885 	stb	r2,34(sp)
  806f24:	003f6506 	br	806cbc <___vfprintf_internal_r+0x1ba0>
  806f28:	d9014c17 	ldw	r4,1328(sp)
  806f2c:	2084703a 	and	r2,r4,r2
  806f30:	103f9c26 	beq	r2,zero,806da4 <___vfprintf_internal_r+0x1c88>
  806f34:	003f6606 	br	806cd0 <___vfprintf_internal_r+0x1bb4>
  806f38:	d9800804 	addi	r6,sp,32
  806f3c:	d8c00884 	addi	r3,sp,34
  806f40:	003f5e06 	br	806cbc <___vfprintf_internal_r+0x1ba0>
  806f44:	00800b44 	movi	r2,45
  806f48:	0121c83a 	sub	r16,zero,r4
  806f4c:	d8800845 	stb	r2,33(sp)
  806f50:	003f3d06 	br	806c48 <___vfprintf_internal_r+0x1b2c>
  806f54:	00800084 	movi	r2,2
  806f58:	1105c83a 	sub	r2,r2,r4
  806f5c:	003fe606 	br	806ef8 <___vfprintf_internal_r+0x1ddc>
  806f60:	d8014515 	stw	zero,1300(sp)
  806f64:	dc814715 	stw	r18,1308(sp)
  806f68:	003fb106 	br	806e30 <___vfprintf_internal_r+0x1d14>
  806f6c:	000d883a 	mov	r6,zero
  806f70:	000f883a 	mov	r7,zero
  806f74:	8009883a 	mov	r4,r16
  806f78:	880b883a 	mov	r5,r17
  806f7c:	0810d5c0 	call	810d5c <__nedf2>
  806f80:	103f9f26 	beq	r2,zero,806e00 <___vfprintf_internal_r+0x1ce4>
  806f84:	00800044 	movi	r2,1
  806f88:	1509c83a 	sub	r4,r2,r20
  806f8c:	d9000515 	stw	r4,20(sp)
  806f90:	003f9b06 	br	806e00 <___vfprintf_internal_r+0x1ce4>
  806f94:	98000d1e 	bne	r19,zero,806fcc <___vfprintf_internal_r+0x1eb0>
  806f98:	d8c14c17 	ldw	r3,1328(sp)
  806f9c:	1880004c 	andi	r2,r3,1
  806fa0:	10000a1e 	bne	r2,zero,806fcc <___vfprintf_internal_r+0x1eb0>
  806fa4:	01000044 	movi	r4,1
  806fa8:	200f883a 	mov	r7,r4
  806fac:	d9014515 	stw	r4,1300(sp)
  806fb0:	003f4a06 	br	806cdc <___vfprintf_internal_r+0x1bc0>
  806fb4:	3cc00017 	ldw	r19,0(r7)
  806fb8:	39c00104 	addi	r7,r7,4
  806fbc:	983d0e0e 	bge	r19,zero,8063f8 <___vfprintf_internal_r+0x12dc>
  806fc0:	b8c00007 	ldb	r3,0(r23)
  806fc4:	04ffffc4 	movi	r19,-1
  806fc8:	0038d306 	br	805318 <___vfprintf_internal_r+0x1fc>
  806fcc:	9cc00084 	addi	r19,r19,2
  806fd0:	dcc14515 	stw	r19,1300(sp)
  806fd4:	980f883a 	mov	r7,r19
  806fd8:	983f400e 	bge	r19,zero,806cdc <___vfprintf_internal_r+0x1bc0>
  806fdc:	003f7306 	br	806dac <___vfprintf_internal_r+0x1c90>

00806fe0 <__vfprintf_internal>:
  806fe0:	00802074 	movhi	r2,129
  806fe4:	109ae304 	addi	r2,r2,27532
  806fe8:	2013883a 	mov	r9,r4
  806fec:	11000017 	ldw	r4,0(r2)
  806ff0:	2805883a 	mov	r2,r5
  806ff4:	300f883a 	mov	r7,r6
  806ff8:	480b883a 	mov	r5,r9
  806ffc:	100d883a 	mov	r6,r2
  807000:	080511c1 	jmpi	80511c <___vfprintf_internal_r>

00807004 <__svfscanf_r>:
  807004:	deff4e04 	addi	sp,sp,-712
  807008:	dd80ae15 	stw	r22,696(sp)
  80700c:	dd00ac15 	stw	r20,688(sp)
  807010:	dc40a915 	stw	r17,676(sp)
  807014:	dc00a815 	stw	r16,672(sp)
  807018:	dfc0b115 	stw	ra,708(sp)
  80701c:	df00b015 	stw	fp,704(sp)
  807020:	ddc0af15 	stw	r23,700(sp)
  807024:	dd40ad15 	stw	r21,692(sp)
  807028:	dcc0ab15 	stw	r19,684(sp)
  80702c:	dc80aa15 	stw	r18,680(sp)
  807030:	202d883a 	mov	r22,r4
  807034:	2821883a 	mov	r16,r5
  807038:	d9c0a415 	stw	r7,656(sp)
  80703c:	3029883a 	mov	r20,r6
  807040:	d800a215 	stw	zero,648(sp)
  807044:	0023883a 	mov	r17,zero
  807048:	d800a115 	stw	zero,644(sp)
  80704c:	d800a015 	stw	zero,640(sp)
  807050:	a1000007 	ldb	r4,0(r20)
  807054:	d9000115 	stw	r4,4(sp)
  807058:	20001f26 	beq	r4,zero,8070d8 <__svfscanf_r+0xd4>
  80705c:	04c02074 	movhi	r19,129
  807060:	9cdae204 	addi	r19,r19,27528
  807064:	9c800017 	ldw	r18,0(r19)
  807068:	a5000044 	addi	r20,r20,1
  80706c:	9107883a 	add	r3,r18,r4
  807070:	18800003 	ldbu	r2,0(r3)
  807074:	1080020c 	andi	r2,r2,8
  807078:	10002426 	beq	r2,zero,80710c <__svfscanf_r+0x108>
  80707c:	80c00117 	ldw	r3,4(r16)
  807080:	00c00e0e 	bge	zero,r3,8070bc <__svfscanf_r+0xb8>
  807084:	81400017 	ldw	r5,0(r16)
  807088:	98800017 	ldw	r2,0(r19)
  80708c:	28c00003 	ldbu	r3,0(r5)
  807090:	1887883a 	add	r3,r3,r2
  807094:	19000003 	ldbu	r4,0(r3)
  807098:	2100020c 	andi	r4,r4,8
  80709c:	203fec26 	beq	r4,zero,807050 <__svfscanf_r+0x4c>
  8070a0:	80c00117 	ldw	r3,4(r16)
  8070a4:	29800044 	addi	r6,r5,1
  8070a8:	8c400044 	addi	r17,r17,1
  8070ac:	18ffffc4 	addi	r3,r3,-1
  8070b0:	81800015 	stw	r6,0(r16)
  8070b4:	80c00115 	stw	r3,4(r16)
  8070b8:	00fff216 	blt	zero,r3,807084 <__svfscanf_r+0x80>
  8070bc:	b009883a 	mov	r4,r22
  8070c0:	800b883a 	mov	r5,r16
  8070c4:	08047bc0 	call	8047bc <__srefill_r>
  8070c8:	103fee26 	beq	r2,zero,807084 <__svfscanf_r+0x80>
  8070cc:	a1000007 	ldb	r4,0(r20)
  8070d0:	d9000115 	stw	r4,4(sp)
  8070d4:	203fe11e 	bne	r4,zero,80705c <__svfscanf_r+0x58>
  8070d8:	d880a217 	ldw	r2,648(sp)
  8070dc:	dfc0b117 	ldw	ra,708(sp)
  8070e0:	df00b017 	ldw	fp,704(sp)
  8070e4:	ddc0af17 	ldw	r23,700(sp)
  8070e8:	dd80ae17 	ldw	r22,696(sp)
  8070ec:	dd40ad17 	ldw	r21,692(sp)
  8070f0:	dd00ac17 	ldw	r20,688(sp)
  8070f4:	dcc0ab17 	ldw	r19,684(sp)
  8070f8:	dc80aa17 	ldw	r18,680(sp)
  8070fc:	dc40a917 	ldw	r17,676(sp)
  807100:	dc00a817 	ldw	r16,672(sp)
  807104:	dec0b204 	addi	sp,sp,712
  807108:	f800283a 	ret
  80710c:	00800944 	movi	r2,37
  807110:	20801626 	beq	r4,r2,80716c <__svfscanf_r+0x168>
  807114:	80800117 	ldw	r2,4(r16)
  807118:	00800b0e 	bge	zero,r2,807148 <__svfscanf_r+0x144>
  80711c:	81000017 	ldw	r4,0(r16)
  807120:	a0ffffc7 	ldb	r3,-1(r20)
  807124:	20800003 	ldbu	r2,0(r4)
  807128:	10ffeb1e 	bne	r2,r3,8070d8 <__svfscanf_r+0xd4>
  80712c:	80c00117 	ldw	r3,4(r16)
  807130:	21800044 	addi	r6,r4,1
  807134:	8c400044 	addi	r17,r17,1
  807138:	18ffffc4 	addi	r3,r3,-1
  80713c:	80c00115 	stw	r3,4(r16)
  807140:	81800015 	stw	r6,0(r16)
  807144:	003fc206 	br	807050 <__svfscanf_r+0x4c>
  807148:	b009883a 	mov	r4,r22
  80714c:	800b883a 	mov	r5,r16
  807150:	08047bc0 	call	8047bc <__srefill_r>
  807154:	103ff126 	beq	r2,zero,80711c <__svfscanf_r+0x118>
  807158:	d900a217 	ldw	r4,648(sp)
  80715c:	2004981e 	bne	r4,zero,8083c0 <__svfscanf_r+0x13bc>
  807160:	00bfffc4 	movi	r2,-1
  807164:	d880a215 	stw	r2,648(sp)
  807168:	003fdb06 	br	8070d8 <__svfscanf_r+0xd4>
  80716c:	d800a315 	stw	zero,652(sp)
  807170:	002b883a 	mov	r21,zero
  807174:	a0c00003 	ldbu	r3,0(r20)
  807178:	00801e04 	movi	r2,120
  80717c:	a5000044 	addi	r20,r20,1
  807180:	1dc03fcc 	andi	r23,r3,255
  807184:	bdc0201c 	xori	r23,r23,128
  807188:	bdffe004 	addi	r23,r23,-128
  80718c:	10c08036 	bltu	r2,r3,807390 <__svfscanf_r+0x38c>
  807190:	18c5883a 	add	r2,r3,r3
  807194:	1085883a 	add	r2,r2,r2
  807198:	00c02034 	movhi	r3,128
  80719c:	18dc6b04 	addi	r3,r3,29100
  8071a0:	10c5883a 	add	r2,r2,r3
  8071a4:	11000017 	ldw	r4,0(r2)
  8071a8:	2000683a 	jmp	r4
  8071ac:	00807160 	cmpeqi	r2,zero,453
  8071b0:	00807390 	cmplti	r2,zero,462
  8071b4:	00807390 	cmplti	r2,zero,462
  8071b8:	00807390 	cmplti	r2,zero,462
  8071bc:	00807390 	cmplti	r2,zero,462
  8071c0:	00807390 	cmplti	r2,zero,462
  8071c4:	00807390 	cmplti	r2,zero,462
  8071c8:	00807390 	cmplti	r2,zero,462
  8071cc:	00807390 	cmplti	r2,zero,462
  8071d0:	00807390 	cmplti	r2,zero,462
  8071d4:	00807390 	cmplti	r2,zero,462
  8071d8:	00807390 	cmplti	r2,zero,462
  8071dc:	00807390 	cmplti	r2,zero,462
  8071e0:	00807390 	cmplti	r2,zero,462
  8071e4:	00807390 	cmplti	r2,zero,462
  8071e8:	00807390 	cmplti	r2,zero,462
  8071ec:	00807390 	cmplti	r2,zero,462
  8071f0:	00807390 	cmplti	r2,zero,462
  8071f4:	00807390 	cmplti	r2,zero,462
  8071f8:	00807390 	cmplti	r2,zero,462
  8071fc:	00807390 	cmplti	r2,zero,462
  807200:	00807390 	cmplti	r2,zero,462
  807204:	00807390 	cmplti	r2,zero,462
  807208:	00807390 	cmplti	r2,zero,462
  80720c:	00807390 	cmplti	r2,zero,462
  807210:	00807390 	cmplti	r2,zero,462
  807214:	00807390 	cmplti	r2,zero,462
  807218:	00807390 	cmplti	r2,zero,462
  80721c:	00807390 	cmplti	r2,zero,462
  807220:	00807390 	cmplti	r2,zero,462
  807224:	00807390 	cmplti	r2,zero,462
  807228:	00807390 	cmplti	r2,zero,462
  80722c:	00807390 	cmplti	r2,zero,462
  807230:	00807390 	cmplti	r2,zero,462
  807234:	00807390 	cmplti	r2,zero,462
  807238:	00807390 	cmplti	r2,zero,462
  80723c:	00807390 	cmplti	r2,zero,462
  807240:	00807114 	movui	r2,452
  807244:	00807390 	cmplti	r2,zero,462
  807248:	00807390 	cmplti	r2,zero,462
  80724c:	00807390 	cmplti	r2,zero,462
  807250:	00807390 	cmplti	r2,zero,462
  807254:	00808230 	cmpltui	r2,zero,520
  807258:	00807390 	cmplti	r2,zero,462
  80725c:	00807390 	cmplti	r2,zero,462
  807260:	00807390 	cmplti	r2,zero,462
  807264:	00807390 	cmplti	r2,zero,462
  807268:	00807390 	cmplti	r2,zero,462
  80726c:	00808214 	movui	r2,520
  807270:	00808214 	movui	r2,520
  807274:	00808214 	movui	r2,520
  807278:	00808214 	movui	r2,520
  80727c:	00808214 	movui	r2,520
  807280:	00808214 	movui	r2,520
  807284:	00808214 	movui	r2,520
  807288:	00808214 	movui	r2,520
  80728c:	00808214 	movui	r2,520
  807290:	00808214 	movui	r2,520
  807294:	00807390 	cmplti	r2,zero,462
  807298:	00807390 	cmplti	r2,zero,462
  80729c:	00807390 	cmplti	r2,zero,462
  8072a0:	00807390 	cmplti	r2,zero,462
  8072a4:	00807390 	cmplti	r2,zero,462
  8072a8:	00807390 	cmplti	r2,zero,462
  8072ac:	00807390 	cmplti	r2,zero,462
  8072b0:	00807390 	cmplti	r2,zero,462
  8072b4:	00807390 	cmplti	r2,zero,462
  8072b8:	00807390 	cmplti	r2,zero,462
  8072bc:	008073a4 	muli	r2,zero,462
  8072c0:	00808318 	cmpnei	r2,zero,524
  8072c4:	00807390 	cmplti	r2,zero,462
  8072c8:	00808318 	cmpnei	r2,zero,524
  8072cc:	00807390 	cmplti	r2,zero,462
  8072d0:	00807390 	cmplti	r2,zero,462
  8072d4:	00807390 	cmplti	r2,zero,462
  8072d8:	00807390 	cmplti	r2,zero,462
  8072dc:	0080820c 	andi	r2,zero,520
  8072e0:	00807390 	cmplti	r2,zero,462
  8072e4:	00807390 	cmplti	r2,zero,462
  8072e8:	008081ec 	andhi	r2,zero,519
  8072ec:	00807390 	cmplti	r2,zero,462
  8072f0:	00807390 	cmplti	r2,zero,462
  8072f4:	00807390 	cmplti	r2,zero,462
  8072f8:	00807390 	cmplti	r2,zero,462
  8072fc:	00807390 	cmplti	r2,zero,462
  807300:	00807390 	cmplti	r2,zero,462
  807304:	00807390 	cmplti	r2,zero,462
  807308:	00807390 	cmplti	r2,zero,462
  80730c:	00808238 	rdprs	r2,zero,520
  807310:	00807390 	cmplti	r2,zero,462
  807314:	00807390 	cmplti	r2,zero,462
  807318:	008081d0 	cmplti	r2,zero,519
  80731c:	00807390 	cmplti	r2,zero,462
  807320:	00807390 	cmplti	r2,zero,462
  807324:	00807390 	cmplti	r2,zero,462
  807328:	00807390 	cmplti	r2,zero,462
  80732c:	00807390 	cmplti	r2,zero,462
  807330:	00807390 	cmplti	r2,zero,462
  807334:	00807390 	cmplti	r2,zero,462
  807338:	00808320 	cmpeqi	r2,zero,524
  80733c:	008073a8 	cmpgeui	r2,zero,462
  807340:	00808318 	cmpnei	r2,zero,524
  807344:	00808318 	cmpnei	r2,zero,524
  807348:	00808318 	cmpnei	r2,zero,524
  80734c:	0080832c 	andhi	r2,zero,524
  807350:	00808274 	movhi	r2,521
  807354:	00807390 	cmplti	r2,zero,462
  807358:	00807390 	cmplti	r2,zero,462
  80735c:	0080793c 	xorhi	r2,zero,484
  807360:	00807390 	cmplti	r2,zero,462
  807364:	00808428 	cmpgeui	r2,zero,528
  807368:	008083e4 	muli	r2,zero,527
  80736c:	00808408 	cmpgei	r2,zero,528
  807370:	00807390 	cmplti	r2,zero,462
  807374:	00807390 	cmplti	r2,zero,462
  807378:	00808400 	call	80840 <__alt_mem_sdram-0x77f7c0>
  80737c:	00807390 	cmplti	r2,zero,462
  807380:	00808258 	cmpnei	r2,zero,521
  807384:	00807390 	cmplti	r2,zero,462
  807388:	00807390 	cmplti	r2,zero,462
  80738c:	00808238 	rdprs	r2,zero,520
  807390:	bc87883a 	add	r3,r23,r18
  807394:	18800003 	ldbu	r2,0(r3)
  807398:	1080004c 	andi	r2,r2,1
  80739c:	1005003a 	cmpeq	r2,r2,zero
  8073a0:	1000011e 	bne	r2,zero,8073a8 <__svfscanf_r+0x3a4>
  8073a4:	ad400054 	ori	r21,r21,1
  8073a8:	01002074 	movhi	r4,129
  8073ac:	21375904 	addi	r4,r4,-8860
  8073b0:	00800284 	movi	r2,10
  8073b4:	d900a015 	stw	r4,640(sp)
  8073b8:	048000c4 	movi	r18,3
  8073bc:	d880a115 	stw	r2,644(sp)
  8073c0:	80c00117 	ldw	r3,4(r16)
  8073c4:	00c13f0e 	bge	zero,r3,8078c4 <__svfscanf_r+0x8c0>
  8073c8:	a880100c 	andi	r2,r21,64
  8073cc:	10001326 	beq	r2,zero,80741c <__svfscanf_r+0x418>
  8073d0:	00800104 	movi	r2,4
  8073d4:	14bf1e36 	bltu	r2,r18,807050 <__svfscanf_r+0x4c>
  8073d8:	9485883a 	add	r2,r18,r18
  8073dc:	1085883a 	add	r2,r2,r2
  8073e0:	00c02034 	movhi	r3,128
  8073e4:	18dcfd04 	addi	r3,r3,29684
  8073e8:	10c5883a 	add	r2,r2,r3
  8073ec:	11000017 	ldw	r4,0(r2)
  8073f0:	2000683a 	jmp	r4
  8073f4:	00807458 	cmpnei	r2,zero,465
  8073f8:	00807558 	cmpnei	r2,zero,469
  8073fc:	00807768 	cmpgeui	r2,zero,477
  807400:	008075cc 	andi	r2,zero,471
  807404:	008078a0 	cmpeqi	r2,zero,482
  807408:	b009883a 	mov	r4,r22
  80740c:	800b883a 	mov	r5,r16
  807410:	08047bc0 	call	8047bc <__srefill_r>
  807414:	103f501e 	bne	r2,zero,807158 <__svfscanf_r+0x154>
  807418:	8c400044 	addi	r17,r17,1
  80741c:	81400017 	ldw	r5,0(r16)
  807420:	98800017 	ldw	r2,0(r19)
  807424:	28c00003 	ldbu	r3,0(r5)
  807428:	1887883a 	add	r3,r3,r2
  80742c:	19000003 	ldbu	r4,0(r3)
  807430:	2100020c 	andi	r4,r4,8
  807434:	203fe626 	beq	r4,zero,8073d0 <__svfscanf_r+0x3cc>
  807438:	80c00117 	ldw	r3,4(r16)
  80743c:	18ffffc4 	addi	r3,r3,-1
  807440:	80c00115 	stw	r3,4(r16)
  807444:	00fff00e 	bge	zero,r3,807408 <__svfscanf_r+0x404>
  807448:	29800044 	addi	r6,r5,1
  80744c:	8c400044 	addi	r17,r17,1
  807450:	81800015 	stw	r6,0(r16)
  807454:	003ff106 	br	80741c <__svfscanf_r+0x418>
  807458:	d8c0a317 	ldw	r3,652(sp)
  80745c:	1800021e 	bne	r3,zero,807468 <__svfscanf_r+0x464>
  807460:	01000044 	movi	r4,1
  807464:	d900a315 	stw	r4,652(sp)
  807468:	a880004c 	andi	r2,r21,1
  80746c:	1005003a 	cmpeq	r2,r2,zero
  807470:	1002811e 	bne	r2,zero,807e78 <__svfscanf_r+0xe74>
  807474:	ad40040c 	andi	r21,r21,16
  807478:	a805003a 	cmpeq	r2,r21,zero
  80747c:	d880a615 	stw	r2,664(sp)
  807480:	1003d31e 	bne	r2,zero,8083d0 <__svfscanf_r+0x13cc>
  807484:	0027883a 	mov	r19,zero
  807488:	d900a317 	ldw	r4,652(sp)
  80748c:	2003c726 	beq	r4,zero,8083ac <__svfscanf_r+0x13a8>
  807490:	07002074 	movhi	fp,129
  807494:	e71ae704 	addi	fp,fp,27548
  807498:	e0800017 	ldw	r2,0(fp)
  80749c:	103f2e26 	beq	r2,zero,807158 <__svfscanf_r+0x154>
  8074a0:	d8804404 	addi	r2,sp,272
  8074a4:	0025883a 	mov	r18,zero
  8074a8:	d880a515 	stw	r2,660(sp)
  8074ac:	05ffffc4 	movi	r23,-1
  8074b0:	80800017 	ldw	r2,0(r16)
  8074b4:	80c00117 	ldw	r3,4(r16)
  8074b8:	d900a517 	ldw	r4,660(sp)
  8074bc:	12000003 	ldbu	r8,0(r2)
  8074c0:	18ffffc4 	addi	r3,r3,-1
  8074c4:	11800044 	addi	r6,r2,1
  8074c8:	248f883a 	add	r7,r4,r18
  8074cc:	80c00115 	stw	r3,4(r16)
  8074d0:	81800015 	stw	r6,0(r16)
  8074d4:	3a000005 	stb	r8,0(r7)
  8074d8:	d9000204 	addi	r4,sp,8
  8074dc:	000b883a 	mov	r5,zero
  8074e0:	01800204 	movi	r6,8
  8074e4:	08045800 	call	804580 <memset>
  8074e8:	d980a517 	ldw	r6,660(sp)
  8074ec:	94800044 	addi	r18,r18,1
  8074f0:	d8800204 	addi	r2,sp,8
  8074f4:	b009883a 	mov	r4,r22
  8074f8:	980b883a 	mov	r5,r19
  8074fc:	900f883a 	mov	r7,r18
  807500:	d8800015 	stw	r2,0(sp)
  807504:	080aa700 	call	80aa70 <_mbrtowc_r>
  807508:	1007883a 	mov	r3,r2
  80750c:	15ff1226 	beq	r2,r23,807158 <__svfscanf_r+0x154>
  807510:	10039e1e 	bne	r2,zero,80838c <__svfscanf_r+0x1388>
  807514:	a800011e 	bne	r21,zero,80751c <__svfscanf_r+0x518>
  807518:	98000015 	stw	zero,0(r19)
  80751c:	d8c0a317 	ldw	r3,652(sp)
  807520:	d900a617 	ldw	r4,664(sp)
  807524:	8ca3883a 	add	r17,r17,r18
  807528:	18ffffc4 	addi	r3,r3,-1
  80752c:	d8c0a315 	stw	r3,652(sp)
  807530:	20000126 	beq	r4,zero,807538 <__svfscanf_r+0x534>
  807534:	9cc00104 	addi	r19,r19,4
  807538:	0025883a 	mov	r18,zero
  80753c:	80c00117 	ldw	r3,4(r16)
  807540:	00c3950e 	bge	zero,r3,808398 <__svfscanf_r+0x1394>
  807544:	d880a317 	ldw	r2,652(sp)
  807548:	10039826 	beq	r2,zero,8083ac <__svfscanf_r+0x13a8>
  80754c:	e0800017 	ldw	r2,0(fp)
  807550:	90bfd71e 	bne	r18,r2,8074b0 <__svfscanf_r+0x4ac>
  807554:	003f0006 	br	807158 <__svfscanf_r+0x154>
  807558:	d880a317 	ldw	r2,652(sp)
  80755c:	1000021e 	bne	r2,zero,807568 <__svfscanf_r+0x564>
  807560:	00ffffc4 	movi	r3,-1
  807564:	d8c0a315 	stw	r3,652(sp)
  807568:	a880040c 	andi	r2,r21,16
  80756c:	1003b826 	beq	r2,zero,808450 <__svfscanf_r+0x144c>
  807570:	0027883a 	mov	r19,zero
  807574:	dd400404 	addi	r21,sp,16
  807578:	81000017 	ldw	r4,0(r16)
  80757c:	20800003 	ldbu	r2,0(r4)
  807580:	a885883a 	add	r2,r21,r2
  807584:	10c00007 	ldb	r3,0(r2)
  807588:	18037d26 	beq	r3,zero,808380 <__svfscanf_r+0x137c>
  80758c:	80c00117 	ldw	r3,4(r16)
  807590:	21800044 	addi	r6,r4,1
  807594:	d900a317 	ldw	r4,652(sp)
  807598:	18ffffc4 	addi	r3,r3,-1
  80759c:	9cc00044 	addi	r19,r19,1
  8075a0:	81800015 	stw	r6,0(r16)
  8075a4:	80c00115 	stw	r3,4(r16)
  8075a8:	24c37526 	beq	r4,r19,808380 <__svfscanf_r+0x137c>
  8075ac:	00fff216 	blt	zero,r3,807578 <__svfscanf_r+0x574>
  8075b0:	b009883a 	mov	r4,r22
  8075b4:	800b883a 	mov	r5,r16
  8075b8:	08047bc0 	call	8047bc <__srefill_r>
  8075bc:	103fee26 	beq	r2,zero,807578 <__svfscanf_r+0x574>
  8075c0:	983ee526 	beq	r19,zero,807158 <__svfscanf_r+0x154>
  8075c4:	8ce3883a 	add	r17,r17,r19
  8075c8:	003ea106 	br	807050 <__svfscanf_r+0x4c>
  8075cc:	d900a317 	ldw	r4,652(sp)
  8075d0:	00805704 	movi	r2,348
  8075d4:	20ffffc4 	addi	r3,r4,-1
  8075d8:	10c0bf2e 	bgeu	r2,r3,8078d8 <__svfscanf_r+0x8d4>
  8075dc:	00805744 	movi	r2,349
  8075e0:	24ffa8c4 	addi	r19,r4,-349
  8075e4:	ac836014 	ori	r18,r21,3456
  8075e8:	d880a315 	stw	r2,652(sp)
  8075ec:	d8c04404 	addi	r3,sp,272
  8075f0:	d8c0a515 	stw	r3,660(sp)
  8075f4:	002f883a 	mov	r23,zero
  8075f8:	182b883a 	mov	r21,r3
  8075fc:	81800017 	ldw	r6,0(r16)
  807600:	00c01344 	movi	r3,77
  807604:	31400003 	ldbu	r5,0(r6)
  807608:	28bff544 	addi	r2,r5,-43
  80760c:	10803fcc 	andi	r2,r2,255
  807610:	1880b836 	bltu	r3,r2,8078f4 <__svfscanf_r+0x8f0>
  807614:	1085883a 	add	r2,r2,r2
  807618:	1085883a 	add	r2,r2,r2
  80761c:	00c02034 	movhi	r3,128
  807620:	18dd8c04 	addi	r3,r3,30256
  807624:	10c5883a 	add	r2,r2,r3
  807628:	11000017 	ldw	r4,0(r2)
  80762c:	2000683a 	jmp	r4
  807630:	00807a44 	movi	r2,489
  807634:	008078f4 	movhi	r2,483
  807638:	00807a44 	movi	r2,489
  80763c:	008078f4 	movhi	r2,483
  807640:	008078f4 	movhi	r2,483
  807644:	00807a88 	cmpgei	r2,zero,490
  807648:	0080828c 	andi	r2,zero,522
  80764c:	0080828c 	andi	r2,zero,522
  807650:	0080828c 	andi	r2,zero,522
  807654:	0080828c 	andi	r2,zero,522
  807658:	0080828c 	andi	r2,zero,522
  80765c:	0080828c 	andi	r2,zero,522
  807660:	0080828c 	andi	r2,zero,522
  807664:	008082b4 	movhi	r2,522
  807668:	008082b4 	movhi	r2,522
  80766c:	008078f4 	movhi	r2,483
  807670:	008078f4 	movhi	r2,483
  807674:	008078f4 	movhi	r2,483
  807678:	008078f4 	movhi	r2,483
  80767c:	008078f4 	movhi	r2,483
  807680:	008078f4 	movhi	r2,483
  807684:	008078f4 	movhi	r2,483
  807688:	008082e4 	muli	r2,zero,523
  80768c:	008082e4 	muli	r2,zero,523
  807690:	008082e4 	muli	r2,zero,523
  807694:	008082e4 	muli	r2,zero,523
  807698:	008082e4 	muli	r2,zero,523
  80769c:	008082e4 	muli	r2,zero,523
  8076a0:	008078f4 	movhi	r2,483
  8076a4:	008078f4 	movhi	r2,483
  8076a8:	008078f4 	movhi	r2,483
  8076ac:	008078f4 	movhi	r2,483
  8076b0:	008078f4 	movhi	r2,483
  8076b4:	008078f4 	movhi	r2,483
  8076b8:	008078f4 	movhi	r2,483
  8076bc:	008078f4 	movhi	r2,483
  8076c0:	008078f4 	movhi	r2,483
  8076c4:	008078f4 	movhi	r2,483
  8076c8:	008078f4 	movhi	r2,483
  8076cc:	008078f4 	movhi	r2,483
  8076d0:	008078f4 	movhi	r2,483
  8076d4:	008078f4 	movhi	r2,483
  8076d8:	008078f4 	movhi	r2,483
  8076dc:	008078f4 	movhi	r2,483
  8076e0:	008078f4 	movhi	r2,483
  8076e4:	008082f4 	movhi	r2,523
  8076e8:	008078f4 	movhi	r2,483
  8076ec:	008078f4 	movhi	r2,483
  8076f0:	008078f4 	movhi	r2,483
  8076f4:	008078f4 	movhi	r2,483
  8076f8:	008078f4 	movhi	r2,483
  8076fc:	008078f4 	movhi	r2,483
  807700:	008078f4 	movhi	r2,483
  807704:	008078f4 	movhi	r2,483
  807708:	008082e4 	muli	r2,zero,523
  80770c:	008082e4 	muli	r2,zero,523
  807710:	008082e4 	muli	r2,zero,523
  807714:	008082e4 	muli	r2,zero,523
  807718:	008082e4 	muli	r2,zero,523
  80771c:	008082e4 	muli	r2,zero,523
  807720:	008078f4 	movhi	r2,483
  807724:	008078f4 	movhi	r2,483
  807728:	008078f4 	movhi	r2,483
  80772c:	008078f4 	movhi	r2,483
  807730:	008078f4 	movhi	r2,483
  807734:	008078f4 	movhi	r2,483
  807738:	008078f4 	movhi	r2,483
  80773c:	008078f4 	movhi	r2,483
  807740:	008078f4 	movhi	r2,483
  807744:	008078f4 	movhi	r2,483
  807748:	008078f4 	movhi	r2,483
  80774c:	008078f4 	movhi	r2,483
  807750:	008078f4 	movhi	r2,483
  807754:	008078f4 	movhi	r2,483
  807758:	008078f4 	movhi	r2,483
  80775c:	008078f4 	movhi	r2,483
  807760:	008078f4 	movhi	r2,483
  807764:	008082f4 	movhi	r2,523
  807768:	d900a317 	ldw	r4,652(sp)
  80776c:	2000021e 	bne	r4,zero,807778 <__svfscanf_r+0x774>
  807770:	00bfffc4 	movi	r2,-1
  807774:	d880a315 	stw	r2,652(sp)
  807778:	a880004c 	andi	r2,r21,1
  80777c:	1005003a 	cmpeq	r2,r2,zero
  807780:	1003651e 	bne	r2,zero,808518 <__svfscanf_r+0x1514>
  807784:	adc0040c 	andi	r23,r21,16
  807788:	b807003a 	cmpeq	r3,r23,zero
  80778c:	d8c0a715 	stw	r3,668(sp)
  807790:	1802f61e 	bne	r3,zero,80836c <__svfscanf_r+0x1368>
  807794:	dd400104 	addi	r21,sp,4
  807798:	0025883a 	mov	r18,zero
  80779c:	073fffc4 	movi	fp,-1
  8077a0:	81400017 	ldw	r5,0(r16)
  8077a4:	98800017 	ldw	r2,0(r19)
  8077a8:	29c00003 	ldbu	r7,0(r5)
  8077ac:	38c03fcc 	andi	r3,r7,255
  8077b0:	1887883a 	add	r3,r3,r2
  8077b4:	19000003 	ldbu	r4,0(r3)
  8077b8:	2100020c 	andi	r4,r4,8
  8077bc:	2000321e 	bne	r4,zero,807888 <__svfscanf_r+0x884>
  8077c0:	d8c0a317 	ldw	r3,652(sp)
  8077c4:	18003026 	beq	r3,zero,807888 <__svfscanf_r+0x884>
  8077c8:	00802074 	movhi	r2,129
  8077cc:	109ae704 	addi	r2,r2,27548
  8077d0:	10c00017 	ldw	r3,0(r2)
  8077d4:	90fe6026 	beq	r18,r3,807158 <__svfscanf_r+0x154>
  8077d8:	d8c04404 	addi	r3,sp,272
  8077dc:	80800117 	ldw	r2,4(r16)
  8077e0:	d8c0a515 	stw	r3,660(sp)
  8077e4:	d900a517 	ldw	r4,660(sp)
  8077e8:	10ffffc4 	addi	r3,r2,-1
  8077ec:	29800044 	addi	r6,r5,1
  8077f0:	80c00115 	stw	r3,4(r16)
  8077f4:	2485883a 	add	r2,r4,r18
  8077f8:	81800015 	stw	r6,0(r16)
  8077fc:	d9000204 	addi	r4,sp,8
  807800:	000b883a 	mov	r5,zero
  807804:	01800204 	movi	r6,8
  807808:	11c00005 	stb	r7,0(r2)
  80780c:	08045800 	call	804580 <memset>
  807810:	d980a517 	ldw	r6,660(sp)
  807814:	94800044 	addi	r18,r18,1
  807818:	d8800204 	addi	r2,sp,8
  80781c:	b009883a 	mov	r4,r22
  807820:	a80b883a 	mov	r5,r21
  807824:	900f883a 	mov	r7,r18
  807828:	d8800015 	stw	r2,0(sp)
  80782c:	080aa700 	call	80aa70 <_mbrtowc_r>
  807830:	1007883a 	mov	r3,r2
  807834:	173e4826 	beq	r2,fp,807158 <__svfscanf_r+0x154>
  807838:	1002c91e 	bne	r2,zero,808360 <__svfscanf_r+0x135c>
  80783c:	a8000015 	stw	zero,0(r21)
  807840:	a9000017 	ldw	r4,0(r21)
  807844:	080a9080 	call	80a908 <iswspace>
  807848:	1002bc1e 	bne	r2,zero,80833c <__svfscanf_r+0x1338>
  80784c:	d900a317 	ldw	r4,652(sp)
  807850:	d880a717 	ldw	r2,668(sp)
  807854:	8ca3883a 	add	r17,r17,r18
  807858:	213fffc4 	addi	r4,r4,-1
  80785c:	d900a315 	stw	r4,652(sp)
  807860:	10000126 	beq	r2,zero,807868 <__svfscanf_r+0x864>
  807864:	ad400104 	addi	r21,r21,4
  807868:	0025883a 	mov	r18,zero
  80786c:	80c00117 	ldw	r3,4(r16)
  807870:	00ffcb16 	blt	zero,r3,8077a0 <__svfscanf_r+0x79c>
  807874:	b009883a 	mov	r4,r22
  807878:	800b883a 	mov	r5,r16
  80787c:	08047bc0 	call	8047bc <__srefill_r>
  807880:	103fc726 	beq	r2,zero,8077a0 <__svfscanf_r+0x79c>
  807884:	903e341e 	bne	r18,zero,807158 <__svfscanf_r+0x154>
  807888:	b83df11e 	bne	r23,zero,807050 <__svfscanf_r+0x4c>
  80788c:	d900a217 	ldw	r4,648(sp)
  807890:	a8000015 	stw	zero,0(r21)
  807894:	21000044 	addi	r4,r4,1
  807898:	d900a215 	stw	r4,648(sp)
  80789c:	003dec06 	br	807050 <__svfscanf_r+0x4c>
  8078a0:	d900a317 	ldw	r4,652(sp)
  8078a4:	00805704 	movi	r2,348
  8078a8:	20ffffc4 	addi	r3,r4,-1
  8078ac:	10c0902e 	bgeu	r2,r3,807af0 <__svfscanf_r+0xaec>
  8078b0:	00805744 	movi	r2,349
  8078b4:	24ffa8c4 	addi	r19,r4,-349
  8078b8:	ad41e014 	ori	r21,r21,1920
  8078bc:	d880a315 	stw	r2,652(sp)
  8078c0:	00010806 	br	807ce4 <__svfscanf_r+0xce0>
  8078c4:	b009883a 	mov	r4,r22
  8078c8:	800b883a 	mov	r5,r16
  8078cc:	08047bc0 	call	8047bc <__srefill_r>
  8078d0:	103ebd26 	beq	r2,zero,8073c8 <__svfscanf_r+0x3c4>
  8078d4:	003e2006 	br	807158 <__svfscanf_r+0x154>
  8078d8:	d900a317 	ldw	r4,652(sp)
  8078dc:	ac836014 	ori	r18,r21,3456
  8078e0:	2002941e 	bne	r4,zero,808334 <__svfscanf_r+0x1330>
  8078e4:	d8804404 	addi	r2,sp,272
  8078e8:	d880a515 	stw	r2,660(sp)
  8078ec:	002f883a 	mov	r23,zero
  8078f0:	102b883a 	mov	r21,r2
  8078f4:	9080400c 	andi	r2,r18,256
  8078f8:	10000926 	beq	r2,zero,807920 <__svfscanf_r+0x91c>
  8078fc:	d8c0a517 	ldw	r3,660(sp)
  807900:	1d40052e 	bgeu	r3,r21,807918 <__svfscanf_r+0x914>
  807904:	ad7fffc4 	addi	r21,r21,-1
  807908:	a9400007 	ldb	r5,0(r21)
  80790c:	b009883a 	mov	r4,r22
  807910:	800d883a 	mov	r6,r16
  807914:	0804f0c0 	call	804f0c <_ungetc_r>
  807918:	d900a517 	ldw	r4,660(sp)
  80791c:	257dee26 	beq	r4,r21,8070d8 <__svfscanf_r+0xd4>
  807920:	9080040c 	andi	r2,r18,16
  807924:	10000a26 	beq	r2,zero,807950 <__svfscanf_r+0x94c>
  807928:	d8c0a517 	ldw	r3,660(sp)
  80792c:	a8c5c83a 	sub	r2,r21,r3
  807930:	b885883a 	add	r2,r23,r2
  807934:	88a3883a 	add	r17,r17,r2
  807938:	003dc506 	br	807050 <__svfscanf_r+0x4c>
  80793c:	a0c00007 	ldb	r3,0(r20)
  807940:	00801b04 	movi	r2,108
  807944:	18801726 	beq	r3,r2,8079a4 <__svfscanf_r+0x9a0>
  807948:	ad400054 	ori	r21,r21,1
  80794c:	003e0906 	br	807174 <__svfscanf_r+0x170>
  807950:	a8000005 	stb	zero,0(r21)
  807954:	d8c0a017 	ldw	r3,640(sp)
  807958:	d940a517 	ldw	r5,660(sp)
  80795c:	d9c0a117 	ldw	r7,644(sp)
  807960:	b009883a 	mov	r4,r22
  807964:	000d883a 	mov	r6,zero
  807968:	183ee83a 	callr	r3
  80796c:	1007883a 	mov	r3,r2
  807970:	9080080c 	andi	r2,r18,32
  807974:	1000251e 	bne	r2,zero,807a0c <__svfscanf_r+0xa08>
  807978:	9080010c 	andi	r2,r18,4
  80797c:	10000c26 	beq	r2,zero,8079b0 <__svfscanf_r+0x9ac>
  807980:	d900a417 	ldw	r4,656(sp)
  807984:	20800017 	ldw	r2,0(r4)
  807988:	21000104 	addi	r4,r4,4
  80798c:	d900a415 	stw	r4,656(sp)
  807990:	10c0000d 	sth	r3,0(r2)
  807994:	d880a217 	ldw	r2,648(sp)
  807998:	10800044 	addi	r2,r2,1
  80799c:	d880a215 	stw	r2,648(sp)
  8079a0:	003fe106 	br	807928 <__svfscanf_r+0x924>
  8079a4:	a5000044 	addi	r20,r20,1
  8079a8:	ad400094 	ori	r21,r21,2
  8079ac:	003df106 	br	807174 <__svfscanf_r+0x170>
  8079b0:	9080004c 	andi	r2,r18,1
  8079b4:	1005003a 	cmpeq	r2,r2,zero
  8079b8:	10001426 	beq	r2,zero,807a0c <__svfscanf_r+0xa08>
  8079bc:	9080008c 	andi	r2,r18,2
  8079c0:	10001226 	beq	r2,zero,807a0c <__svfscanf_r+0xa08>
  8079c4:	d8c0a017 	ldw	r3,640(sp)
  8079c8:	00802074 	movhi	r2,129
  8079cc:	10b8bc04 	addi	r2,r2,-7440
  8079d0:	18801426 	beq	r3,r2,807a24 <__svfscanf_r+0xa20>
  8079d4:	d9c0a117 	ldw	r7,644(sp)
  8079d8:	d940a517 	ldw	r5,660(sp)
  8079dc:	000d883a 	mov	r6,zero
  8079e0:	b009883a 	mov	r4,r22
  8079e4:	080dfd80 	call	80dfd8 <_strtoll_r>
  8079e8:	100d883a 	mov	r6,r2
  8079ec:	180f883a 	mov	r7,r3
  8079f0:	d900a417 	ldw	r4,656(sp)
  8079f4:	20800017 	ldw	r2,0(r4)
  8079f8:	21000104 	addi	r4,r4,4
  8079fc:	d900a415 	stw	r4,656(sp)
  807a00:	11c00115 	stw	r7,4(r2)
  807a04:	11800015 	stw	r6,0(r2)
  807a08:	003fe206 	br	807994 <__svfscanf_r+0x990>
  807a0c:	d900a417 	ldw	r4,656(sp)
  807a10:	20800017 	ldw	r2,0(r4)
  807a14:	21000104 	addi	r4,r4,4
  807a18:	d900a415 	stw	r4,656(sp)
  807a1c:	10c00015 	stw	r3,0(r2)
  807a20:	003fdc06 	br	807994 <__svfscanf_r+0x990>
  807a24:	d9c0a117 	ldw	r7,644(sp)
  807a28:	d940a517 	ldw	r5,660(sp)
  807a2c:	000d883a 	mov	r6,zero
  807a30:	b009883a 	mov	r4,r22
  807a34:	080e5540 	call	80e554 <_strtoull_r>
  807a38:	100d883a 	mov	r6,r2
  807a3c:	180f883a 	mov	r7,r3
  807a40:	003feb06 	br	8079f0 <__svfscanf_r+0x9ec>
  807a44:	9080200c 	andi	r2,r18,128
  807a48:	103faa26 	beq	r2,zero,8078f4 <__svfscanf_r+0x8f0>
  807a4c:	00bfdfc4 	movi	r2,-129
  807a50:	90a4703a 	and	r18,r18,r2
  807a54:	a9400005 	stb	r5,0(r21)
  807a58:	ad400044 	addi	r21,r21,1
  807a5c:	80c00117 	ldw	r3,4(r16)
  807a60:	18ffffc4 	addi	r3,r3,-1
  807a64:	80c00115 	stw	r3,4(r16)
  807a68:	00c0130e 	bge	zero,r3,807ab8 <__svfscanf_r+0xab4>
  807a6c:	31800044 	addi	r6,r6,1
  807a70:	81800015 	stw	r6,0(r16)
  807a74:	d880a317 	ldw	r2,652(sp)
  807a78:	10bfffc4 	addi	r2,r2,-1
  807a7c:	d880a315 	stw	r2,652(sp)
  807a80:	103ede1e 	bne	r2,zero,8075fc <__svfscanf_r+0x5f8>
  807a84:	003f9b06 	br	8078f4 <__svfscanf_r+0x8f0>
  807a88:	9082000c 	andi	r2,r18,2048
  807a8c:	103ff126 	beq	r2,zero,807a54 <__svfscanf_r+0xa50>
  807a90:	d8c0a117 	ldw	r3,644(sp)
  807a94:	1800031e 	bne	r3,zero,807aa4 <__svfscanf_r+0xaa0>
  807a98:	01000204 	movi	r4,8
  807a9c:	94808014 	ori	r18,r18,512
  807aa0:	d900a115 	stw	r4,644(sp)
  807aa4:	9081000c 	andi	r2,r18,1024
  807aa8:	10000826 	beq	r2,zero,807acc <__svfscanf_r+0xac8>
  807aac:	00be9fc4 	movi	r2,-1409
  807ab0:	90a4703a 	and	r18,r18,r2
  807ab4:	003fe706 	br	807a54 <__svfscanf_r+0xa50>
  807ab8:	b009883a 	mov	r4,r22
  807abc:	800b883a 	mov	r5,r16
  807ac0:	08047bc0 	call	8047bc <__srefill_r>
  807ac4:	103feb26 	beq	r2,zero,807a74 <__svfscanf_r+0xa70>
  807ac8:	003f8a06 	br	8078f4 <__svfscanf_r+0x8f0>
  807acc:	98000426 	beq	r19,zero,807ae0 <__svfscanf_r+0xadc>
  807ad0:	d880a317 	ldw	r2,652(sp)
  807ad4:	9cffffc4 	addi	r19,r19,-1
  807ad8:	10800044 	addi	r2,r2,1
  807adc:	d880a315 	stw	r2,652(sp)
  807ae0:	00bf1fc4 	movi	r2,-897
  807ae4:	90a4703a 	and	r18,r18,r2
  807ae8:	bdc00044 	addi	r23,r23,1
  807aec:	003fdb06 	br	807a5c <__svfscanf_r+0xa58>
  807af0:	d900a317 	ldw	r4,652(sp)
  807af4:	ad41e014 	ori	r21,r21,1920
  807af8:	2000791e 	bne	r4,zero,807ce0 <__svfscanf_r+0xcdc>
  807afc:	d8c04404 	addi	r3,sp,272
  807b00:	d8c0a515 	stw	r3,660(sp)
  807b04:	182f883a 	mov	r23,r3
  807b08:	d8009c15 	stw	zero,624(sp)
  807b0c:	d8009d15 	stw	zero,628(sp)
  807b10:	d8009f15 	stw	zero,636(sp)
  807b14:	d8009e15 	stw	zero,632(sp)
  807b18:	0039883a 	mov	fp,zero
  807b1c:	e1003fcc 	andi	r4,fp,255
  807b20:	2100201c 	xori	r4,r4,128
  807b24:	213fe004 	addi	r4,r4,-128
  807b28:	20ffffc4 	addi	r3,r4,-1
  807b2c:	00800184 	movi	r2,6
  807b30:	10c01736 	bltu	r2,r3,807b90 <__svfscanf_r+0xb8c>
  807b34:	00c00084 	movi	r3,2
  807b38:	19026d0e 	bge	r3,r4,8084f0 <__svfscanf_r+0x14ec>
  807b3c:	008000c4 	movi	r2,3
  807b40:	1100130e 	bge	r2,r4,807b90 <__svfscanf_r+0xb8c>
  807b44:	e4ffffc4 	addi	r19,fp,-1
  807b48:	b825883a 	mov	r18,r23
  807b4c:	94bfffc4 	addi	r18,r18,-1
  807b50:	91400007 	ldb	r5,0(r18)
  807b54:	b009883a 	mov	r4,r22
  807b58:	800d883a 	mov	r6,r16
  807b5c:	0804f0c0 	call	804f0c <_ungetc_r>
  807b60:	9cffffc4 	addi	r19,r19,-1
  807b64:	98c03fcc 	andi	r3,r19,255
  807b68:	18c0201c 	xori	r3,r3,128
  807b6c:	18ffe004 	addi	r3,r3,-128
  807b70:	00800084 	movi	r2,2
  807b74:	18bff51e 	bne	r3,r2,807b4c <__svfscanf_r+0xb48>
  807b78:	e0bfff04 	addi	r2,fp,-4
  807b7c:	10803fcc 	andi	r2,r2,255
  807b80:	b887c83a 	sub	r3,r23,r2
  807b84:	8885c83a 	sub	r2,r17,r2
  807b88:	147fffc4 	addi	r17,r2,-1
  807b8c:	1dffffc4 	addi	r23,r3,-1
  807b90:	a880400c 	andi	r2,r21,256
  807b94:	10001226 	beq	r2,zero,807be0 <__svfscanf_r+0xbdc>
  807b98:	a881000c 	andi	r2,r21,1024
  807b9c:	10002b1e 	bne	r2,zero,807c4c <__svfscanf_r+0xc48>
  807ba0:	bdffffc4 	addi	r23,r23,-1
  807ba4:	b9400007 	ldb	r5,0(r23)
  807ba8:	00801944 	movi	r2,101
  807bac:	8c7fffc4 	addi	r17,r17,-1
  807bb0:	28800826 	beq	r5,r2,807bd4 <__svfscanf_r+0xbd0>
  807bb4:	00801144 	movi	r2,69
  807bb8:	28800626 	beq	r5,r2,807bd4 <__svfscanf_r+0xbd0>
  807bbc:	bdffffc4 	addi	r23,r23,-1
  807bc0:	b009883a 	mov	r4,r22
  807bc4:	800d883a 	mov	r6,r16
  807bc8:	0804f0c0 	call	804f0c <_ungetc_r>
  807bcc:	b9400007 	ldb	r5,0(r23)
  807bd0:	8c7fffc4 	addi	r17,r17,-1
  807bd4:	b009883a 	mov	r4,r22
  807bd8:	800d883a 	mov	r6,r16
  807bdc:	0804f0c0 	call	804f0c <_ungetc_r>
  807be0:	a880040c 	andi	r2,r21,16
  807be4:	103d1a1e 	bne	r2,zero,807050 <__svfscanf_r+0x4c>
  807be8:	a8c1800c 	andi	r3,r21,1536
  807bec:	00810004 	movi	r2,1024
  807bf0:	b8000005 	stb	zero,0(r23)
  807bf4:	18813326 	beq	r3,r2,8080c4 <__svfscanf_r+0x10c0>
  807bf8:	d8809d17 	ldw	r2,628(sp)
  807bfc:	1000251e 	bne	r2,zero,807c94 <__svfscanf_r+0xc90>
  807c00:	d940a517 	ldw	r5,660(sp)
  807c04:	b009883a 	mov	r4,r22
  807c08:	000d883a 	mov	r6,zero
  807c0c:	080c6580 	call	80c658 <_strtod_r>
  807c10:	a900004c 	andi	r4,r21,1
  807c14:	2009003a 	cmpeq	r4,r4,zero
  807c18:	1025883a 	mov	r18,r2
  807c1c:	1827883a 	mov	r19,r3
  807c20:	2000141e 	bne	r4,zero,807c74 <__svfscanf_r+0xc70>
  807c24:	d8c0a417 	ldw	r3,656(sp)
  807c28:	18800017 	ldw	r2,0(r3)
  807c2c:	1d400104 	addi	r21,r3,4
  807c30:	14c00115 	stw	r19,4(r2)
  807c34:	14800015 	stw	r18,0(r2)
  807c38:	d8c0a217 	ldw	r3,648(sp)
  807c3c:	dd40a415 	stw	r21,656(sp)
  807c40:	18c00044 	addi	r3,r3,1
  807c44:	d8c0a215 	stw	r3,648(sp)
  807c48:	003d0106 	br	807050 <__svfscanf_r+0x4c>
  807c4c:	d900a517 	ldw	r4,660(sp)
  807c50:	25fd212e 	bgeu	r4,r23,8070d8 <__svfscanf_r+0xd4>
  807c54:	bdffffc4 	addi	r23,r23,-1
  807c58:	b9400007 	ldb	r5,0(r23)
  807c5c:	b009883a 	mov	r4,r22
  807c60:	800d883a 	mov	r6,r16
  807c64:	0804f0c0 	call	804f0c <_ungetc_r>
  807c68:	d880a517 	ldw	r2,660(sp)
  807c6c:	15fff936 	bltu	r2,r23,807c54 <__svfscanf_r+0xc50>
  807c70:	003d1906 	br	8070d8 <__svfscanf_r+0xd4>
  807c74:	a880008c 	andi	r2,r21,2
  807c78:	10011926 	beq	r2,zero,8080e0 <__svfscanf_r+0x10dc>
  807c7c:	d900a417 	ldw	r4,656(sp)
  807c80:	20800017 	ldw	r2,0(r4)
  807c84:	25400104 	addi	r21,r4,4
  807c88:	10c00115 	stw	r3,4(r2)
  807c8c:	14800015 	stw	r18,0(r2)
  807c90:	003fe906 	br	807c38 <__svfscanf_r+0xc34>
  807c94:	d8c09c17 	ldw	r3,624(sp)
  807c98:	b009883a 	mov	r4,r22
  807c9c:	000d883a 	mov	r6,zero
  807ca0:	19400044 	addi	r5,r3,1
  807ca4:	01c00284 	movi	r7,10
  807ca8:	080dd640 	call	80dd64 <_strtol_r>
  807cac:	d9009d17 	ldw	r4,628(sp)
  807cb0:	110dc83a 	sub	r6,r2,r4
  807cb4:	d8c0a517 	ldw	r3,660(sp)
  807cb8:	d9009c17 	ldw	r4,624(sp)
  807cbc:	188054c4 	addi	r2,r3,339
  807cc0:	20800236 	bltu	r4,r2,807ccc <__svfscanf_r+0xcc8>
  807cc4:	18805484 	addi	r2,r3,338
  807cc8:	d8809c15 	stw	r2,624(sp)
  807ccc:	d9009c17 	ldw	r4,624(sp)
  807cd0:	01402074 	movhi	r5,129
  807cd4:	2953bd04 	addi	r5,r5,20212
  807cd8:	080c4800 	call	80c480 <sprintf>
  807cdc:	003fc806 	br	807c00 <__svfscanf_r+0xbfc>
  807ce0:	0027883a 	mov	r19,zero
  807ce4:	d8c04404 	addi	r3,sp,272
  807ce8:	d8c0a515 	stw	r3,660(sp)
  807cec:	182f883a 	mov	r23,r3
  807cf0:	d8009f15 	stw	zero,636(sp)
  807cf4:	d8009e15 	stw	zero,632(sp)
  807cf8:	d8009d15 	stw	zero,628(sp)
  807cfc:	d8009c15 	stw	zero,624(sp)
  807d00:	0039883a 	mov	fp,zero
  807d04:	0025883a 	mov	r18,zero
  807d08:	80800017 	ldw	r2,0(r16)
  807d0c:	11400003 	ldbu	r5,0(r2)
  807d10:	00801384 	movi	r2,78
  807d14:	28fff544 	addi	r3,r5,-43
  807d18:	18c03fcc 	andi	r3,r3,255
  807d1c:	10c08336 	bltu	r2,r3,807f2c <__svfscanf_r+0xf28>
  807d20:	18c5883a 	add	r2,r3,r3
  807d24:	1085883a 	add	r2,r2,r2
  807d28:	00c02034 	movhi	r3,128
  807d2c:	18df4f04 	addi	r3,r3,32060
  807d30:	10c5883a 	add	r2,r2,r3
  807d34:	11000017 	ldw	r4,0(r2)
  807d38:	2000683a 	jmp	r4
  807d3c:	00807ee4 	muli	r2,zero,507
  807d40:	00807f2c 	andhi	r2,zero,508
  807d44:	00807ee4 	muli	r2,zero,507
  807d48:	00807f70 	cmpltui	r2,zero,509
  807d4c:	00807f2c 	andhi	r2,zero,508
  807d50:	00807fdc 	xori	r2,zero,511
  807d54:	00808010 	cmplti	r2,zero,512
  807d58:	00808010 	cmplti	r2,zero,512
  807d5c:	00808010 	cmplti	r2,zero,512
  807d60:	00808010 	cmplti	r2,zero,512
  807d64:	00808010 	cmplti	r2,zero,512
  807d68:	00808010 	cmplti	r2,zero,512
  807d6c:	00808010 	cmplti	r2,zero,512
  807d70:	00808010 	cmplti	r2,zero,512
  807d74:	00808010 	cmplti	r2,zero,512
  807d78:	00807f2c 	andhi	r2,zero,508
  807d7c:	00807f2c 	andhi	r2,zero,508
  807d80:	00807f2c 	andhi	r2,zero,508
  807d84:	00807f2c 	andhi	r2,zero,508
  807d88:	00807f2c 	andhi	r2,zero,508
  807d8c:	00807f2c 	andhi	r2,zero,508
  807d90:	00807f2c 	andhi	r2,zero,508
  807d94:	00808030 	cmpltui	r2,zero,512
  807d98:	00807f2c 	andhi	r2,zero,508
  807d9c:	00807f2c 	andhi	r2,zero,508
  807da0:	00807f2c 	andhi	r2,zero,508
  807da4:	00808040 	call	80804 <__alt_mem_sdram-0x77f7fc>
  807da8:	0080808c 	andi	r2,zero,514
  807dac:	00807f2c 	andhi	r2,zero,508
  807db0:	00807f2c 	andhi	r2,zero,508
  807db4:	00808164 	muli	r2,zero,517
  807db8:	00807f2c 	andhi	r2,zero,508
  807dbc:	00807f2c 	andhi	r2,zero,508
  807dc0:	00807f2c 	andhi	r2,zero,508
  807dc4:	00807f2c 	andhi	r2,zero,508
  807dc8:	00808110 	cmplti	r2,zero,516
  807dcc:	00807f2c 	andhi	r2,zero,508
  807dd0:	00807f2c 	andhi	r2,zero,508
  807dd4:	00807f2c 	andhi	r2,zero,508
  807dd8:	00807f2c 	andhi	r2,zero,508
  807ddc:	00807f2c 	andhi	r2,zero,508
  807de0:	008081a4 	muli	r2,zero,518
  807de4:	00807f2c 	andhi	r2,zero,508
  807de8:	00807f2c 	andhi	r2,zero,508
  807dec:	00807f2c 	andhi	r2,zero,508
  807df0:	00807f2c 	andhi	r2,zero,508
  807df4:	008080a8 	cmpgeui	r2,zero,514
  807df8:	00807f2c 	andhi	r2,zero,508
  807dfc:	00807f2c 	andhi	r2,zero,508
  807e00:	00807f2c 	andhi	r2,zero,508
  807e04:	00807f2c 	andhi	r2,zero,508
  807e08:	00807f2c 	andhi	r2,zero,508
  807e0c:	00807f2c 	andhi	r2,zero,508
  807e10:	00807f2c 	andhi	r2,zero,508
  807e14:	00808030 	cmpltui	r2,zero,512
  807e18:	00807f2c 	andhi	r2,zero,508
  807e1c:	00807f2c 	andhi	r2,zero,508
  807e20:	00807f2c 	andhi	r2,zero,508
  807e24:	00808040 	call	80804 <__alt_mem_sdram-0x77f7fc>
  807e28:	0080808c 	andi	r2,zero,514
  807e2c:	00807f2c 	andhi	r2,zero,508
  807e30:	00807f2c 	andhi	r2,zero,508
  807e34:	00808164 	muli	r2,zero,517
  807e38:	00807f2c 	andhi	r2,zero,508
  807e3c:	00807f2c 	andhi	r2,zero,508
  807e40:	00807f2c 	andhi	r2,zero,508
  807e44:	00807f2c 	andhi	r2,zero,508
  807e48:	00808110 	cmplti	r2,zero,516
  807e4c:	00807f2c 	andhi	r2,zero,508
  807e50:	00807f2c 	andhi	r2,zero,508
  807e54:	00807f2c 	andhi	r2,zero,508
  807e58:	00807f2c 	andhi	r2,zero,508
  807e5c:	00807f2c 	andhi	r2,zero,508
  807e60:	008081a4 	muli	r2,zero,518
  807e64:	00807f2c 	andhi	r2,zero,508
  807e68:	00807f2c 	andhi	r2,zero,508
  807e6c:	00807f2c 	andhi	r2,zero,508
  807e70:	00807f2c 	andhi	r2,zero,508
  807e74:	008080a8 	cmpgeui	r2,zero,514
  807e78:	a880040c 	andi	r2,r21,16
  807e7c:	10004826 	beq	r2,zero,807fa0 <__svfscanf_r+0xf9c>
  807e80:	0027883a 	mov	r19,zero
  807e84:	00000b06 	br	807eb4 <__svfscanf_r+0xeb0>
  807e88:	80800017 	ldw	r2,0(r16)
  807e8c:	b009883a 	mov	r4,r22
  807e90:	800b883a 	mov	r5,r16
  807e94:	148d883a 	add	r6,r2,r18
  807e98:	81800015 	stw	r6,0(r16)
  807e9c:	9ca7883a 	add	r19,r19,r18
  807ea0:	08047bc0 	call	8047bc <__srefill_r>
  807ea4:	103dc61e 	bne	r2,zero,8075c0 <__svfscanf_r+0x5bc>
  807ea8:	d880a317 	ldw	r2,652(sp)
  807eac:	1485c83a 	sub	r2,r2,r18
  807eb0:	d880a315 	stw	r2,652(sp)
  807eb4:	84800117 	ldw	r18,4(r16)
  807eb8:	d900a317 	ldw	r4,652(sp)
  807ebc:	913ff216 	blt	r18,r4,807e88 <__svfscanf_r+0xe84>
  807ec0:	d900a317 	ldw	r4,652(sp)
  807ec4:	80800017 	ldw	r2,0(r16)
  807ec8:	9927883a 	add	r19,r19,r4
  807ecc:	9107c83a 	sub	r3,r18,r4
  807ed0:	110d883a 	add	r6,r2,r4
  807ed4:	8ce3883a 	add	r17,r17,r19
  807ed8:	80c00115 	stw	r3,4(r16)
  807edc:	81800015 	stw	r6,0(r16)
  807ee0:	003c5b06 	br	807050 <__svfscanf_r+0x4c>
  807ee4:	a880200c 	andi	r2,r21,128
  807ee8:	10001026 	beq	r2,zero,807f2c <__svfscanf_r+0xf28>
  807eec:	00bfdfc4 	movi	r2,-129
  807ef0:	a8aa703a 	and	r21,r21,r2
  807ef4:	b9400005 	stb	r5,0(r23)
  807ef8:	bdc00044 	addi	r23,r23,1
  807efc:	80c00117 	ldw	r3,4(r16)
  807f00:	8c400044 	addi	r17,r17,1
  807f04:	18bfffc4 	addi	r2,r3,-1
  807f08:	80800115 	stw	r2,4(r16)
  807f0c:	00801f0e 	bge	zero,r2,807f8c <__svfscanf_r+0xf88>
  807f10:	80800017 	ldw	r2,0(r16)
  807f14:	10800044 	addi	r2,r2,1
  807f18:	80800015 	stw	r2,0(r16)
  807f1c:	d880a317 	ldw	r2,652(sp)
  807f20:	10bfffc4 	addi	r2,r2,-1
  807f24:	d880a315 	stw	r2,652(sp)
  807f28:	103f771e 	bne	r2,zero,807d08 <__svfscanf_r+0xd04>
  807f2c:	d8c09e17 	ldw	r3,632(sp)
  807f30:	18000226 	beq	r3,zero,807f3c <__svfscanf_r+0xf38>
  807f34:	00bfbfc4 	movi	r2,-257
  807f38:	a8aa703a 	and	r21,r21,r2
  807f3c:	90ffffc4 	addi	r3,r18,-1
  807f40:	00800044 	movi	r2,1
  807f44:	10fef536 	bltu	r2,r3,807b1c <__svfscanf_r+0xb18>
  807f48:	d900a517 	ldw	r4,660(sp)
  807f4c:	25fc622e 	bgeu	r4,r23,8070d8 <__svfscanf_r+0xd4>
  807f50:	bdffffc4 	addi	r23,r23,-1
  807f54:	b9400007 	ldb	r5,0(r23)
  807f58:	b009883a 	mov	r4,r22
  807f5c:	800d883a 	mov	r6,r16
  807f60:	0804f0c0 	call	804f0c <_ungetc_r>
  807f64:	d880a517 	ldw	r2,660(sp)
  807f68:	15fff936 	bltu	r2,r23,807f50 <__svfscanf_r+0xf4c>
  807f6c:	003c5a06 	br	8070d8 <__svfscanf_r+0xd4>
  807f70:	a880800c 	andi	r2,r21,512
  807f74:	103fed26 	beq	r2,zero,807f2c <__svfscanf_r+0xf28>
  807f78:	d9009e17 	ldw	r4,632(sp)
  807f7c:	00bf5fc4 	movi	r2,-641
  807f80:	a8aa703a 	and	r21,r21,r2
  807f84:	d9009f15 	stw	r4,636(sp)
  807f88:	003fda06 	br	807ef4 <__svfscanf_r+0xef0>
  807f8c:	b009883a 	mov	r4,r22
  807f90:	800b883a 	mov	r5,r16
  807f94:	08047bc0 	call	8047bc <__srefill_r>
  807f98:	103fe026 	beq	r2,zero,807f1c <__svfscanf_r+0xf18>
  807f9c:	003fe306 	br	807f2c <__svfscanf_r+0xf28>
  807fa0:	d880a417 	ldw	r2,656(sp)
  807fa4:	d980a317 	ldw	r6,652(sp)
  807fa8:	01400044 	movi	r5,1
  807fac:	11000017 	ldw	r4,0(r2)
  807fb0:	800f883a 	mov	r7,r16
  807fb4:	0802ed40 	call	802ed4 <fread>
  807fb8:	103c6726 	beq	r2,zero,807158 <__svfscanf_r+0x154>
  807fbc:	d8c0a417 	ldw	r3,656(sp)
  807fc0:	d900a217 	ldw	r4,648(sp)
  807fc4:	88a3883a 	add	r17,r17,r2
  807fc8:	18c00104 	addi	r3,r3,4
  807fcc:	21000044 	addi	r4,r4,1
  807fd0:	d8c0a415 	stw	r3,656(sp)
  807fd4:	d900a215 	stw	r4,648(sp)
  807fd8:	003c1d06 	br	807050 <__svfscanf_r+0x4c>
  807fdc:	a880400c 	andi	r2,r21,256
  807fe0:	10000b26 	beq	r2,zero,808010 <__svfscanf_r+0x100c>
  807fe4:	00bfdfc4 	movi	r2,-129
  807fe8:	a8aa703a 	and	r21,r21,r2
  807fec:	d8809e17 	ldw	r2,632(sp)
  807ff0:	10800044 	addi	r2,r2,1
  807ff4:	d8809e15 	stw	r2,632(sp)
  807ff8:	983fc026 	beq	r19,zero,807efc <__svfscanf_r+0xef8>
  807ffc:	d8c0a317 	ldw	r3,652(sp)
  808000:	9cffffc4 	addi	r19,r19,-1
  808004:	18c00044 	addi	r3,r3,1
  808008:	d8c0a315 	stw	r3,652(sp)
  80800c:	003fbb06 	br	807efc <__svfscanf_r+0xef8>
  808010:	e0803fcc 	andi	r2,fp,255
  808014:	1080201c 	xori	r2,r2,128
  808018:	10bfe004 	addi	r2,r2,-128
  80801c:	9085883a 	add	r2,r18,r2
  808020:	103fc21e 	bne	r2,zero,807f2c <__svfscanf_r+0xf28>
  808024:	00bf9fc4 	movi	r2,-385
  808028:	a8aa703a 	and	r21,r21,r2
  80802c:	003fb106 	br	807ef4 <__svfscanf_r+0xef0>
  808030:	00800044 	movi	r2,1
  808034:	90bfbd1e 	bne	r18,r2,807f2c <__svfscanf_r+0xf28>
  808038:	04800084 	movi	r18,2
  80803c:	003fad06 	br	807ef4 <__svfscanf_r+0xef0>
  808040:	a8c1400c 	andi	r3,r21,1280
  808044:	00810004 	movi	r2,1024
  808048:	18800426 	beq	r3,r2,80805c <__svfscanf_r+0x1058>
  80804c:	a884703a 	and	r2,r21,r2
  808050:	103fb626 	beq	r2,zero,807f2c <__svfscanf_r+0xf28>
  808054:	d8809e17 	ldw	r2,632(sp)
  808058:	103fb826 	beq	r2,zero,807f3c <__svfscanf_r+0xf38>
  80805c:	a880800c 	andi	r2,r21,512
  808060:	1000051e 	bne	r2,zero,808078 <__svfscanf_r+0x1074>
  808064:	d8c09e17 	ldw	r3,632(sp)
  808068:	d9009f17 	ldw	r4,636(sp)
  80806c:	ddc09c15 	stw	r23,624(sp)
  808070:	1907c83a 	sub	r3,r3,r4
  808074:	d8c09d15 	stw	r3,628(sp)
  808078:	00be7fc4 	movi	r2,-1537
  80807c:	a884703a 	and	r2,r21,r2
  808080:	15406014 	ori	r21,r2,384
  808084:	d8009e15 	stw	zero,632(sp)
  808088:	003f9a06 	br	807ef4 <__svfscanf_r+0xef0>
  80808c:	e0c03fcc 	andi	r3,fp,255
  808090:	18c0201c 	xori	r3,r3,128
  808094:	18ffe004 	addi	r3,r3,-128
  808098:	00800084 	movi	r2,2
  80809c:	18bfa31e 	bne	r3,r2,807f2c <__svfscanf_r+0xf28>
  8080a0:	070000c4 	movi	fp,3
  8080a4:	003f9306 	br	807ef4 <__svfscanf_r+0xef0>
  8080a8:	e0c03fcc 	andi	r3,fp,255
  8080ac:	18c0201c 	xori	r3,r3,128
  8080b0:	18ffe004 	addi	r3,r3,-128
  8080b4:	008001c4 	movi	r2,7
  8080b8:	18bf9c1e 	bne	r3,r2,807f2c <__svfscanf_r+0xf28>
  8080bc:	07000204 	movi	fp,8
  8080c0:	003f8c06 	br	807ef4 <__svfscanf_r+0xef0>
  8080c4:	d8c09e17 	ldw	r3,632(sp)
  8080c8:	d9009f17 	ldw	r4,636(sp)
  8080cc:	1905c83a 	sub	r2,r3,r4
  8080d0:	103ecb26 	beq	r2,zero,807c00 <__svfscanf_r+0xbfc>
  8080d4:	008dc83a 	sub	r6,zero,r2
  8080d8:	ddc09c15 	stw	r23,624(sp)
  8080dc:	003ef506 	br	807cb4 <__svfscanf_r+0xcb0>
  8080e0:	d880a417 	ldw	r2,656(sp)
  8080e4:	9009883a 	mov	r4,r18
  8080e8:	180b883a 	mov	r5,r3
  8080ec:	15c00017 	ldw	r23,0(r2)
  8080f0:	15400104 	addi	r21,r2,4
  8080f4:	080c3880 	call	80c388 <__isnand>
  8080f8:	1000311e 	bne	r2,zero,8081c0 <__svfscanf_r+0x11bc>
  8080fc:	980b883a 	mov	r5,r19
  808100:	9009883a 	mov	r4,r18
  808104:	08111d40 	call	8111d4 <__truncdfsf2>
  808108:	b8800015 	stw	r2,0(r23)
  80810c:	003eca06 	br	807c38 <__svfscanf_r+0xc34>
  808110:	9000101e 	bne	r18,zero,808154 <__svfscanf_r+0x1150>
  808114:	a8c1c00c 	andi	r3,r21,1792
  808118:	0081c004 	movi	r2,1792
  80811c:	18800926 	beq	r3,r2,808144 <__svfscanf_r+0x1140>
  808120:	e0c03fcc 	andi	r3,fp,255
  808124:	18c0201c 	xori	r3,r3,128
  808128:	18ffe004 	addi	r3,r3,-128
  80812c:	00800044 	movi	r2,1
  808130:	18800226 	beq	r3,r2,80813c <__svfscanf_r+0x1138>
  808134:	00800104 	movi	r2,4
  808138:	18bf7c1e 	bne	r3,r2,807f2c <__svfscanf_r+0xf28>
  80813c:	e7000044 	addi	fp,fp,1
  808140:	003f6c06 	br	807ef4 <__svfscanf_r+0xef0>
  808144:	00be1fc4 	movi	r2,-1921
  808148:	a8aa703a 	and	r21,r21,r2
  80814c:	04800044 	movi	r18,1
  808150:	003f6806 	br	807ef4 <__svfscanf_r+0xef0>
  808154:	00800084 	movi	r2,2
  808158:	90bff11e 	bne	r18,r2,808120 <__svfscanf_r+0x111c>
  80815c:	048000c4 	movi	r18,3
  808160:	003f6406 	br	807ef4 <__svfscanf_r+0xef0>
  808164:	e0c03fcc 	andi	r3,fp,255
  808168:	18c0201c 	xori	r3,r3,128
  80816c:	18ffe004 	addi	r3,r3,-128
  808170:	1800071e 	bne	r3,zero,808190 <__svfscanf_r+0x118c>
  808174:	a8c1c00c 	andi	r3,r21,1792
  808178:	0081c004 	movi	r2,1792
  80817c:	18bf6b1e 	bne	r3,r2,807f2c <__svfscanf_r+0xf28>
  808180:	00be1fc4 	movi	r2,-1921
  808184:	a8aa703a 	and	r21,r21,r2
  808188:	07000044 	movi	fp,1
  80818c:	003f5906 	br	807ef4 <__svfscanf_r+0xef0>
  808190:	008000c4 	movi	r2,3
  808194:	18bfe926 	beq	r3,r2,80813c <__svfscanf_r+0x1138>
  808198:	00800144 	movi	r2,5
  80819c:	18bfe726 	beq	r3,r2,80813c <__svfscanf_r+0x1138>
  8081a0:	003f6206 	br	807f2c <__svfscanf_r+0xf28>
  8081a4:	e0c03fcc 	andi	r3,fp,255
  8081a8:	18c0201c 	xori	r3,r3,128
  8081ac:	18ffe004 	addi	r3,r3,-128
  8081b0:	00800184 	movi	r2,6
  8081b4:	18bf5d1e 	bne	r3,r2,807f2c <__svfscanf_r+0xf28>
  8081b8:	070001c4 	movi	fp,7
  8081bc:	003f4d06 	br	807ef4 <__svfscanf_r+0xef0>
  8081c0:	0009883a 	mov	r4,zero
  8081c4:	080c4780 	call	80c478 <nanf>
  8081c8:	b8800015 	stw	r2,0(r23)
  8081cc:	003e9a06 	br	807c38 <__svfscanf_r+0xc34>
  8081d0:	a00b883a 	mov	r5,r20
  8081d4:	d9000404 	addi	r4,sp,16
  8081d8:	080c3b80 	call	80c3b8 <__sccl>
  8081dc:	1029883a 	mov	r20,r2
  8081e0:	ad401014 	ori	r21,r21,64
  8081e4:	04800044 	movi	r18,1
  8081e8:	003c7506 	br	8073c0 <__svfscanf_r+0x3bc>
  8081ec:	01000204 	movi	r4,8
  8081f0:	00802074 	movhi	r2,129
  8081f4:	10b8bc04 	addi	r2,r2,-7440
  8081f8:	ad400054 	ori	r21,r21,1
  8081fc:	048000c4 	movi	r18,3
  808200:	d900a115 	stw	r4,644(sp)
  808204:	d880a015 	stw	r2,640(sp)
  808208:	003c6d06 	br	8073c0 <__svfscanf_r+0x3bc>
  80820c:	ad400094 	ori	r21,r21,2
  808210:	003bd806 	br	807174 <__svfscanf_r+0x170>
  808214:	d900a317 	ldw	r4,652(sp)
  808218:	01400284 	movi	r5,10
  80821c:	0801c5c0 	call	801c5c <__mulsi3>
  808220:	15c5883a 	add	r2,r2,r23
  808224:	10bff404 	addi	r2,r2,-48
  808228:	d880a315 	stw	r2,652(sp)
  80822c:	003bd106 	br	807174 <__svfscanf_r+0x170>
  808230:	ad400414 	ori	r21,r21,16
  808234:	003bcf06 	br	807174 <__svfscanf_r+0x170>
  808238:	00800404 	movi	r2,16
  80823c:	00c02074 	movhi	r3,129
  808240:	18f8bc04 	addi	r3,r3,-7440
  808244:	ad408014 	ori	r21,r21,512
  808248:	048000c4 	movi	r18,3
  80824c:	d880a115 	stw	r2,644(sp)
  808250:	d8c0a015 	stw	r3,640(sp)
  808254:	003c5a06 	br	8073c0 <__svfscanf_r+0x3bc>
  808258:	00c00284 	movi	r3,10
  80825c:	01002074 	movhi	r4,129
  808260:	2138bc04 	addi	r4,r4,-7440
  808264:	048000c4 	movi	r18,3
  808268:	d8c0a115 	stw	r3,644(sp)
  80826c:	d900a015 	stw	r4,640(sp)
  808270:	003c5306 	br	8073c0 <__svfscanf_r+0x3bc>
  808274:	00c02074 	movhi	r3,129
  808278:	18f75904 	addi	r3,r3,-8860
  80827c:	048000c4 	movi	r18,3
  808280:	d8c0a015 	stw	r3,640(sp)
  808284:	d800a115 	stw	zero,644(sp)
  808288:	003c4d06 	br	8073c0 <__svfscanf_r+0x3bc>
  80828c:	d8c0a117 	ldw	r3,644(sp)
  808290:	18c5883a 	add	r2,r3,r3
  808294:	00c02074 	movhi	r3,129
  808298:	18d3be84 	addi	r3,r3,20218
  80829c:	10c5883a 	add	r2,r2,r3
  8082a0:	1080000f 	ldh	r2,0(r2)
  8082a4:	00fd1fc4 	movi	r3,-2945
  8082a8:	90e4703a 	and	r18,r18,r3
  8082ac:	d880a115 	stw	r2,644(sp)
  8082b0:	003de806 	br	807a54 <__svfscanf_r+0xa50>
  8082b4:	d900a117 	ldw	r4,644(sp)
  8082b8:	00c02074 	movhi	r3,129
  8082bc:	18d3be84 	addi	r3,r3,20218
  8082c0:	2105883a 	add	r2,r4,r4
  8082c4:	10c5883a 	add	r2,r2,r3
  8082c8:	1080000f 	ldh	r2,0(r2)
  8082cc:	00c00204 	movi	r3,8
  8082d0:	d880a115 	stw	r2,644(sp)
  8082d4:	18bd870e 	bge	r3,r2,8078f4 <__svfscanf_r+0x8f0>
  8082d8:	00bd1fc4 	movi	r2,-2945
  8082dc:	90a4703a 	and	r18,r18,r2
  8082e0:	003ddc06 	br	807a54 <__svfscanf_r+0xa50>
  8082e4:	d8c0a117 	ldw	r3,644(sp)
  8082e8:	00800284 	movi	r2,10
  8082ec:	10fffa16 	blt	r2,r3,8082d8 <__svfscanf_r+0x12d4>
  8082f0:	003d8006 	br	8078f4 <__svfscanf_r+0x8f0>
  8082f4:	90c1800c 	andi	r3,r18,1536
  8082f8:	00808004 	movi	r2,512
  8082fc:	18bd7d1e 	bne	r3,r2,8078f4 <__svfscanf_r+0x8f0>
  808300:	00bf7fc4 	movi	r2,-513
  808304:	9084703a 	and	r2,r18,r2
  808308:	01000404 	movi	r4,16
  80830c:	14814014 	ori	r18,r2,1280
  808310:	d900a115 	stw	r4,644(sp)
  808314:	003dcf06 	br	807a54 <__svfscanf_r+0xa50>
  808318:	04800104 	movi	r18,4
  80831c:	003c2806 	br	8073c0 <__svfscanf_r+0x3bc>
  808320:	ad401014 	ori	r21,r21,64
  808324:	0025883a 	mov	r18,zero
  808328:	003c2506 	br	8073c0 <__svfscanf_r+0x3bc>
  80832c:	ad400114 	ori	r21,r21,4
  808330:	003b9006 	br	807174 <__svfscanf_r+0x170>
  808334:	0027883a 	mov	r19,zero
  808338:	003cac06 	br	8075ec <__svfscanf_r+0x5e8>
  80833c:	903d5226 	beq	r18,zero,807888 <__svfscanf_r+0x884>
  808340:	94bfffc4 	addi	r18,r18,-1
  808344:	d8c04404 	addi	r3,sp,272
  808348:	1c85883a 	add	r2,r3,r18
  80834c:	11400003 	ldbu	r5,0(r2)
  808350:	b009883a 	mov	r4,r22
  808354:	800d883a 	mov	r6,r16
  808358:	0804f0c0 	call	804f0c <_ungetc_r>
  80835c:	003ff706 	br	80833c <__svfscanf_r+0x1338>
  808360:	00bfff84 	movi	r2,-2
  808364:	18bd361e 	bne	r3,r2,807840 <__svfscanf_r+0x83c>
  808368:	003d4006 	br	80786c <__svfscanf_r+0x868>
  80836c:	d900a417 	ldw	r4,656(sp)
  808370:	25400017 	ldw	r21,0(r4)
  808374:	21000104 	addi	r4,r4,4
  808378:	d900a415 	stw	r4,656(sp)
  80837c:	003d0606 	br	807798 <__svfscanf_r+0x794>
  808380:	983b5526 	beq	r19,zero,8070d8 <__svfscanf_r+0xd4>
  808384:	8ce3883a 	add	r17,r17,r19
  808388:	003b3106 	br	807050 <__svfscanf_r+0x4c>
  80838c:	00bfff84 	movi	r2,-2
  808390:	18bc621e 	bne	r3,r2,80751c <__svfscanf_r+0x518>
  808394:	003c6906 	br	80753c <__svfscanf_r+0x538>
  808398:	b009883a 	mov	r4,r22
  80839c:	800b883a 	mov	r5,r16
  8083a0:	08047bc0 	call	8047bc <__srefill_r>
  8083a4:	103c6726 	beq	r2,zero,807544 <__svfscanf_r+0x540>
  8083a8:	903b6b1e 	bne	r18,zero,807158 <__svfscanf_r+0x154>
  8083ac:	a83b281e 	bne	r21,zero,807050 <__svfscanf_r+0x4c>
  8083b0:	d8c0a217 	ldw	r3,648(sp)
  8083b4:	18c00044 	addi	r3,r3,1
  8083b8:	d8c0a215 	stw	r3,648(sp)
  8083bc:	003b2406 	br	807050 <__svfscanf_r+0x4c>
  8083c0:	8080030b 	ldhu	r2,12(r16)
  8083c4:	1080100c 	andi	r2,r2,64
  8083c8:	103b4326 	beq	r2,zero,8070d8 <__svfscanf_r+0xd4>
  8083cc:	003b6406 	br	807160 <__svfscanf_r+0x15c>
  8083d0:	d8c0a417 	ldw	r3,656(sp)
  8083d4:	1cc00017 	ldw	r19,0(r3)
  8083d8:	18c00104 	addi	r3,r3,4
  8083dc:	d8c0a415 	stw	r3,656(sp)
  8083e0:	003c2906 	br	807488 <__svfscanf_r+0x484>
  8083e4:	00800204 	movi	r2,8
  8083e8:	00c02074 	movhi	r3,129
  8083ec:	18f8bc04 	addi	r3,r3,-7440
  8083f0:	048000c4 	movi	r18,3
  8083f4:	d880a115 	stw	r2,644(sp)
  8083f8:	d8c0a015 	stw	r3,640(sp)
  8083fc:	003bf006 	br	8073c0 <__svfscanf_r+0x3bc>
  808400:	04800084 	movi	r18,2
  808404:	003bee06 	br	8073c0 <__svfscanf_r+0x3bc>
  808408:	01000404 	movi	r4,16
  80840c:	00802074 	movhi	r2,129
  808410:	10b8bc04 	addi	r2,r2,-7440
  808414:	ad408814 	ori	r21,r21,544
  808418:	048000c4 	movi	r18,3
  80841c:	d900a115 	stw	r4,644(sp)
  808420:	d880a015 	stw	r2,640(sp)
  808424:	003be606 	br	8073c0 <__svfscanf_r+0x3bc>
  808428:	a880040c 	andi	r2,r21,16
  80842c:	103b081e 	bne	r2,zero,807050 <__svfscanf_r+0x4c>
  808430:	a880010c 	andi	r2,r21,4
  808434:	10004e26 	beq	r2,zero,808570 <__svfscanf_r+0x156c>
  808438:	d8c0a417 	ldw	r3,656(sp)
  80843c:	18800017 	ldw	r2,0(r3)
  808440:	18c00104 	addi	r3,r3,4
  808444:	d8c0a415 	stw	r3,656(sp)
  808448:	1440000d 	sth	r17,0(r2)
  80844c:	003b0006 	br	807050 <__svfscanf_r+0x4c>
  808450:	d880a417 	ldw	r2,656(sp)
  808454:	dd400404 	addi	r21,sp,16
  808458:	14800017 	ldw	r18,0(r2)
  80845c:	9027883a 	mov	r19,r18
  808460:	81000017 	ldw	r4,0(r16)
  808464:	20800003 	ldbu	r2,0(r4)
  808468:	a885883a 	add	r2,r21,r2
  80846c:	10c00007 	ldb	r3,0(r2)
  808470:	18001426 	beq	r3,zero,8084c4 <__svfscanf_r+0x14c0>
  808474:	d8c0a317 	ldw	r3,652(sp)
  808478:	80800117 	ldw	r2,4(r16)
  80847c:	21800044 	addi	r6,r4,1
  808480:	18ffffc4 	addi	r3,r3,-1
  808484:	d8c0a315 	stw	r3,652(sp)
  808488:	10ffffc4 	addi	r3,r2,-1
  80848c:	80c00115 	stw	r3,4(r16)
  808490:	20800003 	ldbu	r2,0(r4)
  808494:	90800005 	stb	r2,0(r18)
  808498:	d900a317 	ldw	r4,652(sp)
  80849c:	81800015 	stw	r6,0(r16)
  8084a0:	94800044 	addi	r18,r18,1
  8084a4:	20000726 	beq	r4,zero,8084c4 <__svfscanf_r+0x14c0>
  8084a8:	80800117 	ldw	r2,4(r16)
  8084ac:	00bfec16 	blt	zero,r2,808460 <__svfscanf_r+0x145c>
  8084b0:	b009883a 	mov	r4,r22
  8084b4:	800b883a 	mov	r5,r16
  8084b8:	08047bc0 	call	8047bc <__srefill_r>
  8084bc:	103fe826 	beq	r2,zero,808460 <__svfscanf_r+0x145c>
  8084c0:	9cbb2526 	beq	r19,r18,807158 <__svfscanf_r+0x154>
  8084c4:	94e7c83a 	sub	r19,r18,r19
  8084c8:	983b0326 	beq	r19,zero,8070d8 <__svfscanf_r+0xd4>
  8084cc:	90000005 	stb	zero,0(r18)
  8084d0:	d880a417 	ldw	r2,656(sp)
  8084d4:	d8c0a217 	ldw	r3,648(sp)
  8084d8:	8ce3883a 	add	r17,r17,r19
  8084dc:	10800104 	addi	r2,r2,4
  8084e0:	18c00044 	addi	r3,r3,1
  8084e4:	d880a415 	stw	r2,656(sp)
  8084e8:	d8c0a215 	stw	r3,648(sp)
  8084ec:	003ad806 	br	807050 <__svfscanf_r+0x4c>
  8084f0:	d900a517 	ldw	r4,660(sp)
  8084f4:	25faf82e 	bgeu	r4,r23,8070d8 <__svfscanf_r+0xd4>
  8084f8:	bdffffc4 	addi	r23,r23,-1
  8084fc:	b9400007 	ldb	r5,0(r23)
  808500:	b009883a 	mov	r4,r22
  808504:	800d883a 	mov	r6,r16
  808508:	0804f0c0 	call	804f0c <_ungetc_r>
  80850c:	d8c0a517 	ldw	r3,660(sp)
  808510:	1dfff936 	bltu	r3,r23,8084f8 <__svfscanf_r+0x14f4>
  808514:	003af006 	br	8070d8 <__svfscanf_r+0xd4>
  808518:	a880040c 	andi	r2,r21,16
  80851c:	10002d26 	beq	r2,zero,8085d4 <__svfscanf_r+0x15d0>
  808520:	0025883a 	mov	r18,zero
  808524:	00000906 	br	80854c <__svfscanf_r+0x1548>
  808528:	80c00117 	ldw	r3,4(r16)
  80852c:	d880a317 	ldw	r2,652(sp)
  808530:	29800044 	addi	r6,r5,1
  808534:	18ffffc4 	addi	r3,r3,-1
  808538:	94800044 	addi	r18,r18,1
  80853c:	81800015 	stw	r6,0(r16)
  808540:	80c00115 	stw	r3,4(r16)
  808544:	14800826 	beq	r2,r18,808568 <__svfscanf_r+0x1564>
  808548:	00c0120e 	bge	zero,r3,808594 <__svfscanf_r+0x1590>
  80854c:	81400017 	ldw	r5,0(r16)
  808550:	98800017 	ldw	r2,0(r19)
  808554:	28c00003 	ldbu	r3,0(r5)
  808558:	1887883a 	add	r3,r3,r2
  80855c:	19000003 	ldbu	r4,0(r3)
  808560:	2100020c 	andi	r4,r4,8
  808564:	203ff026 	beq	r4,zero,808528 <__svfscanf_r+0x1524>
  808568:	8ca3883a 	add	r17,r17,r18
  80856c:	003ab806 	br	807050 <__svfscanf_r+0x4c>
  808570:	a880004c 	andi	r2,r21,1
  808574:	1005003a 	cmpeq	r2,r2,zero
  808578:	10000b1e 	bne	r2,zero,8085a8 <__svfscanf_r+0x15a4>
  80857c:	d900a417 	ldw	r4,656(sp)
  808580:	20800017 	ldw	r2,0(r4)
  808584:	21000104 	addi	r4,r4,4
  808588:	d900a415 	stw	r4,656(sp)
  80858c:	14400015 	stw	r17,0(r2)
  808590:	003aaf06 	br	807050 <__svfscanf_r+0x4c>
  808594:	b009883a 	mov	r4,r22
  808598:	800b883a 	mov	r5,r16
  80859c:	08047bc0 	call	8047bc <__srefill_r>
  8085a0:	103fea26 	beq	r2,zero,80854c <__svfscanf_r+0x1548>
  8085a4:	003ff006 	br	808568 <__svfscanf_r+0x1564>
  8085a8:	a880008c 	andi	r2,r21,2
  8085ac:	10002c26 	beq	r2,zero,808660 <__svfscanf_r+0x165c>
  8085b0:	d8c0a417 	ldw	r3,656(sp)
  8085b4:	d900a417 	ldw	r4,656(sp)
  8085b8:	18800017 	ldw	r2,0(r3)
  8085bc:	8807d7fa 	srai	r3,r17,31
  8085c0:	21000104 	addi	r4,r4,4
  8085c4:	d900a415 	stw	r4,656(sp)
  8085c8:	14400015 	stw	r17,0(r2)
  8085cc:	10c00115 	stw	r3,4(r2)
  8085d0:	003a9f06 	br	807050 <__svfscanf_r+0x4c>
  8085d4:	d8c0a417 	ldw	r3,656(sp)
  8085d8:	1d400017 	ldw	r21,0(r3)
  8085dc:	a825883a 	mov	r18,r21
  8085e0:	00000e06 	br	80861c <__svfscanf_r+0x1618>
  8085e4:	80800117 	ldw	r2,4(r16)
  8085e8:	d900a317 	ldw	r4,652(sp)
  8085ec:	29800044 	addi	r6,r5,1
  8085f0:	10ffffc4 	addi	r3,r2,-1
  8085f4:	213fffc4 	addi	r4,r4,-1
  8085f8:	d900a315 	stw	r4,652(sp)
  8085fc:	80c00115 	stw	r3,4(r16)
  808600:	28800003 	ldbu	r2,0(r5)
  808604:	90800005 	stb	r2,0(r18)
  808608:	81800015 	stw	r6,0(r16)
  80860c:	94800044 	addi	r18,r18,1
  808610:	20000926 	beq	r4,zero,808638 <__svfscanf_r+0x1634>
  808614:	80800117 	ldw	r2,4(r16)
  808618:	0080170e 	bge	zero,r2,808678 <__svfscanf_r+0x1674>
  80861c:	81400017 	ldw	r5,0(r16)
  808620:	98800017 	ldw	r2,0(r19)
  808624:	28c00003 	ldbu	r3,0(r5)
  808628:	1887883a 	add	r3,r3,r2
  80862c:	19000003 	ldbu	r4,0(r3)
  808630:	2100020c 	andi	r4,r4,8
  808634:	203feb26 	beq	r4,zero,8085e4 <__svfscanf_r+0x15e0>
  808638:	9545c83a 	sub	r2,r18,r21
  80863c:	d8c0a217 	ldw	r3,648(sp)
  808640:	88a3883a 	add	r17,r17,r2
  808644:	d880a417 	ldw	r2,656(sp)
  808648:	18c00044 	addi	r3,r3,1
  80864c:	d8c0a215 	stw	r3,648(sp)
  808650:	10800104 	addi	r2,r2,4
  808654:	d880a415 	stw	r2,656(sp)
  808658:	90000005 	stb	zero,0(r18)
  80865c:	003a7c06 	br	807050 <__svfscanf_r+0x4c>
  808660:	d8c0a417 	ldw	r3,656(sp)
  808664:	18800017 	ldw	r2,0(r3)
  808668:	18c00104 	addi	r3,r3,4
  80866c:	d8c0a415 	stw	r3,656(sp)
  808670:	14400015 	stw	r17,0(r2)
  808674:	003a7606 	br	807050 <__svfscanf_r+0x4c>
  808678:	b009883a 	mov	r4,r22
  80867c:	800b883a 	mov	r5,r16
  808680:	08047bc0 	call	8047bc <__srefill_r>
  808684:	103fe526 	beq	r2,zero,80861c <__svfscanf_r+0x1618>
  808688:	003feb06 	br	808638 <__svfscanf_r+0x1634>

0080868c <__svfscanf>:
  80868c:	00802074 	movhi	r2,129
  808690:	109ae304 	addi	r2,r2,27532
  808694:	2013883a 	mov	r9,r4
  808698:	11000017 	ldw	r4,0(r2)
  80869c:	2805883a 	mov	r2,r5
  8086a0:	300f883a 	mov	r7,r6
  8086a4:	480b883a 	mov	r5,r9
  8086a8:	100d883a 	mov	r6,r2
  8086ac:	08070041 	jmpi	807004 <__svfscanf_r>

008086b0 <_vfscanf_r>:
  8086b0:	defffb04 	addi	sp,sp,-20
  8086b4:	dcc00315 	stw	r19,12(sp)
  8086b8:	dc800215 	stw	r18,8(sp)
  8086bc:	dc400115 	stw	r17,4(sp)
  8086c0:	dc000015 	stw	r16,0(sp)
  8086c4:	dfc00415 	stw	ra,16(sp)
  8086c8:	2021883a 	mov	r16,r4
  8086cc:	2823883a 	mov	r17,r5
  8086d0:	3025883a 	mov	r18,r6
  8086d4:	3827883a 	mov	r19,r7
  8086d8:	20000226 	beq	r4,zero,8086e4 <_vfscanf_r+0x34>
  8086dc:	20800e17 	ldw	r2,56(r4)
  8086e0:	10000b26 	beq	r2,zero,808710 <_vfscanf_r+0x60>
  8086e4:	8009883a 	mov	r4,r16
  8086e8:	880b883a 	mov	r5,r17
  8086ec:	900d883a 	mov	r6,r18
  8086f0:	980f883a 	mov	r7,r19
  8086f4:	dfc00417 	ldw	ra,16(sp)
  8086f8:	dcc00317 	ldw	r19,12(sp)
  8086fc:	dc800217 	ldw	r18,8(sp)
  808700:	dc400117 	ldw	r17,4(sp)
  808704:	dc000017 	ldw	r16,0(sp)
  808708:	dec00504 	addi	sp,sp,20
  80870c:	08070041 	jmpi	807004 <__svfscanf_r>
  808710:	08028cc0 	call	8028cc <__sinit>
  808714:	003ff306 	br	8086e4 <_vfscanf_r+0x34>

00808718 <vfscanf>:
  808718:	defffb04 	addi	sp,sp,-20
  80871c:	dcc00315 	stw	r19,12(sp)
  808720:	04c02074 	movhi	r19,129
  808724:	9cdae304 	addi	r19,r19,27532
  808728:	98c00017 	ldw	r3,0(r19)
  80872c:	dc800215 	stw	r18,8(sp)
  808730:	dc400115 	stw	r17,4(sp)
  808734:	dc000015 	stw	r16,0(sp)
  808738:	dfc00415 	stw	ra,16(sp)
  80873c:	2021883a 	mov	r16,r4
  808740:	2823883a 	mov	r17,r5
  808744:	3025883a 	mov	r18,r6
  808748:	18000326 	beq	r3,zero,808758 <vfscanf+0x40>
  80874c:	18800e17 	ldw	r2,56(r3)
  808750:	1809883a 	mov	r4,r3
  808754:	10000b26 	beq	r2,zero,808784 <vfscanf+0x6c>
  808758:	99000017 	ldw	r4,0(r19)
  80875c:	800b883a 	mov	r5,r16
  808760:	880d883a 	mov	r6,r17
  808764:	900f883a 	mov	r7,r18
  808768:	dfc00417 	ldw	ra,16(sp)
  80876c:	dcc00317 	ldw	r19,12(sp)
  808770:	dc800217 	ldw	r18,8(sp)
  808774:	dc400117 	ldw	r17,4(sp)
  808778:	dc000017 	ldw	r16,0(sp)
  80877c:	dec00504 	addi	sp,sp,20
  808780:	08070041 	jmpi	807004 <__svfscanf_r>
  808784:	08028cc0 	call	8028cc <__sinit>
  808788:	003ff306 	br	808758 <vfscanf+0x40>

0080878c <_write_r>:
  80878c:	defffd04 	addi	sp,sp,-12
  808790:	dc000015 	stw	r16,0(sp)
  808794:	040020b4 	movhi	r16,130
  808798:	8421c304 	addi	r16,r16,-30964
  80879c:	dc400115 	stw	r17,4(sp)
  8087a0:	80000015 	stw	zero,0(r16)
  8087a4:	2023883a 	mov	r17,r4
  8087a8:	2809883a 	mov	r4,r5
  8087ac:	300b883a 	mov	r5,r6
  8087b0:	380d883a 	mov	r6,r7
  8087b4:	dfc00215 	stw	ra,8(sp)
  8087b8:	08124280 	call	812428 <write>
  8087bc:	1007883a 	mov	r3,r2
  8087c0:	00bfffc4 	movi	r2,-1
  8087c4:	18800626 	beq	r3,r2,8087e0 <_write_r+0x54>
  8087c8:	1805883a 	mov	r2,r3
  8087cc:	dfc00217 	ldw	ra,8(sp)
  8087d0:	dc400117 	ldw	r17,4(sp)
  8087d4:	dc000017 	ldw	r16,0(sp)
  8087d8:	dec00304 	addi	sp,sp,12
  8087dc:	f800283a 	ret
  8087e0:	80800017 	ldw	r2,0(r16)
  8087e4:	103ff826 	beq	r2,zero,8087c8 <_write_r+0x3c>
  8087e8:	88800015 	stw	r2,0(r17)
  8087ec:	1805883a 	mov	r2,r3
  8087f0:	dfc00217 	ldw	ra,8(sp)
  8087f4:	dc400117 	ldw	r17,4(sp)
  8087f8:	dc000017 	ldw	r16,0(sp)
  8087fc:	dec00304 	addi	sp,sp,12
  808800:	f800283a 	ret

00808804 <__swsetup_r>:
  808804:	00802074 	movhi	r2,129
  808808:	109ae304 	addi	r2,r2,27532
  80880c:	10c00017 	ldw	r3,0(r2)
  808810:	defffd04 	addi	sp,sp,-12
  808814:	dc400115 	stw	r17,4(sp)
  808818:	dc000015 	stw	r16,0(sp)
  80881c:	dfc00215 	stw	ra,8(sp)
  808820:	2023883a 	mov	r17,r4
  808824:	2821883a 	mov	r16,r5
  808828:	18000226 	beq	r3,zero,808834 <__swsetup_r+0x30>
  80882c:	18800e17 	ldw	r2,56(r3)
  808830:	10001f26 	beq	r2,zero,8088b0 <__swsetup_r+0xac>
  808834:	8100030b 	ldhu	r4,12(r16)
  808838:	2080020c 	andi	r2,r4,8
  80883c:	10002826 	beq	r2,zero,8088e0 <__swsetup_r+0xdc>
  808840:	81400417 	ldw	r5,16(r16)
  808844:	28001d26 	beq	r5,zero,8088bc <__swsetup_r+0xb8>
  808848:	2080004c 	andi	r2,r4,1
  80884c:	1005003a 	cmpeq	r2,r2,zero
  808850:	10000b26 	beq	r2,zero,808880 <__swsetup_r+0x7c>
  808854:	2080008c 	andi	r2,r4,2
  808858:	10001226 	beq	r2,zero,8088a4 <__swsetup_r+0xa0>
  80885c:	0005883a 	mov	r2,zero
  808860:	80800215 	stw	r2,8(r16)
  808864:	28000b26 	beq	r5,zero,808894 <__swsetup_r+0x90>
  808868:	0005883a 	mov	r2,zero
  80886c:	dfc00217 	ldw	ra,8(sp)
  808870:	dc400117 	ldw	r17,4(sp)
  808874:	dc000017 	ldw	r16,0(sp)
  808878:	dec00304 	addi	sp,sp,12
  80887c:	f800283a 	ret
  808880:	80800517 	ldw	r2,20(r16)
  808884:	80000215 	stw	zero,8(r16)
  808888:	0085c83a 	sub	r2,zero,r2
  80888c:	80800615 	stw	r2,24(r16)
  808890:	283ff51e 	bne	r5,zero,808868 <__swsetup_r+0x64>
  808894:	2080200c 	andi	r2,r4,128
  808898:	103ff326 	beq	r2,zero,808868 <__swsetup_r+0x64>
  80889c:	00bfffc4 	movi	r2,-1
  8088a0:	003ff206 	br	80886c <__swsetup_r+0x68>
  8088a4:	80800517 	ldw	r2,20(r16)
  8088a8:	80800215 	stw	r2,8(r16)
  8088ac:	003fed06 	br	808864 <__swsetup_r+0x60>
  8088b0:	1809883a 	mov	r4,r3
  8088b4:	08028cc0 	call	8028cc <__sinit>
  8088b8:	003fde06 	br	808834 <__swsetup_r+0x30>
  8088bc:	20c0a00c 	andi	r3,r4,640
  8088c0:	00808004 	movi	r2,512
  8088c4:	18bfe026 	beq	r3,r2,808848 <__swsetup_r+0x44>
  8088c8:	8809883a 	mov	r4,r17
  8088cc:	800b883a 	mov	r5,r16
  8088d0:	0803b000 	call	803b00 <__smakebuf_r>
  8088d4:	8100030b 	ldhu	r4,12(r16)
  8088d8:	81400417 	ldw	r5,16(r16)
  8088dc:	003fda06 	br	808848 <__swsetup_r+0x44>
  8088e0:	2080040c 	andi	r2,r4,16
  8088e4:	103fed26 	beq	r2,zero,80889c <__swsetup_r+0x98>
  8088e8:	2080010c 	andi	r2,r4,4
  8088ec:	10001226 	beq	r2,zero,808938 <__swsetup_r+0x134>
  8088f0:	81400c17 	ldw	r5,48(r16)
  8088f4:	28000526 	beq	r5,zero,80890c <__swsetup_r+0x108>
  8088f8:	80801004 	addi	r2,r16,64
  8088fc:	28800226 	beq	r5,r2,808908 <__swsetup_r+0x104>
  808900:	8809883a 	mov	r4,r17
  808904:	08030400 	call	803040 <_free_r>
  808908:	80000c15 	stw	zero,48(r16)
  80890c:	8080030b 	ldhu	r2,12(r16)
  808910:	81400417 	ldw	r5,16(r16)
  808914:	80000115 	stw	zero,4(r16)
  808918:	10bff6cc 	andi	r2,r2,65499
  80891c:	8080030d 	sth	r2,12(r16)
  808920:	81400015 	stw	r5,0(r16)
  808924:	8080030b 	ldhu	r2,12(r16)
  808928:	10800214 	ori	r2,r2,8
  80892c:	113fffcc 	andi	r4,r2,65535
  808930:	8080030d 	sth	r2,12(r16)
  808934:	003fc306 	br	808844 <__swsetup_r+0x40>
  808938:	81400417 	ldw	r5,16(r16)
  80893c:	003ff906 	br	808924 <__swsetup_r+0x120>

00808940 <register_fini>:
  808940:	f800283a 	ret

00808944 <__call_exitprocs>:
  808944:	00802074 	movhi	r2,129
  808948:	109ae404 	addi	r2,r2,27536
  80894c:	10800017 	ldw	r2,0(r2)
  808950:	defff304 	addi	sp,sp,-52
  808954:	df000b15 	stw	fp,44(sp)
  808958:	d8800115 	stw	r2,4(sp)
  80895c:	00802034 	movhi	r2,128
  808960:	108f2504 	addi	r2,r2,15508
  808964:	1005003a 	cmpeq	r2,r2,zero
  808968:	d8800215 	stw	r2,8(sp)
  80896c:	d8800117 	ldw	r2,4(sp)
  808970:	dd400815 	stw	r21,32(sp)
  808974:	dd000715 	stw	r20,28(sp)
  808978:	10805204 	addi	r2,r2,328
  80897c:	dfc00c15 	stw	ra,48(sp)
  808980:	ddc00a15 	stw	r23,40(sp)
  808984:	dd800915 	stw	r22,36(sp)
  808988:	dcc00615 	stw	r19,24(sp)
  80898c:	dc800515 	stw	r18,20(sp)
  808990:	dc400415 	stw	r17,16(sp)
  808994:	dc000315 	stw	r16,12(sp)
  808998:	282b883a 	mov	r21,r5
  80899c:	2039883a 	mov	fp,r4
  8089a0:	d8800015 	stw	r2,0(sp)
  8089a4:	2829003a 	cmpeq	r20,r5,zero
  8089a8:	d8800117 	ldw	r2,4(sp)
  8089ac:	14405217 	ldw	r17,328(r2)
  8089b0:	88001026 	beq	r17,zero,8089f4 <__call_exitprocs+0xb0>
  8089b4:	ddc00017 	ldw	r23,0(sp)
  8089b8:	88800117 	ldw	r2,4(r17)
  8089bc:	8c802204 	addi	r18,r17,136
  8089c0:	143fffc4 	addi	r16,r2,-1
  8089c4:	80000916 	blt	r16,zero,8089ec <__call_exitprocs+0xa8>
  8089c8:	05bfffc4 	movi	r22,-1
  8089cc:	a000151e 	bne	r20,zero,808a24 <__call_exitprocs+0xe0>
  8089d0:	8409883a 	add	r4,r16,r16
  8089d4:	2105883a 	add	r2,r4,r4
  8089d8:	1485883a 	add	r2,r2,r18
  8089dc:	10c02017 	ldw	r3,128(r2)
  8089e0:	a8c01126 	beq	r21,r3,808a28 <__call_exitprocs+0xe4>
  8089e4:	843fffc4 	addi	r16,r16,-1
  8089e8:	85bff81e 	bne	r16,r22,8089cc <__call_exitprocs+0x88>
  8089ec:	d8800217 	ldw	r2,8(sp)
  8089f0:	10003126 	beq	r2,zero,808ab8 <__call_exitprocs+0x174>
  8089f4:	dfc00c17 	ldw	ra,48(sp)
  8089f8:	df000b17 	ldw	fp,44(sp)
  8089fc:	ddc00a17 	ldw	r23,40(sp)
  808a00:	dd800917 	ldw	r22,36(sp)
  808a04:	dd400817 	ldw	r21,32(sp)
  808a08:	dd000717 	ldw	r20,28(sp)
  808a0c:	dcc00617 	ldw	r19,24(sp)
  808a10:	dc800517 	ldw	r18,20(sp)
  808a14:	dc400417 	ldw	r17,16(sp)
  808a18:	dc000317 	ldw	r16,12(sp)
  808a1c:	dec00d04 	addi	sp,sp,52
  808a20:	f800283a 	ret
  808a24:	8409883a 	add	r4,r16,r16
  808a28:	88c00117 	ldw	r3,4(r17)
  808a2c:	2105883a 	add	r2,r4,r4
  808a30:	1445883a 	add	r2,r2,r17
  808a34:	18ffffc4 	addi	r3,r3,-1
  808a38:	11800217 	ldw	r6,8(r2)
  808a3c:	1c001526 	beq	r3,r16,808a94 <__call_exitprocs+0x150>
  808a40:	10000215 	stw	zero,8(r2)
  808a44:	303fe726 	beq	r6,zero,8089e4 <__call_exitprocs+0xa0>
  808a48:	00c00044 	movi	r3,1
  808a4c:	1c06983a 	sll	r3,r3,r16
  808a50:	90804017 	ldw	r2,256(r18)
  808a54:	8cc00117 	ldw	r19,4(r17)
  808a58:	1884703a 	and	r2,r3,r2
  808a5c:	10001426 	beq	r2,zero,808ab0 <__call_exitprocs+0x16c>
  808a60:	90804117 	ldw	r2,260(r18)
  808a64:	1884703a 	and	r2,r3,r2
  808a68:	10000c1e 	bne	r2,zero,808a9c <__call_exitprocs+0x158>
  808a6c:	2105883a 	add	r2,r4,r4
  808a70:	1485883a 	add	r2,r2,r18
  808a74:	11400017 	ldw	r5,0(r2)
  808a78:	e009883a 	mov	r4,fp
  808a7c:	303ee83a 	callr	r6
  808a80:	88800117 	ldw	r2,4(r17)
  808a84:	98bfc81e 	bne	r19,r2,8089a8 <__call_exitprocs+0x64>
  808a88:	b8800017 	ldw	r2,0(r23)
  808a8c:	147fd526 	beq	r2,r17,8089e4 <__call_exitprocs+0xa0>
  808a90:	003fc506 	br	8089a8 <__call_exitprocs+0x64>
  808a94:	8c000115 	stw	r16,4(r17)
  808a98:	003fea06 	br	808a44 <__call_exitprocs+0x100>
  808a9c:	2105883a 	add	r2,r4,r4
  808aa0:	1485883a 	add	r2,r2,r18
  808aa4:	11000017 	ldw	r4,0(r2)
  808aa8:	303ee83a 	callr	r6
  808aac:	003ff406 	br	808a80 <__call_exitprocs+0x13c>
  808ab0:	303ee83a 	callr	r6
  808ab4:	003ff206 	br	808a80 <__call_exitprocs+0x13c>
  808ab8:	88800117 	ldw	r2,4(r17)
  808abc:	1000081e 	bne	r2,zero,808ae0 <__call_exitprocs+0x19c>
  808ac0:	89000017 	ldw	r4,0(r17)
  808ac4:	20000726 	beq	r4,zero,808ae4 <__call_exitprocs+0x1a0>
  808ac8:	b9000015 	stw	r4,0(r23)
  808acc:	8809883a 	mov	r4,r17
  808ad0:	0803c940 	call	803c94 <free>
  808ad4:	bc400017 	ldw	r17,0(r23)
  808ad8:	883fb71e 	bne	r17,zero,8089b8 <__call_exitprocs+0x74>
  808adc:	003fc506 	br	8089f4 <__call_exitprocs+0xb0>
  808ae0:	89000017 	ldw	r4,0(r17)
  808ae4:	882f883a 	mov	r23,r17
  808ae8:	2023883a 	mov	r17,r4
  808aec:	883fb21e 	bne	r17,zero,8089b8 <__call_exitprocs+0x74>
  808af0:	003fc006 	br	8089f4 <__call_exitprocs+0xb0>

00808af4 <_close_r>:
  808af4:	defffd04 	addi	sp,sp,-12
  808af8:	dc000015 	stw	r16,0(sp)
  808afc:	040020b4 	movhi	r16,130
  808b00:	8421c304 	addi	r16,r16,-30964
  808b04:	dc400115 	stw	r17,4(sp)
  808b08:	80000015 	stw	zero,0(r16)
  808b0c:	2023883a 	mov	r17,r4
  808b10:	2809883a 	mov	r4,r5
  808b14:	dfc00215 	stw	ra,8(sp)
  808b18:	08117580 	call	811758 <close>
  808b1c:	1007883a 	mov	r3,r2
  808b20:	00bfffc4 	movi	r2,-1
  808b24:	18800626 	beq	r3,r2,808b40 <_close_r+0x4c>
  808b28:	1805883a 	mov	r2,r3
  808b2c:	dfc00217 	ldw	ra,8(sp)
  808b30:	dc400117 	ldw	r17,4(sp)
  808b34:	dc000017 	ldw	r16,0(sp)
  808b38:	dec00304 	addi	sp,sp,12
  808b3c:	f800283a 	ret
  808b40:	80800017 	ldw	r2,0(r16)
  808b44:	103ff826 	beq	r2,zero,808b28 <_close_r+0x34>
  808b48:	88800015 	stw	r2,0(r17)
  808b4c:	1805883a 	mov	r2,r3
  808b50:	dfc00217 	ldw	ra,8(sp)
  808b54:	dc400117 	ldw	r17,4(sp)
  808b58:	dc000017 	ldw	r16,0(sp)
  808b5c:	dec00304 	addi	sp,sp,12
  808b60:	f800283a 	ret

00808b64 <quorem>:
  808b64:	28c00417 	ldw	r3,16(r5)
  808b68:	20800417 	ldw	r2,16(r4)
  808b6c:	defff104 	addi	sp,sp,-60
  808b70:	dfc00e15 	stw	ra,56(sp)
  808b74:	df000d15 	stw	fp,52(sp)
  808b78:	ddc00c15 	stw	r23,48(sp)
  808b7c:	dd800b15 	stw	r22,44(sp)
  808b80:	dd400a15 	stw	r21,40(sp)
  808b84:	dd000915 	stw	r20,36(sp)
  808b88:	dcc00815 	stw	r19,32(sp)
  808b8c:	dc800715 	stw	r18,28(sp)
  808b90:	dc400615 	stw	r17,24(sp)
  808b94:	dc000515 	stw	r16,20(sp)
  808b98:	d9000315 	stw	r4,12(sp)
  808b9c:	d9400415 	stw	r5,16(sp)
  808ba0:	10c07f16 	blt	r2,r3,808da0 <quorem+0x23c>
  808ba4:	1d3fffc4 	addi	r20,r3,-1
  808ba8:	d8c00417 	ldw	r3,16(sp)
  808bac:	d9000317 	ldw	r4,12(sp)
  808bb0:	a505883a 	add	r2,r20,r20
  808bb4:	1085883a 	add	r2,r2,r2
  808bb8:	1cc00504 	addi	r19,r3,20
  808bbc:	25c00504 	addi	r23,r4,20
  808bc0:	98ad883a 	add	r22,r19,r2
  808bc4:	15c7883a 	add	r3,r2,r23
  808bc8:	b1400017 	ldw	r5,0(r22)
  808bcc:	19000017 	ldw	r4,0(r3)
  808bd0:	d8c00015 	stw	r3,0(sp)
  808bd4:	29400044 	addi	r5,r5,1
  808bd8:	d9000215 	stw	r4,8(sp)
  808bdc:	08113840 	call	811384 <__udivsi3>
  808be0:	1039883a 	mov	fp,r2
  808be4:	10003d1e 	bne	r2,zero,808cdc <quorem+0x178>
  808be8:	d9400417 	ldw	r5,16(sp)
  808bec:	d9000317 	ldw	r4,12(sp)
  808bf0:	080adac0 	call	80adac <__mcmp>
  808bf4:	10002c16 	blt	r2,zero,808ca8 <quorem+0x144>
  808bf8:	e7000044 	addi	fp,fp,1
  808bfc:	b80f883a 	mov	r7,r23
  808c00:	0011883a 	mov	r8,zero
  808c04:	0009883a 	mov	r4,zero
  808c08:	99400017 	ldw	r5,0(r19)
  808c0c:	38c00017 	ldw	r3,0(r7)
  808c10:	9cc00104 	addi	r19,r19,4
  808c14:	28bfffcc 	andi	r2,r5,65535
  808c18:	2085883a 	add	r2,r4,r2
  808c1c:	11bfffcc 	andi	r6,r2,65535
  808c20:	193fffcc 	andi	r4,r3,65535
  808c24:	1004d43a 	srli	r2,r2,16
  808c28:	280ad43a 	srli	r5,r5,16
  808c2c:	2189c83a 	sub	r4,r4,r6
  808c30:	2209883a 	add	r4,r4,r8
  808c34:	1806d43a 	srli	r3,r3,16
  808c38:	288b883a 	add	r5,r5,r2
  808c3c:	200dd43a 	srai	r6,r4,16
  808c40:	28bfffcc 	andi	r2,r5,65535
  808c44:	1887c83a 	sub	r3,r3,r2
  808c48:	1987883a 	add	r3,r3,r6
  808c4c:	3900000d 	sth	r4,0(r7)
  808c50:	38c0008d 	sth	r3,2(r7)
  808c54:	2808d43a 	srli	r4,r5,16
  808c58:	39c00104 	addi	r7,r7,4
  808c5c:	1811d43a 	srai	r8,r3,16
  808c60:	b4ffe92e 	bgeu	r22,r19,808c08 <quorem+0xa4>
  808c64:	a505883a 	add	r2,r20,r20
  808c68:	1085883a 	add	r2,r2,r2
  808c6c:	b885883a 	add	r2,r23,r2
  808c70:	10c00017 	ldw	r3,0(r2)
  808c74:	18000c1e 	bne	r3,zero,808ca8 <quorem+0x144>
  808c78:	113fff04 	addi	r4,r2,-4
  808c7c:	b900082e 	bgeu	r23,r4,808ca0 <quorem+0x13c>
  808c80:	10bfff17 	ldw	r2,-4(r2)
  808c84:	10000326 	beq	r2,zero,808c94 <quorem+0x130>
  808c88:	00000506 	br	808ca0 <quorem+0x13c>
  808c8c:	20800017 	ldw	r2,0(r4)
  808c90:	1000031e 	bne	r2,zero,808ca0 <quorem+0x13c>
  808c94:	213fff04 	addi	r4,r4,-4
  808c98:	a53fffc4 	addi	r20,r20,-1
  808c9c:	b93ffb36 	bltu	r23,r4,808c8c <quorem+0x128>
  808ca0:	d9000317 	ldw	r4,12(sp)
  808ca4:	25000415 	stw	r20,16(r4)
  808ca8:	e005883a 	mov	r2,fp
  808cac:	dfc00e17 	ldw	ra,56(sp)
  808cb0:	df000d17 	ldw	fp,52(sp)
  808cb4:	ddc00c17 	ldw	r23,48(sp)
  808cb8:	dd800b17 	ldw	r22,44(sp)
  808cbc:	dd400a17 	ldw	r21,40(sp)
  808cc0:	dd000917 	ldw	r20,36(sp)
  808cc4:	dcc00817 	ldw	r19,32(sp)
  808cc8:	dc800717 	ldw	r18,28(sp)
  808ccc:	dc400617 	ldw	r17,24(sp)
  808cd0:	dc000517 	ldw	r16,20(sp)
  808cd4:	dec00f04 	addi	sp,sp,60
  808cd8:	f800283a 	ret
  808cdc:	b823883a 	mov	r17,r23
  808ce0:	9825883a 	mov	r18,r19
  808ce4:	d8000115 	stw	zero,4(sp)
  808ce8:	002b883a 	mov	r21,zero
  808cec:	94000017 	ldw	r16,0(r18)
  808cf0:	e009883a 	mov	r4,fp
  808cf4:	94800104 	addi	r18,r18,4
  808cf8:	817fffcc 	andi	r5,r16,65535
  808cfc:	0801c5c0 	call	801c5c <__mulsi3>
  808d00:	800ad43a 	srli	r5,r16,16
  808d04:	e009883a 	mov	r4,fp
  808d08:	a8a1883a 	add	r16,r21,r2
  808d0c:	0801c5c0 	call	801c5c <__mulsi3>
  808d10:	89000017 	ldw	r4,0(r17)
  808d14:	80ffffcc 	andi	r3,r16,65535
  808d18:	8020d43a 	srli	r16,r16,16
  808d1c:	217fffcc 	andi	r5,r4,65535
  808d20:	28cbc83a 	sub	r5,r5,r3
  808d24:	d8c00117 	ldw	r3,4(sp)
  808d28:	2008d43a 	srli	r4,r4,16
  808d2c:	1405883a 	add	r2,r2,r16
  808d30:	28cb883a 	add	r5,r5,r3
  808d34:	280dd43a 	srai	r6,r5,16
  808d38:	10ffffcc 	andi	r3,r2,65535
  808d3c:	20c9c83a 	sub	r4,r4,r3
  808d40:	2189883a 	add	r4,r4,r6
  808d44:	8900008d 	sth	r4,2(r17)
  808d48:	2009d43a 	srai	r4,r4,16
  808d4c:	8940000d 	sth	r5,0(r17)
  808d50:	102ad43a 	srli	r21,r2,16
  808d54:	8c400104 	addi	r17,r17,4
  808d58:	d9000115 	stw	r4,4(sp)
  808d5c:	b4bfe32e 	bgeu	r22,r18,808cec <quorem+0x188>
  808d60:	d9000217 	ldw	r4,8(sp)
  808d64:	203fa01e 	bne	r4,zero,808be8 <quorem+0x84>
  808d68:	d8800017 	ldw	r2,0(sp)
  808d6c:	10ffff04 	addi	r3,r2,-4
  808d70:	b8c0082e 	bgeu	r23,r3,808d94 <quorem+0x230>
  808d74:	10bfff17 	ldw	r2,-4(r2)
  808d78:	10000326 	beq	r2,zero,808d88 <quorem+0x224>
  808d7c:	00000506 	br	808d94 <quorem+0x230>
  808d80:	18800017 	ldw	r2,0(r3)
  808d84:	1000031e 	bne	r2,zero,808d94 <quorem+0x230>
  808d88:	18ffff04 	addi	r3,r3,-4
  808d8c:	a53fffc4 	addi	r20,r20,-1
  808d90:	b8fffb36 	bltu	r23,r3,808d80 <quorem+0x21c>
  808d94:	d8c00317 	ldw	r3,12(sp)
  808d98:	1d000415 	stw	r20,16(r3)
  808d9c:	003f9206 	br	808be8 <quorem+0x84>
  808da0:	0005883a 	mov	r2,zero
  808da4:	003fc106 	br	808cac <quorem+0x148>

00808da8 <_dtoa_r>:
  808da8:	22001017 	ldw	r8,64(r4)
  808dac:	deffda04 	addi	sp,sp,-152
  808db0:	dd402115 	stw	r21,132(sp)
  808db4:	dd002015 	stw	r20,128(sp)
  808db8:	dc801e15 	stw	r18,120(sp)
  808dbc:	dc401d15 	stw	r17,116(sp)
  808dc0:	dfc02515 	stw	ra,148(sp)
  808dc4:	df002415 	stw	fp,144(sp)
  808dc8:	ddc02315 	stw	r23,140(sp)
  808dcc:	dd802215 	stw	r22,136(sp)
  808dd0:	dcc01f15 	stw	r19,124(sp)
  808dd4:	dc001c15 	stw	r16,112(sp)
  808dd8:	d9001615 	stw	r4,88(sp)
  808ddc:	3023883a 	mov	r17,r6
  808de0:	2829883a 	mov	r20,r5
  808de4:	d9c01715 	stw	r7,92(sp)
  808de8:	dc802817 	ldw	r18,160(sp)
  808dec:	302b883a 	mov	r21,r6
  808df0:	40000a26 	beq	r8,zero,808e1c <_dtoa_r+0x74>
  808df4:	20801117 	ldw	r2,68(r4)
  808df8:	400b883a 	mov	r5,r8
  808dfc:	40800115 	stw	r2,4(r8)
  808e00:	20c01117 	ldw	r3,68(r4)
  808e04:	00800044 	movi	r2,1
  808e08:	10c4983a 	sll	r2,r2,r3
  808e0c:	40800215 	stw	r2,8(r8)
  808e10:	080ac500 	call	80ac50 <_Bfree>
  808e14:	d8c01617 	ldw	r3,88(sp)
  808e18:	18001015 	stw	zero,64(r3)
  808e1c:	8800a316 	blt	r17,zero,8090ac <_dtoa_r+0x304>
  808e20:	90000015 	stw	zero,0(r18)
  808e24:	a8dffc2c 	andhi	r3,r21,32752
  808e28:	009ffc34 	movhi	r2,32752
  808e2c:	18809126 	beq	r3,r2,809074 <_dtoa_r+0x2cc>
  808e30:	000d883a 	mov	r6,zero
  808e34:	000f883a 	mov	r7,zero
  808e38:	a009883a 	mov	r4,r20
  808e3c:	a80b883a 	mov	r5,r21
  808e40:	dd001215 	stw	r20,72(sp)
  808e44:	dd401315 	stw	r21,76(sp)
  808e48:	0810d5c0 	call	810d5c <__nedf2>
  808e4c:	1000171e 	bne	r2,zero,808eac <_dtoa_r+0x104>
  808e50:	d9802717 	ldw	r6,156(sp)
  808e54:	00800044 	movi	r2,1
  808e58:	30800015 	stw	r2,0(r6)
  808e5c:	d8802917 	ldw	r2,164(sp)
  808e60:	10029b26 	beq	r2,zero,8098d0 <_dtoa_r+0xb28>
  808e64:	d9002917 	ldw	r4,164(sp)
  808e68:	00802074 	movhi	r2,129
  808e6c:	1093b444 	addi	r2,r2,20177
  808e70:	10ffffc4 	addi	r3,r2,-1
  808e74:	20800015 	stw	r2,0(r4)
  808e78:	1805883a 	mov	r2,r3
  808e7c:	dfc02517 	ldw	ra,148(sp)
  808e80:	df002417 	ldw	fp,144(sp)
  808e84:	ddc02317 	ldw	r23,140(sp)
  808e88:	dd802217 	ldw	r22,136(sp)
  808e8c:	dd402117 	ldw	r21,132(sp)
  808e90:	dd002017 	ldw	r20,128(sp)
  808e94:	dcc01f17 	ldw	r19,124(sp)
  808e98:	dc801e17 	ldw	r18,120(sp)
  808e9c:	dc401d17 	ldw	r17,116(sp)
  808ea0:	dc001c17 	ldw	r16,112(sp)
  808ea4:	dec02604 	addi	sp,sp,152
  808ea8:	f800283a 	ret
  808eac:	d9001617 	ldw	r4,88(sp)
  808eb0:	d9401217 	ldw	r5,72(sp)
  808eb4:	d8800104 	addi	r2,sp,4
  808eb8:	a80d883a 	mov	r6,r21
  808ebc:	d9c00204 	addi	r7,sp,8
  808ec0:	d8800015 	stw	r2,0(sp)
  808ec4:	080b28c0 	call	80b28c <__d2b>
  808ec8:	d8800715 	stw	r2,28(sp)
  808ecc:	a804d53a 	srli	r2,r21,20
  808ed0:	1101ffcc 	andi	r4,r2,2047
  808ed4:	20008626 	beq	r4,zero,8090f0 <_dtoa_r+0x348>
  808ed8:	d8c01217 	ldw	r3,72(sp)
  808edc:	00800434 	movhi	r2,16
  808ee0:	10bfffc4 	addi	r2,r2,-1
  808ee4:	ddc00117 	ldw	r23,4(sp)
  808ee8:	a884703a 	and	r2,r21,r2
  808eec:	1811883a 	mov	r8,r3
  808ef0:	124ffc34 	orhi	r9,r2,16368
  808ef4:	25bf0044 	addi	r22,r4,-1023
  808ef8:	d8000815 	stw	zero,32(sp)
  808efc:	0005883a 	mov	r2,zero
  808f00:	00cffe34 	movhi	r3,16376
  808f04:	480b883a 	mov	r5,r9
  808f08:	4009883a 	mov	r4,r8
  808f0c:	180f883a 	mov	r7,r3
  808f10:	100d883a 	mov	r6,r2
  808f14:	081081c0 	call	81081c <__subdf3>
  808f18:	0218dbf4 	movhi	r8,25455
  808f1c:	4210d844 	addi	r8,r8,17249
  808f20:	024ff4f4 	movhi	r9,16339
  808f24:	4a61e9c4 	addi	r9,r9,-30809
  808f28:	480f883a 	mov	r7,r9
  808f2c:	400d883a 	mov	r6,r8
  808f30:	180b883a 	mov	r5,r3
  808f34:	1009883a 	mov	r4,r2
  808f38:	08109100 	call	810910 <__muldf3>
  808f3c:	0222d874 	movhi	r8,35681
  808f40:	42322cc4 	addi	r8,r8,-14157
  808f44:	024ff1f4 	movhi	r9,16327
  808f48:	4a628a04 	addi	r9,r9,-30168
  808f4c:	480f883a 	mov	r7,r9
  808f50:	400d883a 	mov	r6,r8
  808f54:	180b883a 	mov	r5,r3
  808f58:	1009883a 	mov	r4,r2
  808f5c:	081089c0 	call	81089c <__adddf3>
  808f60:	b009883a 	mov	r4,r22
  808f64:	1021883a 	mov	r16,r2
  808f68:	1823883a 	mov	r17,r3
  808f6c:	08110040 	call	811004 <__floatsidf>
  808f70:	021427f4 	movhi	r8,20639
  808f74:	421e7ec4 	addi	r8,r8,31227
  808f78:	024ff4f4 	movhi	r9,16339
  808f7c:	4a5104c4 	addi	r9,r9,17427
  808f80:	480f883a 	mov	r7,r9
  808f84:	400d883a 	mov	r6,r8
  808f88:	180b883a 	mov	r5,r3
  808f8c:	1009883a 	mov	r4,r2
  808f90:	08109100 	call	810910 <__muldf3>
  808f94:	180f883a 	mov	r7,r3
  808f98:	880b883a 	mov	r5,r17
  808f9c:	100d883a 	mov	r6,r2
  808fa0:	8009883a 	mov	r4,r16
  808fa4:	081089c0 	call	81089c <__adddf3>
  808fa8:	1009883a 	mov	r4,r2
  808fac:	180b883a 	mov	r5,r3
  808fb0:	1021883a 	mov	r16,r2
  808fb4:	1823883a 	mov	r17,r3
  808fb8:	08110fc0 	call	8110fc <__fixdfsi>
  808fbc:	000d883a 	mov	r6,zero
  808fc0:	000f883a 	mov	r7,zero
  808fc4:	8009883a 	mov	r4,r16
  808fc8:	880b883a 	mov	r5,r17
  808fcc:	d8800d15 	stw	r2,52(sp)
  808fd0:	0810ef40 	call	810ef4 <__ltdf2>
  808fd4:	10031716 	blt	r2,zero,809c34 <_dtoa_r+0xe8c>
  808fd8:	d8c00d17 	ldw	r3,52(sp)
  808fdc:	00800584 	movi	r2,22
  808fe0:	10c1482e 	bgeu	r2,r3,809504 <_dtoa_r+0x75c>
  808fe4:	01000044 	movi	r4,1
  808fe8:	d9000c15 	stw	r4,48(sp)
  808fec:	bd85c83a 	sub	r2,r23,r22
  808ff0:	11bfffc4 	addi	r6,r2,-1
  808ff4:	30030b16 	blt	r6,zero,809c24 <_dtoa_r+0xe7c>
  808ff8:	d9800a15 	stw	r6,40(sp)
  808ffc:	d8001115 	stw	zero,68(sp)
  809000:	d8c00d17 	ldw	r3,52(sp)
  809004:	1802ff16 	blt	r3,zero,809c04 <_dtoa_r+0xe5c>
  809008:	d9000a17 	ldw	r4,40(sp)
  80900c:	d8c00915 	stw	r3,36(sp)
  809010:	d8001015 	stw	zero,64(sp)
  809014:	20c9883a 	add	r4,r4,r3
  809018:	d9000a15 	stw	r4,40(sp)
  80901c:	d9001717 	ldw	r4,92(sp)
  809020:	00800244 	movi	r2,9
  809024:	11004636 	bltu	r2,r4,809140 <_dtoa_r+0x398>
  809028:	00800144 	movi	r2,5
  80902c:	11020416 	blt	r2,r4,809840 <_dtoa_r+0xa98>
  809030:	04400044 	movi	r17,1
  809034:	d8c01717 	ldw	r3,92(sp)
  809038:	00800144 	movi	r2,5
  80903c:	10c1ed36 	bltu	r2,r3,8097f4 <_dtoa_r+0xa4c>
  809040:	18c5883a 	add	r2,r3,r3
  809044:	1085883a 	add	r2,r2,r2
  809048:	00c02074 	movhi	r3,129
  80904c:	18e41704 	addi	r3,r3,-28580
  809050:	10c5883a 	add	r2,r2,r3
  809054:	11000017 	ldw	r4,0(r2)
  809058:	2000683a 	jmp	r4
  80905c:	00809148 	cmpgei	r2,zero,581
  809060:	00809148 	cmpgei	r2,zero,581
  809064:	00809b48 	cmpgei	r2,zero,621
  809068:	00809b20 	cmpeqi	r2,zero,620
  80906c:	00809b64 	muli	r2,zero,621
  809070:	00809b70 	cmpltui	r2,zero,621
  809074:	d9002717 	ldw	r4,156(sp)
  809078:	0089c3c4 	movi	r2,9999
  80907c:	20800015 	stw	r2,0(r4)
  809080:	a0001026 	beq	r20,zero,8090c4 <_dtoa_r+0x31c>
  809084:	00c02074 	movhi	r3,129
  809088:	18d3ca04 	addi	r3,r3,20264
  80908c:	d9802917 	ldw	r6,164(sp)
  809090:	303f7926 	beq	r6,zero,808e78 <_dtoa_r+0xd0>
  809094:	188000c7 	ldb	r2,3(r3)
  809098:	190000c4 	addi	r4,r3,3
  80909c:	1000101e 	bne	r2,zero,8090e0 <_dtoa_r+0x338>
  8090a0:	d8802917 	ldw	r2,164(sp)
  8090a4:	11000015 	stw	r4,0(r2)
  8090a8:	003f7306 	br	808e78 <_dtoa_r+0xd0>
  8090ac:	00a00034 	movhi	r2,32768
  8090b0:	10bfffc4 	addi	r2,r2,-1
  8090b4:	00c00044 	movi	r3,1
  8090b8:	88aa703a 	and	r21,r17,r2
  8090bc:	90c00015 	stw	r3,0(r18)
  8090c0:	003f5806 	br	808e24 <_dtoa_r+0x7c>
  8090c4:	00800434 	movhi	r2,16
  8090c8:	10bfffc4 	addi	r2,r2,-1
  8090cc:	a884703a 	and	r2,r21,r2
  8090d0:	103fec1e 	bne	r2,zero,809084 <_dtoa_r+0x2dc>
  8090d4:	00c02074 	movhi	r3,129
  8090d8:	18d3c704 	addi	r3,r3,20252
  8090dc:	003feb06 	br	80908c <_dtoa_r+0x2e4>
  8090e0:	d8802917 	ldw	r2,164(sp)
  8090e4:	19000204 	addi	r4,r3,8
  8090e8:	11000015 	stw	r4,0(r2)
  8090ec:	003f6206 	br	808e78 <_dtoa_r+0xd0>
  8090f0:	ddc00117 	ldw	r23,4(sp)
  8090f4:	d8800217 	ldw	r2,8(sp)
  8090f8:	01000804 	movi	r4,32
  8090fc:	b8c10c84 	addi	r3,r23,1074
  809100:	18a3883a 	add	r17,r3,r2
  809104:	2441b80e 	bge	r4,r17,8097e8 <_dtoa_r+0xa40>
  809108:	00c01004 	movi	r3,64
  80910c:	1c47c83a 	sub	r3,r3,r17
  809110:	88bff804 	addi	r2,r17,-32
  809114:	a8c6983a 	sll	r3,r21,r3
  809118:	a084d83a 	srl	r2,r20,r2
  80911c:	1888b03a 	or	r4,r3,r2
  809120:	0801ac80 	call	801ac8 <__floatunsidf>
  809124:	1011883a 	mov	r8,r2
  809128:	00bf8434 	movhi	r2,65040
  80912c:	01000044 	movi	r4,1
  809130:	10d3883a 	add	r9,r2,r3
  809134:	8dbef344 	addi	r22,r17,-1075
  809138:	d9000815 	stw	r4,32(sp)
  80913c:	003f6f06 	br	808efc <_dtoa_r+0x154>
  809140:	d8001715 	stw	zero,92(sp)
  809144:	04400044 	movi	r17,1
  809148:	00bfffc4 	movi	r2,-1
  80914c:	00c00044 	movi	r3,1
  809150:	d8800e15 	stw	r2,56(sp)
  809154:	d8002615 	stw	zero,152(sp)
  809158:	d8800f15 	stw	r2,60(sp)
  80915c:	d8c00b15 	stw	r3,44(sp)
  809160:	1021883a 	mov	r16,r2
  809164:	d8801617 	ldw	r2,88(sp)
  809168:	10001115 	stw	zero,68(r2)
  80916c:	d8801617 	ldw	r2,88(sp)
  809170:	11401117 	ldw	r5,68(r2)
  809174:	1009883a 	mov	r4,r2
  809178:	080b1d00 	call	80b1d0 <_Balloc>
  80917c:	d8c01617 	ldw	r3,88(sp)
  809180:	d8800515 	stw	r2,20(sp)
  809184:	18801015 	stw	r2,64(r3)
  809188:	00800384 	movi	r2,14
  80918c:	14006836 	bltu	r2,r16,809330 <_dtoa_r+0x588>
  809190:	8805003a 	cmpeq	r2,r17,zero
  809194:	1000661e 	bne	r2,zero,809330 <_dtoa_r+0x588>
  809198:	d9000d17 	ldw	r4,52(sp)
  80919c:	0102300e 	bge	zero,r4,809a60 <_dtoa_r+0xcb8>
  8091a0:	208003cc 	andi	r2,r4,15
  8091a4:	100490fa 	slli	r2,r2,3
  8091a8:	2025d13a 	srai	r18,r4,4
  8091ac:	00c02074 	movhi	r3,129
  8091b0:	18d3db04 	addi	r3,r3,20332
  8091b4:	10c5883a 	add	r2,r2,r3
  8091b8:	90c0040c 	andi	r3,r18,16
  8091bc:	14000017 	ldw	r16,0(r2)
  8091c0:	14400117 	ldw	r17,4(r2)
  8091c4:	18036a1e 	bne	r3,zero,809f70 <_dtoa_r+0x11c8>
  8091c8:	05800084 	movi	r22,2
  8091cc:	90001026 	beq	r18,zero,809210 <_dtoa_r+0x468>
  8091d0:	04c02074 	movhi	r19,129
  8091d4:	9cd40d04 	addi	r19,r19,20532
  8091d8:	9080004c 	andi	r2,r18,1
  8091dc:	1005003a 	cmpeq	r2,r2,zero
  8091e0:	1000081e 	bne	r2,zero,809204 <_dtoa_r+0x45c>
  8091e4:	99800017 	ldw	r6,0(r19)
  8091e8:	99c00117 	ldw	r7,4(r19)
  8091ec:	880b883a 	mov	r5,r17
  8091f0:	8009883a 	mov	r4,r16
  8091f4:	08109100 	call	810910 <__muldf3>
  8091f8:	1021883a 	mov	r16,r2
  8091fc:	b5800044 	addi	r22,r22,1
  809200:	1823883a 	mov	r17,r3
  809204:	9025d07a 	srai	r18,r18,1
  809208:	9cc00204 	addi	r19,r19,8
  80920c:	903ff21e 	bne	r18,zero,8091d8 <_dtoa_r+0x430>
  809210:	a80b883a 	mov	r5,r21
  809214:	a009883a 	mov	r4,r20
  809218:	880f883a 	mov	r7,r17
  80921c:	800d883a 	mov	r6,r16
  809220:	08018700 	call	801870 <__divdf3>
  809224:	1029883a 	mov	r20,r2
  809228:	182b883a 	mov	r21,r3
  80922c:	d8c00c17 	ldw	r3,48(sp)
  809230:	1805003a 	cmpeq	r2,r3,zero
  809234:	1000081e 	bne	r2,zero,809258 <_dtoa_r+0x4b0>
  809238:	0005883a 	mov	r2,zero
  80923c:	00cffc34 	movhi	r3,16368
  809240:	180f883a 	mov	r7,r3
  809244:	a009883a 	mov	r4,r20
  809248:	a80b883a 	mov	r5,r21
  80924c:	100d883a 	mov	r6,r2
  809250:	0810ef40 	call	810ef4 <__ltdf2>
  809254:	1003fe16 	blt	r2,zero,80a250 <_dtoa_r+0x14a8>
  809258:	b009883a 	mov	r4,r22
  80925c:	08110040 	call	811004 <__floatsidf>
  809260:	180b883a 	mov	r5,r3
  809264:	1009883a 	mov	r4,r2
  809268:	a00d883a 	mov	r6,r20
  80926c:	a80f883a 	mov	r7,r21
  809270:	08109100 	call	810910 <__muldf3>
  809274:	0011883a 	mov	r8,zero
  809278:	02500734 	movhi	r9,16412
  80927c:	1009883a 	mov	r4,r2
  809280:	180b883a 	mov	r5,r3
  809284:	480f883a 	mov	r7,r9
  809288:	400d883a 	mov	r6,r8
  80928c:	081089c0 	call	81089c <__adddf3>
  809290:	d9000f17 	ldw	r4,60(sp)
  809294:	102d883a 	mov	r22,r2
  809298:	00bf3034 	movhi	r2,64704
  80929c:	18b9883a 	add	fp,r3,r2
  8092a0:	e02f883a 	mov	r23,fp
  8092a4:	20028f1e 	bne	r4,zero,809ce4 <_dtoa_r+0xf3c>
  8092a8:	0005883a 	mov	r2,zero
  8092ac:	00d00534 	movhi	r3,16404
  8092b0:	a009883a 	mov	r4,r20
  8092b4:	a80b883a 	mov	r5,r21
  8092b8:	180f883a 	mov	r7,r3
  8092bc:	100d883a 	mov	r6,r2
  8092c0:	081081c0 	call	81081c <__subdf3>
  8092c4:	1009883a 	mov	r4,r2
  8092c8:	e00f883a 	mov	r7,fp
  8092cc:	180b883a 	mov	r5,r3
  8092d0:	b00d883a 	mov	r6,r22
  8092d4:	1025883a 	mov	r18,r2
  8092d8:	1827883a 	mov	r19,r3
  8092dc:	0810de40 	call	810de4 <__gtdf2>
  8092e0:	00834f16 	blt	zero,r2,80a020 <_dtoa_r+0x1278>
  8092e4:	e0e0003c 	xorhi	r3,fp,32768
  8092e8:	9009883a 	mov	r4,r18
  8092ec:	980b883a 	mov	r5,r19
  8092f0:	180f883a 	mov	r7,r3
  8092f4:	b00d883a 	mov	r6,r22
  8092f8:	0810ef40 	call	810ef4 <__ltdf2>
  8092fc:	1000080e 	bge	r2,zero,809320 <_dtoa_r+0x578>
  809300:	0027883a 	mov	r19,zero
  809304:	0025883a 	mov	r18,zero
  809308:	d8802617 	ldw	r2,152(sp)
  80930c:	df000517 	ldw	fp,20(sp)
  809310:	d8000615 	stw	zero,24(sp)
  809314:	0084303a 	nor	r2,zero,r2
  809318:	d8800d15 	stw	r2,52(sp)
  80931c:	00019b06 	br	80998c <_dtoa_r+0xbe4>
  809320:	d9801217 	ldw	r6,72(sp)
  809324:	d8801317 	ldw	r2,76(sp)
  809328:	3029883a 	mov	r20,r6
  80932c:	102b883a 	mov	r21,r2
  809330:	d8c00217 	ldw	r3,8(sp)
  809334:	18008516 	blt	r3,zero,80954c <_dtoa_r+0x7a4>
  809338:	d9000d17 	ldw	r4,52(sp)
  80933c:	00800384 	movi	r2,14
  809340:	11008216 	blt	r2,r4,80954c <_dtoa_r+0x7a4>
  809344:	200490fa 	slli	r2,r4,3
  809348:	d9802617 	ldw	r6,152(sp)
  80934c:	00c02074 	movhi	r3,129
  809350:	18d3db04 	addi	r3,r3,20332
  809354:	10c5883a 	add	r2,r2,r3
  809358:	14800017 	ldw	r18,0(r2)
  80935c:	14c00117 	ldw	r19,4(r2)
  809360:	30031e16 	blt	r6,zero,809fdc <_dtoa_r+0x1234>
  809364:	d9000517 	ldw	r4,20(sp)
  809368:	d8c00f17 	ldw	r3,60(sp)
  80936c:	a823883a 	mov	r17,r21
  809370:	a021883a 	mov	r16,r20
  809374:	192b883a 	add	r21,r3,r4
  809378:	2039883a 	mov	fp,r4
  80937c:	00000f06 	br	8093bc <_dtoa_r+0x614>
  809380:	0005883a 	mov	r2,zero
  809384:	00d00934 	movhi	r3,16420
  809388:	5009883a 	mov	r4,r10
  80938c:	580b883a 	mov	r5,r11
  809390:	180f883a 	mov	r7,r3
  809394:	100d883a 	mov	r6,r2
  809398:	08109100 	call	810910 <__muldf3>
  80939c:	180b883a 	mov	r5,r3
  8093a0:	000d883a 	mov	r6,zero
  8093a4:	000f883a 	mov	r7,zero
  8093a8:	1009883a 	mov	r4,r2
  8093ac:	1021883a 	mov	r16,r2
  8093b0:	1823883a 	mov	r17,r3
  8093b4:	0810d5c0 	call	810d5c <__nedf2>
  8093b8:	10004526 	beq	r2,zero,8094d0 <_dtoa_r+0x728>
  8093bc:	900d883a 	mov	r6,r18
  8093c0:	980f883a 	mov	r7,r19
  8093c4:	8009883a 	mov	r4,r16
  8093c8:	880b883a 	mov	r5,r17
  8093cc:	08018700 	call	801870 <__divdf3>
  8093d0:	180b883a 	mov	r5,r3
  8093d4:	1009883a 	mov	r4,r2
  8093d8:	08110fc0 	call	8110fc <__fixdfsi>
  8093dc:	1009883a 	mov	r4,r2
  8093e0:	1029883a 	mov	r20,r2
  8093e4:	08110040 	call	811004 <__floatsidf>
  8093e8:	180f883a 	mov	r7,r3
  8093ec:	9009883a 	mov	r4,r18
  8093f0:	980b883a 	mov	r5,r19
  8093f4:	100d883a 	mov	r6,r2
  8093f8:	08109100 	call	810910 <__muldf3>
  8093fc:	180f883a 	mov	r7,r3
  809400:	880b883a 	mov	r5,r17
  809404:	8009883a 	mov	r4,r16
  809408:	100d883a 	mov	r6,r2
  80940c:	081081c0 	call	81081c <__subdf3>
  809410:	1015883a 	mov	r10,r2
  809414:	a0800c04 	addi	r2,r20,48
  809418:	e0800005 	stb	r2,0(fp)
  80941c:	e7000044 	addi	fp,fp,1
  809420:	1817883a 	mov	r11,r3
  809424:	e57fd61e 	bne	fp,r21,809380 <_dtoa_r+0x5d8>
  809428:	500d883a 	mov	r6,r10
  80942c:	180f883a 	mov	r7,r3
  809430:	5009883a 	mov	r4,r10
  809434:	180b883a 	mov	r5,r3
  809438:	081089c0 	call	81089c <__adddf3>
  80943c:	100d883a 	mov	r6,r2
  809440:	9009883a 	mov	r4,r18
  809444:	980b883a 	mov	r5,r19
  809448:	180f883a 	mov	r7,r3
  80944c:	1021883a 	mov	r16,r2
  809450:	1823883a 	mov	r17,r3
  809454:	0810ef40 	call	810ef4 <__ltdf2>
  809458:	10000816 	blt	r2,zero,80947c <_dtoa_r+0x6d4>
  80945c:	980b883a 	mov	r5,r19
  809460:	800d883a 	mov	r6,r16
  809464:	880f883a 	mov	r7,r17
  809468:	9009883a 	mov	r4,r18
  80946c:	0810cd40 	call	810cd4 <__eqdf2>
  809470:	1000171e 	bne	r2,zero,8094d0 <_dtoa_r+0x728>
  809474:	a080004c 	andi	r2,r20,1
  809478:	10001526 	beq	r2,zero,8094d0 <_dtoa_r+0x728>
  80947c:	d8800d17 	ldw	r2,52(sp)
  809480:	d8800415 	stw	r2,16(sp)
  809484:	e009883a 	mov	r4,fp
  809488:	213fffc4 	addi	r4,r4,-1
  80948c:	20c00007 	ldb	r3,0(r4)
  809490:	00800e44 	movi	r2,57
  809494:	1880081e 	bne	r3,r2,8094b8 <_dtoa_r+0x710>
  809498:	d8800517 	ldw	r2,20(sp)
  80949c:	113ffa1e 	bne	r2,r4,809488 <_dtoa_r+0x6e0>
  8094a0:	d8c00417 	ldw	r3,16(sp)
  8094a4:	d9800517 	ldw	r6,20(sp)
  8094a8:	00800c04 	movi	r2,48
  8094ac:	18c00044 	addi	r3,r3,1
  8094b0:	d8c00415 	stw	r3,16(sp)
  8094b4:	30800005 	stb	r2,0(r6)
  8094b8:	20800003 	ldbu	r2,0(r4)
  8094bc:	d8c00417 	ldw	r3,16(sp)
  8094c0:	27000044 	addi	fp,r4,1
  8094c4:	10800044 	addi	r2,r2,1
  8094c8:	d8c00d15 	stw	r3,52(sp)
  8094cc:	20800005 	stb	r2,0(r4)
  8094d0:	d9001617 	ldw	r4,88(sp)
  8094d4:	d9400717 	ldw	r5,28(sp)
  8094d8:	080ac500 	call	80ac50 <_Bfree>
  8094dc:	e0000005 	stb	zero,0(fp)
  8094e0:	d9800d17 	ldw	r6,52(sp)
  8094e4:	d8c02717 	ldw	r3,156(sp)
  8094e8:	d9002917 	ldw	r4,164(sp)
  8094ec:	30800044 	addi	r2,r6,1
  8094f0:	18800015 	stw	r2,0(r3)
  8094f4:	20029c26 	beq	r4,zero,809f68 <_dtoa_r+0x11c0>
  8094f8:	d8c00517 	ldw	r3,20(sp)
  8094fc:	27000015 	stw	fp,0(r4)
  809500:	003e5d06 	br	808e78 <_dtoa_r+0xd0>
  809504:	d9800d17 	ldw	r6,52(sp)
  809508:	00c02074 	movhi	r3,129
  80950c:	18d3db04 	addi	r3,r3,20332
  809510:	d9001217 	ldw	r4,72(sp)
  809514:	300490fa 	slli	r2,r6,3
  809518:	d9401317 	ldw	r5,76(sp)
  80951c:	10c5883a 	add	r2,r2,r3
  809520:	12000017 	ldw	r8,0(r2)
  809524:	12400117 	ldw	r9,4(r2)
  809528:	400d883a 	mov	r6,r8
  80952c:	480f883a 	mov	r7,r9
  809530:	0810ef40 	call	810ef4 <__ltdf2>
  809534:	1000030e 	bge	r2,zero,809544 <_dtoa_r+0x79c>
  809538:	d8800d17 	ldw	r2,52(sp)
  80953c:	10bfffc4 	addi	r2,r2,-1
  809540:	d8800d15 	stw	r2,52(sp)
  809544:	d8000c15 	stw	zero,48(sp)
  809548:	003ea806 	br	808fec <_dtoa_r+0x244>
  80954c:	d9000b17 	ldw	r4,44(sp)
  809550:	202cc03a 	cmpne	r22,r4,zero
  809554:	b000c71e 	bne	r22,zero,809874 <_dtoa_r+0xacc>
  809558:	dc001117 	ldw	r16,68(sp)
  80955c:	dc801017 	ldw	r18,64(sp)
  809560:	0027883a 	mov	r19,zero
  809564:	04000b0e 	bge	zero,r16,809594 <_dtoa_r+0x7ec>
  809568:	d8c00a17 	ldw	r3,40(sp)
  80956c:	00c0090e 	bge	zero,r3,809594 <_dtoa_r+0x7ec>
  809570:	8005883a 	mov	r2,r16
  809574:	1c011316 	blt	r3,r16,8099c4 <_dtoa_r+0xc1c>
  809578:	d9000a17 	ldw	r4,40(sp)
  80957c:	d9801117 	ldw	r6,68(sp)
  809580:	80a1c83a 	sub	r16,r16,r2
  809584:	2089c83a 	sub	r4,r4,r2
  809588:	308dc83a 	sub	r6,r6,r2
  80958c:	d9000a15 	stw	r4,40(sp)
  809590:	d9801115 	stw	r6,68(sp)
  809594:	d8801017 	ldw	r2,64(sp)
  809598:	0080150e 	bge	zero,r2,8095f0 <_dtoa_r+0x848>
  80959c:	d8c00b17 	ldw	r3,44(sp)
  8095a0:	1805003a 	cmpeq	r2,r3,zero
  8095a4:	1001c91e 	bne	r2,zero,809ccc <_dtoa_r+0xf24>
  8095a8:	04800e0e 	bge	zero,r18,8095e4 <_dtoa_r+0x83c>
  8095ac:	d9001617 	ldw	r4,88(sp)
  8095b0:	980b883a 	mov	r5,r19
  8095b4:	900d883a 	mov	r6,r18
  8095b8:	080ba9c0 	call	80ba9c <__pow5mult>
  8095bc:	d9001617 	ldw	r4,88(sp)
  8095c0:	d9800717 	ldw	r6,28(sp)
  8095c4:	100b883a 	mov	r5,r2
  8095c8:	1027883a 	mov	r19,r2
  8095cc:	080b6e00 	call	80b6e0 <__multiply>
  8095d0:	d9001617 	ldw	r4,88(sp)
  8095d4:	d9400717 	ldw	r5,28(sp)
  8095d8:	1023883a 	mov	r17,r2
  8095dc:	080ac500 	call	80ac50 <_Bfree>
  8095e0:	dc400715 	stw	r17,28(sp)
  8095e4:	d9001017 	ldw	r4,64(sp)
  8095e8:	248dc83a 	sub	r6,r4,r18
  8095ec:	30010e1e 	bne	r6,zero,809a28 <_dtoa_r+0xc80>
  8095f0:	d9001617 	ldw	r4,88(sp)
  8095f4:	04400044 	movi	r17,1
  8095f8:	880b883a 	mov	r5,r17
  8095fc:	080b9340 	call	80b934 <__i2b>
  809600:	d9800917 	ldw	r6,36(sp)
  809604:	1025883a 	mov	r18,r2
  809608:	0180040e 	bge	zero,r6,80961c <_dtoa_r+0x874>
  80960c:	d9001617 	ldw	r4,88(sp)
  809610:	100b883a 	mov	r5,r2
  809614:	080ba9c0 	call	80ba9c <__pow5mult>
  809618:	1025883a 	mov	r18,r2
  80961c:	d8801717 	ldw	r2,92(sp)
  809620:	8880f30e 	bge	r17,r2,8099f0 <_dtoa_r+0xc48>
  809624:	0023883a 	mov	r17,zero
  809628:	d9800917 	ldw	r6,36(sp)
  80962c:	30019e1e 	bne	r6,zero,809ca8 <_dtoa_r+0xf00>
  809630:	00c00044 	movi	r3,1
  809634:	d9000a17 	ldw	r4,40(sp)
  809638:	20c5883a 	add	r2,r4,r3
  80963c:	10c007cc 	andi	r3,r2,31
  809640:	1800841e 	bne	r3,zero,809854 <_dtoa_r+0xaac>
  809644:	00800704 	movi	r2,28
  809648:	d9000a17 	ldw	r4,40(sp)
  80964c:	d9801117 	ldw	r6,68(sp)
  809650:	80a1883a 	add	r16,r16,r2
  809654:	2089883a 	add	r4,r4,r2
  809658:	308d883a 	add	r6,r6,r2
  80965c:	d9000a15 	stw	r4,40(sp)
  809660:	d9801115 	stw	r6,68(sp)
  809664:	d8801117 	ldw	r2,68(sp)
  809668:	0080050e 	bge	zero,r2,809680 <_dtoa_r+0x8d8>
  80966c:	d9400717 	ldw	r5,28(sp)
  809670:	d9001617 	ldw	r4,88(sp)
  809674:	100d883a 	mov	r6,r2
  809678:	080b5940 	call	80b594 <__lshift>
  80967c:	d8800715 	stw	r2,28(sp)
  809680:	d8c00a17 	ldw	r3,40(sp)
  809684:	00c0050e 	bge	zero,r3,80969c <_dtoa_r+0x8f4>
  809688:	d9001617 	ldw	r4,88(sp)
  80968c:	900b883a 	mov	r5,r18
  809690:	180d883a 	mov	r6,r3
  809694:	080b5940 	call	80b594 <__lshift>
  809698:	1025883a 	mov	r18,r2
  80969c:	d9000c17 	ldw	r4,48(sp)
  8096a0:	2005003a 	cmpeq	r2,r4,zero
  8096a4:	10016f26 	beq	r2,zero,809c64 <_dtoa_r+0xebc>
  8096a8:	d9000f17 	ldw	r4,60(sp)
  8096ac:	0102170e 	bge	zero,r4,809f0c <_dtoa_r+0x1164>
  8096b0:	d9800b17 	ldw	r6,44(sp)
  8096b4:	3005003a 	cmpeq	r2,r6,zero
  8096b8:	1000881e 	bne	r2,zero,8098dc <_dtoa_r+0xb34>
  8096bc:	0400050e 	bge	zero,r16,8096d4 <_dtoa_r+0x92c>
  8096c0:	d9001617 	ldw	r4,88(sp)
  8096c4:	980b883a 	mov	r5,r19
  8096c8:	800d883a 	mov	r6,r16
  8096cc:	080b5940 	call	80b594 <__lshift>
  8096d0:	1027883a 	mov	r19,r2
  8096d4:	8804c03a 	cmpne	r2,r17,zero
  8096d8:	1002541e 	bne	r2,zero,80a02c <_dtoa_r+0x1284>
  8096dc:	980b883a 	mov	r5,r19
  8096e0:	dd800517 	ldw	r22,20(sp)
  8096e4:	dcc00615 	stw	r19,24(sp)
  8096e8:	a700004c 	andi	fp,r20,1
  8096ec:	2827883a 	mov	r19,r5
  8096f0:	d9000717 	ldw	r4,28(sp)
  8096f4:	900b883a 	mov	r5,r18
  8096f8:	0808b640 	call	808b64 <quorem>
  8096fc:	d9000717 	ldw	r4,28(sp)
  809700:	d9400617 	ldw	r5,24(sp)
  809704:	1023883a 	mov	r17,r2
  809708:	8dc00c04 	addi	r23,r17,48
  80970c:	080adac0 	call	80adac <__mcmp>
  809710:	d9001617 	ldw	r4,88(sp)
  809714:	900b883a 	mov	r5,r18
  809718:	980d883a 	mov	r6,r19
  80971c:	1029883a 	mov	r20,r2
  809720:	080b4080 	call	80b408 <__mdiff>
  809724:	102b883a 	mov	r21,r2
  809728:	10800317 	ldw	r2,12(r2)
  80972c:	1001281e 	bne	r2,zero,809bd0 <_dtoa_r+0xe28>
  809730:	d9000717 	ldw	r4,28(sp)
  809734:	a80b883a 	mov	r5,r21
  809738:	080adac0 	call	80adac <__mcmp>
  80973c:	d9001617 	ldw	r4,88(sp)
  809740:	1021883a 	mov	r16,r2
  809744:	a80b883a 	mov	r5,r21
  809748:	080ac500 	call	80ac50 <_Bfree>
  80974c:	8000041e 	bne	r16,zero,809760 <_dtoa_r+0x9b8>
  809750:	d8801717 	ldw	r2,92(sp)
  809754:	1000021e 	bne	r2,zero,809760 <_dtoa_r+0x9b8>
  809758:	e004c03a 	cmpne	r2,fp,zero
  80975c:	10011726 	beq	r2,zero,809bbc <_dtoa_r+0xe14>
  809760:	a0010616 	blt	r20,zero,809b7c <_dtoa_r+0xdd4>
  809764:	a000041e 	bne	r20,zero,809778 <_dtoa_r+0x9d0>
  809768:	d8c01717 	ldw	r3,92(sp)
  80976c:	1800021e 	bne	r3,zero,809778 <_dtoa_r+0x9d0>
  809770:	e004c03a 	cmpne	r2,fp,zero
  809774:	10010126 	beq	r2,zero,809b7c <_dtoa_r+0xdd4>
  809778:	04023d16 	blt	zero,r16,80a070 <_dtoa_r+0x12c8>
  80977c:	b5c00005 	stb	r23,0(r22)
  809780:	d9800517 	ldw	r6,20(sp)
  809784:	d9000f17 	ldw	r4,60(sp)
  809788:	b5800044 	addi	r22,r22,1
  80978c:	3105883a 	add	r2,r6,r4
  809790:	b0806526 	beq	r22,r2,809928 <_dtoa_r+0xb80>
  809794:	d9400717 	ldw	r5,28(sp)
  809798:	d9001617 	ldw	r4,88(sp)
  80979c:	01800284 	movi	r6,10
  8097a0:	000f883a 	mov	r7,zero
  8097a4:	080b9700 	call	80b970 <__multadd>
  8097a8:	d8800715 	stw	r2,28(sp)
  8097ac:	d8800617 	ldw	r2,24(sp)
  8097b0:	14c10c26 	beq	r2,r19,809be4 <_dtoa_r+0xe3c>
  8097b4:	d9400617 	ldw	r5,24(sp)
  8097b8:	d9001617 	ldw	r4,88(sp)
  8097bc:	01800284 	movi	r6,10
  8097c0:	000f883a 	mov	r7,zero
  8097c4:	080b9700 	call	80b970 <__multadd>
  8097c8:	d9001617 	ldw	r4,88(sp)
  8097cc:	980b883a 	mov	r5,r19
  8097d0:	01800284 	movi	r6,10
  8097d4:	000f883a 	mov	r7,zero
  8097d8:	d8800615 	stw	r2,24(sp)
  8097dc:	080b9700 	call	80b970 <__multadd>
  8097e0:	1027883a 	mov	r19,r2
  8097e4:	003fc206 	br	8096f0 <_dtoa_r+0x948>
  8097e8:	2445c83a 	sub	r2,r4,r17
  8097ec:	a088983a 	sll	r4,r20,r2
  8097f0:	003e4b06 	br	809120 <_dtoa_r+0x378>
  8097f4:	01bfffc4 	movi	r6,-1
  8097f8:	00800044 	movi	r2,1
  8097fc:	d9800e15 	stw	r6,56(sp)
  809800:	d9800f15 	stw	r6,60(sp)
  809804:	d8800b15 	stw	r2,44(sp)
  809808:	d8c01617 	ldw	r3,88(sp)
  80980c:	008005c4 	movi	r2,23
  809810:	18001115 	stw	zero,68(r3)
  809814:	1580082e 	bgeu	r2,r22,809838 <_dtoa_r+0xa90>
  809818:	00c00104 	movi	r3,4
  80981c:	0009883a 	mov	r4,zero
  809820:	18c7883a 	add	r3,r3,r3
  809824:	18800504 	addi	r2,r3,20
  809828:	21000044 	addi	r4,r4,1
  80982c:	b0bffc2e 	bgeu	r22,r2,809820 <_dtoa_r+0xa78>
  809830:	d9801617 	ldw	r6,88(sp)
  809834:	31001115 	stw	r4,68(r6)
  809838:	dc000f17 	ldw	r16,60(sp)
  80983c:	003e4b06 	br	80916c <_dtoa_r+0x3c4>
  809840:	d9801717 	ldw	r6,92(sp)
  809844:	0023883a 	mov	r17,zero
  809848:	31bfff04 	addi	r6,r6,-4
  80984c:	d9801715 	stw	r6,92(sp)
  809850:	003df806 	br	809034 <_dtoa_r+0x28c>
  809854:	00800804 	movi	r2,32
  809858:	10c9c83a 	sub	r4,r2,r3
  80985c:	00c00104 	movi	r3,4
  809860:	19005a16 	blt	r3,r4,8099cc <_dtoa_r+0xc24>
  809864:	008000c4 	movi	r2,3
  809868:	113f7e16 	blt	r2,r4,809664 <_dtoa_r+0x8bc>
  80986c:	20800704 	addi	r2,r4,28
  809870:	003f7506 	br	809648 <_dtoa_r+0x8a0>
  809874:	d9801717 	ldw	r6,92(sp)
  809878:	00800044 	movi	r2,1
  80987c:	1180a10e 	bge	r2,r6,809b04 <_dtoa_r+0xd5c>
  809880:	d9800f17 	ldw	r6,60(sp)
  809884:	d8c01017 	ldw	r3,64(sp)
  809888:	30bfffc4 	addi	r2,r6,-1
  80988c:	1881c616 	blt	r3,r2,809fa8 <_dtoa_r+0x1200>
  809890:	18a5c83a 	sub	r18,r3,r2
  809894:	d8800f17 	ldw	r2,60(sp)
  809898:	10026216 	blt	r2,zero,80a224 <_dtoa_r+0x147c>
  80989c:	dc001117 	ldw	r16,68(sp)
  8098a0:	1007883a 	mov	r3,r2
  8098a4:	d9800a17 	ldw	r6,40(sp)
  8098a8:	d8801117 	ldw	r2,68(sp)
  8098ac:	d9001617 	ldw	r4,88(sp)
  8098b0:	30cd883a 	add	r6,r6,r3
  8098b4:	10c5883a 	add	r2,r2,r3
  8098b8:	01400044 	movi	r5,1
  8098bc:	d9800a15 	stw	r6,40(sp)
  8098c0:	d8801115 	stw	r2,68(sp)
  8098c4:	080b9340 	call	80b934 <__i2b>
  8098c8:	1027883a 	mov	r19,r2
  8098cc:	003f2506 	br	809564 <_dtoa_r+0x7bc>
  8098d0:	00c02074 	movhi	r3,129
  8098d4:	18d3b404 	addi	r3,r3,20176
  8098d8:	003d6706 	br	808e78 <_dtoa_r+0xd0>
  8098dc:	dd800517 	ldw	r22,20(sp)
  8098e0:	04000044 	movi	r16,1
  8098e4:	00000706 	br	809904 <_dtoa_r+0xb5c>
  8098e8:	d9400717 	ldw	r5,28(sp)
  8098ec:	d9001617 	ldw	r4,88(sp)
  8098f0:	01800284 	movi	r6,10
  8098f4:	000f883a 	mov	r7,zero
  8098f8:	080b9700 	call	80b970 <__multadd>
  8098fc:	d8800715 	stw	r2,28(sp)
  809900:	84000044 	addi	r16,r16,1
  809904:	d9000717 	ldw	r4,28(sp)
  809908:	900b883a 	mov	r5,r18
  80990c:	0808b640 	call	808b64 <quorem>
  809910:	15c00c04 	addi	r23,r2,48
  809914:	b5c00005 	stb	r23,0(r22)
  809918:	d8c00f17 	ldw	r3,60(sp)
  80991c:	b5800044 	addi	r22,r22,1
  809920:	80fff116 	blt	r16,r3,8098e8 <_dtoa_r+0xb40>
  809924:	d8000615 	stw	zero,24(sp)
  809928:	d9400717 	ldw	r5,28(sp)
  80992c:	d9001617 	ldw	r4,88(sp)
  809930:	01800044 	movi	r6,1
  809934:	080b5940 	call	80b594 <__lshift>
  809938:	1009883a 	mov	r4,r2
  80993c:	900b883a 	mov	r5,r18
  809940:	d8800715 	stw	r2,28(sp)
  809944:	080adac0 	call	80adac <__mcmp>
  809948:	00803c0e 	bge	zero,r2,809a3c <_dtoa_r+0xc94>
  80994c:	b009883a 	mov	r4,r22
  809950:	213fffc4 	addi	r4,r4,-1
  809954:	21400003 	ldbu	r5,0(r4)
  809958:	00800e44 	movi	r2,57
  80995c:	28c03fcc 	andi	r3,r5,255
  809960:	18c0201c 	xori	r3,r3,128
  809964:	18ffe004 	addi	r3,r3,-128
  809968:	1881981e 	bne	r3,r2,809fcc <_dtoa_r+0x1224>
  80996c:	d9800517 	ldw	r6,20(sp)
  809970:	21bff71e 	bne	r4,r6,809950 <_dtoa_r+0xba8>
  809974:	d8800d17 	ldw	r2,52(sp)
  809978:	37000044 	addi	fp,r6,1
  80997c:	10800044 	addi	r2,r2,1
  809980:	d8800d15 	stw	r2,52(sp)
  809984:	00800c44 	movi	r2,49
  809988:	30800005 	stb	r2,0(r6)
  80998c:	d9001617 	ldw	r4,88(sp)
  809990:	900b883a 	mov	r5,r18
  809994:	080ac500 	call	80ac50 <_Bfree>
  809998:	983ecd26 	beq	r19,zero,8094d0 <_dtoa_r+0x728>
  80999c:	d8c00617 	ldw	r3,24(sp)
  8099a0:	18000426 	beq	r3,zero,8099b4 <_dtoa_r+0xc0c>
  8099a4:	1cc00326 	beq	r3,r19,8099b4 <_dtoa_r+0xc0c>
  8099a8:	d9001617 	ldw	r4,88(sp)
  8099ac:	180b883a 	mov	r5,r3
  8099b0:	080ac500 	call	80ac50 <_Bfree>
  8099b4:	d9001617 	ldw	r4,88(sp)
  8099b8:	980b883a 	mov	r5,r19
  8099bc:	080ac500 	call	80ac50 <_Bfree>
  8099c0:	003ec306 	br	8094d0 <_dtoa_r+0x728>
  8099c4:	1805883a 	mov	r2,r3
  8099c8:	003eeb06 	br	809578 <_dtoa_r+0x7d0>
  8099cc:	d9800a17 	ldw	r6,40(sp)
  8099d0:	d8c01117 	ldw	r3,68(sp)
  8099d4:	20bfff04 	addi	r2,r4,-4
  8099d8:	308d883a 	add	r6,r6,r2
  8099dc:	1887883a 	add	r3,r3,r2
  8099e0:	80a1883a 	add	r16,r16,r2
  8099e4:	d9800a15 	stw	r6,40(sp)
  8099e8:	d8c01115 	stw	r3,68(sp)
  8099ec:	003f1d06 	br	809664 <_dtoa_r+0x8bc>
  8099f0:	a03f0c1e 	bne	r20,zero,809624 <_dtoa_r+0x87c>
  8099f4:	00800434 	movhi	r2,16
  8099f8:	10bfffc4 	addi	r2,r2,-1
  8099fc:	a884703a 	and	r2,r21,r2
  809a00:	103f081e 	bne	r2,zero,809624 <_dtoa_r+0x87c>
  809a04:	a89ffc2c 	andhi	r2,r21,32752
  809a08:	103f0626 	beq	r2,zero,809624 <_dtoa_r+0x87c>
  809a0c:	d8c01117 	ldw	r3,68(sp)
  809a10:	d9000a17 	ldw	r4,40(sp)
  809a14:	18c00044 	addi	r3,r3,1
  809a18:	21000044 	addi	r4,r4,1
  809a1c:	d8c01115 	stw	r3,68(sp)
  809a20:	d9000a15 	stw	r4,40(sp)
  809a24:	003f0006 	br	809628 <_dtoa_r+0x880>
  809a28:	d9400717 	ldw	r5,28(sp)
  809a2c:	d9001617 	ldw	r4,88(sp)
  809a30:	080ba9c0 	call	80ba9c <__pow5mult>
  809a34:	d8800715 	stw	r2,28(sp)
  809a38:	003eed06 	br	8095f0 <_dtoa_r+0x848>
  809a3c:	1000021e 	bne	r2,zero,809a48 <_dtoa_r+0xca0>
  809a40:	b880004c 	andi	r2,r23,1
  809a44:	103fc11e 	bne	r2,zero,80994c <_dtoa_r+0xba4>
  809a48:	b5bfffc4 	addi	r22,r22,-1
  809a4c:	b0c00007 	ldb	r3,0(r22)
  809a50:	00800c04 	movi	r2,48
  809a54:	18bffc26 	beq	r3,r2,809a48 <_dtoa_r+0xca0>
  809a58:	b7000044 	addi	fp,r22,1
  809a5c:	003fcb06 	br	80998c <_dtoa_r+0xbe4>
  809a60:	d9800d17 	ldw	r6,52(sp)
  809a64:	018fc83a 	sub	r7,zero,r6
  809a68:	3801f726 	beq	r7,zero,80a248 <_dtoa_r+0x14a0>
  809a6c:	398003cc 	andi	r6,r7,15
  809a70:	300c90fa 	slli	r6,r6,3
  809a74:	01402074 	movhi	r5,129
  809a78:	2953db04 	addi	r5,r5,20332
  809a7c:	d9001217 	ldw	r4,72(sp)
  809a80:	314d883a 	add	r6,r6,r5
  809a84:	30c00117 	ldw	r3,4(r6)
  809a88:	30800017 	ldw	r2,0(r6)
  809a8c:	d9401317 	ldw	r5,76(sp)
  809a90:	3821d13a 	srai	r16,r7,4
  809a94:	100d883a 	mov	r6,r2
  809a98:	180f883a 	mov	r7,r3
  809a9c:	08109100 	call	810910 <__muldf3>
  809aa0:	1011883a 	mov	r8,r2
  809aa4:	1813883a 	mov	r9,r3
  809aa8:	1029883a 	mov	r20,r2
  809aac:	182b883a 	mov	r21,r3
  809ab0:	8001e526 	beq	r16,zero,80a248 <_dtoa_r+0x14a0>
  809ab4:	05800084 	movi	r22,2
  809ab8:	04402074 	movhi	r17,129
  809abc:	8c540d04 	addi	r17,r17,20532
  809ac0:	8080004c 	andi	r2,r16,1
  809ac4:	1005003a 	cmpeq	r2,r2,zero
  809ac8:	1000081e 	bne	r2,zero,809aec <_dtoa_r+0xd44>
  809acc:	89800017 	ldw	r6,0(r17)
  809ad0:	89c00117 	ldw	r7,4(r17)
  809ad4:	480b883a 	mov	r5,r9
  809ad8:	4009883a 	mov	r4,r8
  809adc:	08109100 	call	810910 <__muldf3>
  809ae0:	1011883a 	mov	r8,r2
  809ae4:	b5800044 	addi	r22,r22,1
  809ae8:	1813883a 	mov	r9,r3
  809aec:	8021d07a 	srai	r16,r16,1
  809af0:	8c400204 	addi	r17,r17,8
  809af4:	803ff21e 	bne	r16,zero,809ac0 <_dtoa_r+0xd18>
  809af8:	4029883a 	mov	r20,r8
  809afc:	482b883a 	mov	r21,r9
  809b00:	003dca06 	br	80922c <_dtoa_r+0x484>
  809b04:	d9000817 	ldw	r4,32(sp)
  809b08:	2005003a 	cmpeq	r2,r4,zero
  809b0c:	1001f61e 	bne	r2,zero,80a2e8 <_dtoa_r+0x1540>
  809b10:	dc001117 	ldw	r16,68(sp)
  809b14:	dc801017 	ldw	r18,64(sp)
  809b18:	18c10cc4 	addi	r3,r3,1075
  809b1c:	003f6106 	br	8098a4 <_dtoa_r+0xafc>
  809b20:	d8000b15 	stw	zero,44(sp)
  809b24:	d9802617 	ldw	r6,152(sp)
  809b28:	d8c00d17 	ldw	r3,52(sp)
  809b2c:	30800044 	addi	r2,r6,1
  809b30:	18ad883a 	add	r22,r3,r2
  809b34:	b13fffc4 	addi	r4,r22,-1
  809b38:	d9000e15 	stw	r4,56(sp)
  809b3c:	0581f60e 	bge	zero,r22,80a318 <_dtoa_r+0x1570>
  809b40:	dd800f15 	stw	r22,60(sp)
  809b44:	003f3006 	br	809808 <_dtoa_r+0xa60>
  809b48:	d8000b15 	stw	zero,44(sp)
  809b4c:	d9002617 	ldw	r4,152(sp)
  809b50:	0101eb0e 	bge	zero,r4,80a300 <_dtoa_r+0x1558>
  809b54:	202d883a 	mov	r22,r4
  809b58:	d9000e15 	stw	r4,56(sp)
  809b5c:	d9000f15 	stw	r4,60(sp)
  809b60:	003f2906 	br	809808 <_dtoa_r+0xa60>
  809b64:	01800044 	movi	r6,1
  809b68:	d9800b15 	stw	r6,44(sp)
  809b6c:	003ff706 	br	809b4c <_dtoa_r+0xda4>
  809b70:	01000044 	movi	r4,1
  809b74:	d9000b15 	stw	r4,44(sp)
  809b78:	003fea06 	br	809b24 <_dtoa_r+0xd7c>
  809b7c:	04000c0e 	bge	zero,r16,809bb0 <_dtoa_r+0xe08>
  809b80:	d9400717 	ldw	r5,28(sp)
  809b84:	d9001617 	ldw	r4,88(sp)
  809b88:	01800044 	movi	r6,1
  809b8c:	080b5940 	call	80b594 <__lshift>
  809b90:	1009883a 	mov	r4,r2
  809b94:	900b883a 	mov	r5,r18
  809b98:	d8800715 	stw	r2,28(sp)
  809b9c:	080adac0 	call	80adac <__mcmp>
  809ba0:	0081e00e 	bge	zero,r2,80a324 <_dtoa_r+0x157c>
  809ba4:	bdc00044 	addi	r23,r23,1
  809ba8:	00800e84 	movi	r2,58
  809bac:	b881a226 	beq	r23,r2,80a238 <_dtoa_r+0x1490>
  809bb0:	b7000044 	addi	fp,r22,1
  809bb4:	b5c00005 	stb	r23,0(r22)
  809bb8:	003f7406 	br	80998c <_dtoa_r+0xbe4>
  809bbc:	00800e44 	movi	r2,57
  809bc0:	b8819d26 	beq	r23,r2,80a238 <_dtoa_r+0x1490>
  809bc4:	053ffa0e 	bge	zero,r20,809bb0 <_dtoa_r+0xe08>
  809bc8:	8dc00c44 	addi	r23,r17,49
  809bcc:	003ff806 	br	809bb0 <_dtoa_r+0xe08>
  809bd0:	d9001617 	ldw	r4,88(sp)
  809bd4:	a80b883a 	mov	r5,r21
  809bd8:	04000044 	movi	r16,1
  809bdc:	080ac500 	call	80ac50 <_Bfree>
  809be0:	003edf06 	br	809760 <_dtoa_r+0x9b8>
  809be4:	d9001617 	ldw	r4,88(sp)
  809be8:	980b883a 	mov	r5,r19
  809bec:	01800284 	movi	r6,10
  809bf0:	000f883a 	mov	r7,zero
  809bf4:	080b9700 	call	80b970 <__multadd>
  809bf8:	1027883a 	mov	r19,r2
  809bfc:	d8800615 	stw	r2,24(sp)
  809c00:	003ebb06 	br	8096f0 <_dtoa_r+0x948>
  809c04:	d9801117 	ldw	r6,68(sp)
  809c08:	d8800d17 	ldw	r2,52(sp)
  809c0c:	d8000915 	stw	zero,36(sp)
  809c10:	308dc83a 	sub	r6,r6,r2
  809c14:	0087c83a 	sub	r3,zero,r2
  809c18:	d9801115 	stw	r6,68(sp)
  809c1c:	d8c01015 	stw	r3,64(sp)
  809c20:	003cfe06 	br	80901c <_dtoa_r+0x274>
  809c24:	018dc83a 	sub	r6,zero,r6
  809c28:	d9801115 	stw	r6,68(sp)
  809c2c:	d8000a15 	stw	zero,40(sp)
  809c30:	003cf306 	br	809000 <_dtoa_r+0x258>
  809c34:	d9000d17 	ldw	r4,52(sp)
  809c38:	08110040 	call	811004 <__floatsidf>
  809c3c:	880b883a 	mov	r5,r17
  809c40:	8009883a 	mov	r4,r16
  809c44:	180f883a 	mov	r7,r3
  809c48:	100d883a 	mov	r6,r2
  809c4c:	0810d5c0 	call	810d5c <__nedf2>
  809c50:	103ce126 	beq	r2,zero,808fd8 <_dtoa_r+0x230>
  809c54:	d9800d17 	ldw	r6,52(sp)
  809c58:	31bfffc4 	addi	r6,r6,-1
  809c5c:	d9800d15 	stw	r6,52(sp)
  809c60:	003cdd06 	br	808fd8 <_dtoa_r+0x230>
  809c64:	d9000717 	ldw	r4,28(sp)
  809c68:	900b883a 	mov	r5,r18
  809c6c:	080adac0 	call	80adac <__mcmp>
  809c70:	103e8d0e 	bge	r2,zero,8096a8 <_dtoa_r+0x900>
  809c74:	d9400717 	ldw	r5,28(sp)
  809c78:	d9001617 	ldw	r4,88(sp)
  809c7c:	01800284 	movi	r6,10
  809c80:	000f883a 	mov	r7,zero
  809c84:	080b9700 	call	80b970 <__multadd>
  809c88:	d9800d17 	ldw	r6,52(sp)
  809c8c:	d8800715 	stw	r2,28(sp)
  809c90:	31bfffc4 	addi	r6,r6,-1
  809c94:	d9800d15 	stw	r6,52(sp)
  809c98:	b001a71e 	bne	r22,zero,80a338 <_dtoa_r+0x1590>
  809c9c:	d8800e17 	ldw	r2,56(sp)
  809ca0:	d8800f15 	stw	r2,60(sp)
  809ca4:	003e8006 	br	8096a8 <_dtoa_r+0x900>
  809ca8:	90800417 	ldw	r2,16(r18)
  809cac:	1085883a 	add	r2,r2,r2
  809cb0:	1085883a 	add	r2,r2,r2
  809cb4:	1485883a 	add	r2,r2,r18
  809cb8:	11000417 	ldw	r4,16(r2)
  809cbc:	080ac780 	call	80ac78 <__hi0bits>
  809cc0:	00c00804 	movi	r3,32
  809cc4:	1887c83a 	sub	r3,r3,r2
  809cc8:	003e5a06 	br	809634 <_dtoa_r+0x88c>
  809ccc:	d9400717 	ldw	r5,28(sp)
  809cd0:	d9801017 	ldw	r6,64(sp)
  809cd4:	d9001617 	ldw	r4,88(sp)
  809cd8:	080ba9c0 	call	80ba9c <__pow5mult>
  809cdc:	d8800715 	stw	r2,28(sp)
  809ce0:	003e4306 	br	8095f0 <_dtoa_r+0x848>
  809ce4:	d9800f17 	ldw	r6,60(sp)
  809ce8:	d8800d17 	ldw	r2,52(sp)
  809cec:	d9800315 	stw	r6,12(sp)
  809cf0:	d8800415 	stw	r2,16(sp)
  809cf4:	d8c00b17 	ldw	r3,44(sp)
  809cf8:	1805003a 	cmpeq	r2,r3,zero
  809cfc:	1000e21e 	bne	r2,zero,80a088 <_dtoa_r+0x12e0>
  809d00:	d9000317 	ldw	r4,12(sp)
  809d04:	0005883a 	mov	r2,zero
  809d08:	00cff834 	movhi	r3,16352
  809d0c:	200c90fa 	slli	r6,r4,3
  809d10:	01002074 	movhi	r4,129
  809d14:	2113db04 	addi	r4,r4,20332
  809d18:	180b883a 	mov	r5,r3
  809d1c:	310d883a 	add	r6,r6,r4
  809d20:	327fff17 	ldw	r9,-4(r6)
  809d24:	323ffe17 	ldw	r8,-8(r6)
  809d28:	1009883a 	mov	r4,r2
  809d2c:	480f883a 	mov	r7,r9
  809d30:	400d883a 	mov	r6,r8
  809d34:	08018700 	call	801870 <__divdf3>
  809d38:	180b883a 	mov	r5,r3
  809d3c:	b00d883a 	mov	r6,r22
  809d40:	b80f883a 	mov	r7,r23
  809d44:	1009883a 	mov	r4,r2
  809d48:	081081c0 	call	81081c <__subdf3>
  809d4c:	a80b883a 	mov	r5,r21
  809d50:	a009883a 	mov	r4,r20
  809d54:	d8c01915 	stw	r3,100(sp)
  809d58:	d8801815 	stw	r2,96(sp)
  809d5c:	08110fc0 	call	8110fc <__fixdfsi>
  809d60:	1009883a 	mov	r4,r2
  809d64:	1027883a 	mov	r19,r2
  809d68:	08110040 	call	811004 <__floatsidf>
  809d6c:	a80b883a 	mov	r5,r21
  809d70:	a009883a 	mov	r4,r20
  809d74:	180f883a 	mov	r7,r3
  809d78:	100d883a 	mov	r6,r2
  809d7c:	081081c0 	call	81081c <__subdf3>
  809d80:	d9801817 	ldw	r6,96(sp)
  809d84:	1823883a 	mov	r17,r3
  809d88:	d8801415 	stw	r2,80(sp)
  809d8c:	302d883a 	mov	r22,r6
  809d90:	d9800517 	ldw	r6,20(sp)
  809d94:	9cc00c04 	addi	r19,r19,48
  809d98:	dc401515 	stw	r17,84(sp)
  809d9c:	d8c01917 	ldw	r3,100(sp)
  809da0:	34c00005 	stb	r19,0(r6)
  809da4:	d8800517 	ldw	r2,20(sp)
  809da8:	d9401917 	ldw	r5,100(sp)
  809dac:	d9801417 	ldw	r6,80(sp)
  809db0:	b009883a 	mov	r4,r22
  809db4:	880f883a 	mov	r7,r17
  809db8:	182f883a 	mov	r23,r3
  809dbc:	17000044 	addi	fp,r2,1
  809dc0:	0810de40 	call	810de4 <__gtdf2>
  809dc4:	00804e16 	blt	zero,r2,809f00 <_dtoa_r+0x1158>
  809dc8:	d9801417 	ldw	r6,80(sp)
  809dcc:	0005883a 	mov	r2,zero
  809dd0:	00cffc34 	movhi	r3,16368
  809dd4:	180b883a 	mov	r5,r3
  809dd8:	880f883a 	mov	r7,r17
  809ddc:	1009883a 	mov	r4,r2
  809de0:	081081c0 	call	81081c <__subdf3>
  809de4:	d9401917 	ldw	r5,100(sp)
  809de8:	180f883a 	mov	r7,r3
  809dec:	b009883a 	mov	r4,r22
  809df0:	100d883a 	mov	r6,r2
  809df4:	0810de40 	call	810de4 <__gtdf2>
  809df8:	00bda216 	blt	zero,r2,809484 <_dtoa_r+0x6dc>
  809dfc:	d8c00317 	ldw	r3,12(sp)
  809e00:	00800044 	movi	r2,1
  809e04:	10c01216 	blt	r2,r3,809e50 <_dtoa_r+0x10a8>
  809e08:	003d4506 	br	809320 <_dtoa_r+0x578>
  809e0c:	d9801417 	ldw	r6,80(sp)
  809e10:	0005883a 	mov	r2,zero
  809e14:	00cffc34 	movhi	r3,16368
  809e18:	180b883a 	mov	r5,r3
  809e1c:	880f883a 	mov	r7,r17
  809e20:	1009883a 	mov	r4,r2
  809e24:	081081c0 	call	81081c <__subdf3>
  809e28:	d9c01b17 	ldw	r7,108(sp)
  809e2c:	180b883a 	mov	r5,r3
  809e30:	1009883a 	mov	r4,r2
  809e34:	b00d883a 	mov	r6,r22
  809e38:	0810ef40 	call	810ef4 <__ltdf2>
  809e3c:	103d9116 	blt	r2,zero,809484 <_dtoa_r+0x6dc>
  809e40:	d9800517 	ldw	r6,20(sp)
  809e44:	d9000317 	ldw	r4,12(sp)
  809e48:	3105883a 	add	r2,r6,r4
  809e4c:	e0bd3426 	beq	fp,r2,809320 <_dtoa_r+0x578>
  809e50:	04500934 	movhi	r17,16420
  809e54:	0021883a 	mov	r16,zero
  809e58:	b80b883a 	mov	r5,r23
  809e5c:	b009883a 	mov	r4,r22
  809e60:	800d883a 	mov	r6,r16
  809e64:	880f883a 	mov	r7,r17
  809e68:	08109100 	call	810910 <__muldf3>
  809e6c:	d9401517 	ldw	r5,84(sp)
  809e70:	d9001417 	ldw	r4,80(sp)
  809e74:	880f883a 	mov	r7,r17
  809e78:	000d883a 	mov	r6,zero
  809e7c:	d8801a15 	stw	r2,104(sp)
  809e80:	d8c01b15 	stw	r3,108(sp)
  809e84:	08109100 	call	810910 <__muldf3>
  809e88:	180b883a 	mov	r5,r3
  809e8c:	1009883a 	mov	r4,r2
  809e90:	1823883a 	mov	r17,r3
  809e94:	1021883a 	mov	r16,r2
  809e98:	08110fc0 	call	8110fc <__fixdfsi>
  809e9c:	1009883a 	mov	r4,r2
  809ea0:	102b883a 	mov	r21,r2
  809ea4:	08110040 	call	811004 <__floatsidf>
  809ea8:	880b883a 	mov	r5,r17
  809eac:	8009883a 	mov	r4,r16
  809eb0:	180f883a 	mov	r7,r3
  809eb4:	100d883a 	mov	r6,r2
  809eb8:	081081c0 	call	81081c <__subdf3>
  809ebc:	1021883a 	mov	r16,r2
  809ec0:	d9001b17 	ldw	r4,108(sp)
  809ec4:	1823883a 	mov	r17,r3
  809ec8:	dc001415 	stw	r16,80(sp)
  809ecc:	ad400c04 	addi	r21,r21,48
  809ed0:	dc401515 	stw	r17,84(sp)
  809ed4:	d8801a17 	ldw	r2,104(sp)
  809ed8:	e5400005 	stb	r21,0(fp)
  809edc:	202f883a 	mov	r23,r4
  809ee0:	d9c01b17 	ldw	r7,108(sp)
  809ee4:	d9001417 	ldw	r4,80(sp)
  809ee8:	880b883a 	mov	r5,r17
  809eec:	100d883a 	mov	r6,r2
  809ef0:	102d883a 	mov	r22,r2
  809ef4:	e7000044 	addi	fp,fp,1
  809ef8:	0810ef40 	call	810ef4 <__ltdf2>
  809efc:	103fc30e 	bge	r2,zero,809e0c <_dtoa_r+0x1064>
  809f00:	d9000417 	ldw	r4,16(sp)
  809f04:	d9000d15 	stw	r4,52(sp)
  809f08:	003d7106 	br	8094d0 <_dtoa_r+0x728>
  809f0c:	d9801717 	ldw	r6,92(sp)
  809f10:	00800084 	movi	r2,2
  809f14:	11bde60e 	bge	r2,r6,8096b0 <_dtoa_r+0x908>
  809f18:	203cfb1e 	bne	r4,zero,809308 <_dtoa_r+0x560>
  809f1c:	d9001617 	ldw	r4,88(sp)
  809f20:	900b883a 	mov	r5,r18
  809f24:	01800144 	movi	r6,5
  809f28:	000f883a 	mov	r7,zero
  809f2c:	080b9700 	call	80b970 <__multadd>
  809f30:	d9000717 	ldw	r4,28(sp)
  809f34:	100b883a 	mov	r5,r2
  809f38:	1025883a 	mov	r18,r2
  809f3c:	080adac0 	call	80adac <__mcmp>
  809f40:	00bcf10e 	bge	zero,r2,809308 <_dtoa_r+0x560>
  809f44:	d8c00d17 	ldw	r3,52(sp)
  809f48:	d9000517 	ldw	r4,20(sp)
  809f4c:	d8000615 	stw	zero,24(sp)
  809f50:	18c00044 	addi	r3,r3,1
  809f54:	d8c00d15 	stw	r3,52(sp)
  809f58:	00800c44 	movi	r2,49
  809f5c:	27000044 	addi	fp,r4,1
  809f60:	20800005 	stb	r2,0(r4)
  809f64:	003e8906 	br	80998c <_dtoa_r+0xbe4>
  809f68:	d8c00517 	ldw	r3,20(sp)
  809f6c:	003bc206 	br	808e78 <_dtoa_r+0xd0>
  809f70:	01802074 	movhi	r6,129
  809f74:	31940d04 	addi	r6,r6,20532
  809f78:	30c00917 	ldw	r3,36(r6)
  809f7c:	30800817 	ldw	r2,32(r6)
  809f80:	d9001217 	ldw	r4,72(sp)
  809f84:	d9401317 	ldw	r5,76(sp)
  809f88:	180f883a 	mov	r7,r3
  809f8c:	100d883a 	mov	r6,r2
  809f90:	08018700 	call	801870 <__divdf3>
  809f94:	948003cc 	andi	r18,r18,15
  809f98:	058000c4 	movi	r22,3
  809f9c:	1029883a 	mov	r20,r2
  809fa0:	182b883a 	mov	r21,r3
  809fa4:	003c8906 	br	8091cc <_dtoa_r+0x424>
  809fa8:	d9001017 	ldw	r4,64(sp)
  809fac:	d9800917 	ldw	r6,36(sp)
  809fb0:	0025883a 	mov	r18,zero
  809fb4:	1105c83a 	sub	r2,r2,r4
  809fb8:	2089883a 	add	r4,r4,r2
  809fbc:	308d883a 	add	r6,r6,r2
  809fc0:	d9001015 	stw	r4,64(sp)
  809fc4:	d9800915 	stw	r6,36(sp)
  809fc8:	003e3206 	br	809894 <_dtoa_r+0xaec>
  809fcc:	28800044 	addi	r2,r5,1
  809fd0:	27000044 	addi	fp,r4,1
  809fd4:	20800005 	stb	r2,0(r4)
  809fd8:	003e6c06 	br	80998c <_dtoa_r+0xbe4>
  809fdc:	d8800f17 	ldw	r2,60(sp)
  809fe0:	00bce016 	blt	zero,r2,809364 <_dtoa_r+0x5bc>
  809fe4:	d9800f17 	ldw	r6,60(sp)
  809fe8:	303cc51e 	bne	r6,zero,809300 <_dtoa_r+0x558>
  809fec:	0005883a 	mov	r2,zero
  809ff0:	00d00534 	movhi	r3,16404
  809ff4:	980b883a 	mov	r5,r19
  809ff8:	180f883a 	mov	r7,r3
  809ffc:	9009883a 	mov	r4,r18
  80a000:	100d883a 	mov	r6,r2
  80a004:	08109100 	call	810910 <__muldf3>
  80a008:	180b883a 	mov	r5,r3
  80a00c:	a80f883a 	mov	r7,r21
  80a010:	1009883a 	mov	r4,r2
  80a014:	a00d883a 	mov	r6,r20
  80a018:	0810e6c0 	call	810e6c <__gedf2>
  80a01c:	103cb80e 	bge	r2,zero,809300 <_dtoa_r+0x558>
  80a020:	0027883a 	mov	r19,zero
  80a024:	0025883a 	mov	r18,zero
  80a028:	003fc606 	br	809f44 <_dtoa_r+0x119c>
  80a02c:	99400117 	ldw	r5,4(r19)
  80a030:	d9001617 	ldw	r4,88(sp)
  80a034:	080b1d00 	call	80b1d0 <_Balloc>
  80a038:	99800417 	ldw	r6,16(r19)
  80a03c:	11000304 	addi	r4,r2,12
  80a040:	99400304 	addi	r5,r19,12
  80a044:	318d883a 	add	r6,r6,r6
  80a048:	318d883a 	add	r6,r6,r6
  80a04c:	31800204 	addi	r6,r6,8
  80a050:	1023883a 	mov	r17,r2
  80a054:	08044e00 	call	8044e0 <memcpy>
  80a058:	d9001617 	ldw	r4,88(sp)
  80a05c:	880b883a 	mov	r5,r17
  80a060:	01800044 	movi	r6,1
  80a064:	080b5940 	call	80b594 <__lshift>
  80a068:	100b883a 	mov	r5,r2
  80a06c:	003d9c06 	br	8096e0 <_dtoa_r+0x938>
  80a070:	00800e44 	movi	r2,57
  80a074:	b8807026 	beq	r23,r2,80a238 <_dtoa_r+0x1490>
  80a078:	b8800044 	addi	r2,r23,1
  80a07c:	b7000044 	addi	fp,r22,1
  80a080:	b0800005 	stb	r2,0(r22)
  80a084:	003e4106 	br	80998c <_dtoa_r+0xbe4>
  80a088:	d8800317 	ldw	r2,12(sp)
  80a08c:	01802074 	movhi	r6,129
  80a090:	3193db04 	addi	r6,r6,20332
  80a094:	b009883a 	mov	r4,r22
  80a098:	100e90fa 	slli	r7,r2,3
  80a09c:	b80b883a 	mov	r5,r23
  80a0a0:	398f883a 	add	r7,r7,r6
  80a0a4:	38bffe17 	ldw	r2,-8(r7)
  80a0a8:	d9800517 	ldw	r6,20(sp)
  80a0ac:	38ffff17 	ldw	r3,-4(r7)
  80a0b0:	37000044 	addi	fp,r6,1
  80a0b4:	180f883a 	mov	r7,r3
  80a0b8:	100d883a 	mov	r6,r2
  80a0bc:	08109100 	call	810910 <__muldf3>
  80a0c0:	a80b883a 	mov	r5,r21
  80a0c4:	a009883a 	mov	r4,r20
  80a0c8:	182f883a 	mov	r23,r3
  80a0cc:	102d883a 	mov	r22,r2
  80a0d0:	08110fc0 	call	8110fc <__fixdfsi>
  80a0d4:	1009883a 	mov	r4,r2
  80a0d8:	1027883a 	mov	r19,r2
  80a0dc:	08110040 	call	811004 <__floatsidf>
  80a0e0:	a80b883a 	mov	r5,r21
  80a0e4:	a009883a 	mov	r4,r20
  80a0e8:	180f883a 	mov	r7,r3
  80a0ec:	100d883a 	mov	r6,r2
  80a0f0:	081081c0 	call	81081c <__subdf3>
  80a0f4:	180b883a 	mov	r5,r3
  80a0f8:	d8c00517 	ldw	r3,20(sp)
  80a0fc:	9cc00c04 	addi	r19,r19,48
  80a100:	1009883a 	mov	r4,r2
  80a104:	1cc00005 	stb	r19,0(r3)
  80a108:	2021883a 	mov	r16,r4
  80a10c:	d9000317 	ldw	r4,12(sp)
  80a110:	00800044 	movi	r2,1
  80a114:	2823883a 	mov	r17,r5
  80a118:	20802226 	beq	r4,r2,80a1a4 <_dtoa_r+0x13fc>
  80a11c:	1029883a 	mov	r20,r2
  80a120:	0005883a 	mov	r2,zero
  80a124:	00d00934 	movhi	r3,16420
  80a128:	180f883a 	mov	r7,r3
  80a12c:	100d883a 	mov	r6,r2
  80a130:	880b883a 	mov	r5,r17
  80a134:	8009883a 	mov	r4,r16
  80a138:	08109100 	call	810910 <__muldf3>
  80a13c:	180b883a 	mov	r5,r3
  80a140:	1009883a 	mov	r4,r2
  80a144:	1823883a 	mov	r17,r3
  80a148:	1021883a 	mov	r16,r2
  80a14c:	08110fc0 	call	8110fc <__fixdfsi>
  80a150:	1009883a 	mov	r4,r2
  80a154:	102b883a 	mov	r21,r2
  80a158:	08110040 	call	811004 <__floatsidf>
  80a15c:	880b883a 	mov	r5,r17
  80a160:	8009883a 	mov	r4,r16
  80a164:	180f883a 	mov	r7,r3
  80a168:	100d883a 	mov	r6,r2
  80a16c:	081081c0 	call	81081c <__subdf3>
  80a170:	180b883a 	mov	r5,r3
  80a174:	d8c00517 	ldw	r3,20(sp)
  80a178:	1009883a 	mov	r4,r2
  80a17c:	ad400c04 	addi	r21,r21,48
  80a180:	1d05883a 	add	r2,r3,r20
  80a184:	15400005 	stb	r21,0(r2)
  80a188:	2021883a 	mov	r16,r4
  80a18c:	d9000317 	ldw	r4,12(sp)
  80a190:	a5000044 	addi	r20,r20,1
  80a194:	2823883a 	mov	r17,r5
  80a198:	a13fe11e 	bne	r20,r4,80a120 <_dtoa_r+0x1378>
  80a19c:	e505883a 	add	r2,fp,r20
  80a1a0:	173fffc4 	addi	fp,r2,-1
  80a1a4:	0025883a 	mov	r18,zero
  80a1a8:	04cff834 	movhi	r19,16352
  80a1ac:	b009883a 	mov	r4,r22
  80a1b0:	b80b883a 	mov	r5,r23
  80a1b4:	900d883a 	mov	r6,r18
  80a1b8:	980f883a 	mov	r7,r19
  80a1bc:	081089c0 	call	81089c <__adddf3>
  80a1c0:	180b883a 	mov	r5,r3
  80a1c4:	1009883a 	mov	r4,r2
  80a1c8:	800d883a 	mov	r6,r16
  80a1cc:	880f883a 	mov	r7,r17
  80a1d0:	0810ef40 	call	810ef4 <__ltdf2>
  80a1d4:	103cab16 	blt	r2,zero,809484 <_dtoa_r+0x6dc>
  80a1d8:	0009883a 	mov	r4,zero
  80a1dc:	980b883a 	mov	r5,r19
  80a1e0:	b80f883a 	mov	r7,r23
  80a1e4:	b00d883a 	mov	r6,r22
  80a1e8:	081081c0 	call	81081c <__subdf3>
  80a1ec:	180b883a 	mov	r5,r3
  80a1f0:	880f883a 	mov	r7,r17
  80a1f4:	1009883a 	mov	r4,r2
  80a1f8:	800d883a 	mov	r6,r16
  80a1fc:	0810de40 	call	810de4 <__gtdf2>
  80a200:	00bc470e 	bge	zero,r2,809320 <_dtoa_r+0x578>
  80a204:	00c00c04 	movi	r3,48
  80a208:	e73fffc4 	addi	fp,fp,-1
  80a20c:	e0800007 	ldb	r2,0(fp)
  80a210:	10fffd26 	beq	r2,r3,80a208 <_dtoa_r+0x1460>
  80a214:	d9800417 	ldw	r6,16(sp)
  80a218:	e7000044 	addi	fp,fp,1
  80a21c:	d9800d15 	stw	r6,52(sp)
  80a220:	003cab06 	br	8094d0 <_dtoa_r+0x728>
  80a224:	d8c00f17 	ldw	r3,60(sp)
  80a228:	d9001117 	ldw	r4,68(sp)
  80a22c:	20e1c83a 	sub	r16,r4,r3
  80a230:	0007883a 	mov	r3,zero
  80a234:	003d9b06 	br	8098a4 <_dtoa_r+0xafc>
  80a238:	00800e44 	movi	r2,57
  80a23c:	b0800005 	stb	r2,0(r22)
  80a240:	b5800044 	addi	r22,r22,1
  80a244:	003dc106 	br	80994c <_dtoa_r+0xba4>
  80a248:	05800084 	movi	r22,2
  80a24c:	003bf706 	br	80922c <_dtoa_r+0x484>
  80a250:	d9000f17 	ldw	r4,60(sp)
  80a254:	013c000e 	bge	zero,r4,809258 <_dtoa_r+0x4b0>
  80a258:	d9800e17 	ldw	r6,56(sp)
  80a25c:	01bc300e 	bge	zero,r6,809320 <_dtoa_r+0x578>
  80a260:	0005883a 	mov	r2,zero
  80a264:	00d00934 	movhi	r3,16420
  80a268:	a80b883a 	mov	r5,r21
  80a26c:	180f883a 	mov	r7,r3
  80a270:	a009883a 	mov	r4,r20
  80a274:	100d883a 	mov	r6,r2
  80a278:	08109100 	call	810910 <__muldf3>
  80a27c:	b1000044 	addi	r4,r22,1
  80a280:	1021883a 	mov	r16,r2
  80a284:	1823883a 	mov	r17,r3
  80a288:	08110040 	call	811004 <__floatsidf>
  80a28c:	880b883a 	mov	r5,r17
  80a290:	8009883a 	mov	r4,r16
  80a294:	180f883a 	mov	r7,r3
  80a298:	100d883a 	mov	r6,r2
  80a29c:	08109100 	call	810910 <__muldf3>
  80a2a0:	0011883a 	mov	r8,zero
  80a2a4:	02500734 	movhi	r9,16412
  80a2a8:	180b883a 	mov	r5,r3
  80a2ac:	480f883a 	mov	r7,r9
  80a2b0:	1009883a 	mov	r4,r2
  80a2b4:	400d883a 	mov	r6,r8
  80a2b8:	081089c0 	call	81089c <__adddf3>
  80a2bc:	102d883a 	mov	r22,r2
  80a2c0:	00bf3034 	movhi	r2,64704
  80a2c4:	10ef883a 	add	r23,r2,r3
  80a2c8:	d8800d17 	ldw	r2,52(sp)
  80a2cc:	d8c00e17 	ldw	r3,56(sp)
  80a2d0:	8029883a 	mov	r20,r16
  80a2d4:	10bfffc4 	addi	r2,r2,-1
  80a2d8:	882b883a 	mov	r21,r17
  80a2dc:	d8800415 	stw	r2,16(sp)
  80a2e0:	d8c00315 	stw	r3,12(sp)
  80a2e4:	003e8306 	br	809cf4 <_dtoa_r+0xf4c>
  80a2e8:	d8800117 	ldw	r2,4(sp)
  80a2ec:	dc001117 	ldw	r16,68(sp)
  80a2f0:	dc801017 	ldw	r18,64(sp)
  80a2f4:	00c00d84 	movi	r3,54
  80a2f8:	1887c83a 	sub	r3,r3,r2
  80a2fc:	003d6906 	br	8098a4 <_dtoa_r+0xafc>
  80a300:	01800044 	movi	r6,1
  80a304:	3021883a 	mov	r16,r6
  80a308:	d9800f15 	stw	r6,60(sp)
  80a30c:	d9802615 	stw	r6,152(sp)
  80a310:	d9800e15 	stw	r6,56(sp)
  80a314:	003b9306 	br	809164 <_dtoa_r+0x3bc>
  80a318:	b021883a 	mov	r16,r22
  80a31c:	dd800f15 	stw	r22,60(sp)
  80a320:	003b9006 	br	809164 <_dtoa_r+0x3bc>
  80a324:	103e221e 	bne	r2,zero,809bb0 <_dtoa_r+0xe08>
  80a328:	b880004c 	andi	r2,r23,1
  80a32c:	1005003a 	cmpeq	r2,r2,zero
  80a330:	103e1f1e 	bne	r2,zero,809bb0 <_dtoa_r+0xe08>
  80a334:	003e1b06 	br	809ba4 <_dtoa_r+0xdfc>
  80a338:	d9001617 	ldw	r4,88(sp)
  80a33c:	980b883a 	mov	r5,r19
  80a340:	01800284 	movi	r6,10
  80a344:	000f883a 	mov	r7,zero
  80a348:	080b9700 	call	80b970 <__multadd>
  80a34c:	d8c00e17 	ldw	r3,56(sp)
  80a350:	1027883a 	mov	r19,r2
  80a354:	d8c00f15 	stw	r3,60(sp)
  80a358:	003cd306 	br	8096a8 <_dtoa_r+0x900>

0080a35c <__sflags>:
  80a35c:	28c00007 	ldb	r3,0(r5)
  80a360:	00801c84 	movi	r2,114
  80a364:	18800926 	beq	r3,r2,80a38c <__sflags+0x30>
  80a368:	00801dc4 	movi	r2,119
  80a36c:	18801426 	beq	r3,r2,80a3c0 <__sflags+0x64>
  80a370:	00801844 	movi	r2,97
  80a374:	18801626 	beq	r3,r2,80a3d0 <__sflags+0x74>
  80a378:	0007883a 	mov	r3,zero
  80a37c:	00800584 	movi	r2,22
  80a380:	20800015 	stw	r2,0(r4)
  80a384:	1805883a 	mov	r2,r3
  80a388:	f800283a 	ret
  80a38c:	000f883a 	mov	r7,zero
  80a390:	0011883a 	mov	r8,zero
  80a394:	00c00104 	movi	r3,4
  80a398:	28800047 	ldb	r2,1(r5)
  80a39c:	10000426 	beq	r2,zero,80a3b0 <__sflags+0x54>
  80a3a0:	01000ac4 	movi	r4,43
  80a3a4:	11000e26 	beq	r2,r4,80a3e0 <__sflags+0x84>
  80a3a8:	28800087 	ldb	r2,2(r5)
  80a3ac:	11000c26 	beq	r2,r4,80a3e0 <__sflags+0x84>
  80a3b0:	3a04b03a 	or	r2,r7,r8
  80a3b4:	30800015 	stw	r2,0(r6)
  80a3b8:	1805883a 	mov	r2,r3
  80a3bc:	f800283a 	ret
  80a3c0:	01c00044 	movi	r7,1
  80a3c4:	02018004 	movi	r8,1536
  80a3c8:	00c00204 	movi	r3,8
  80a3cc:	003ff206 	br	80a398 <__sflags+0x3c>
  80a3d0:	01c00044 	movi	r7,1
  80a3d4:	02008204 	movi	r8,520
  80a3d8:	00c04204 	movi	r3,264
  80a3dc:	003fee06 	br	80a398 <__sflags+0x3c>
  80a3e0:	00bffcc4 	movi	r2,-13
  80a3e4:	1884703a 	and	r2,r3,r2
  80a3e8:	01c00084 	movi	r7,2
  80a3ec:	10c00414 	ori	r3,r2,16
  80a3f0:	3a04b03a 	or	r2,r7,r8
  80a3f4:	30800015 	stw	r2,0(r6)
  80a3f8:	003fef06 	br	80a3b8 <__sflags+0x5c>

0080a3fc <__sfvwrite_r>:
  80a3fc:	30800217 	ldw	r2,8(r6)
  80a400:	defff504 	addi	sp,sp,-44
  80a404:	df000915 	stw	fp,36(sp)
  80a408:	dd800715 	stw	r22,28(sp)
  80a40c:	dc800315 	stw	r18,12(sp)
  80a410:	dfc00a15 	stw	ra,40(sp)
  80a414:	ddc00815 	stw	r23,32(sp)
  80a418:	dd400615 	stw	r21,24(sp)
  80a41c:	dd000515 	stw	r20,20(sp)
  80a420:	dcc00415 	stw	r19,16(sp)
  80a424:	dc400215 	stw	r17,8(sp)
  80a428:	dc000115 	stw	r16,4(sp)
  80a42c:	302d883a 	mov	r22,r6
  80a430:	2039883a 	mov	fp,r4
  80a434:	2825883a 	mov	r18,r5
  80a438:	10001c26 	beq	r2,zero,80a4ac <__sfvwrite_r+0xb0>
  80a43c:	29c0030b 	ldhu	r7,12(r5)
  80a440:	3880020c 	andi	r2,r7,8
  80a444:	10002726 	beq	r2,zero,80a4e4 <__sfvwrite_r+0xe8>
  80a448:	28800417 	ldw	r2,16(r5)
  80a44c:	10002526 	beq	r2,zero,80a4e4 <__sfvwrite_r+0xe8>
  80a450:	3880008c 	andi	r2,r7,2
  80a454:	b5400017 	ldw	r21,0(r22)
  80a458:	10002826 	beq	r2,zero,80a4fc <__sfvwrite_r+0x100>
  80a45c:	0021883a 	mov	r16,zero
  80a460:	0023883a 	mov	r17,zero
  80a464:	880d883a 	mov	r6,r17
  80a468:	e009883a 	mov	r4,fp
  80a46c:	00810004 	movi	r2,1024
  80a470:	80006e26 	beq	r16,zero,80a62c <__sfvwrite_r+0x230>
  80a474:	800f883a 	mov	r7,r16
  80a478:	91400717 	ldw	r5,28(r18)
  80a47c:	1400012e 	bgeu	r2,r16,80a484 <__sfvwrite_r+0x88>
  80a480:	100f883a 	mov	r7,r2
  80a484:	90c00917 	ldw	r3,36(r18)
  80a488:	183ee83a 	callr	r3
  80a48c:	1007883a 	mov	r3,r2
  80a490:	80a1c83a 	sub	r16,r16,r2
  80a494:	88a3883a 	add	r17,r17,r2
  80a498:	00806d0e 	bge	zero,r2,80a650 <__sfvwrite_r+0x254>
  80a49c:	b0800217 	ldw	r2,8(r22)
  80a4a0:	10c5c83a 	sub	r2,r2,r3
  80a4a4:	b0800215 	stw	r2,8(r22)
  80a4a8:	103fee1e 	bne	r2,zero,80a464 <__sfvwrite_r+0x68>
  80a4ac:	0009883a 	mov	r4,zero
  80a4b0:	2005883a 	mov	r2,r4
  80a4b4:	dfc00a17 	ldw	ra,40(sp)
  80a4b8:	df000917 	ldw	fp,36(sp)
  80a4bc:	ddc00817 	ldw	r23,32(sp)
  80a4c0:	dd800717 	ldw	r22,28(sp)
  80a4c4:	dd400617 	ldw	r21,24(sp)
  80a4c8:	dd000517 	ldw	r20,20(sp)
  80a4cc:	dcc00417 	ldw	r19,16(sp)
  80a4d0:	dc800317 	ldw	r18,12(sp)
  80a4d4:	dc400217 	ldw	r17,8(sp)
  80a4d8:	dc000117 	ldw	r16,4(sp)
  80a4dc:	dec00b04 	addi	sp,sp,44
  80a4e0:	f800283a 	ret
  80a4e4:	08088040 	call	808804 <__swsetup_r>
  80a4e8:	1000e41e 	bne	r2,zero,80a87c <__sfvwrite_r+0x480>
  80a4ec:	91c0030b 	ldhu	r7,12(r18)
  80a4f0:	b5400017 	ldw	r21,0(r22)
  80a4f4:	3880008c 	andi	r2,r7,2
  80a4f8:	103fd81e 	bne	r2,zero,80a45c <__sfvwrite_r+0x60>
  80a4fc:	3880004c 	andi	r2,r7,1
  80a500:	1005003a 	cmpeq	r2,r2,zero
  80a504:	10005726 	beq	r2,zero,80a664 <__sfvwrite_r+0x268>
  80a508:	0029883a 	mov	r20,zero
  80a50c:	002f883a 	mov	r23,zero
  80a510:	a0004226 	beq	r20,zero,80a61c <__sfvwrite_r+0x220>
  80a514:	3880800c 	andi	r2,r7,512
  80a518:	94000217 	ldw	r16,8(r18)
  80a51c:	10008b26 	beq	r2,zero,80a74c <__sfvwrite_r+0x350>
  80a520:	800d883a 	mov	r6,r16
  80a524:	a400a536 	bltu	r20,r16,80a7bc <__sfvwrite_r+0x3c0>
  80a528:	3881200c 	andi	r2,r7,1152
  80a52c:	10002726 	beq	r2,zero,80a5cc <__sfvwrite_r+0x1d0>
  80a530:	90800517 	ldw	r2,20(r18)
  80a534:	92000417 	ldw	r8,16(r18)
  80a538:	91400017 	ldw	r5,0(r18)
  80a53c:	1087883a 	add	r3,r2,r2
  80a540:	1887883a 	add	r3,r3,r2
  80a544:	1808d7fa 	srli	r4,r3,31
  80a548:	2a21c83a 	sub	r16,r5,r8
  80a54c:	80800044 	addi	r2,r16,1
  80a550:	20c9883a 	add	r4,r4,r3
  80a554:	2027d07a 	srai	r19,r4,1
  80a558:	a085883a 	add	r2,r20,r2
  80a55c:	980d883a 	mov	r6,r19
  80a560:	9880022e 	bgeu	r19,r2,80a56c <__sfvwrite_r+0x170>
  80a564:	1027883a 	mov	r19,r2
  80a568:	100d883a 	mov	r6,r2
  80a56c:	3881000c 	andi	r2,r7,1024
  80a570:	1000b826 	beq	r2,zero,80a854 <__sfvwrite_r+0x458>
  80a574:	300b883a 	mov	r5,r6
  80a578:	e009883a 	mov	r4,fp
  80a57c:	0803cbc0 	call	803cbc <_malloc_r>
  80a580:	10003126 	beq	r2,zero,80a648 <__sfvwrite_r+0x24c>
  80a584:	91400417 	ldw	r5,16(r18)
  80a588:	1009883a 	mov	r4,r2
  80a58c:	800d883a 	mov	r6,r16
  80a590:	1023883a 	mov	r17,r2
  80a594:	08044e00 	call	8044e0 <memcpy>
  80a598:	90c0030b 	ldhu	r3,12(r18)
  80a59c:	00beffc4 	movi	r2,-1025
  80a5a0:	1886703a 	and	r3,r3,r2
  80a5a4:	18c02014 	ori	r3,r3,128
  80a5a8:	90c0030d 	sth	r3,12(r18)
  80a5ac:	9c07c83a 	sub	r3,r19,r16
  80a5b0:	8c05883a 	add	r2,r17,r16
  80a5b4:	a00d883a 	mov	r6,r20
  80a5b8:	a021883a 	mov	r16,r20
  80a5bc:	90800015 	stw	r2,0(r18)
  80a5c0:	90c00215 	stw	r3,8(r18)
  80a5c4:	94400415 	stw	r17,16(r18)
  80a5c8:	94c00515 	stw	r19,20(r18)
  80a5cc:	91000017 	ldw	r4,0(r18)
  80a5d0:	b80b883a 	mov	r5,r23
  80a5d4:	a023883a 	mov	r17,r20
  80a5d8:	080ab700 	call	80ab70 <memmove>
  80a5dc:	90c00217 	ldw	r3,8(r18)
  80a5e0:	90800017 	ldw	r2,0(r18)
  80a5e4:	a027883a 	mov	r19,r20
  80a5e8:	1c07c83a 	sub	r3,r3,r16
  80a5ec:	1405883a 	add	r2,r2,r16
  80a5f0:	90c00215 	stw	r3,8(r18)
  80a5f4:	a021883a 	mov	r16,r20
  80a5f8:	90800015 	stw	r2,0(r18)
  80a5fc:	b0800217 	ldw	r2,8(r22)
  80a600:	1405c83a 	sub	r2,r2,r16
  80a604:	b0800215 	stw	r2,8(r22)
  80a608:	103fa826 	beq	r2,zero,80a4ac <__sfvwrite_r+0xb0>
  80a60c:	a469c83a 	sub	r20,r20,r17
  80a610:	91c0030b 	ldhu	r7,12(r18)
  80a614:	bcef883a 	add	r23,r23,r19
  80a618:	a03fbe1e 	bne	r20,zero,80a514 <__sfvwrite_r+0x118>
  80a61c:	adc00017 	ldw	r23,0(r21)
  80a620:	ad000117 	ldw	r20,4(r21)
  80a624:	ad400204 	addi	r21,r21,8
  80a628:	003fb906 	br	80a510 <__sfvwrite_r+0x114>
  80a62c:	ac400017 	ldw	r17,0(r21)
  80a630:	ac000117 	ldw	r16,4(r21)
  80a634:	ad400204 	addi	r21,r21,8
  80a638:	003f8a06 	br	80a464 <__sfvwrite_r+0x68>
  80a63c:	91400417 	ldw	r5,16(r18)
  80a640:	e009883a 	mov	r4,fp
  80a644:	08030400 	call	803040 <_free_r>
  80a648:	00800304 	movi	r2,12
  80a64c:	e0800015 	stw	r2,0(fp)
  80a650:	9080030b 	ldhu	r2,12(r18)
  80a654:	013fffc4 	movi	r4,-1
  80a658:	10801014 	ori	r2,r2,64
  80a65c:	9080030d 	sth	r2,12(r18)
  80a660:	003f9306 	br	80a4b0 <__sfvwrite_r+0xb4>
  80a664:	0027883a 	mov	r19,zero
  80a668:	002f883a 	mov	r23,zero
  80a66c:	d8000015 	stw	zero,0(sp)
  80a670:	0029883a 	mov	r20,zero
  80a674:	98001e26 	beq	r19,zero,80a6f0 <__sfvwrite_r+0x2f4>
  80a678:	d8c00017 	ldw	r3,0(sp)
  80a67c:	1804c03a 	cmpne	r2,r3,zero
  80a680:	10005e26 	beq	r2,zero,80a7fc <__sfvwrite_r+0x400>
  80a684:	9821883a 	mov	r16,r19
  80a688:	a4c0012e 	bgeu	r20,r19,80a690 <__sfvwrite_r+0x294>
  80a68c:	a021883a 	mov	r16,r20
  80a690:	91000017 	ldw	r4,0(r18)
  80a694:	90800417 	ldw	r2,16(r18)
  80a698:	91800217 	ldw	r6,8(r18)
  80a69c:	91c00517 	ldw	r7,20(r18)
  80a6a0:	1100022e 	bgeu	r2,r4,80a6ac <__sfvwrite_r+0x2b0>
  80a6a4:	31e3883a 	add	r17,r6,r7
  80a6a8:	8c001616 	blt	r17,r16,80a704 <__sfvwrite_r+0x308>
  80a6ac:	81c03816 	blt	r16,r7,80a790 <__sfvwrite_r+0x394>
  80a6b0:	90c00917 	ldw	r3,36(r18)
  80a6b4:	91400717 	ldw	r5,28(r18)
  80a6b8:	e009883a 	mov	r4,fp
  80a6bc:	b80d883a 	mov	r6,r23
  80a6c0:	183ee83a 	callr	r3
  80a6c4:	1023883a 	mov	r17,r2
  80a6c8:	00bfe10e 	bge	zero,r2,80a650 <__sfvwrite_r+0x254>
  80a6cc:	a469c83a 	sub	r20,r20,r17
  80a6d0:	a0001826 	beq	r20,zero,80a734 <__sfvwrite_r+0x338>
  80a6d4:	b0800217 	ldw	r2,8(r22)
  80a6d8:	1445c83a 	sub	r2,r2,r17
  80a6dc:	b0800215 	stw	r2,8(r22)
  80a6e0:	103f7226 	beq	r2,zero,80a4ac <__sfvwrite_r+0xb0>
  80a6e4:	9c67c83a 	sub	r19,r19,r17
  80a6e8:	bc6f883a 	add	r23,r23,r17
  80a6ec:	983fe21e 	bne	r19,zero,80a678 <__sfvwrite_r+0x27c>
  80a6f0:	adc00017 	ldw	r23,0(r21)
  80a6f4:	acc00117 	ldw	r19,4(r21)
  80a6f8:	ad400204 	addi	r21,r21,8
  80a6fc:	d8000015 	stw	zero,0(sp)
  80a700:	003fdc06 	br	80a674 <__sfvwrite_r+0x278>
  80a704:	b80b883a 	mov	r5,r23
  80a708:	880d883a 	mov	r6,r17
  80a70c:	080ab700 	call	80ab70 <memmove>
  80a710:	90c00017 	ldw	r3,0(r18)
  80a714:	e009883a 	mov	r4,fp
  80a718:	900b883a 	mov	r5,r18
  80a71c:	1c47883a 	add	r3,r3,r17
  80a720:	90c00015 	stw	r3,0(r18)
  80a724:	08023a00 	call	8023a0 <_fflush_r>
  80a728:	103fc91e 	bne	r2,zero,80a650 <__sfvwrite_r+0x254>
  80a72c:	a469c83a 	sub	r20,r20,r17
  80a730:	a03fe81e 	bne	r20,zero,80a6d4 <__sfvwrite_r+0x2d8>
  80a734:	e009883a 	mov	r4,fp
  80a738:	900b883a 	mov	r5,r18
  80a73c:	08023a00 	call	8023a0 <_fflush_r>
  80a740:	103fc31e 	bne	r2,zero,80a650 <__sfvwrite_r+0x254>
  80a744:	d8000015 	stw	zero,0(sp)
  80a748:	003fe206 	br	80a6d4 <__sfvwrite_r+0x2d8>
  80a74c:	91000017 	ldw	r4,0(r18)
  80a750:	90800417 	ldw	r2,16(r18)
  80a754:	1100022e 	bgeu	r2,r4,80a760 <__sfvwrite_r+0x364>
  80a758:	8023883a 	mov	r17,r16
  80a75c:	85003136 	bltu	r16,r20,80a824 <__sfvwrite_r+0x428>
  80a760:	91c00517 	ldw	r7,20(r18)
  80a764:	a1c01836 	bltu	r20,r7,80a7c8 <__sfvwrite_r+0x3cc>
  80a768:	90c00917 	ldw	r3,36(r18)
  80a76c:	91400717 	ldw	r5,28(r18)
  80a770:	e009883a 	mov	r4,fp
  80a774:	b80d883a 	mov	r6,r23
  80a778:	183ee83a 	callr	r3
  80a77c:	1021883a 	mov	r16,r2
  80a780:	00bfb30e 	bge	zero,r2,80a650 <__sfvwrite_r+0x254>
  80a784:	1023883a 	mov	r17,r2
  80a788:	1027883a 	mov	r19,r2
  80a78c:	003f9b06 	br	80a5fc <__sfvwrite_r+0x200>
  80a790:	b80b883a 	mov	r5,r23
  80a794:	800d883a 	mov	r6,r16
  80a798:	080ab700 	call	80ab70 <memmove>
  80a79c:	90c00217 	ldw	r3,8(r18)
  80a7a0:	90800017 	ldw	r2,0(r18)
  80a7a4:	8023883a 	mov	r17,r16
  80a7a8:	1c07c83a 	sub	r3,r3,r16
  80a7ac:	1405883a 	add	r2,r2,r16
  80a7b0:	90c00215 	stw	r3,8(r18)
  80a7b4:	90800015 	stw	r2,0(r18)
  80a7b8:	003fc406 	br	80a6cc <__sfvwrite_r+0x2d0>
  80a7bc:	a00d883a 	mov	r6,r20
  80a7c0:	a021883a 	mov	r16,r20
  80a7c4:	003f8106 	br	80a5cc <__sfvwrite_r+0x1d0>
  80a7c8:	b80b883a 	mov	r5,r23
  80a7cc:	a00d883a 	mov	r6,r20
  80a7d0:	080ab700 	call	80ab70 <memmove>
  80a7d4:	90c00217 	ldw	r3,8(r18)
  80a7d8:	90800017 	ldw	r2,0(r18)
  80a7dc:	a021883a 	mov	r16,r20
  80a7e0:	1d07c83a 	sub	r3,r3,r20
  80a7e4:	1505883a 	add	r2,r2,r20
  80a7e8:	a023883a 	mov	r17,r20
  80a7ec:	a027883a 	mov	r19,r20
  80a7f0:	90c00215 	stw	r3,8(r18)
  80a7f4:	90800015 	stw	r2,0(r18)
  80a7f8:	003f8006 	br	80a5fc <__sfvwrite_r+0x200>
  80a7fc:	b809883a 	mov	r4,r23
  80a800:	01400284 	movi	r5,10
  80a804:	980d883a 	mov	r6,r19
  80a808:	08043fc0 	call	8043fc <memchr>
  80a80c:	10001726 	beq	r2,zero,80a86c <__sfvwrite_r+0x470>
  80a810:	15c5c83a 	sub	r2,r2,r23
  80a814:	15000044 	addi	r20,r2,1
  80a818:	00800044 	movi	r2,1
  80a81c:	d8800015 	stw	r2,0(sp)
  80a820:	003f9806 	br	80a684 <__sfvwrite_r+0x288>
  80a824:	b80b883a 	mov	r5,r23
  80a828:	800d883a 	mov	r6,r16
  80a82c:	080ab700 	call	80ab70 <memmove>
  80a830:	90c00017 	ldw	r3,0(r18)
  80a834:	e009883a 	mov	r4,fp
  80a838:	900b883a 	mov	r5,r18
  80a83c:	1c07883a 	add	r3,r3,r16
  80a840:	90c00015 	stw	r3,0(r18)
  80a844:	8027883a 	mov	r19,r16
  80a848:	08023a00 	call	8023a0 <_fflush_r>
  80a84c:	103f6b26 	beq	r2,zero,80a5fc <__sfvwrite_r+0x200>
  80a850:	003f7f06 	br	80a650 <__sfvwrite_r+0x254>
  80a854:	400b883a 	mov	r5,r8
  80a858:	e009883a 	mov	r4,fp
  80a85c:	080bd540 	call	80bd54 <_realloc_r>
  80a860:	103f7626 	beq	r2,zero,80a63c <__sfvwrite_r+0x240>
  80a864:	1023883a 	mov	r17,r2
  80a868:	003f5006 	br	80a5ac <__sfvwrite_r+0x1b0>
  80a86c:	00c00044 	movi	r3,1
  80a870:	9d000044 	addi	r20,r19,1
  80a874:	d8c00015 	stw	r3,0(sp)
  80a878:	003f8206 	br	80a684 <__sfvwrite_r+0x288>
  80a87c:	9080030b 	ldhu	r2,12(r18)
  80a880:	00c00244 	movi	r3,9
  80a884:	013fffc4 	movi	r4,-1
  80a888:	10801014 	ori	r2,r2,64
  80a88c:	9080030d 	sth	r2,12(r18)
  80a890:	e0c00015 	stw	r3,0(fp)
  80a894:	003f0606 	br	80a4b0 <__sfvwrite_r+0xb4>

0080a898 <_isatty_r>:
  80a898:	defffd04 	addi	sp,sp,-12
  80a89c:	dc000015 	stw	r16,0(sp)
  80a8a0:	040020b4 	movhi	r16,130
  80a8a4:	8421c304 	addi	r16,r16,-30964
  80a8a8:	dc400115 	stw	r17,4(sp)
  80a8ac:	80000015 	stw	zero,0(r16)
  80a8b0:	2023883a 	mov	r17,r4
  80a8b4:	2809883a 	mov	r4,r5
  80a8b8:	dfc00215 	stw	ra,8(sp)
  80a8bc:	0811a7c0 	call	811a7c <isatty>
  80a8c0:	1007883a 	mov	r3,r2
  80a8c4:	00bfffc4 	movi	r2,-1
  80a8c8:	18800626 	beq	r3,r2,80a8e4 <_isatty_r+0x4c>
  80a8cc:	1805883a 	mov	r2,r3
  80a8d0:	dfc00217 	ldw	ra,8(sp)
  80a8d4:	dc400117 	ldw	r17,4(sp)
  80a8d8:	dc000017 	ldw	r16,0(sp)
  80a8dc:	dec00304 	addi	sp,sp,12
  80a8e0:	f800283a 	ret
  80a8e4:	80800017 	ldw	r2,0(r16)
  80a8e8:	103ff826 	beq	r2,zero,80a8cc <_isatty_r+0x34>
  80a8ec:	88800015 	stw	r2,0(r17)
  80a8f0:	1805883a 	mov	r2,r3
  80a8f4:	dfc00217 	ldw	ra,8(sp)
  80a8f8:	dc400117 	ldw	r17,4(sp)
  80a8fc:	dc000017 	ldw	r16,0(sp)
  80a900:	dec00304 	addi	sp,sp,12
  80a904:	f800283a 	ret

0080a908 <iswspace>:
  80a908:	00803fc4 	movi	r2,255
  80a90c:	0007883a 	mov	r3,zero
  80a910:	11000636 	bltu	r2,r4,80a92c <iswspace+0x24>
  80a914:	00802074 	movhi	r2,129
  80a918:	109ae204 	addi	r2,r2,27528
  80a91c:	10c00017 	ldw	r3,0(r2)
  80a920:	1907883a 	add	r3,r3,r4
  80a924:	18800003 	ldbu	r2,0(r3)
  80a928:	10c0020c 	andi	r3,r2,8
  80a92c:	1805883a 	mov	r2,r3
  80a930:	f800283a 	ret

0080a934 <__locale_charset>:
  80a934:	d0a00617 	ldw	r2,-32744(gp)
  80a938:	f800283a 	ret

0080a93c <_localeconv_r>:
  80a93c:	00802074 	movhi	r2,129
  80a940:	1093cf04 	addi	r2,r2,20284
  80a944:	f800283a 	ret

0080a948 <localeconv>:
  80a948:	00802074 	movhi	r2,129
  80a94c:	109ae304 	addi	r2,r2,27532
  80a950:	11000017 	ldw	r4,0(r2)
  80a954:	080a93c1 	jmpi	80a93c <_localeconv_r>

0080a958 <_setlocale_r>:
  80a958:	defffc04 	addi	sp,sp,-16
  80a95c:	00c02074 	movhi	r3,129
  80a960:	18d39b04 	addi	r3,r3,20076
  80a964:	dc800215 	stw	r18,8(sp)
  80a968:	dc400115 	stw	r17,4(sp)
  80a96c:	dc000015 	stw	r16,0(sp)
  80a970:	2023883a 	mov	r17,r4
  80a974:	2825883a 	mov	r18,r5
  80a978:	dfc00315 	stw	ra,12(sp)
  80a97c:	3021883a 	mov	r16,r6
  80a980:	3009883a 	mov	r4,r6
  80a984:	180b883a 	mov	r5,r3
  80a988:	30000926 	beq	r6,zero,80a9b0 <_setlocale_r+0x58>
  80a98c:	080c5540 	call	80c554 <strcmp>
  80a990:	8009883a 	mov	r4,r16
  80a994:	01402074 	movhi	r5,129
  80a998:	2953ac04 	addi	r5,r5,20144
  80a99c:	10000b1e 	bne	r2,zero,80a9cc <_setlocale_r+0x74>
  80a9a0:	8c000d15 	stw	r16,52(r17)
  80a9a4:	8c800c15 	stw	r18,48(r17)
  80a9a8:	00c02074 	movhi	r3,129
  80a9ac:	18d39b04 	addi	r3,r3,20076
  80a9b0:	1805883a 	mov	r2,r3
  80a9b4:	dfc00317 	ldw	ra,12(sp)
  80a9b8:	dc800217 	ldw	r18,8(sp)
  80a9bc:	dc400117 	ldw	r17,4(sp)
  80a9c0:	dc000017 	ldw	r16,0(sp)
  80a9c4:	dec00404 	addi	sp,sp,16
  80a9c8:	f800283a 	ret
  80a9cc:	080c5540 	call	80c554 <strcmp>
  80a9d0:	0007883a 	mov	r3,zero
  80a9d4:	103ff226 	beq	r2,zero,80a9a0 <_setlocale_r+0x48>
  80a9d8:	003ff506 	br	80a9b0 <_setlocale_r+0x58>

0080a9dc <setlocale>:
  80a9dc:	01802074 	movhi	r6,129
  80a9e0:	319ae304 	addi	r6,r6,27532
  80a9e4:	2007883a 	mov	r3,r4
  80a9e8:	31000017 	ldw	r4,0(r6)
  80a9ec:	280d883a 	mov	r6,r5
  80a9f0:	180b883a 	mov	r5,r3
  80a9f4:	080a9581 	jmpi	80a958 <_setlocale_r>

0080a9f8 <_lseek_r>:
  80a9f8:	defffd04 	addi	sp,sp,-12
  80a9fc:	dc000015 	stw	r16,0(sp)
  80aa00:	040020b4 	movhi	r16,130
  80aa04:	8421c304 	addi	r16,r16,-30964
  80aa08:	dc400115 	stw	r17,4(sp)
  80aa0c:	80000015 	stw	zero,0(r16)
  80aa10:	2023883a 	mov	r17,r4
  80aa14:	2809883a 	mov	r4,r5
  80aa18:	300b883a 	mov	r5,r6
  80aa1c:	380d883a 	mov	r6,r7
  80aa20:	dfc00215 	stw	ra,8(sp)
  80aa24:	0811c8c0 	call	811c8c <lseek>
  80aa28:	1007883a 	mov	r3,r2
  80aa2c:	00bfffc4 	movi	r2,-1
  80aa30:	18800626 	beq	r3,r2,80aa4c <_lseek_r+0x54>
  80aa34:	1805883a 	mov	r2,r3
  80aa38:	dfc00217 	ldw	ra,8(sp)
  80aa3c:	dc400117 	ldw	r17,4(sp)
  80aa40:	dc000017 	ldw	r16,0(sp)
  80aa44:	dec00304 	addi	sp,sp,12
  80aa48:	f800283a 	ret
  80aa4c:	80800017 	ldw	r2,0(r16)
  80aa50:	103ff826 	beq	r2,zero,80aa34 <_lseek_r+0x3c>
  80aa54:	88800015 	stw	r2,0(r17)
  80aa58:	1805883a 	mov	r2,r3
  80aa5c:	dfc00217 	ldw	ra,8(sp)
  80aa60:	dc400117 	ldw	r17,4(sp)
  80aa64:	dc000017 	ldw	r16,0(sp)
  80aa68:	dec00304 	addi	sp,sp,12
  80aa6c:	f800283a 	ret

0080aa70 <_mbrtowc_r>:
  80aa70:	defffc04 	addi	sp,sp,-16
  80aa74:	dc400215 	stw	r17,8(sp)
  80aa78:	dc000115 	stw	r16,4(sp)
  80aa7c:	dfc00315 	stw	ra,12(sp)
  80aa80:	dc000417 	ldw	r16,16(sp)
  80aa84:	2023883a 	mov	r17,r4
  80aa88:	30000f26 	beq	r6,zero,80aac8 <_mbrtowc_r+0x58>
  80aa8c:	dc000015 	stw	r16,0(sp)
  80aa90:	080ab300 	call	80ab30 <_mbtowc_r>
  80aa94:	1007883a 	mov	r3,r2
  80aa98:	00bfffc4 	movi	r2,-1
  80aa9c:	1809883a 	mov	r4,r3
  80aaa0:	1880111e 	bne	r3,r2,80aae8 <_mbrtowc_r+0x78>
  80aaa4:	80000015 	stw	zero,0(r16)
  80aaa8:	00802284 	movi	r2,138
  80aaac:	88800015 	stw	r2,0(r17)
  80aab0:	2005883a 	mov	r2,r4
  80aab4:	dfc00317 	ldw	ra,12(sp)
  80aab8:	dc400217 	ldw	r17,8(sp)
  80aabc:	dc000117 	ldw	r16,4(sp)
  80aac0:	dec00404 	addi	sp,sp,16
  80aac4:	f800283a 	ret
  80aac8:	000b883a 	mov	r5,zero
  80aacc:	01802074 	movhi	r6,129
  80aad0:	3193ac04 	addi	r6,r6,20144
  80aad4:	01c00044 	movi	r7,1
  80aad8:	dc000015 	stw	r16,0(sp)
  80aadc:	080ab300 	call	80ab30 <_mbtowc_r>
  80aae0:	1007883a 	mov	r3,r2
  80aae4:	003fec06 	br	80aa98 <_mbrtowc_r+0x28>
  80aae8:	1809883a 	mov	r4,r3
  80aaec:	003ff006 	br	80aab0 <_mbrtowc_r+0x40>

0080aaf0 <mbrtowc>:
  80aaf0:	00802074 	movhi	r2,129
  80aaf4:	109ae304 	addi	r2,r2,27532
  80aaf8:	2017883a 	mov	r11,r4
  80aafc:	11000017 	ldw	r4,0(r2)
  80ab00:	defffe04 	addi	sp,sp,-8
  80ab04:	3013883a 	mov	r9,r6
  80ab08:	2805883a 	mov	r2,r5
  80ab0c:	d9c00015 	stw	r7,0(sp)
  80ab10:	580b883a 	mov	r5,r11
  80ab14:	100d883a 	mov	r6,r2
  80ab18:	480f883a 	mov	r7,r9
  80ab1c:	dfc00115 	stw	ra,4(sp)
  80ab20:	080aa700 	call	80aa70 <_mbrtowc_r>
  80ab24:	dfc00117 	ldw	ra,4(sp)
  80ab28:	dec00204 	addi	sp,sp,8
  80ab2c:	f800283a 	ret

0080ab30 <_mbtowc_r>:
  80ab30:	deffff04 	addi	sp,sp,-4
  80ab34:	0005883a 	mov	r2,zero
  80ab38:	28000326 	beq	r5,zero,80ab48 <_mbtowc_r+0x18>
  80ab3c:	3000041e 	bne	r6,zero,80ab50 <_mbtowc_r+0x20>
  80ab40:	dec00104 	addi	sp,sp,4
  80ab44:	f800283a 	ret
  80ab48:	d80b883a 	mov	r5,sp
  80ab4c:	303ffc26 	beq	r6,zero,80ab40 <_mbtowc_r+0x10>
  80ab50:	00bfff84 	movi	r2,-2
  80ab54:	383ffa26 	beq	r7,zero,80ab40 <_mbtowc_r+0x10>
  80ab58:	30800003 	ldbu	r2,0(r6)
  80ab5c:	28800015 	stw	r2,0(r5)
  80ab60:	30c00003 	ldbu	r3,0(r6)
  80ab64:	1804c03a 	cmpne	r2,r3,zero
  80ab68:	dec00104 	addi	sp,sp,4
  80ab6c:	f800283a 	ret

0080ab70 <memmove>:
  80ab70:	2807883a 	mov	r3,r5
  80ab74:	2011883a 	mov	r8,r4
  80ab78:	29000c2e 	bgeu	r5,r4,80abac <memmove+0x3c>
  80ab7c:	298f883a 	add	r7,r5,r6
  80ab80:	21c00a2e 	bgeu	r4,r7,80abac <memmove+0x3c>
  80ab84:	30000726 	beq	r6,zero,80aba4 <memmove+0x34>
  80ab88:	2187883a 	add	r3,r4,r6
  80ab8c:	198dc83a 	sub	r6,r3,r6
  80ab90:	39ffffc4 	addi	r7,r7,-1
  80ab94:	38800003 	ldbu	r2,0(r7)
  80ab98:	18ffffc4 	addi	r3,r3,-1
  80ab9c:	18800005 	stb	r2,0(r3)
  80aba0:	19bffb1e 	bne	r3,r6,80ab90 <memmove+0x20>
  80aba4:	2005883a 	mov	r2,r4
  80aba8:	f800283a 	ret
  80abac:	01c003c4 	movi	r7,15
  80abb0:	39800a36 	bltu	r7,r6,80abdc <memmove+0x6c>
  80abb4:	303ffb26 	beq	r6,zero,80aba4 <memmove+0x34>
  80abb8:	400f883a 	mov	r7,r8
  80abbc:	320d883a 	add	r6,r6,r8
  80abc0:	28800003 	ldbu	r2,0(r5)
  80abc4:	29400044 	addi	r5,r5,1
  80abc8:	38800005 	stb	r2,0(r7)
  80abcc:	39c00044 	addi	r7,r7,1
  80abd0:	39bffb1e 	bne	r7,r6,80abc0 <memmove+0x50>
  80abd4:	2005883a 	mov	r2,r4
  80abd8:	f800283a 	ret
  80abdc:	1904b03a 	or	r2,r3,r4
  80abe0:	108000cc 	andi	r2,r2,3
  80abe4:	103ff31e 	bne	r2,zero,80abb4 <memmove+0x44>
  80abe8:	3811883a 	mov	r8,r7
  80abec:	180b883a 	mov	r5,r3
  80abf0:	200f883a 	mov	r7,r4
  80abf4:	28c00017 	ldw	r3,0(r5)
  80abf8:	31bffc04 	addi	r6,r6,-16
  80abfc:	38c00015 	stw	r3,0(r7)
  80ac00:	28800117 	ldw	r2,4(r5)
  80ac04:	38800115 	stw	r2,4(r7)
  80ac08:	28c00217 	ldw	r3,8(r5)
  80ac0c:	38c00215 	stw	r3,8(r7)
  80ac10:	28800317 	ldw	r2,12(r5)
  80ac14:	29400404 	addi	r5,r5,16
  80ac18:	38800315 	stw	r2,12(r7)
  80ac1c:	39c00404 	addi	r7,r7,16
  80ac20:	41bff436 	bltu	r8,r6,80abf4 <memmove+0x84>
  80ac24:	008000c4 	movi	r2,3
  80ac28:	1180072e 	bgeu	r2,r6,80ac48 <memmove+0xd8>
  80ac2c:	1007883a 	mov	r3,r2
  80ac30:	28800017 	ldw	r2,0(r5)
  80ac34:	31bfff04 	addi	r6,r6,-4
  80ac38:	29400104 	addi	r5,r5,4
  80ac3c:	38800015 	stw	r2,0(r7)
  80ac40:	39c00104 	addi	r7,r7,4
  80ac44:	19bffa36 	bltu	r3,r6,80ac30 <memmove+0xc0>
  80ac48:	3811883a 	mov	r8,r7
  80ac4c:	003fd906 	br	80abb4 <memmove+0x44>

0080ac50 <_Bfree>:
  80ac50:	28000826 	beq	r5,zero,80ac74 <_Bfree+0x24>
  80ac54:	28800117 	ldw	r2,4(r5)
  80ac58:	21001317 	ldw	r4,76(r4)
  80ac5c:	1085883a 	add	r2,r2,r2
  80ac60:	1085883a 	add	r2,r2,r2
  80ac64:	1105883a 	add	r2,r2,r4
  80ac68:	10c00017 	ldw	r3,0(r2)
  80ac6c:	28c00015 	stw	r3,0(r5)
  80ac70:	11400015 	stw	r5,0(r2)
  80ac74:	f800283a 	ret

0080ac78 <__hi0bits>:
  80ac78:	20bfffec 	andhi	r2,r4,65535
  80ac7c:	10001426 	beq	r2,zero,80acd0 <__hi0bits+0x58>
  80ac80:	0007883a 	mov	r3,zero
  80ac84:	20bfc02c 	andhi	r2,r4,65280
  80ac88:	1000021e 	bne	r2,zero,80ac94 <__hi0bits+0x1c>
  80ac8c:	2008923a 	slli	r4,r4,8
  80ac90:	18c00204 	addi	r3,r3,8
  80ac94:	20bc002c 	andhi	r2,r4,61440
  80ac98:	1000021e 	bne	r2,zero,80aca4 <__hi0bits+0x2c>
  80ac9c:	2008913a 	slli	r4,r4,4
  80aca0:	18c00104 	addi	r3,r3,4
  80aca4:	20b0002c 	andhi	r2,r4,49152
  80aca8:	1000031e 	bne	r2,zero,80acb8 <__hi0bits+0x40>
  80acac:	2105883a 	add	r2,r4,r4
  80acb0:	18c00084 	addi	r3,r3,2
  80acb4:	1089883a 	add	r4,r2,r2
  80acb8:	20000316 	blt	r4,zero,80acc8 <__hi0bits+0x50>
  80acbc:	2090002c 	andhi	r2,r4,16384
  80acc0:	10000626 	beq	r2,zero,80acdc <__hi0bits+0x64>
  80acc4:	18c00044 	addi	r3,r3,1
  80acc8:	1805883a 	mov	r2,r3
  80accc:	f800283a 	ret
  80acd0:	2008943a 	slli	r4,r4,16
  80acd4:	00c00404 	movi	r3,16
  80acd8:	003fea06 	br	80ac84 <__hi0bits+0xc>
  80acdc:	00c00804 	movi	r3,32
  80ace0:	1805883a 	mov	r2,r3
  80ace4:	f800283a 	ret

0080ace8 <__lo0bits>:
  80ace8:	20c00017 	ldw	r3,0(r4)
  80acec:	188001cc 	andi	r2,r3,7
  80acf0:	10000a26 	beq	r2,zero,80ad1c <__lo0bits+0x34>
  80acf4:	1880004c 	andi	r2,r3,1
  80acf8:	1005003a 	cmpeq	r2,r2,zero
  80acfc:	10002126 	beq	r2,zero,80ad84 <__lo0bits+0x9c>
  80ad00:	1880008c 	andi	r2,r3,2
  80ad04:	1000251e 	bne	r2,zero,80ad9c <__lo0bits+0xb4>
  80ad08:	1804d0ba 	srli	r2,r3,2
  80ad0c:	01400084 	movi	r5,2
  80ad10:	20800015 	stw	r2,0(r4)
  80ad14:	2805883a 	mov	r2,r5
  80ad18:	f800283a 	ret
  80ad1c:	18bfffcc 	andi	r2,r3,65535
  80ad20:	10001526 	beq	r2,zero,80ad78 <__lo0bits+0x90>
  80ad24:	000b883a 	mov	r5,zero
  80ad28:	18803fcc 	andi	r2,r3,255
  80ad2c:	1000021e 	bne	r2,zero,80ad38 <__lo0bits+0x50>
  80ad30:	1806d23a 	srli	r3,r3,8
  80ad34:	29400204 	addi	r5,r5,8
  80ad38:	188003cc 	andi	r2,r3,15
  80ad3c:	1000021e 	bne	r2,zero,80ad48 <__lo0bits+0x60>
  80ad40:	1806d13a 	srli	r3,r3,4
  80ad44:	29400104 	addi	r5,r5,4
  80ad48:	188000cc 	andi	r2,r3,3
  80ad4c:	1000021e 	bne	r2,zero,80ad58 <__lo0bits+0x70>
  80ad50:	1806d0ba 	srli	r3,r3,2
  80ad54:	29400084 	addi	r5,r5,2
  80ad58:	1880004c 	andi	r2,r3,1
  80ad5c:	1000031e 	bne	r2,zero,80ad6c <__lo0bits+0x84>
  80ad60:	1806d07a 	srli	r3,r3,1
  80ad64:	18000a26 	beq	r3,zero,80ad90 <__lo0bits+0xa8>
  80ad68:	29400044 	addi	r5,r5,1
  80ad6c:	2805883a 	mov	r2,r5
  80ad70:	20c00015 	stw	r3,0(r4)
  80ad74:	f800283a 	ret
  80ad78:	1806d43a 	srli	r3,r3,16
  80ad7c:	01400404 	movi	r5,16
  80ad80:	003fe906 	br	80ad28 <__lo0bits+0x40>
  80ad84:	000b883a 	mov	r5,zero
  80ad88:	2805883a 	mov	r2,r5
  80ad8c:	f800283a 	ret
  80ad90:	01400804 	movi	r5,32
  80ad94:	2805883a 	mov	r2,r5
  80ad98:	f800283a 	ret
  80ad9c:	1804d07a 	srli	r2,r3,1
  80ada0:	01400044 	movi	r5,1
  80ada4:	20800015 	stw	r2,0(r4)
  80ada8:	003fda06 	br	80ad14 <__lo0bits+0x2c>

0080adac <__mcmp>:
  80adac:	20800417 	ldw	r2,16(r4)
  80adb0:	28c00417 	ldw	r3,16(r5)
  80adb4:	10cfc83a 	sub	r7,r2,r3
  80adb8:	38000c1e 	bne	r7,zero,80adec <__mcmp+0x40>
  80adbc:	18c5883a 	add	r2,r3,r3
  80adc0:	1085883a 	add	r2,r2,r2
  80adc4:	10c00504 	addi	r3,r2,20
  80adc8:	21000504 	addi	r4,r4,20
  80adcc:	28cb883a 	add	r5,r5,r3
  80add0:	2085883a 	add	r2,r4,r2
  80add4:	10bfff04 	addi	r2,r2,-4
  80add8:	297fff04 	addi	r5,r5,-4
  80addc:	11800017 	ldw	r6,0(r2)
  80ade0:	28c00017 	ldw	r3,0(r5)
  80ade4:	30c0031e 	bne	r6,r3,80adf4 <__mcmp+0x48>
  80ade8:	20bffa36 	bltu	r4,r2,80add4 <__mcmp+0x28>
  80adec:	3805883a 	mov	r2,r7
  80adf0:	f800283a 	ret
  80adf4:	30c00336 	bltu	r6,r3,80ae04 <__mcmp+0x58>
  80adf8:	01c00044 	movi	r7,1
  80adfc:	3805883a 	mov	r2,r7
  80ae00:	f800283a 	ret
  80ae04:	01ffffc4 	movi	r7,-1
  80ae08:	003ff806 	br	80adec <__mcmp+0x40>

0080ae0c <__ulp>:
  80ae0c:	295ffc2c 	andhi	r5,r5,32752
  80ae10:	013f3034 	movhi	r4,64704
  80ae14:	290b883a 	add	r5,r5,r4
  80ae18:	0145c83a 	sub	r2,zero,r5
  80ae1c:	1007d53a 	srai	r3,r2,20
  80ae20:	000d883a 	mov	r6,zero
  80ae24:	0140040e 	bge	zero,r5,80ae38 <__ulp+0x2c>
  80ae28:	280f883a 	mov	r7,r5
  80ae2c:	3807883a 	mov	r3,r7
  80ae30:	3005883a 	mov	r2,r6
  80ae34:	f800283a 	ret
  80ae38:	008004c4 	movi	r2,19
  80ae3c:	193ffb04 	addi	r4,r3,-20
  80ae40:	10c00c0e 	bge	r2,r3,80ae74 <__ulp+0x68>
  80ae44:	008007c4 	movi	r2,31
  80ae48:	1107c83a 	sub	r3,r2,r4
  80ae4c:	00800784 	movi	r2,30
  80ae50:	01400044 	movi	r5,1
  80ae54:	11000216 	blt	r2,r4,80ae60 <__ulp+0x54>
  80ae58:	00800044 	movi	r2,1
  80ae5c:	10ca983a 	sll	r5,r2,r3
  80ae60:	000f883a 	mov	r7,zero
  80ae64:	280d883a 	mov	r6,r5
  80ae68:	3807883a 	mov	r3,r7
  80ae6c:	3005883a 	mov	r2,r6
  80ae70:	f800283a 	ret
  80ae74:	00800234 	movhi	r2,8
  80ae78:	10cfd83a 	sra	r7,r2,r3
  80ae7c:	000d883a 	mov	r6,zero
  80ae80:	3005883a 	mov	r2,r6
  80ae84:	3807883a 	mov	r3,r7
  80ae88:	f800283a 	ret

0080ae8c <__b2d>:
  80ae8c:	20800417 	ldw	r2,16(r4)
  80ae90:	defff904 	addi	sp,sp,-28
  80ae94:	dd000415 	stw	r20,16(sp)
  80ae98:	1085883a 	add	r2,r2,r2
  80ae9c:	25000504 	addi	r20,r4,20
  80aea0:	1085883a 	add	r2,r2,r2
  80aea4:	dc000015 	stw	r16,0(sp)
  80aea8:	a0a1883a 	add	r16,r20,r2
  80aeac:	dd400515 	stw	r21,20(sp)
  80aeb0:	857fff17 	ldw	r21,-4(r16)
  80aeb4:	dc400115 	stw	r17,4(sp)
  80aeb8:	dfc00615 	stw	ra,24(sp)
  80aebc:	a809883a 	mov	r4,r21
  80aec0:	2823883a 	mov	r17,r5
  80aec4:	dcc00315 	stw	r19,12(sp)
  80aec8:	dc800215 	stw	r18,8(sp)
  80aecc:	080ac780 	call	80ac78 <__hi0bits>
  80aed0:	100b883a 	mov	r5,r2
  80aed4:	00800804 	movi	r2,32
  80aed8:	1145c83a 	sub	r2,r2,r5
  80aedc:	88800015 	stw	r2,0(r17)
  80aee0:	00800284 	movi	r2,10
  80aee4:	80ffff04 	addi	r3,r16,-4
  80aee8:	11401416 	blt	r2,r5,80af3c <__b2d+0xb0>
  80aeec:	008002c4 	movi	r2,11
  80aef0:	1149c83a 	sub	r4,r2,r5
  80aef4:	a0c02736 	bltu	r20,r3,80af94 <__b2d+0x108>
  80aef8:	000d883a 	mov	r6,zero
  80aefc:	28800544 	addi	r2,r5,21
  80af00:	a906d83a 	srl	r3,r21,r4
  80af04:	a884983a 	sll	r2,r21,r2
  80af08:	1ccffc34 	orhi	r19,r3,16368
  80af0c:	11a4b03a 	or	r18,r2,r6
  80af10:	9005883a 	mov	r2,r18
  80af14:	9807883a 	mov	r3,r19
  80af18:	dfc00617 	ldw	ra,24(sp)
  80af1c:	dd400517 	ldw	r21,20(sp)
  80af20:	dd000417 	ldw	r20,16(sp)
  80af24:	dcc00317 	ldw	r19,12(sp)
  80af28:	dc800217 	ldw	r18,8(sp)
  80af2c:	dc400117 	ldw	r17,4(sp)
  80af30:	dc000017 	ldw	r16,0(sp)
  80af34:	dec00704 	addi	sp,sp,28
  80af38:	f800283a 	ret
  80af3c:	a0c00e36 	bltu	r20,r3,80af78 <__b2d+0xec>
  80af40:	293ffd44 	addi	r4,r5,-11
  80af44:	000d883a 	mov	r6,zero
  80af48:	20000f26 	beq	r4,zero,80af88 <__b2d+0xfc>
  80af4c:	00800804 	movi	r2,32
  80af50:	110bc83a 	sub	r5,r2,r4
  80af54:	a0c01236 	bltu	r20,r3,80afa0 <__b2d+0x114>
  80af58:	000f883a 	mov	r7,zero
  80af5c:	a904983a 	sll	r2,r21,r4
  80af60:	3146d83a 	srl	r3,r6,r5
  80af64:	3108983a 	sll	r4,r6,r4
  80af68:	108ffc34 	orhi	r2,r2,16368
  80af6c:	18a6b03a 	or	r19,r3,r2
  80af70:	3924b03a 	or	r18,r7,r4
  80af74:	003fe606 	br	80af10 <__b2d+0x84>
  80af78:	293ffd44 	addi	r4,r5,-11
  80af7c:	81bffe17 	ldw	r6,-8(r16)
  80af80:	80fffe04 	addi	r3,r16,-8
  80af84:	203ff11e 	bne	r4,zero,80af4c <__b2d+0xc0>
  80af88:	accffc34 	orhi	r19,r21,16368
  80af8c:	3025883a 	mov	r18,r6
  80af90:	003fdf06 	br	80af10 <__b2d+0x84>
  80af94:	18bfff17 	ldw	r2,-4(r3)
  80af98:	110cd83a 	srl	r6,r2,r4
  80af9c:	003fd706 	br	80aefc <__b2d+0x70>
  80afa0:	18bfff17 	ldw	r2,-4(r3)
  80afa4:	114ed83a 	srl	r7,r2,r5
  80afa8:	003fec06 	br	80af5c <__b2d+0xd0>

0080afac <__ratio>:
  80afac:	defff904 	addi	sp,sp,-28
  80afb0:	dc400215 	stw	r17,8(sp)
  80afb4:	2823883a 	mov	r17,r5
  80afb8:	d80b883a 	mov	r5,sp
  80afbc:	dfc00615 	stw	ra,24(sp)
  80afc0:	dd000515 	stw	r20,20(sp)
  80afc4:	dcc00415 	stw	r19,16(sp)
  80afc8:	dc800315 	stw	r18,12(sp)
  80afcc:	2025883a 	mov	r18,r4
  80afd0:	080ae8c0 	call	80ae8c <__b2d>
  80afd4:	8809883a 	mov	r4,r17
  80afd8:	d9400104 	addi	r5,sp,4
  80afdc:	1027883a 	mov	r19,r2
  80afe0:	1829883a 	mov	r20,r3
  80afe4:	080ae8c0 	call	80ae8c <__b2d>
  80afe8:	89000417 	ldw	r4,16(r17)
  80afec:	91c00417 	ldw	r7,16(r18)
  80aff0:	d9800117 	ldw	r6,4(sp)
  80aff4:	180b883a 	mov	r5,r3
  80aff8:	390fc83a 	sub	r7,r7,r4
  80affc:	1009883a 	mov	r4,r2
  80b000:	d8800017 	ldw	r2,0(sp)
  80b004:	380e917a 	slli	r7,r7,5
  80b008:	2011883a 	mov	r8,r4
  80b00c:	1185c83a 	sub	r2,r2,r6
  80b010:	11c5883a 	add	r2,r2,r7
  80b014:	1006953a 	slli	r3,r2,20
  80b018:	2813883a 	mov	r9,r5
  80b01c:	00800d0e 	bge	zero,r2,80b054 <__ratio+0xa8>
  80b020:	1d29883a 	add	r20,r3,r20
  80b024:	a00b883a 	mov	r5,r20
  80b028:	480f883a 	mov	r7,r9
  80b02c:	9809883a 	mov	r4,r19
  80b030:	400d883a 	mov	r6,r8
  80b034:	08018700 	call	801870 <__divdf3>
  80b038:	dfc00617 	ldw	ra,24(sp)
  80b03c:	dd000517 	ldw	r20,20(sp)
  80b040:	dcc00417 	ldw	r19,16(sp)
  80b044:	dc800317 	ldw	r18,12(sp)
  80b048:	dc400217 	ldw	r17,8(sp)
  80b04c:	dec00704 	addi	sp,sp,28
  80b050:	f800283a 	ret
  80b054:	28d3c83a 	sub	r9,r5,r3
  80b058:	003ff206 	br	80b024 <__ratio+0x78>

0080b05c <_mprec_log10>:
  80b05c:	defffe04 	addi	sp,sp,-8
  80b060:	008005c4 	movi	r2,23
  80b064:	dc000015 	stw	r16,0(sp)
  80b068:	dfc00115 	stw	ra,4(sp)
  80b06c:	2021883a 	mov	r16,r4
  80b070:	11000c16 	blt	r2,r4,80b0a4 <_mprec_log10+0x48>
  80b074:	200490fa 	slli	r2,r4,3
  80b078:	00c02074 	movhi	r3,129
  80b07c:	18d3db04 	addi	r3,r3,20332
  80b080:	10c5883a 	add	r2,r2,r3
  80b084:	12400117 	ldw	r9,4(r2)
  80b088:	12000017 	ldw	r8,0(r2)
  80b08c:	4807883a 	mov	r3,r9
  80b090:	4005883a 	mov	r2,r8
  80b094:	dfc00117 	ldw	ra,4(sp)
  80b098:	dc000017 	ldw	r16,0(sp)
  80b09c:	dec00204 	addi	sp,sp,8
  80b0a0:	f800283a 	ret
  80b0a4:	0011883a 	mov	r8,zero
  80b0a8:	024ffc34 	movhi	r9,16368
  80b0ac:	0005883a 	mov	r2,zero
  80b0b0:	00d00934 	movhi	r3,16420
  80b0b4:	480b883a 	mov	r5,r9
  80b0b8:	4009883a 	mov	r4,r8
  80b0bc:	180f883a 	mov	r7,r3
  80b0c0:	100d883a 	mov	r6,r2
  80b0c4:	08109100 	call	810910 <__muldf3>
  80b0c8:	843fffc4 	addi	r16,r16,-1
  80b0cc:	1011883a 	mov	r8,r2
  80b0d0:	1813883a 	mov	r9,r3
  80b0d4:	803ff51e 	bne	r16,zero,80b0ac <_mprec_log10+0x50>
  80b0d8:	4005883a 	mov	r2,r8
  80b0dc:	4807883a 	mov	r3,r9
  80b0e0:	dfc00117 	ldw	ra,4(sp)
  80b0e4:	dc000017 	ldw	r16,0(sp)
  80b0e8:	dec00204 	addi	sp,sp,8
  80b0ec:	f800283a 	ret

0080b0f0 <__copybits>:
  80b0f0:	297fffc4 	addi	r5,r5,-1
  80b0f4:	30800417 	ldw	r2,16(r6)
  80b0f8:	280bd17a 	srai	r5,r5,5
  80b0fc:	31800504 	addi	r6,r6,20
  80b100:	1085883a 	add	r2,r2,r2
  80b104:	294b883a 	add	r5,r5,r5
  80b108:	294b883a 	add	r5,r5,r5
  80b10c:	1085883a 	add	r2,r2,r2
  80b110:	290b883a 	add	r5,r5,r4
  80b114:	3087883a 	add	r3,r6,r2
  80b118:	29400104 	addi	r5,r5,4
  80b11c:	30c0052e 	bgeu	r6,r3,80b134 <__copybits+0x44>
  80b120:	30800017 	ldw	r2,0(r6)
  80b124:	31800104 	addi	r6,r6,4
  80b128:	20800015 	stw	r2,0(r4)
  80b12c:	21000104 	addi	r4,r4,4
  80b130:	30fffb36 	bltu	r6,r3,80b120 <__copybits+0x30>
  80b134:	2140032e 	bgeu	r4,r5,80b144 <__copybits+0x54>
  80b138:	20000015 	stw	zero,0(r4)
  80b13c:	21000104 	addi	r4,r4,4
  80b140:	217ffd36 	bltu	r4,r5,80b138 <__copybits+0x48>
  80b144:	f800283a 	ret

0080b148 <__any_on>:
  80b148:	20800417 	ldw	r2,16(r4)
  80b14c:	2807d17a 	srai	r3,r5,5
  80b150:	21000504 	addi	r4,r4,20
  80b154:	10c00d0e 	bge	r2,r3,80b18c <__any_on+0x44>
  80b158:	1085883a 	add	r2,r2,r2
  80b15c:	1085883a 	add	r2,r2,r2
  80b160:	208d883a 	add	r6,r4,r2
  80b164:	2180182e 	bgeu	r4,r6,80b1c8 <__any_on+0x80>
  80b168:	30bfff17 	ldw	r2,-4(r6)
  80b16c:	30ffff04 	addi	r3,r6,-4
  80b170:	1000041e 	bne	r2,zero,80b184 <__any_on+0x3c>
  80b174:	20c0142e 	bgeu	r4,r3,80b1c8 <__any_on+0x80>
  80b178:	18ffff04 	addi	r3,r3,-4
  80b17c:	18800017 	ldw	r2,0(r3)
  80b180:	103ffc26 	beq	r2,zero,80b174 <__any_on+0x2c>
  80b184:	00800044 	movi	r2,1
  80b188:	f800283a 	ret
  80b18c:	18800a0e 	bge	r3,r2,80b1b8 <__any_on+0x70>
  80b190:	294007cc 	andi	r5,r5,31
  80b194:	28000826 	beq	r5,zero,80b1b8 <__any_on+0x70>
  80b198:	18c5883a 	add	r2,r3,r3
  80b19c:	1085883a 	add	r2,r2,r2
  80b1a0:	208d883a 	add	r6,r4,r2
  80b1a4:	30c00017 	ldw	r3,0(r6)
  80b1a8:	1944d83a 	srl	r2,r3,r5
  80b1ac:	1144983a 	sll	r2,r2,r5
  80b1b0:	18bff41e 	bne	r3,r2,80b184 <__any_on+0x3c>
  80b1b4:	003feb06 	br	80b164 <__any_on+0x1c>
  80b1b8:	18c5883a 	add	r2,r3,r3
  80b1bc:	1085883a 	add	r2,r2,r2
  80b1c0:	208d883a 	add	r6,r4,r2
  80b1c4:	003fe706 	br	80b164 <__any_on+0x1c>
  80b1c8:	0005883a 	mov	r2,zero
  80b1cc:	f800283a 	ret

0080b1d0 <_Balloc>:
  80b1d0:	20c01317 	ldw	r3,76(r4)
  80b1d4:	defffb04 	addi	sp,sp,-20
  80b1d8:	dcc00315 	stw	r19,12(sp)
  80b1dc:	dc800215 	stw	r18,8(sp)
  80b1e0:	dfc00415 	stw	ra,16(sp)
  80b1e4:	2825883a 	mov	r18,r5
  80b1e8:	dc400115 	stw	r17,4(sp)
  80b1ec:	dc000015 	stw	r16,0(sp)
  80b1f0:	2027883a 	mov	r19,r4
  80b1f4:	01800404 	movi	r6,16
  80b1f8:	01400104 	movi	r5,4
  80b1fc:	18001726 	beq	r3,zero,80b25c <_Balloc+0x8c>
  80b200:	01400044 	movi	r5,1
  80b204:	9485883a 	add	r2,r18,r18
  80b208:	2ca2983a 	sll	r17,r5,r18
  80b20c:	1085883a 	add	r2,r2,r2
  80b210:	10c7883a 	add	r3,r2,r3
  80b214:	1c000017 	ldw	r16,0(r3)
  80b218:	8c4d883a 	add	r6,r17,r17
  80b21c:	318d883a 	add	r6,r6,r6
  80b220:	9809883a 	mov	r4,r19
  80b224:	31800504 	addi	r6,r6,20
  80b228:	80001226 	beq	r16,zero,80b274 <_Balloc+0xa4>
  80b22c:	80800017 	ldw	r2,0(r16)
  80b230:	18800015 	stw	r2,0(r3)
  80b234:	80000415 	stw	zero,16(r16)
  80b238:	80000315 	stw	zero,12(r16)
  80b23c:	8005883a 	mov	r2,r16
  80b240:	dfc00417 	ldw	ra,16(sp)
  80b244:	dcc00317 	ldw	r19,12(sp)
  80b248:	dc800217 	ldw	r18,8(sp)
  80b24c:	dc400117 	ldw	r17,4(sp)
  80b250:	dc000017 	ldw	r16,0(sp)
  80b254:	dec00504 	addi	sp,sp,20
  80b258:	f800283a 	ret
  80b25c:	080217c0 	call	80217c <_calloc_r>
  80b260:	1007883a 	mov	r3,r2
  80b264:	0021883a 	mov	r16,zero
  80b268:	98801315 	stw	r2,76(r19)
  80b26c:	103fe41e 	bne	r2,zero,80b200 <_Balloc+0x30>
  80b270:	003ff206 	br	80b23c <_Balloc+0x6c>
  80b274:	080217c0 	call	80217c <_calloc_r>
  80b278:	103ff026 	beq	r2,zero,80b23c <_Balloc+0x6c>
  80b27c:	1021883a 	mov	r16,r2
  80b280:	14800115 	stw	r18,4(r2)
  80b284:	14400215 	stw	r17,8(r2)
  80b288:	003fea06 	br	80b234 <_Balloc+0x64>

0080b28c <__d2b>:
  80b28c:	defff504 	addi	sp,sp,-44
  80b290:	dcc00515 	stw	r19,20(sp)
  80b294:	04c00044 	movi	r19,1
  80b298:	dc000215 	stw	r16,8(sp)
  80b29c:	2821883a 	mov	r16,r5
  80b2a0:	980b883a 	mov	r5,r19
  80b2a4:	ddc00915 	stw	r23,36(sp)
  80b2a8:	dd800815 	stw	r22,32(sp)
  80b2ac:	dd400715 	stw	r21,28(sp)
  80b2b0:	dd000615 	stw	r20,24(sp)
  80b2b4:	dc800415 	stw	r18,16(sp)
  80b2b8:	dc400315 	stw	r17,12(sp)
  80b2bc:	dfc00a15 	stw	ra,40(sp)
  80b2c0:	3023883a 	mov	r17,r6
  80b2c4:	382d883a 	mov	r22,r7
  80b2c8:	ddc00b17 	ldw	r23,44(sp)
  80b2cc:	080b1d00 	call	80b1d0 <_Balloc>
  80b2d0:	1025883a 	mov	r18,r2
  80b2d4:	00a00034 	movhi	r2,32768
  80b2d8:	10bfffc4 	addi	r2,r2,-1
  80b2dc:	8888703a 	and	r4,r17,r2
  80b2e0:	202ad53a 	srli	r21,r4,20
  80b2e4:	00800434 	movhi	r2,16
  80b2e8:	10bfffc4 	addi	r2,r2,-1
  80b2ec:	8886703a 	and	r3,r17,r2
  80b2f0:	a829003a 	cmpeq	r20,r21,zero
  80b2f4:	800b883a 	mov	r5,r16
  80b2f8:	d8c00115 	stw	r3,4(sp)
  80b2fc:	94000504 	addi	r16,r18,20
  80b300:	a000021e 	bne	r20,zero,80b30c <__d2b+0x80>
  80b304:	18c00434 	orhi	r3,r3,16
  80b308:	d8c00115 	stw	r3,4(sp)
  80b30c:	28002726 	beq	r5,zero,80b3ac <__d2b+0x120>
  80b310:	d809883a 	mov	r4,sp
  80b314:	d9400015 	stw	r5,0(sp)
  80b318:	080ace80 	call	80ace8 <__lo0bits>
  80b31c:	100d883a 	mov	r6,r2
  80b320:	10003526 	beq	r2,zero,80b3f8 <__d2b+0x16c>
  80b324:	d8c00117 	ldw	r3,4(sp)
  80b328:	00800804 	movi	r2,32
  80b32c:	1185c83a 	sub	r2,r2,r6
  80b330:	d9000017 	ldw	r4,0(sp)
  80b334:	1886983a 	sll	r3,r3,r2
  80b338:	1906b03a 	or	r3,r3,r4
  80b33c:	90c00515 	stw	r3,20(r18)
  80b340:	d8c00117 	ldw	r3,4(sp)
  80b344:	1986d83a 	srl	r3,r3,r6
  80b348:	d8c00115 	stw	r3,4(sp)
  80b34c:	180b003a 	cmpeq	r5,r3,zero
  80b350:	00800084 	movi	r2,2
  80b354:	114bc83a 	sub	r5,r2,r5
  80b358:	80c00115 	stw	r3,4(r16)
  80b35c:	91400415 	stw	r5,16(r18)
  80b360:	a0001a1e 	bne	r20,zero,80b3cc <__d2b+0x140>
  80b364:	3545883a 	add	r2,r6,r21
  80b368:	10bef344 	addi	r2,r2,-1075
  80b36c:	00c00d44 	movi	r3,53
  80b370:	b0800015 	stw	r2,0(r22)
  80b374:	1987c83a 	sub	r3,r3,r6
  80b378:	b8c00015 	stw	r3,0(r23)
  80b37c:	9005883a 	mov	r2,r18
  80b380:	dfc00a17 	ldw	ra,40(sp)
  80b384:	ddc00917 	ldw	r23,36(sp)
  80b388:	dd800817 	ldw	r22,32(sp)
  80b38c:	dd400717 	ldw	r21,28(sp)
  80b390:	dd000617 	ldw	r20,24(sp)
  80b394:	dcc00517 	ldw	r19,20(sp)
  80b398:	dc800417 	ldw	r18,16(sp)
  80b39c:	dc400317 	ldw	r17,12(sp)
  80b3a0:	dc000217 	ldw	r16,8(sp)
  80b3a4:	dec00b04 	addi	sp,sp,44
  80b3a8:	f800283a 	ret
  80b3ac:	d9000104 	addi	r4,sp,4
  80b3b0:	080ace80 	call	80ace8 <__lo0bits>
  80b3b4:	11800804 	addi	r6,r2,32
  80b3b8:	d8800117 	ldw	r2,4(sp)
  80b3bc:	94c00415 	stw	r19,16(r18)
  80b3c0:	980b883a 	mov	r5,r19
  80b3c4:	90800515 	stw	r2,20(r18)
  80b3c8:	a03fe626 	beq	r20,zero,80b364 <__d2b+0xd8>
  80b3cc:	2945883a 	add	r2,r5,r5
  80b3d0:	1085883a 	add	r2,r2,r2
  80b3d4:	1405883a 	add	r2,r2,r16
  80b3d8:	113fff17 	ldw	r4,-4(r2)
  80b3dc:	30fef384 	addi	r3,r6,-1074
  80b3e0:	2820917a 	slli	r16,r5,5
  80b3e4:	b0c00015 	stw	r3,0(r22)
  80b3e8:	080ac780 	call	80ac78 <__hi0bits>
  80b3ec:	80a1c83a 	sub	r16,r16,r2
  80b3f0:	bc000015 	stw	r16,0(r23)
  80b3f4:	003fe106 	br	80b37c <__d2b+0xf0>
  80b3f8:	d8800017 	ldw	r2,0(sp)
  80b3fc:	90800515 	stw	r2,20(r18)
  80b400:	d8c00117 	ldw	r3,4(sp)
  80b404:	003fd106 	br	80b34c <__d2b+0xc0>

0080b408 <__mdiff>:
  80b408:	defffb04 	addi	sp,sp,-20
  80b40c:	dc000015 	stw	r16,0(sp)
  80b410:	2821883a 	mov	r16,r5
  80b414:	dc800215 	stw	r18,8(sp)
  80b418:	300b883a 	mov	r5,r6
  80b41c:	2025883a 	mov	r18,r4
  80b420:	8009883a 	mov	r4,r16
  80b424:	dc400115 	stw	r17,4(sp)
  80b428:	dfc00415 	stw	ra,16(sp)
  80b42c:	dcc00315 	stw	r19,12(sp)
  80b430:	3023883a 	mov	r17,r6
  80b434:	080adac0 	call	80adac <__mcmp>
  80b438:	10004226 	beq	r2,zero,80b544 <__mdiff+0x13c>
  80b43c:	10005016 	blt	r2,zero,80b580 <__mdiff+0x178>
  80b440:	0027883a 	mov	r19,zero
  80b444:	81400117 	ldw	r5,4(r16)
  80b448:	9009883a 	mov	r4,r18
  80b44c:	080b1d00 	call	80b1d0 <_Balloc>
  80b450:	1019883a 	mov	r12,r2
  80b454:	82800417 	ldw	r10,16(r16)
  80b458:	88800417 	ldw	r2,16(r17)
  80b45c:	81800504 	addi	r6,r16,20
  80b460:	5287883a 	add	r3,r10,r10
  80b464:	1085883a 	add	r2,r2,r2
  80b468:	18c7883a 	add	r3,r3,r3
  80b46c:	1085883a 	add	r2,r2,r2
  80b470:	8a000504 	addi	r8,r17,20
  80b474:	64c00315 	stw	r19,12(r12)
  80b478:	30db883a 	add	r13,r6,r3
  80b47c:	4097883a 	add	r11,r8,r2
  80b480:	61c00504 	addi	r7,r12,20
  80b484:	0013883a 	mov	r9,zero
  80b488:	31000017 	ldw	r4,0(r6)
  80b48c:	41400017 	ldw	r5,0(r8)
  80b490:	42000104 	addi	r8,r8,4
  80b494:	20bfffcc 	andi	r2,r4,65535
  80b498:	28ffffcc 	andi	r3,r5,65535
  80b49c:	10c5c83a 	sub	r2,r2,r3
  80b4a0:	1245883a 	add	r2,r2,r9
  80b4a4:	2008d43a 	srli	r4,r4,16
  80b4a8:	280ad43a 	srli	r5,r5,16
  80b4ac:	1007d43a 	srai	r3,r2,16
  80b4b0:	3880000d 	sth	r2,0(r7)
  80b4b4:	2149c83a 	sub	r4,r4,r5
  80b4b8:	20c9883a 	add	r4,r4,r3
  80b4bc:	3900008d 	sth	r4,2(r7)
  80b4c0:	31800104 	addi	r6,r6,4
  80b4c4:	39c00104 	addi	r7,r7,4
  80b4c8:	2013d43a 	srai	r9,r4,16
  80b4cc:	42ffee36 	bltu	r8,r11,80b488 <__mdiff+0x80>
  80b4d0:	33400c2e 	bgeu	r6,r13,80b504 <__mdiff+0xfc>
  80b4d4:	30800017 	ldw	r2,0(r6)
  80b4d8:	31800104 	addi	r6,r6,4
  80b4dc:	10ffffcc 	andi	r3,r2,65535
  80b4e0:	1a47883a 	add	r3,r3,r9
  80b4e4:	1004d43a 	srli	r2,r2,16
  80b4e8:	1809d43a 	srai	r4,r3,16
  80b4ec:	38c0000d 	sth	r3,0(r7)
  80b4f0:	1105883a 	add	r2,r2,r4
  80b4f4:	3880008d 	sth	r2,2(r7)
  80b4f8:	1013d43a 	srai	r9,r2,16
  80b4fc:	39c00104 	addi	r7,r7,4
  80b500:	337ff436 	bltu	r6,r13,80b4d4 <__mdiff+0xcc>
  80b504:	38bfff17 	ldw	r2,-4(r7)
  80b508:	38ffff04 	addi	r3,r7,-4
  80b50c:	1000041e 	bne	r2,zero,80b520 <__mdiff+0x118>
  80b510:	18ffff04 	addi	r3,r3,-4
  80b514:	18800017 	ldw	r2,0(r3)
  80b518:	52bfffc4 	addi	r10,r10,-1
  80b51c:	103ffc26 	beq	r2,zero,80b510 <__mdiff+0x108>
  80b520:	6005883a 	mov	r2,r12
  80b524:	62800415 	stw	r10,16(r12)
  80b528:	dfc00417 	ldw	ra,16(sp)
  80b52c:	dcc00317 	ldw	r19,12(sp)
  80b530:	dc800217 	ldw	r18,8(sp)
  80b534:	dc400117 	ldw	r17,4(sp)
  80b538:	dc000017 	ldw	r16,0(sp)
  80b53c:	dec00504 	addi	sp,sp,20
  80b540:	f800283a 	ret
  80b544:	9009883a 	mov	r4,r18
  80b548:	000b883a 	mov	r5,zero
  80b54c:	080b1d00 	call	80b1d0 <_Balloc>
  80b550:	1019883a 	mov	r12,r2
  80b554:	00800044 	movi	r2,1
  80b558:	60800415 	stw	r2,16(r12)
  80b55c:	6005883a 	mov	r2,r12
  80b560:	60000515 	stw	zero,20(r12)
  80b564:	dfc00417 	ldw	ra,16(sp)
  80b568:	dcc00317 	ldw	r19,12(sp)
  80b56c:	dc800217 	ldw	r18,8(sp)
  80b570:	dc400117 	ldw	r17,4(sp)
  80b574:	dc000017 	ldw	r16,0(sp)
  80b578:	dec00504 	addi	sp,sp,20
  80b57c:	f800283a 	ret
  80b580:	880d883a 	mov	r6,r17
  80b584:	04c00044 	movi	r19,1
  80b588:	8023883a 	mov	r17,r16
  80b58c:	3021883a 	mov	r16,r6
  80b590:	003fac06 	br	80b444 <__mdiff+0x3c>

0080b594 <__lshift>:
  80b594:	defff904 	addi	sp,sp,-28
  80b598:	28800417 	ldw	r2,16(r5)
  80b59c:	dc000015 	stw	r16,0(sp)
  80b5a0:	3021d17a 	srai	r16,r6,5
  80b5a4:	28c00217 	ldw	r3,8(r5)
  80b5a8:	10800044 	addi	r2,r2,1
  80b5ac:	dc400115 	stw	r17,4(sp)
  80b5b0:	80a3883a 	add	r17,r16,r2
  80b5b4:	dd400515 	stw	r21,20(sp)
  80b5b8:	dd000415 	stw	r20,16(sp)
  80b5bc:	dc800215 	stw	r18,8(sp)
  80b5c0:	dfc00615 	stw	ra,24(sp)
  80b5c4:	2825883a 	mov	r18,r5
  80b5c8:	dcc00315 	stw	r19,12(sp)
  80b5cc:	3029883a 	mov	r20,r6
  80b5d0:	202b883a 	mov	r21,r4
  80b5d4:	29400117 	ldw	r5,4(r5)
  80b5d8:	1c40030e 	bge	r3,r17,80b5e8 <__lshift+0x54>
  80b5dc:	18c7883a 	add	r3,r3,r3
  80b5e0:	29400044 	addi	r5,r5,1
  80b5e4:	1c7ffd16 	blt	r3,r17,80b5dc <__lshift+0x48>
  80b5e8:	a809883a 	mov	r4,r21
  80b5ec:	080b1d00 	call	80b1d0 <_Balloc>
  80b5f0:	1027883a 	mov	r19,r2
  80b5f4:	11400504 	addi	r5,r2,20
  80b5f8:	0400090e 	bge	zero,r16,80b620 <__lshift+0x8c>
  80b5fc:	2805883a 	mov	r2,r5
  80b600:	0007883a 	mov	r3,zero
  80b604:	18c00044 	addi	r3,r3,1
  80b608:	10000015 	stw	zero,0(r2)
  80b60c:	10800104 	addi	r2,r2,4
  80b610:	80fffc1e 	bne	r16,r3,80b604 <__lshift+0x70>
  80b614:	8405883a 	add	r2,r16,r16
  80b618:	1085883a 	add	r2,r2,r2
  80b61c:	288b883a 	add	r5,r5,r2
  80b620:	90800417 	ldw	r2,16(r18)
  80b624:	91000504 	addi	r4,r18,20
  80b628:	a18007cc 	andi	r6,r20,31
  80b62c:	1085883a 	add	r2,r2,r2
  80b630:	1085883a 	add	r2,r2,r2
  80b634:	208f883a 	add	r7,r4,r2
  80b638:	30001e26 	beq	r6,zero,80b6b4 <__lshift+0x120>
  80b63c:	00800804 	movi	r2,32
  80b640:	1191c83a 	sub	r8,r2,r6
  80b644:	0007883a 	mov	r3,zero
  80b648:	20800017 	ldw	r2,0(r4)
  80b64c:	1184983a 	sll	r2,r2,r6
  80b650:	1884b03a 	or	r2,r3,r2
  80b654:	28800015 	stw	r2,0(r5)
  80b658:	20c00017 	ldw	r3,0(r4)
  80b65c:	21000104 	addi	r4,r4,4
  80b660:	29400104 	addi	r5,r5,4
  80b664:	1a06d83a 	srl	r3,r3,r8
  80b668:	21fff736 	bltu	r4,r7,80b648 <__lshift+0xb4>
  80b66c:	28c00015 	stw	r3,0(r5)
  80b670:	18000126 	beq	r3,zero,80b678 <__lshift+0xe4>
  80b674:	8c400044 	addi	r17,r17,1
  80b678:	88bfffc4 	addi	r2,r17,-1
  80b67c:	98800415 	stw	r2,16(r19)
  80b680:	a809883a 	mov	r4,r21
  80b684:	900b883a 	mov	r5,r18
  80b688:	080ac500 	call	80ac50 <_Bfree>
  80b68c:	9805883a 	mov	r2,r19
  80b690:	dfc00617 	ldw	ra,24(sp)
  80b694:	dd400517 	ldw	r21,20(sp)
  80b698:	dd000417 	ldw	r20,16(sp)
  80b69c:	dcc00317 	ldw	r19,12(sp)
  80b6a0:	dc800217 	ldw	r18,8(sp)
  80b6a4:	dc400117 	ldw	r17,4(sp)
  80b6a8:	dc000017 	ldw	r16,0(sp)
  80b6ac:	dec00704 	addi	sp,sp,28
  80b6b0:	f800283a 	ret
  80b6b4:	20800017 	ldw	r2,0(r4)
  80b6b8:	21000104 	addi	r4,r4,4
  80b6bc:	28800015 	stw	r2,0(r5)
  80b6c0:	29400104 	addi	r5,r5,4
  80b6c4:	21ffec2e 	bgeu	r4,r7,80b678 <__lshift+0xe4>
  80b6c8:	20800017 	ldw	r2,0(r4)
  80b6cc:	21000104 	addi	r4,r4,4
  80b6d0:	28800015 	stw	r2,0(r5)
  80b6d4:	29400104 	addi	r5,r5,4
  80b6d8:	21fff636 	bltu	r4,r7,80b6b4 <__lshift+0x120>
  80b6dc:	003fe606 	br	80b678 <__lshift+0xe4>

0080b6e0 <__multiply>:
  80b6e0:	defff004 	addi	sp,sp,-64
  80b6e4:	dc800815 	stw	r18,32(sp)
  80b6e8:	dc400715 	stw	r17,28(sp)
  80b6ec:	2c800417 	ldw	r18,16(r5)
  80b6f0:	34400417 	ldw	r17,16(r6)
  80b6f4:	dcc00915 	stw	r19,36(sp)
  80b6f8:	dc000615 	stw	r16,24(sp)
  80b6fc:	dfc00f15 	stw	ra,60(sp)
  80b700:	df000e15 	stw	fp,56(sp)
  80b704:	ddc00d15 	stw	r23,52(sp)
  80b708:	dd800c15 	stw	r22,48(sp)
  80b70c:	dd400b15 	stw	r21,44(sp)
  80b710:	dd000a15 	stw	r20,40(sp)
  80b714:	2821883a 	mov	r16,r5
  80b718:	3027883a 	mov	r19,r6
  80b71c:	9440040e 	bge	r18,r17,80b730 <__multiply+0x50>
  80b720:	8825883a 	mov	r18,r17
  80b724:	2c400417 	ldw	r17,16(r5)
  80b728:	2827883a 	mov	r19,r5
  80b72c:	3021883a 	mov	r16,r6
  80b730:	80800217 	ldw	r2,8(r16)
  80b734:	9447883a 	add	r3,r18,r17
  80b738:	d8c00415 	stw	r3,16(sp)
  80b73c:	81400117 	ldw	r5,4(r16)
  80b740:	10c0010e 	bge	r2,r3,80b748 <__multiply+0x68>
  80b744:	29400044 	addi	r5,r5,1
  80b748:	080b1d00 	call	80b1d0 <_Balloc>
  80b74c:	d8800515 	stw	r2,20(sp)
  80b750:	d9000417 	ldw	r4,16(sp)
  80b754:	d8c00517 	ldw	r3,20(sp)
  80b758:	2105883a 	add	r2,r4,r4
  80b75c:	1085883a 	add	r2,r2,r2
  80b760:	19000504 	addi	r4,r3,20
  80b764:	2085883a 	add	r2,r4,r2
  80b768:	d8800315 	stw	r2,12(sp)
  80b76c:	2080052e 	bgeu	r4,r2,80b784 <__multiply+0xa4>
  80b770:	2005883a 	mov	r2,r4
  80b774:	d8c00317 	ldw	r3,12(sp)
  80b778:	10000015 	stw	zero,0(r2)
  80b77c:	10800104 	addi	r2,r2,4
  80b780:	10fffc36 	bltu	r2,r3,80b774 <__multiply+0x94>
  80b784:	8c45883a 	add	r2,r17,r17
  80b788:	9487883a 	add	r3,r18,r18
  80b78c:	9dc00504 	addi	r23,r19,20
  80b790:	1085883a 	add	r2,r2,r2
  80b794:	84000504 	addi	r16,r16,20
  80b798:	18c7883a 	add	r3,r3,r3
  80b79c:	b885883a 	add	r2,r23,r2
  80b7a0:	dc000015 	stw	r16,0(sp)
  80b7a4:	d8800215 	stw	r2,8(sp)
  80b7a8:	80f9883a 	add	fp,r16,r3
  80b7ac:	b880432e 	bgeu	r23,r2,80b8bc <__multiply+0x1dc>
  80b7b0:	d9000115 	stw	r4,4(sp)
  80b7b4:	b9000017 	ldw	r4,0(r23)
  80b7b8:	253fffcc 	andi	r20,r4,65535
  80b7bc:	a0001a26 	beq	r20,zero,80b828 <__multiply+0x148>
  80b7c0:	dcc00017 	ldw	r19,0(sp)
  80b7c4:	dc800117 	ldw	r18,4(sp)
  80b7c8:	002b883a 	mov	r21,zero
  80b7cc:	9c400017 	ldw	r17,0(r19)
  80b7d0:	94000017 	ldw	r16,0(r18)
  80b7d4:	a009883a 	mov	r4,r20
  80b7d8:	897fffcc 	andi	r5,r17,65535
  80b7dc:	0801c5c0 	call	801c5c <__mulsi3>
  80b7e0:	880ad43a 	srli	r5,r17,16
  80b7e4:	80ffffcc 	andi	r3,r16,65535
  80b7e8:	a8c7883a 	add	r3,r21,r3
  80b7ec:	a009883a 	mov	r4,r20
  80b7f0:	10e3883a 	add	r17,r2,r3
  80b7f4:	8020d43a 	srli	r16,r16,16
  80b7f8:	0801c5c0 	call	801c5c <__mulsi3>
  80b7fc:	8806d43a 	srli	r3,r17,16
  80b800:	1405883a 	add	r2,r2,r16
  80b804:	9cc00104 	addi	r19,r19,4
  80b808:	1887883a 	add	r3,r3,r2
  80b80c:	90c0008d 	sth	r3,2(r18)
  80b810:	9440000d 	sth	r17,0(r18)
  80b814:	182ad43a 	srli	r21,r3,16
  80b818:	94800104 	addi	r18,r18,4
  80b81c:	9f3feb36 	bltu	r19,fp,80b7cc <__multiply+0xec>
  80b820:	95400015 	stw	r21,0(r18)
  80b824:	b9000017 	ldw	r4,0(r23)
  80b828:	202ad43a 	srli	r21,r4,16
  80b82c:	a8001c26 	beq	r21,zero,80b8a0 <__multiply+0x1c0>
  80b830:	d9000117 	ldw	r4,4(sp)
  80b834:	dd000017 	ldw	r20,0(sp)
  80b838:	002d883a 	mov	r22,zero
  80b83c:	24c00017 	ldw	r19,0(r4)
  80b840:	2025883a 	mov	r18,r4
  80b844:	9823883a 	mov	r17,r19
  80b848:	a4000017 	ldw	r16,0(r20)
  80b84c:	a809883a 	mov	r4,r21
  80b850:	a5000104 	addi	r20,r20,4
  80b854:	817fffcc 	andi	r5,r16,65535
  80b858:	0801c5c0 	call	801c5c <__mulsi3>
  80b85c:	8806d43a 	srli	r3,r17,16
  80b860:	800ad43a 	srli	r5,r16,16
  80b864:	94c0000d 	sth	r19,0(r18)
  80b868:	b0c7883a 	add	r3,r22,r3
  80b86c:	10e1883a 	add	r16,r2,r3
  80b870:	9400008d 	sth	r16,2(r18)
  80b874:	a809883a 	mov	r4,r21
  80b878:	94800104 	addi	r18,r18,4
  80b87c:	0801c5c0 	call	801c5c <__mulsi3>
  80b880:	94400017 	ldw	r17,0(r18)
  80b884:	8020d43a 	srli	r16,r16,16
  80b888:	88ffffcc 	andi	r3,r17,65535
  80b88c:	10c5883a 	add	r2,r2,r3
  80b890:	80a7883a 	add	r19,r16,r2
  80b894:	982cd43a 	srli	r22,r19,16
  80b898:	a73feb36 	bltu	r20,fp,80b848 <__multiply+0x168>
  80b89c:	94c00015 	stw	r19,0(r18)
  80b8a0:	d8800217 	ldw	r2,8(sp)
  80b8a4:	bdc00104 	addi	r23,r23,4
  80b8a8:	b880042e 	bgeu	r23,r2,80b8bc <__multiply+0x1dc>
  80b8ac:	d8c00117 	ldw	r3,4(sp)
  80b8b0:	18c00104 	addi	r3,r3,4
  80b8b4:	d8c00115 	stw	r3,4(sp)
  80b8b8:	003fbe06 	br	80b7b4 <__multiply+0xd4>
  80b8bc:	d9000417 	ldw	r4,16(sp)
  80b8c0:	01000c0e 	bge	zero,r4,80b8f4 <__multiply+0x214>
  80b8c4:	d8c00317 	ldw	r3,12(sp)
  80b8c8:	18bfff17 	ldw	r2,-4(r3)
  80b8cc:	18ffff04 	addi	r3,r3,-4
  80b8d0:	10000326 	beq	r2,zero,80b8e0 <__multiply+0x200>
  80b8d4:	00000706 	br	80b8f4 <__multiply+0x214>
  80b8d8:	18800017 	ldw	r2,0(r3)
  80b8dc:	1000051e 	bne	r2,zero,80b8f4 <__multiply+0x214>
  80b8e0:	d9000417 	ldw	r4,16(sp)
  80b8e4:	18ffff04 	addi	r3,r3,-4
  80b8e8:	213fffc4 	addi	r4,r4,-1
  80b8ec:	d9000415 	stw	r4,16(sp)
  80b8f0:	203ff91e 	bne	r4,zero,80b8d8 <__multiply+0x1f8>
  80b8f4:	d8800417 	ldw	r2,16(sp)
  80b8f8:	d8c00517 	ldw	r3,20(sp)
  80b8fc:	18800415 	stw	r2,16(r3)
  80b900:	1805883a 	mov	r2,r3
  80b904:	dfc00f17 	ldw	ra,60(sp)
  80b908:	df000e17 	ldw	fp,56(sp)
  80b90c:	ddc00d17 	ldw	r23,52(sp)
  80b910:	dd800c17 	ldw	r22,48(sp)
  80b914:	dd400b17 	ldw	r21,44(sp)
  80b918:	dd000a17 	ldw	r20,40(sp)
  80b91c:	dcc00917 	ldw	r19,36(sp)
  80b920:	dc800817 	ldw	r18,32(sp)
  80b924:	dc400717 	ldw	r17,28(sp)
  80b928:	dc000617 	ldw	r16,24(sp)
  80b92c:	dec01004 	addi	sp,sp,64
  80b930:	f800283a 	ret

0080b934 <__i2b>:
  80b934:	defffd04 	addi	sp,sp,-12
  80b938:	dc000015 	stw	r16,0(sp)
  80b93c:	04000044 	movi	r16,1
  80b940:	dc800115 	stw	r18,4(sp)
  80b944:	2825883a 	mov	r18,r5
  80b948:	800b883a 	mov	r5,r16
  80b94c:	dfc00215 	stw	ra,8(sp)
  80b950:	080b1d00 	call	80b1d0 <_Balloc>
  80b954:	14000415 	stw	r16,16(r2)
  80b958:	14800515 	stw	r18,20(r2)
  80b95c:	dfc00217 	ldw	ra,8(sp)
  80b960:	dc800117 	ldw	r18,4(sp)
  80b964:	dc000017 	ldw	r16,0(sp)
  80b968:	dec00304 	addi	sp,sp,12
  80b96c:	f800283a 	ret

0080b970 <__multadd>:
  80b970:	defff604 	addi	sp,sp,-40
  80b974:	dd800615 	stw	r22,24(sp)
  80b978:	2d800417 	ldw	r22,16(r5)
  80b97c:	df000815 	stw	fp,32(sp)
  80b980:	ddc00715 	stw	r23,28(sp)
  80b984:	dd400515 	stw	r21,20(sp)
  80b988:	dd000415 	stw	r20,16(sp)
  80b98c:	dcc00315 	stw	r19,12(sp)
  80b990:	dc800215 	stw	r18,8(sp)
  80b994:	dfc00915 	stw	ra,36(sp)
  80b998:	dc400115 	stw	r17,4(sp)
  80b99c:	dc000015 	stw	r16,0(sp)
  80b9a0:	282f883a 	mov	r23,r5
  80b9a4:	2039883a 	mov	fp,r4
  80b9a8:	302b883a 	mov	r21,r6
  80b9ac:	3829883a 	mov	r20,r7
  80b9b0:	2c800504 	addi	r18,r5,20
  80b9b4:	0027883a 	mov	r19,zero
  80b9b8:	94400017 	ldw	r17,0(r18)
  80b9bc:	a80b883a 	mov	r5,r21
  80b9c0:	9cc00044 	addi	r19,r19,1
  80b9c4:	893fffcc 	andi	r4,r17,65535
  80b9c8:	0801c5c0 	call	801c5c <__mulsi3>
  80b9cc:	8808d43a 	srli	r4,r17,16
  80b9d0:	1521883a 	add	r16,r2,r20
  80b9d4:	a80b883a 	mov	r5,r21
  80b9d8:	0801c5c0 	call	801c5c <__mulsi3>
  80b9dc:	8008d43a 	srli	r4,r16,16
  80b9e0:	843fffcc 	andi	r16,r16,65535
  80b9e4:	1105883a 	add	r2,r2,r4
  80b9e8:	1006943a 	slli	r3,r2,16
  80b9ec:	1028d43a 	srli	r20,r2,16
  80b9f0:	1c07883a 	add	r3,r3,r16
  80b9f4:	90c00015 	stw	r3,0(r18)
  80b9f8:	94800104 	addi	r18,r18,4
  80b9fc:	9dbfee16 	blt	r19,r22,80b9b8 <__multadd+0x48>
  80ba00:	a0000826 	beq	r20,zero,80ba24 <__multadd+0xb4>
  80ba04:	b8800217 	ldw	r2,8(r23)
  80ba08:	b080130e 	bge	r22,r2,80ba58 <__multadd+0xe8>
  80ba0c:	b585883a 	add	r2,r22,r22
  80ba10:	1085883a 	add	r2,r2,r2
  80ba14:	15c5883a 	add	r2,r2,r23
  80ba18:	b0c00044 	addi	r3,r22,1
  80ba1c:	15000515 	stw	r20,20(r2)
  80ba20:	b8c00415 	stw	r3,16(r23)
  80ba24:	b805883a 	mov	r2,r23
  80ba28:	dfc00917 	ldw	ra,36(sp)
  80ba2c:	df000817 	ldw	fp,32(sp)
  80ba30:	ddc00717 	ldw	r23,28(sp)
  80ba34:	dd800617 	ldw	r22,24(sp)
  80ba38:	dd400517 	ldw	r21,20(sp)
  80ba3c:	dd000417 	ldw	r20,16(sp)
  80ba40:	dcc00317 	ldw	r19,12(sp)
  80ba44:	dc800217 	ldw	r18,8(sp)
  80ba48:	dc400117 	ldw	r17,4(sp)
  80ba4c:	dc000017 	ldw	r16,0(sp)
  80ba50:	dec00a04 	addi	sp,sp,40
  80ba54:	f800283a 	ret
  80ba58:	b9400117 	ldw	r5,4(r23)
  80ba5c:	e009883a 	mov	r4,fp
  80ba60:	29400044 	addi	r5,r5,1
  80ba64:	080b1d00 	call	80b1d0 <_Balloc>
  80ba68:	b9800417 	ldw	r6,16(r23)
  80ba6c:	b9400304 	addi	r5,r23,12
  80ba70:	11000304 	addi	r4,r2,12
  80ba74:	318d883a 	add	r6,r6,r6
  80ba78:	318d883a 	add	r6,r6,r6
  80ba7c:	31800204 	addi	r6,r6,8
  80ba80:	1023883a 	mov	r17,r2
  80ba84:	08044e00 	call	8044e0 <memcpy>
  80ba88:	b80b883a 	mov	r5,r23
  80ba8c:	e009883a 	mov	r4,fp
  80ba90:	080ac500 	call	80ac50 <_Bfree>
  80ba94:	882f883a 	mov	r23,r17
  80ba98:	003fdc06 	br	80ba0c <__multadd+0x9c>

0080ba9c <__pow5mult>:
  80ba9c:	defffa04 	addi	sp,sp,-24
  80baa0:	308000cc 	andi	r2,r6,3
  80baa4:	dd000415 	stw	r20,16(sp)
  80baa8:	dcc00315 	stw	r19,12(sp)
  80baac:	dc000015 	stw	r16,0(sp)
  80bab0:	dfc00515 	stw	ra,20(sp)
  80bab4:	dc800215 	stw	r18,8(sp)
  80bab8:	dc400115 	stw	r17,4(sp)
  80babc:	3021883a 	mov	r16,r6
  80bac0:	2027883a 	mov	r19,r4
  80bac4:	2829883a 	mov	r20,r5
  80bac8:	10002b1e 	bne	r2,zero,80bb78 <__pow5mult+0xdc>
  80bacc:	8025d0ba 	srai	r18,r16,2
  80bad0:	90001b26 	beq	r18,zero,80bb40 <__pow5mult+0xa4>
  80bad4:	9c001217 	ldw	r16,72(r19)
  80bad8:	8000081e 	bne	r16,zero,80bafc <__pow5mult+0x60>
  80badc:	00003006 	br	80bba0 <__pow5mult+0x104>
  80bae0:	800b883a 	mov	r5,r16
  80bae4:	800d883a 	mov	r6,r16
  80bae8:	9809883a 	mov	r4,r19
  80baec:	90001426 	beq	r18,zero,80bb40 <__pow5mult+0xa4>
  80baf0:	80800017 	ldw	r2,0(r16)
  80baf4:	10001b26 	beq	r2,zero,80bb64 <__pow5mult+0xc8>
  80baf8:	1021883a 	mov	r16,r2
  80bafc:	9080004c 	andi	r2,r18,1
  80bb00:	1005003a 	cmpeq	r2,r2,zero
  80bb04:	9025d07a 	srai	r18,r18,1
  80bb08:	800d883a 	mov	r6,r16
  80bb0c:	9809883a 	mov	r4,r19
  80bb10:	a00b883a 	mov	r5,r20
  80bb14:	103ff21e 	bne	r2,zero,80bae0 <__pow5mult+0x44>
  80bb18:	080b6e00 	call	80b6e0 <__multiply>
  80bb1c:	a00b883a 	mov	r5,r20
  80bb20:	9809883a 	mov	r4,r19
  80bb24:	1023883a 	mov	r17,r2
  80bb28:	080ac500 	call	80ac50 <_Bfree>
  80bb2c:	8829883a 	mov	r20,r17
  80bb30:	800b883a 	mov	r5,r16
  80bb34:	800d883a 	mov	r6,r16
  80bb38:	9809883a 	mov	r4,r19
  80bb3c:	903fec1e 	bne	r18,zero,80baf0 <__pow5mult+0x54>
  80bb40:	a005883a 	mov	r2,r20
  80bb44:	dfc00517 	ldw	ra,20(sp)
  80bb48:	dd000417 	ldw	r20,16(sp)
  80bb4c:	dcc00317 	ldw	r19,12(sp)
  80bb50:	dc800217 	ldw	r18,8(sp)
  80bb54:	dc400117 	ldw	r17,4(sp)
  80bb58:	dc000017 	ldw	r16,0(sp)
  80bb5c:	dec00604 	addi	sp,sp,24
  80bb60:	f800283a 	ret
  80bb64:	080b6e00 	call	80b6e0 <__multiply>
  80bb68:	80800015 	stw	r2,0(r16)
  80bb6c:	1021883a 	mov	r16,r2
  80bb70:	10000015 	stw	zero,0(r2)
  80bb74:	003fe106 	br	80bafc <__pow5mult+0x60>
  80bb78:	1085883a 	add	r2,r2,r2
  80bb7c:	00c02074 	movhi	r3,129
  80bb80:	18d42104 	addi	r3,r3,20612
  80bb84:	1085883a 	add	r2,r2,r2
  80bb88:	10c5883a 	add	r2,r2,r3
  80bb8c:	11bfff17 	ldw	r6,-4(r2)
  80bb90:	000f883a 	mov	r7,zero
  80bb94:	080b9700 	call	80b970 <__multadd>
  80bb98:	1029883a 	mov	r20,r2
  80bb9c:	003fcb06 	br	80bacc <__pow5mult+0x30>
  80bba0:	9809883a 	mov	r4,r19
  80bba4:	01409c44 	movi	r5,625
  80bba8:	080b9340 	call	80b934 <__i2b>
  80bbac:	98801215 	stw	r2,72(r19)
  80bbb0:	1021883a 	mov	r16,r2
  80bbb4:	10000015 	stw	zero,0(r2)
  80bbb8:	003fd006 	br	80bafc <__pow5mult+0x60>

0080bbbc <__s2b>:
  80bbbc:	defff904 	addi	sp,sp,-28
  80bbc0:	dcc00315 	stw	r19,12(sp)
  80bbc4:	dc800215 	stw	r18,8(sp)
  80bbc8:	2827883a 	mov	r19,r5
  80bbcc:	2025883a 	mov	r18,r4
  80bbd0:	01400244 	movi	r5,9
  80bbd4:	39000204 	addi	r4,r7,8
  80bbd8:	dd000415 	stw	r20,16(sp)
  80bbdc:	dc400115 	stw	r17,4(sp)
  80bbe0:	dfc00615 	stw	ra,24(sp)
  80bbe4:	dd400515 	stw	r21,20(sp)
  80bbe8:	dc000015 	stw	r16,0(sp)
  80bbec:	3829883a 	mov	r20,r7
  80bbf0:	3023883a 	mov	r17,r6
  80bbf4:	08112c40 	call	8112c4 <__divsi3>
  80bbf8:	00c00044 	movi	r3,1
  80bbfc:	1880350e 	bge	r3,r2,80bcd4 <__s2b+0x118>
  80bc00:	000b883a 	mov	r5,zero
  80bc04:	18c7883a 	add	r3,r3,r3
  80bc08:	29400044 	addi	r5,r5,1
  80bc0c:	18bffd16 	blt	r3,r2,80bc04 <__s2b+0x48>
  80bc10:	9009883a 	mov	r4,r18
  80bc14:	080b1d00 	call	80b1d0 <_Balloc>
  80bc18:	1011883a 	mov	r8,r2
  80bc1c:	d8800717 	ldw	r2,28(sp)
  80bc20:	00c00044 	movi	r3,1
  80bc24:	01800244 	movi	r6,9
  80bc28:	40800515 	stw	r2,20(r8)
  80bc2c:	40c00415 	stw	r3,16(r8)
  80bc30:	3440260e 	bge	r6,r17,80bccc <__s2b+0x110>
  80bc34:	3021883a 	mov	r16,r6
  80bc38:	99ab883a 	add	r21,r19,r6
  80bc3c:	9c05883a 	add	r2,r19,r16
  80bc40:	11c00007 	ldb	r7,0(r2)
  80bc44:	400b883a 	mov	r5,r8
  80bc48:	9009883a 	mov	r4,r18
  80bc4c:	39fff404 	addi	r7,r7,-48
  80bc50:	01800284 	movi	r6,10
  80bc54:	080b9700 	call	80b970 <__multadd>
  80bc58:	84000044 	addi	r16,r16,1
  80bc5c:	1011883a 	mov	r8,r2
  80bc60:	8c3ff61e 	bne	r17,r16,80bc3c <__s2b+0x80>
  80bc64:	ac45883a 	add	r2,r21,r17
  80bc68:	117ffe04 	addi	r5,r2,-8
  80bc6c:	880d883a 	mov	r6,r17
  80bc70:	35000c0e 	bge	r6,r20,80bca4 <__s2b+0xe8>
  80bc74:	a185c83a 	sub	r2,r20,r6
  80bc78:	2821883a 	mov	r16,r5
  80bc7c:	28a3883a 	add	r17,r5,r2
  80bc80:	81c00007 	ldb	r7,0(r16)
  80bc84:	400b883a 	mov	r5,r8
  80bc88:	9009883a 	mov	r4,r18
  80bc8c:	39fff404 	addi	r7,r7,-48
  80bc90:	01800284 	movi	r6,10
  80bc94:	080b9700 	call	80b970 <__multadd>
  80bc98:	84000044 	addi	r16,r16,1
  80bc9c:	1011883a 	mov	r8,r2
  80bca0:	847ff71e 	bne	r16,r17,80bc80 <__s2b+0xc4>
  80bca4:	4005883a 	mov	r2,r8
  80bca8:	dfc00617 	ldw	ra,24(sp)
  80bcac:	dd400517 	ldw	r21,20(sp)
  80bcb0:	dd000417 	ldw	r20,16(sp)
  80bcb4:	dcc00317 	ldw	r19,12(sp)
  80bcb8:	dc800217 	ldw	r18,8(sp)
  80bcbc:	dc400117 	ldw	r17,4(sp)
  80bcc0:	dc000017 	ldw	r16,0(sp)
  80bcc4:	dec00704 	addi	sp,sp,28
  80bcc8:	f800283a 	ret
  80bccc:	99400284 	addi	r5,r19,10
  80bcd0:	003fe706 	br	80bc70 <__s2b+0xb4>
  80bcd4:	000b883a 	mov	r5,zero
  80bcd8:	003fcd06 	br	80bc10 <__s2b+0x54>

0080bcdc <_read_r>:
  80bcdc:	defffd04 	addi	sp,sp,-12
  80bce0:	dc000015 	stw	r16,0(sp)
  80bce4:	040020b4 	movhi	r16,130
  80bce8:	8421c304 	addi	r16,r16,-30964
  80bcec:	dc400115 	stw	r17,4(sp)
  80bcf0:	80000015 	stw	zero,0(r16)
  80bcf4:	2023883a 	mov	r17,r4
  80bcf8:	2809883a 	mov	r4,r5
  80bcfc:	300b883a 	mov	r5,r6
  80bd00:	380d883a 	mov	r6,r7
  80bd04:	dfc00215 	stw	ra,8(sp)
  80bd08:	08121700 	call	812170 <read>
  80bd0c:	1007883a 	mov	r3,r2
  80bd10:	00bfffc4 	movi	r2,-1
  80bd14:	18800626 	beq	r3,r2,80bd30 <_read_r+0x54>
  80bd18:	1805883a 	mov	r2,r3
  80bd1c:	dfc00217 	ldw	ra,8(sp)
  80bd20:	dc400117 	ldw	r17,4(sp)
  80bd24:	dc000017 	ldw	r16,0(sp)
  80bd28:	dec00304 	addi	sp,sp,12
  80bd2c:	f800283a 	ret
  80bd30:	80800017 	ldw	r2,0(r16)
  80bd34:	103ff826 	beq	r2,zero,80bd18 <_read_r+0x3c>
  80bd38:	88800015 	stw	r2,0(r17)
  80bd3c:	1805883a 	mov	r2,r3
  80bd40:	dfc00217 	ldw	ra,8(sp)
  80bd44:	dc400117 	ldw	r17,4(sp)
  80bd48:	dc000017 	ldw	r16,0(sp)
  80bd4c:	dec00304 	addi	sp,sp,12
  80bd50:	f800283a 	ret

0080bd54 <_realloc_r>:
  80bd54:	defff404 	addi	sp,sp,-48
  80bd58:	dd800815 	stw	r22,32(sp)
  80bd5c:	dc800415 	stw	r18,16(sp)
  80bd60:	dc400315 	stw	r17,12(sp)
  80bd64:	dfc00b15 	stw	ra,44(sp)
  80bd68:	df000a15 	stw	fp,40(sp)
  80bd6c:	ddc00915 	stw	r23,36(sp)
  80bd70:	dd400715 	stw	r21,28(sp)
  80bd74:	dd000615 	stw	r20,24(sp)
  80bd78:	dcc00515 	stw	r19,20(sp)
  80bd7c:	dc000215 	stw	r16,8(sp)
  80bd80:	2825883a 	mov	r18,r5
  80bd84:	3023883a 	mov	r17,r6
  80bd88:	202d883a 	mov	r22,r4
  80bd8c:	2800c926 	beq	r5,zero,80c0b4 <_realloc_r+0x360>
  80bd90:	0811e4c0 	call	811e4c <__malloc_lock>
  80bd94:	943ffe04 	addi	r16,r18,-8
  80bd98:	88c002c4 	addi	r3,r17,11
  80bd9c:	00800584 	movi	r2,22
  80bda0:	82000117 	ldw	r8,4(r16)
  80bda4:	10c01b2e 	bgeu	r2,r3,80be14 <_realloc_r+0xc0>
  80bda8:	00bffe04 	movi	r2,-8
  80bdac:	188e703a 	and	r7,r3,r2
  80bdb0:	3839883a 	mov	fp,r7
  80bdb4:	38001a16 	blt	r7,zero,80be20 <_realloc_r+0xcc>
  80bdb8:	e4401936 	bltu	fp,r17,80be20 <_realloc_r+0xcc>
  80bdbc:	013fff04 	movi	r4,-4
  80bdc0:	4126703a 	and	r19,r8,r4
  80bdc4:	99c02616 	blt	r19,r7,80be60 <_realloc_r+0x10c>
  80bdc8:	802b883a 	mov	r21,r16
  80bdcc:	9829883a 	mov	r20,r19
  80bdd0:	84000204 	addi	r16,r16,8
  80bdd4:	a80f883a 	mov	r7,r21
  80bdd8:	a70dc83a 	sub	r6,r20,fp
  80bddc:	008003c4 	movi	r2,15
  80bde0:	1180c136 	bltu	r2,r6,80c0e8 <_realloc_r+0x394>
  80bde4:	38800117 	ldw	r2,4(r7)
  80bde8:	a549883a 	add	r4,r20,r21
  80bdec:	1080004c 	andi	r2,r2,1
  80bdf0:	a084b03a 	or	r2,r20,r2
  80bdf4:	38800115 	stw	r2,4(r7)
  80bdf8:	20c00117 	ldw	r3,4(r4)
  80bdfc:	18c00054 	ori	r3,r3,1
  80be00:	20c00115 	stw	r3,4(r4)
  80be04:	b009883a 	mov	r4,r22
  80be08:	0811e6c0 	call	811e6c <__malloc_unlock>
  80be0c:	8023883a 	mov	r17,r16
  80be10:	00000606 	br	80be2c <_realloc_r+0xd8>
  80be14:	01c00404 	movi	r7,16
  80be18:	3839883a 	mov	fp,r7
  80be1c:	e47fe72e 	bgeu	fp,r17,80bdbc <_realloc_r+0x68>
  80be20:	00800304 	movi	r2,12
  80be24:	0023883a 	mov	r17,zero
  80be28:	b0800015 	stw	r2,0(r22)
  80be2c:	8805883a 	mov	r2,r17
  80be30:	dfc00b17 	ldw	ra,44(sp)
  80be34:	df000a17 	ldw	fp,40(sp)
  80be38:	ddc00917 	ldw	r23,36(sp)
  80be3c:	dd800817 	ldw	r22,32(sp)
  80be40:	dd400717 	ldw	r21,28(sp)
  80be44:	dd000617 	ldw	r20,24(sp)
  80be48:	dcc00517 	ldw	r19,20(sp)
  80be4c:	dc800417 	ldw	r18,16(sp)
  80be50:	dc400317 	ldw	r17,12(sp)
  80be54:	dc000217 	ldw	r16,8(sp)
  80be58:	dec00c04 	addi	sp,sp,48
  80be5c:	f800283a 	ret
  80be60:	00802074 	movhi	r2,129
  80be64:	10954704 	addi	r2,r2,21788
  80be68:	12400217 	ldw	r9,8(r2)
  80be6c:	84cd883a 	add	r6,r16,r19
  80be70:	802b883a 	mov	r21,r16
  80be74:	3240b926 	beq	r6,r9,80c15c <_realloc_r+0x408>
  80be78:	31400117 	ldw	r5,4(r6)
  80be7c:	00bfff84 	movi	r2,-2
  80be80:	2884703a 	and	r2,r5,r2
  80be84:	1185883a 	add	r2,r2,r6
  80be88:	10c00117 	ldw	r3,4(r2)
  80be8c:	18c0004c 	andi	r3,r3,1
  80be90:	1807003a 	cmpeq	r3,r3,zero
  80be94:	1800a326 	beq	r3,zero,80c124 <_realloc_r+0x3d0>
  80be98:	2908703a 	and	r4,r5,r4
  80be9c:	9929883a 	add	r20,r19,r4
  80bea0:	a1c0a30e 	bge	r20,r7,80c130 <_realloc_r+0x3dc>
  80bea4:	4080004c 	andi	r2,r8,1
  80bea8:	1000551e 	bne	r2,zero,80c000 <_realloc_r+0x2ac>
  80beac:	80800017 	ldw	r2,0(r16)
  80beb0:	80afc83a 	sub	r23,r16,r2
  80beb4:	b8c00117 	ldw	r3,4(r23)
  80beb8:	00bfff04 	movi	r2,-4
  80bebc:	1884703a 	and	r2,r3,r2
  80bec0:	30002e26 	beq	r6,zero,80bf7c <_realloc_r+0x228>
  80bec4:	3240b926 	beq	r6,r9,80c1ac <_realloc_r+0x458>
  80bec8:	98a9883a 	add	r20,r19,r2
  80becc:	2509883a 	add	r4,r4,r20
  80bed0:	d9000015 	stw	r4,0(sp)
  80bed4:	21c02a16 	blt	r4,r7,80bf80 <_realloc_r+0x22c>
  80bed8:	30800317 	ldw	r2,12(r6)
  80bedc:	30c00217 	ldw	r3,8(r6)
  80bee0:	01400904 	movi	r5,36
  80bee4:	99bfff04 	addi	r6,r19,-4
  80bee8:	18800315 	stw	r2,12(r3)
  80beec:	10c00215 	stw	r3,8(r2)
  80bef0:	b9000317 	ldw	r4,12(r23)
  80bef4:	b8800217 	ldw	r2,8(r23)
  80bef8:	b82b883a 	mov	r21,r23
  80befc:	bc000204 	addi	r16,r23,8
  80bf00:	20800215 	stw	r2,8(r4)
  80bf04:	11000315 	stw	r4,12(r2)
  80bf08:	2980e436 	bltu	r5,r6,80c29c <_realloc_r+0x548>
  80bf0c:	008004c4 	movi	r2,19
  80bf10:	9009883a 	mov	r4,r18
  80bf14:	8011883a 	mov	r8,r16
  80bf18:	11800f2e 	bgeu	r2,r6,80bf58 <_realloc_r+0x204>
  80bf1c:	90800017 	ldw	r2,0(r18)
  80bf20:	ba000404 	addi	r8,r23,16
  80bf24:	91000204 	addi	r4,r18,8
  80bf28:	b8800215 	stw	r2,8(r23)
  80bf2c:	90c00117 	ldw	r3,4(r18)
  80bf30:	008006c4 	movi	r2,27
  80bf34:	b8c00315 	stw	r3,12(r23)
  80bf38:	1180072e 	bgeu	r2,r6,80bf58 <_realloc_r+0x204>
  80bf3c:	90c00217 	ldw	r3,8(r18)
  80bf40:	ba000604 	addi	r8,r23,24
  80bf44:	91000404 	addi	r4,r18,16
  80bf48:	b8c00415 	stw	r3,16(r23)
  80bf4c:	90800317 	ldw	r2,12(r18)
  80bf50:	b8800515 	stw	r2,20(r23)
  80bf54:	3140e726 	beq	r6,r5,80c2f4 <_realloc_r+0x5a0>
  80bf58:	20800017 	ldw	r2,0(r4)
  80bf5c:	dd000017 	ldw	r20,0(sp)
  80bf60:	b80f883a 	mov	r7,r23
  80bf64:	40800015 	stw	r2,0(r8)
  80bf68:	20c00117 	ldw	r3,4(r4)
  80bf6c:	40c00115 	stw	r3,4(r8)
  80bf70:	20800217 	ldw	r2,8(r4)
  80bf74:	40800215 	stw	r2,8(r8)
  80bf78:	003f9706 	br	80bdd8 <_realloc_r+0x84>
  80bf7c:	98a9883a 	add	r20,r19,r2
  80bf80:	a1c01f16 	blt	r20,r7,80c000 <_realloc_r+0x2ac>
  80bf84:	b8c00317 	ldw	r3,12(r23)
  80bf88:	b8800217 	ldw	r2,8(r23)
  80bf8c:	99bfff04 	addi	r6,r19,-4
  80bf90:	01400904 	movi	r5,36
  80bf94:	b82b883a 	mov	r21,r23
  80bf98:	18800215 	stw	r2,8(r3)
  80bf9c:	10c00315 	stw	r3,12(r2)
  80bfa0:	bc000204 	addi	r16,r23,8
  80bfa4:	2980c336 	bltu	r5,r6,80c2b4 <_realloc_r+0x560>
  80bfa8:	008004c4 	movi	r2,19
  80bfac:	9009883a 	mov	r4,r18
  80bfb0:	8011883a 	mov	r8,r16
  80bfb4:	11800f2e 	bgeu	r2,r6,80bff4 <_realloc_r+0x2a0>
  80bfb8:	90800017 	ldw	r2,0(r18)
  80bfbc:	ba000404 	addi	r8,r23,16
  80bfc0:	91000204 	addi	r4,r18,8
  80bfc4:	b8800215 	stw	r2,8(r23)
  80bfc8:	90c00117 	ldw	r3,4(r18)
  80bfcc:	008006c4 	movi	r2,27
  80bfd0:	b8c00315 	stw	r3,12(r23)
  80bfd4:	1180072e 	bgeu	r2,r6,80bff4 <_realloc_r+0x2a0>
  80bfd8:	90c00217 	ldw	r3,8(r18)
  80bfdc:	ba000604 	addi	r8,r23,24
  80bfe0:	91000404 	addi	r4,r18,16
  80bfe4:	b8c00415 	stw	r3,16(r23)
  80bfe8:	90800317 	ldw	r2,12(r18)
  80bfec:	b8800515 	stw	r2,20(r23)
  80bff0:	3140c726 	beq	r6,r5,80c310 <_realloc_r+0x5bc>
  80bff4:	20800017 	ldw	r2,0(r4)
  80bff8:	b80f883a 	mov	r7,r23
  80bffc:	003fd906 	br	80bf64 <_realloc_r+0x210>
  80c000:	880b883a 	mov	r5,r17
  80c004:	b009883a 	mov	r4,r22
  80c008:	0803cbc0 	call	803cbc <_malloc_r>
  80c00c:	1023883a 	mov	r17,r2
  80c010:	10002526 	beq	r2,zero,80c0a8 <_realloc_r+0x354>
  80c014:	80800117 	ldw	r2,4(r16)
  80c018:	00ffff84 	movi	r3,-2
  80c01c:	893ffe04 	addi	r4,r17,-8
  80c020:	10c4703a 	and	r2,r2,r3
  80c024:	8085883a 	add	r2,r16,r2
  80c028:	20809526 	beq	r4,r2,80c280 <_realloc_r+0x52c>
  80c02c:	99bfff04 	addi	r6,r19,-4
  80c030:	01c00904 	movi	r7,36
  80c034:	39804536 	bltu	r7,r6,80c14c <_realloc_r+0x3f8>
  80c038:	008004c4 	movi	r2,19
  80c03c:	9009883a 	mov	r4,r18
  80c040:	880b883a 	mov	r5,r17
  80c044:	11800f2e 	bgeu	r2,r6,80c084 <_realloc_r+0x330>
  80c048:	90800017 	ldw	r2,0(r18)
  80c04c:	89400204 	addi	r5,r17,8
  80c050:	91000204 	addi	r4,r18,8
  80c054:	88800015 	stw	r2,0(r17)
  80c058:	90c00117 	ldw	r3,4(r18)
  80c05c:	008006c4 	movi	r2,27
  80c060:	88c00115 	stw	r3,4(r17)
  80c064:	1180072e 	bgeu	r2,r6,80c084 <_realloc_r+0x330>
  80c068:	90c00217 	ldw	r3,8(r18)
  80c06c:	89400404 	addi	r5,r17,16
  80c070:	91000404 	addi	r4,r18,16
  80c074:	88c00215 	stw	r3,8(r17)
  80c078:	90800317 	ldw	r2,12(r18)
  80c07c:	88800315 	stw	r2,12(r17)
  80c080:	31c09126 	beq	r6,r7,80c2c8 <_realloc_r+0x574>
  80c084:	20800017 	ldw	r2,0(r4)
  80c088:	28800015 	stw	r2,0(r5)
  80c08c:	20c00117 	ldw	r3,4(r4)
  80c090:	28c00115 	stw	r3,4(r5)
  80c094:	20800217 	ldw	r2,8(r4)
  80c098:	28800215 	stw	r2,8(r5)
  80c09c:	900b883a 	mov	r5,r18
  80c0a0:	b009883a 	mov	r4,r22
  80c0a4:	08030400 	call	803040 <_free_r>
  80c0a8:	b009883a 	mov	r4,r22
  80c0ac:	0811e6c0 	call	811e6c <__malloc_unlock>
  80c0b0:	003f5e06 	br	80be2c <_realloc_r+0xd8>
  80c0b4:	300b883a 	mov	r5,r6
  80c0b8:	dfc00b17 	ldw	ra,44(sp)
  80c0bc:	df000a17 	ldw	fp,40(sp)
  80c0c0:	ddc00917 	ldw	r23,36(sp)
  80c0c4:	dd800817 	ldw	r22,32(sp)
  80c0c8:	dd400717 	ldw	r21,28(sp)
  80c0cc:	dd000617 	ldw	r20,24(sp)
  80c0d0:	dcc00517 	ldw	r19,20(sp)
  80c0d4:	dc800417 	ldw	r18,16(sp)
  80c0d8:	dc400317 	ldw	r17,12(sp)
  80c0dc:	dc000217 	ldw	r16,8(sp)
  80c0e0:	dec00c04 	addi	sp,sp,48
  80c0e4:	0803cbc1 	jmpi	803cbc <_malloc_r>
  80c0e8:	38800117 	ldw	r2,4(r7)
  80c0ec:	e54b883a 	add	r5,fp,r21
  80c0f0:	31000054 	ori	r4,r6,1
  80c0f4:	1080004c 	andi	r2,r2,1
  80c0f8:	1704b03a 	or	r2,r2,fp
  80c0fc:	38800115 	stw	r2,4(r7)
  80c100:	29000115 	stw	r4,4(r5)
  80c104:	2987883a 	add	r3,r5,r6
  80c108:	18800117 	ldw	r2,4(r3)
  80c10c:	29400204 	addi	r5,r5,8
  80c110:	b009883a 	mov	r4,r22
  80c114:	10800054 	ori	r2,r2,1
  80c118:	18800115 	stw	r2,4(r3)
  80c11c:	08030400 	call	803040 <_free_r>
  80c120:	003f3806 	br	80be04 <_realloc_r+0xb0>
  80c124:	000d883a 	mov	r6,zero
  80c128:	0009883a 	mov	r4,zero
  80c12c:	003f5d06 	br	80bea4 <_realloc_r+0x150>
  80c130:	30c00217 	ldw	r3,8(r6)
  80c134:	30800317 	ldw	r2,12(r6)
  80c138:	800f883a 	mov	r7,r16
  80c13c:	84000204 	addi	r16,r16,8
  80c140:	10c00215 	stw	r3,8(r2)
  80c144:	18800315 	stw	r2,12(r3)
  80c148:	003f2306 	br	80bdd8 <_realloc_r+0x84>
  80c14c:	8809883a 	mov	r4,r17
  80c150:	900b883a 	mov	r5,r18
  80c154:	080ab700 	call	80ab70 <memmove>
  80c158:	003fd006 	br	80c09c <_realloc_r+0x348>
  80c15c:	30800117 	ldw	r2,4(r6)
  80c160:	e0c00404 	addi	r3,fp,16
  80c164:	1108703a 	and	r4,r2,r4
  80c168:	9905883a 	add	r2,r19,r4
  80c16c:	10ff4d16 	blt	r2,r3,80bea4 <_realloc_r+0x150>
  80c170:	1705c83a 	sub	r2,r2,fp
  80c174:	870b883a 	add	r5,r16,fp
  80c178:	10800054 	ori	r2,r2,1
  80c17c:	28800115 	stw	r2,4(r5)
  80c180:	80c00117 	ldw	r3,4(r16)
  80c184:	00802074 	movhi	r2,129
  80c188:	10954704 	addi	r2,r2,21788
  80c18c:	b009883a 	mov	r4,r22
  80c190:	18c0004c 	andi	r3,r3,1
  80c194:	e0c6b03a 	or	r3,fp,r3
  80c198:	11400215 	stw	r5,8(r2)
  80c19c:	80c00115 	stw	r3,4(r16)
  80c1a0:	0811e6c0 	call	811e6c <__malloc_unlock>
  80c1a4:	84400204 	addi	r17,r16,8
  80c1a8:	003f2006 	br	80be2c <_realloc_r+0xd8>
  80c1ac:	98a9883a 	add	r20,r19,r2
  80c1b0:	2509883a 	add	r4,r4,r20
  80c1b4:	e0800404 	addi	r2,fp,16
  80c1b8:	d9000115 	stw	r4,4(sp)
  80c1bc:	20bf7016 	blt	r4,r2,80bf80 <_realloc_r+0x22c>
  80c1c0:	b8c00317 	ldw	r3,12(r23)
  80c1c4:	b8800217 	ldw	r2,8(r23)
  80c1c8:	99bfff04 	addi	r6,r19,-4
  80c1cc:	01400904 	movi	r5,36
  80c1d0:	18800215 	stw	r2,8(r3)
  80c1d4:	10c00315 	stw	r3,12(r2)
  80c1d8:	bc400204 	addi	r17,r23,8
  80c1dc:	29804136 	bltu	r5,r6,80c2e4 <_realloc_r+0x590>
  80c1e0:	008004c4 	movi	r2,19
  80c1e4:	9009883a 	mov	r4,r18
  80c1e8:	880f883a 	mov	r7,r17
  80c1ec:	11800f2e 	bgeu	r2,r6,80c22c <_realloc_r+0x4d8>
  80c1f0:	90800017 	ldw	r2,0(r18)
  80c1f4:	b9c00404 	addi	r7,r23,16
  80c1f8:	91000204 	addi	r4,r18,8
  80c1fc:	b8800215 	stw	r2,8(r23)
  80c200:	90c00117 	ldw	r3,4(r18)
  80c204:	008006c4 	movi	r2,27
  80c208:	b8c00315 	stw	r3,12(r23)
  80c20c:	1180072e 	bgeu	r2,r6,80c22c <_realloc_r+0x4d8>
  80c210:	90c00217 	ldw	r3,8(r18)
  80c214:	b9c00604 	addi	r7,r23,24
  80c218:	91000404 	addi	r4,r18,16
  80c21c:	b8c00415 	stw	r3,16(r23)
  80c220:	90800317 	ldw	r2,12(r18)
  80c224:	b8800515 	stw	r2,20(r23)
  80c228:	31404026 	beq	r6,r5,80c32c <_realloc_r+0x5d8>
  80c22c:	20800017 	ldw	r2,0(r4)
  80c230:	38800015 	stw	r2,0(r7)
  80c234:	20c00117 	ldw	r3,4(r4)
  80c238:	38c00115 	stw	r3,4(r7)
  80c23c:	20800217 	ldw	r2,8(r4)
  80c240:	38800215 	stw	r2,8(r7)
  80c244:	d8c00117 	ldw	r3,4(sp)
  80c248:	bf0b883a 	add	r5,r23,fp
  80c24c:	b009883a 	mov	r4,r22
  80c250:	1f05c83a 	sub	r2,r3,fp
  80c254:	10800054 	ori	r2,r2,1
  80c258:	28800115 	stw	r2,4(r5)
  80c25c:	b8c00117 	ldw	r3,4(r23)
  80c260:	00802074 	movhi	r2,129
  80c264:	10954704 	addi	r2,r2,21788
  80c268:	11400215 	stw	r5,8(r2)
  80c26c:	18c0004c 	andi	r3,r3,1
  80c270:	e0c6b03a 	or	r3,fp,r3
  80c274:	b8c00115 	stw	r3,4(r23)
  80c278:	0811e6c0 	call	811e6c <__malloc_unlock>
  80c27c:	003eeb06 	br	80be2c <_realloc_r+0xd8>
  80c280:	20800117 	ldw	r2,4(r4)
  80c284:	00ffff04 	movi	r3,-4
  80c288:	800f883a 	mov	r7,r16
  80c28c:	10c4703a 	and	r2,r2,r3
  80c290:	98a9883a 	add	r20,r19,r2
  80c294:	84000204 	addi	r16,r16,8
  80c298:	003ecf06 	br	80bdd8 <_realloc_r+0x84>
  80c29c:	900b883a 	mov	r5,r18
  80c2a0:	8009883a 	mov	r4,r16
  80c2a4:	080ab700 	call	80ab70 <memmove>
  80c2a8:	dd000017 	ldw	r20,0(sp)
  80c2ac:	b80f883a 	mov	r7,r23
  80c2b0:	003ec906 	br	80bdd8 <_realloc_r+0x84>
  80c2b4:	900b883a 	mov	r5,r18
  80c2b8:	8009883a 	mov	r4,r16
  80c2bc:	080ab700 	call	80ab70 <memmove>
  80c2c0:	b80f883a 	mov	r7,r23
  80c2c4:	003ec406 	br	80bdd8 <_realloc_r+0x84>
  80c2c8:	90c00417 	ldw	r3,16(r18)
  80c2cc:	89400604 	addi	r5,r17,24
  80c2d0:	91000604 	addi	r4,r18,24
  80c2d4:	88c00415 	stw	r3,16(r17)
  80c2d8:	90800517 	ldw	r2,20(r18)
  80c2dc:	88800515 	stw	r2,20(r17)
  80c2e0:	003f6806 	br	80c084 <_realloc_r+0x330>
  80c2e4:	900b883a 	mov	r5,r18
  80c2e8:	8809883a 	mov	r4,r17
  80c2ec:	080ab700 	call	80ab70 <memmove>
  80c2f0:	003fd406 	br	80c244 <_realloc_r+0x4f0>
  80c2f4:	90c00417 	ldw	r3,16(r18)
  80c2f8:	91000604 	addi	r4,r18,24
  80c2fc:	ba000804 	addi	r8,r23,32
  80c300:	b8c00615 	stw	r3,24(r23)
  80c304:	90800517 	ldw	r2,20(r18)
  80c308:	b8800715 	stw	r2,28(r23)
  80c30c:	003f1206 	br	80bf58 <_realloc_r+0x204>
  80c310:	90c00417 	ldw	r3,16(r18)
  80c314:	91000604 	addi	r4,r18,24
  80c318:	ba000804 	addi	r8,r23,32
  80c31c:	b8c00615 	stw	r3,24(r23)
  80c320:	90800517 	ldw	r2,20(r18)
  80c324:	b8800715 	stw	r2,28(r23)
  80c328:	003f3206 	br	80bff4 <_realloc_r+0x2a0>
  80c32c:	90c00417 	ldw	r3,16(r18)
  80c330:	91000604 	addi	r4,r18,24
  80c334:	b9c00804 	addi	r7,r23,32
  80c338:	b8c00615 	stw	r3,24(r23)
  80c33c:	90800517 	ldw	r2,20(r18)
  80c340:	b8800715 	stw	r2,28(r23)
  80c344:	003fb906 	br	80c22c <_realloc_r+0x4d8>

0080c348 <__isinfd>:
  80c348:	200d883a 	mov	r6,r4
  80c34c:	0109c83a 	sub	r4,zero,r4
  80c350:	2188b03a 	or	r4,r4,r6
  80c354:	2008d7fa 	srli	r4,r4,31
  80c358:	00a00034 	movhi	r2,32768
  80c35c:	10bfffc4 	addi	r2,r2,-1
  80c360:	1144703a 	and	r2,r2,r5
  80c364:	2088b03a 	or	r4,r4,r2
  80c368:	009ffc34 	movhi	r2,32752
  80c36c:	1105c83a 	sub	r2,r2,r4
  80c370:	0087c83a 	sub	r3,zero,r2
  80c374:	10c4b03a 	or	r2,r2,r3
  80c378:	1004d7fa 	srli	r2,r2,31
  80c37c:	00c00044 	movi	r3,1
  80c380:	1885c83a 	sub	r2,r3,r2
  80c384:	f800283a 	ret

0080c388 <__isnand>:
  80c388:	200d883a 	mov	r6,r4
  80c38c:	0109c83a 	sub	r4,zero,r4
  80c390:	2188b03a 	or	r4,r4,r6
  80c394:	2008d7fa 	srli	r4,r4,31
  80c398:	00a00034 	movhi	r2,32768
  80c39c:	10bfffc4 	addi	r2,r2,-1
  80c3a0:	1144703a 	and	r2,r2,r5
  80c3a4:	2088b03a 	or	r4,r4,r2
  80c3a8:	009ffc34 	movhi	r2,32752
  80c3ac:	1105c83a 	sub	r2,r2,r4
  80c3b0:	1004d7fa 	srli	r2,r2,31
  80c3b4:	f800283a 	ret

0080c3b8 <__sccl>:
  80c3b8:	28c00003 	ldbu	r3,0(r5)
  80c3bc:	00801784 	movi	r2,94
  80c3c0:	2a000044 	addi	r8,r5,1
  80c3c4:	18802526 	beq	r3,r2,80c45c <__sccl+0xa4>
  80c3c8:	180f883a 	mov	r7,r3
  80c3cc:	0013883a 	mov	r9,zero
  80c3d0:	000d883a 	mov	r6,zero
  80c3d4:	0007883a 	mov	r3,zero
  80c3d8:	01404004 	movi	r5,256
  80c3dc:	1905883a 	add	r2,r3,r4
  80c3e0:	18c00044 	addi	r3,r3,1
  80c3e4:	11800005 	stb	r6,0(r2)
  80c3e8:	197ffc1e 	bne	r3,r5,80c3dc <__sccl+0x24>
  80c3ec:	38000c26 	beq	r7,zero,80c420 <__sccl+0x68>
  80c3f0:	00800044 	movi	r2,1
  80c3f4:	124dc83a 	sub	r6,r2,r9
  80c3f8:	3905883a 	add	r2,r7,r4
  80c3fc:	11800005 	stb	r6,0(r2)
  80c400:	41400044 	addi	r5,r8,1
  80c404:	02400b44 	movi	r9,45
  80c408:	02801744 	movi	r10,93
  80c40c:	28bfffc3 	ldbu	r2,-1(r5)
  80c410:	2811883a 	mov	r8,r5
  80c414:	12400726 	beq	r2,r9,80c434 <__sccl+0x7c>
  80c418:	12800226 	beq	r2,r10,80c424 <__sccl+0x6c>
  80c41c:	1000031e 	bne	r2,zero,80c42c <__sccl+0x74>
  80c420:	423fffc4 	addi	r8,r8,-1
  80c424:	4005883a 	mov	r2,r8
  80c428:	f800283a 	ret
  80c42c:	100f883a 	mov	r7,r2
  80c430:	003ff106 	br	80c3f8 <__sccl+0x40>
  80c434:	28c00003 	ldbu	r3,0(r5)
  80c438:	1a800d26 	beq	r3,r10,80c470 <__sccl+0xb8>
  80c43c:	19c00c16 	blt	r3,r7,80c470 <__sccl+0xb8>
  80c440:	21c5883a 	add	r2,r4,r7
  80c444:	39c00044 	addi	r7,r7,1
  80c448:	11800045 	stb	r6,1(r2)
  80c44c:	10800044 	addi	r2,r2,1
  80c450:	38fffc16 	blt	r7,r3,80c444 <__sccl+0x8c>
  80c454:	29400084 	addi	r5,r5,2
  80c458:	003fec06 	br	80c40c <__sccl+0x54>
  80c45c:	29c00043 	ldbu	r7,1(r5)
  80c460:	02400044 	movi	r9,1
  80c464:	2a000084 	addi	r8,r5,2
  80c468:	480d883a 	mov	r6,r9
  80c46c:	003fd906 	br	80c3d4 <__sccl+0x1c>
  80c470:	01c00b44 	movi	r7,45
  80c474:	003fe006 	br	80c3f8 <__sccl+0x40>

0080c478 <nanf>:
  80c478:	009ff034 	movhi	r2,32704
  80c47c:	f800283a 	ret

0080c480 <sprintf>:
  80c480:	deffe504 	addi	sp,sp,-108
  80c484:	2013883a 	mov	r9,r4
  80c488:	dfc01815 	stw	ra,96(sp)
  80c48c:	d9801915 	stw	r6,100(sp)
  80c490:	d9c01a15 	stw	r7,104(sp)
  80c494:	d8801904 	addi	r2,sp,100
  80c498:	d8800015 	stw	r2,0(sp)
  80c49c:	00802074 	movhi	r2,129
  80c4a0:	109ae304 	addi	r2,r2,27532
  80c4a4:	11000017 	ldw	r4,0(r2)
  80c4a8:	d9c00017 	ldw	r7,0(sp)
  80c4ac:	00808204 	movi	r2,520
  80c4b0:	00e00034 	movhi	r3,32768
  80c4b4:	18ffffc4 	addi	r3,r3,-1
  80c4b8:	280d883a 	mov	r6,r5
  80c4bc:	d880040d 	sth	r2,16(sp)
  80c4c0:	d9400104 	addi	r5,sp,4
  80c4c4:	00bfffc4 	movi	r2,-1
  80c4c8:	d8c00615 	stw	r3,24(sp)
  80c4cc:	d8c00315 	stw	r3,12(sp)
  80c4d0:	da400515 	stw	r9,20(sp)
  80c4d4:	d880048d 	sth	r2,18(sp)
  80c4d8:	da400115 	stw	r9,4(sp)
  80c4dc:	080511c0 	call	80511c <___vfprintf_internal_r>
  80c4e0:	d8c00117 	ldw	r3,4(sp)
  80c4e4:	18000005 	stb	zero,0(r3)
  80c4e8:	dfc01817 	ldw	ra,96(sp)
  80c4ec:	dec01b04 	addi	sp,sp,108
  80c4f0:	f800283a 	ret

0080c4f4 <_sprintf_r>:
  80c4f4:	deffe604 	addi	sp,sp,-104
  80c4f8:	2813883a 	mov	r9,r5
  80c4fc:	dfc01815 	stw	ra,96(sp)
  80c500:	d9c01915 	stw	r7,100(sp)
  80c504:	d8801904 	addi	r2,sp,100
  80c508:	d8800015 	stw	r2,0(sp)
  80c50c:	100f883a 	mov	r7,r2
  80c510:	00808204 	movi	r2,520
  80c514:	00e00034 	movhi	r3,32768
  80c518:	18ffffc4 	addi	r3,r3,-1
  80c51c:	d880040d 	sth	r2,16(sp)
  80c520:	d9400104 	addi	r5,sp,4
  80c524:	00bfffc4 	movi	r2,-1
  80c528:	d8c00615 	stw	r3,24(sp)
  80c52c:	d8c00315 	stw	r3,12(sp)
  80c530:	da400515 	stw	r9,20(sp)
  80c534:	d880048d 	sth	r2,18(sp)
  80c538:	da400115 	stw	r9,4(sp)
  80c53c:	080511c0 	call	80511c <___vfprintf_internal_r>
  80c540:	d8c00117 	ldw	r3,4(sp)
  80c544:	18000005 	stb	zero,0(r3)
  80c548:	dfc01817 	ldw	ra,96(sp)
  80c54c:	dec01a04 	addi	sp,sp,104
  80c550:	f800283a 	ret

0080c554 <strcmp>:
  80c554:	2144b03a 	or	r2,r4,r5
  80c558:	108000cc 	andi	r2,r2,3
  80c55c:	10001d1e 	bne	r2,zero,80c5d4 <strcmp+0x80>
  80c560:	200f883a 	mov	r7,r4
  80c564:	28800017 	ldw	r2,0(r5)
  80c568:	21000017 	ldw	r4,0(r4)
  80c56c:	280d883a 	mov	r6,r5
  80c570:	2080161e 	bne	r4,r2,80c5cc <strcmp+0x78>
  80c574:	023fbff4 	movhi	r8,65279
  80c578:	423fbfc4 	addi	r8,r8,-257
  80c57c:	2207883a 	add	r3,r4,r8
  80c580:	01602074 	movhi	r5,32897
  80c584:	29602004 	addi	r5,r5,-32640
  80c588:	1946703a 	and	r3,r3,r5
  80c58c:	0104303a 	nor	r2,zero,r4
  80c590:	10c4703a 	and	r2,r2,r3
  80c594:	10001c1e 	bne	r2,zero,80c608 <strcmp+0xb4>
  80c598:	4013883a 	mov	r9,r8
  80c59c:	2811883a 	mov	r8,r5
  80c5a0:	00000106 	br	80c5a8 <strcmp+0x54>
  80c5a4:	1800181e 	bne	r3,zero,80c608 <strcmp+0xb4>
  80c5a8:	39c00104 	addi	r7,r7,4
  80c5ac:	39000017 	ldw	r4,0(r7)
  80c5b0:	31800104 	addi	r6,r6,4
  80c5b4:	31400017 	ldw	r5,0(r6)
  80c5b8:	2245883a 	add	r2,r4,r9
  80c5bc:	1204703a 	and	r2,r2,r8
  80c5c0:	0106303a 	nor	r3,zero,r4
  80c5c4:	1886703a 	and	r3,r3,r2
  80c5c8:	217ff626 	beq	r4,r5,80c5a4 <strcmp+0x50>
  80c5cc:	3809883a 	mov	r4,r7
  80c5d0:	300b883a 	mov	r5,r6
  80c5d4:	20c00007 	ldb	r3,0(r4)
  80c5d8:	1800051e 	bne	r3,zero,80c5f0 <strcmp+0x9c>
  80c5dc:	00000606 	br	80c5f8 <strcmp+0xa4>
  80c5e0:	21000044 	addi	r4,r4,1
  80c5e4:	20c00007 	ldb	r3,0(r4)
  80c5e8:	29400044 	addi	r5,r5,1
  80c5ec:	18000226 	beq	r3,zero,80c5f8 <strcmp+0xa4>
  80c5f0:	28800007 	ldb	r2,0(r5)
  80c5f4:	18bffa26 	beq	r3,r2,80c5e0 <strcmp+0x8c>
  80c5f8:	20c00003 	ldbu	r3,0(r4)
  80c5fc:	28800003 	ldbu	r2,0(r5)
  80c600:	1885c83a 	sub	r2,r3,r2
  80c604:	f800283a 	ret
  80c608:	0005883a 	mov	r2,zero
  80c60c:	f800283a 	ret

0080c610 <match>:
  80c610:	21800017 	ldw	r6,0(r4)
  80c614:	01c01004 	movi	r7,64
  80c618:	02001684 	movi	r8,90
  80c61c:	28800007 	ldb	r2,0(r5)
  80c620:	29400044 	addi	r5,r5,1
  80c624:	10000826 	beq	r2,zero,80c648 <match+0x38>
  80c628:	31800044 	addi	r6,r6,1
  80c62c:	30c00007 	ldb	r3,0(r6)
  80c630:	38c0020e 	bge	r7,r3,80c63c <match+0x2c>
  80c634:	40c00116 	blt	r8,r3,80c63c <match+0x2c>
  80c638:	18c00804 	addi	r3,r3,32
  80c63c:	18bff726 	beq	r3,r2,80c61c <match+0xc>
  80c640:	0005883a 	mov	r2,zero
  80c644:	f800283a 	ret
  80c648:	30800044 	addi	r2,r6,1
  80c64c:	20800015 	stw	r2,0(r4)
  80c650:	00800044 	movi	r2,1
  80c654:	f800283a 	ret

0080c658 <_strtod_r>:
  80c658:	deffd504 	addi	sp,sp,-172
  80c65c:	df002915 	stw	fp,164(sp)
  80c660:	dd402615 	stw	r21,152(sp)
  80c664:	dd002515 	stw	r20,148(sp)
  80c668:	dfc02a15 	stw	ra,168(sp)
  80c66c:	ddc02815 	stw	r23,160(sp)
  80c670:	dd802715 	stw	r22,156(sp)
  80c674:	dcc02415 	stw	r19,144(sp)
  80c678:	dc802315 	stw	r18,140(sp)
  80c67c:	dc402215 	stw	r17,136(sp)
  80c680:	dc002115 	stw	r16,132(sp)
  80c684:	2829883a 	mov	r20,r5
  80c688:	202b883a 	mov	r21,r4
  80c68c:	d9801d15 	stw	r6,116(sp)
  80c690:	d8000915 	stw	zero,36(sp)
  80c694:	d8000a15 	stw	zero,40(sp)
  80c698:	d9400415 	stw	r5,16(sp)
  80c69c:	df000904 	addi	fp,sp,36
  80c6a0:	dc000417 	ldw	r16,16(sp)
  80c6a4:	00800b44 	movi	r2,45
  80c6a8:	80c00003 	ldbu	r3,0(r16)
  80c6ac:	10c03536 	bltu	r2,r3,80c784 <_strtod_r+0x12c>
  80c6b0:	18c5883a 	add	r2,r3,r3
  80c6b4:	1085883a 	add	r2,r2,r2
  80c6b8:	00c02074 	movhi	r3,129
  80c6bc:	18f1b304 	addi	r3,r3,-14644
  80c6c0:	10c5883a 	add	r2,r2,r3
  80c6c4:	11000017 	ldw	r4,0(r2)
  80c6c8:	2000683a 	jmp	r4
  80c6cc:	0080c904 	movi	r2,804
  80c6d0:	0080c784 	movi	r2,798
  80c6d4:	0080c784 	movi	r2,798
  80c6d8:	0080c784 	movi	r2,798
  80c6dc:	0080c784 	movi	r2,798
  80c6e0:	0080c784 	movi	r2,798
  80c6e4:	0080c784 	movi	r2,798
  80c6e8:	0080c784 	movi	r2,798
  80c6ec:	0080c784 	movi	r2,798
  80c6f0:	0080cc4c 	andi	r2,zero,817
  80c6f4:	0080cc4c 	andi	r2,zero,817
  80c6f8:	0080cc4c 	andi	r2,zero,817
  80c6fc:	0080cc4c 	andi	r2,zero,817
  80c700:	0080cc4c 	andi	r2,zero,817
  80c704:	0080c784 	movi	r2,798
  80c708:	0080c784 	movi	r2,798
  80c70c:	0080c784 	movi	r2,798
  80c710:	0080c784 	movi	r2,798
  80c714:	0080c784 	movi	r2,798
  80c718:	0080c784 	movi	r2,798
  80c71c:	0080c784 	movi	r2,798
  80c720:	0080c784 	movi	r2,798
  80c724:	0080c784 	movi	r2,798
  80c728:	0080c784 	movi	r2,798
  80c72c:	0080c784 	movi	r2,798
  80c730:	0080c784 	movi	r2,798
  80c734:	0080c784 	movi	r2,798
  80c738:	0080c784 	movi	r2,798
  80c73c:	0080c784 	movi	r2,798
  80c740:	0080c784 	movi	r2,798
  80c744:	0080c784 	movi	r2,798
  80c748:	0080c784 	movi	r2,798
  80c74c:	0080cc4c 	andi	r2,zero,817
  80c750:	0080c784 	movi	r2,798
  80c754:	0080c784 	movi	r2,798
  80c758:	0080c784 	movi	r2,798
  80c75c:	0080c784 	movi	r2,798
  80c760:	0080c784 	movi	r2,798
  80c764:	0080c784 	movi	r2,798
  80c768:	0080c784 	movi	r2,798
  80c76c:	0080c784 	movi	r2,798
  80c770:	0080c784 	movi	r2,798
  80c774:	0080c784 	movi	r2,798
  80c778:	0080cc2c 	andhi	r2,zero,816
  80c77c:	0080c784 	movi	r2,798
  80c780:	0080cc58 	cmpnei	r2,zero,817
  80c784:	d8001515 	stw	zero,84(sp)
  80c788:	80c00007 	ldb	r3,0(r16)
  80c78c:	00800c04 	movi	r2,48
  80c790:	1880e926 	beq	r3,r2,80cb38 <_strtod_r+0x4e0>
  80c794:	d8001615 	stw	zero,88(sp)
  80c798:	dc001415 	stw	r16,80(sp)
  80c79c:	84400007 	ldb	r17,0(r16)
  80c7a0:	00800bc4 	movi	r2,47
  80c7a4:	1443760e 	bge	r2,r17,80d580 <_strtod_r+0xf28>
  80c7a8:	00800e44 	movi	r2,57
  80c7ac:	14437416 	blt	r2,r17,80d580 <_strtod_r+0xf28>
  80c7b0:	8025883a 	mov	r18,r16
  80c7b4:	0027883a 	mov	r19,zero
  80c7b8:	d8001215 	stw	zero,72(sp)
  80c7bc:	d8001115 	stw	zero,68(sp)
  80c7c0:	00000f06 	br	80c800 <_strtod_r+0x1a8>
  80c7c4:	d9001217 	ldw	r4,72(sp)
  80c7c8:	01400284 	movi	r5,10
  80c7cc:	0801c5c0 	call	801c5c <__mulsi3>
  80c7d0:	1445883a 	add	r2,r2,r17
  80c7d4:	10bff404 	addi	r2,r2,-48
  80c7d8:	d8801215 	stw	r2,72(sp)
  80c7dc:	94000044 	addi	r16,r18,1
  80c7e0:	dc000415 	stw	r16,16(sp)
  80c7e4:	84400007 	ldb	r17,0(r16)
  80c7e8:	00800bc4 	movi	r2,47
  80c7ec:	9cc00044 	addi	r19,r19,1
  80c7f0:	8025883a 	mov	r18,r16
  80c7f4:	1440130e 	bge	r2,r17,80c844 <_strtod_r+0x1ec>
  80c7f8:	00800e44 	movi	r2,57
  80c7fc:	14401116 	blt	r2,r17,80c844 <_strtod_r+0x1ec>
  80c800:	00800204 	movi	r2,8
  80c804:	14ffef0e 	bge	r2,r19,80c7c4 <_strtod_r+0x16c>
  80c808:	008003c4 	movi	r2,15
  80c80c:	14fff316 	blt	r2,r19,80c7dc <_strtod_r+0x184>
  80c810:	d9001117 	ldw	r4,68(sp)
  80c814:	01400284 	movi	r5,10
  80c818:	94000044 	addi	r16,r18,1
  80c81c:	0801c5c0 	call	801c5c <__mulsi3>
  80c820:	1445883a 	add	r2,r2,r17
  80c824:	10bff404 	addi	r2,r2,-48
  80c828:	d8801115 	stw	r2,68(sp)
  80c82c:	dc000415 	stw	r16,16(sp)
  80c830:	84400007 	ldb	r17,0(r16)
  80c834:	00800bc4 	movi	r2,47
  80c838:	9cc00044 	addi	r19,r19,1
  80c83c:	8025883a 	mov	r18,r16
  80c840:	147fed16 	blt	r2,r17,80c7f8 <_strtod_r+0x1a0>
  80c844:	00800b84 	movi	r2,46
  80c848:	8880c926 	beq	r17,r2,80cb70 <_strtod_r+0x518>
  80c84c:	dcc01815 	stw	r19,96(sp)
  80c850:	d8001b15 	stw	zero,108(sp)
  80c854:	d8001715 	stw	zero,92(sp)
  80c858:	000d883a 	mov	r6,zero
  80c85c:	00801944 	movi	r2,101
  80c860:	88802126 	beq	r17,r2,80c8e8 <_strtod_r+0x290>
  80c864:	00801144 	movi	r2,69
  80c868:	88801f26 	beq	r17,r2,80c8e8 <_strtod_r+0x290>
  80c86c:	d9001817 	ldw	r4,96(sp)
  80c870:	2024c03a 	cmpne	r18,r4,zero
  80c874:	0009883a 	mov	r4,zero
  80c878:	9000651e 	bne	r18,zero,80ca10 <_strtod_r+0x3b8>
  80c87c:	3000c926 	beq	r6,zero,80cba4 <_strtod_r+0x54c>
  80c880:	d8801d17 	ldw	r2,116(sp)
  80c884:	10000326 	beq	r2,zero,80c894 <_strtod_r+0x23c>
  80c888:	d8800417 	ldw	r2,16(sp)
  80c88c:	d8c01d17 	ldw	r3,116(sp)
  80c890:	18800015 	stw	r2,0(r3)
  80c894:	d9001517 	ldw	r4,84(sp)
  80c898:	2005003a 	cmpeq	r2,r4,zero
  80c89c:	10001c1e 	bne	r2,zero,80c910 <_strtod_r+0x2b8>
  80c8a0:	e0800017 	ldw	r2,0(fp)
  80c8a4:	e0c00117 	ldw	r3,4(fp)
  80c8a8:	1009883a 	mov	r4,r2
  80c8ac:	1960003c 	xorhi	r5,r3,32768
  80c8b0:	2005883a 	mov	r2,r4
  80c8b4:	2807883a 	mov	r3,r5
  80c8b8:	dfc02a17 	ldw	ra,168(sp)
  80c8bc:	df002917 	ldw	fp,164(sp)
  80c8c0:	ddc02817 	ldw	r23,160(sp)
  80c8c4:	dd802717 	ldw	r22,156(sp)
  80c8c8:	dd402617 	ldw	r21,152(sp)
  80c8cc:	dd002517 	ldw	r20,148(sp)
  80c8d0:	dcc02417 	ldw	r19,144(sp)
  80c8d4:	dc802317 	ldw	r18,140(sp)
  80c8d8:	dc402217 	ldw	r17,136(sp)
  80c8dc:	dc002117 	ldw	r16,132(sp)
  80c8e0:	dec02b04 	addi	sp,sp,172
  80c8e4:	f800283a 	ret
  80c8e8:	d8801817 	ldw	r2,96(sp)
  80c8ec:	1024c03a 	cmpne	r18,r2,zero
  80c8f0:	90000a1e 	bne	r18,zero,80c91c <_strtod_r+0x2c4>
  80c8f4:	3000091e 	bne	r6,zero,80c91c <_strtod_r+0x2c4>
  80c8f8:	d8c01617 	ldw	r3,88(sp)
  80c8fc:	1805003a 	cmpeq	r2,r3,zero
  80c900:	10000626 	beq	r2,zero,80c91c <_strtod_r+0x2c4>
  80c904:	d8001515 	stw	zero,84(sp)
  80c908:	dd000415 	stw	r20,16(sp)
  80c90c:	003fdc06 	br	80c880 <_strtod_r+0x228>
  80c910:	e1000017 	ldw	r4,0(fp)
  80c914:	e1400117 	ldw	r5,4(fp)
  80c918:	003fe506 	br	80c8b0 <_strtod_r+0x258>
  80c91c:	dd000417 	ldw	r20,16(sp)
  80c920:	00800ac4 	movi	r2,43
  80c924:	a4000044 	addi	r16,r20,1
  80c928:	dc000415 	stw	r16,16(sp)
  80c92c:	a0c00047 	ldb	r3,1(r20)
  80c930:	8009883a 	mov	r4,r16
  80c934:	1880cb26 	beq	r3,r2,80cc64 <_strtod_r+0x60c>
  80c938:	00800b44 	movi	r2,45
  80c93c:	18838326 	beq	r3,r2,80d74c <_strtod_r+0x10f4>
  80c940:	1823883a 	mov	r17,r3
  80c944:	88fff404 	addi	r3,r17,-48
  80c948:	00800244 	movi	r2,9
  80c94c:	d8001915 	stw	zero,100(sp)
  80c950:	10c0cb36 	bltu	r2,r3,80cc80 <_strtod_r+0x628>
  80c954:	00800c04 	movi	r2,48
  80c958:	8880061e 	bne	r17,r2,80c974 <_strtod_r+0x31c>
  80c95c:	dc000417 	ldw	r16,16(sp)
  80c960:	8805883a 	mov	r2,r17
  80c964:	84000044 	addi	r16,r16,1
  80c968:	dc000415 	stw	r16,16(sp)
  80c96c:	84400007 	ldb	r17,0(r16)
  80c970:	88bffc26 	beq	r17,r2,80c964 <_strtod_r+0x30c>
  80c974:	88fff3c4 	addi	r3,r17,-49
  80c978:	00800204 	movi	r2,8
  80c97c:	10ffbd36 	bltu	r2,r3,80c874 <_strtod_r+0x21c>
  80c980:	dc000417 	ldw	r16,16(sp)
  80c984:	893ff404 	addi	r4,r17,-48
  80c988:	00c00bc4 	movi	r3,47
  80c98c:	dc001315 	stw	r16,76(sp)
  80c990:	84000044 	addi	r16,r16,1
  80c994:	dc000415 	stw	r16,16(sp)
  80c998:	84400007 	ldb	r17,0(r16)
  80c99c:	1c40100e 	bge	r3,r17,80c9e0 <_strtod_r+0x388>
  80c9a0:	00800e44 	movi	r2,57
  80c9a4:	14400e16 	blt	r2,r17,80c9e0 <_strtod_r+0x388>
  80c9a8:	182f883a 	mov	r23,r3
  80c9ac:	102d883a 	mov	r22,r2
  80c9b0:	00000106 	br	80c9b8 <_strtod_r+0x360>
  80c9b4:	b4400a16 	blt	r22,r17,80c9e0 <_strtod_r+0x388>
  80c9b8:	84000044 	addi	r16,r16,1
  80c9bc:	01400284 	movi	r5,10
  80c9c0:	d9802015 	stw	r6,128(sp)
  80c9c4:	0801c5c0 	call	801c5c <__mulsi3>
  80c9c8:	dc000415 	stw	r16,16(sp)
  80c9cc:	8885883a 	add	r2,r17,r2
  80c9d0:	84400007 	ldb	r17,0(r16)
  80c9d4:	113ff404 	addi	r4,r2,-48
  80c9d8:	d9802017 	ldw	r6,128(sp)
  80c9dc:	bc7ff516 	blt	r23,r17,80c9b4 <_strtod_r+0x35c>
  80c9e0:	d8801317 	ldw	r2,76(sp)
  80c9e4:	8087c83a 	sub	r3,r16,r2
  80c9e8:	00800204 	movi	r2,8
  80c9ec:	10c2ff16 	blt	r2,r3,80d5ec <_strtod_r+0xf94>
  80c9f0:	009387c4 	movi	r2,19999
  80c9f4:	1100010e 	bge	r2,r4,80c9fc <_strtod_r+0x3a4>
  80c9f8:	1009883a 	mov	r4,r2
  80c9fc:	d8c01917 	ldw	r3,100(sp)
  80ca00:	1805003a 	cmpeq	r2,r3,zero
  80ca04:	103f9c1e 	bne	r2,zero,80c878 <_strtod_r+0x220>
  80ca08:	0109c83a 	sub	r4,zero,r4
  80ca0c:	903f9b26 	beq	r18,zero,80c87c <_strtod_r+0x224>
  80ca10:	d8801717 	ldw	r2,92(sp)
  80ca14:	2089c83a 	sub	r4,r4,r2
  80ca18:	d9000f15 	stw	r4,60(sp)
  80ca1c:	9800811e 	bne	r19,zero,80cc24 <_strtod_r+0x5cc>
  80ca20:	dd001817 	ldw	r20,96(sp)
  80ca24:	dc801817 	ldw	r18,96(sp)
  80ca28:	00800404 	movi	r2,16
  80ca2c:	1480010e 	bge	r2,r18,80ca34 <_strtod_r+0x3dc>
  80ca30:	1025883a 	mov	r18,r2
  80ca34:	d9001217 	ldw	r4,72(sp)
  80ca38:	0801ac80 	call	801ac8 <__floatunsidf>
  80ca3c:	100f883a 	mov	r7,r2
  80ca40:	e0800015 	stw	r2,0(fp)
  80ca44:	00800244 	movi	r2,9
  80ca48:	e0c00115 	stw	r3,4(fp)
  80ca4c:	1480160e 	bge	r2,r18,80caa8 <_strtod_r+0x450>
  80ca50:	900c90fa 	slli	r6,r18,3
  80ca54:	01002074 	movhi	r4,129
  80ca58:	2113db04 	addi	r4,r4,20332
  80ca5c:	180b883a 	mov	r5,r3
  80ca60:	310d883a 	add	r6,r6,r4
  80ca64:	30ffef17 	ldw	r3,-68(r6)
  80ca68:	30bfee17 	ldw	r2,-72(r6)
  80ca6c:	3809883a 	mov	r4,r7
  80ca70:	180f883a 	mov	r7,r3
  80ca74:	100d883a 	mov	r6,r2
  80ca78:	08109100 	call	810910 <__muldf3>
  80ca7c:	d9001117 	ldw	r4,68(sp)
  80ca80:	1021883a 	mov	r16,r2
  80ca84:	1823883a 	mov	r17,r3
  80ca88:	0801ac80 	call	801ac8 <__floatunsidf>
  80ca8c:	880b883a 	mov	r5,r17
  80ca90:	180f883a 	mov	r7,r3
  80ca94:	8009883a 	mov	r4,r16
  80ca98:	100d883a 	mov	r6,r2
  80ca9c:	081089c0 	call	81089c <__adddf3>
  80caa0:	e0c00115 	stw	r3,4(fp)
  80caa4:	e0800015 	stw	r2,0(fp)
  80caa8:	d8c01817 	ldw	r3,96(sp)
  80caac:	010003c4 	movi	r4,15
  80cab0:	20c09e16 	blt	r4,r3,80cd2c <_strtod_r+0x6d4>
  80cab4:	d8800f17 	ldw	r2,60(sp)
  80cab8:	103f7126 	beq	r2,zero,80c880 <_strtod_r+0x228>
  80cabc:	0083d90e 	bge	zero,r2,80da24 <_strtod_r+0x13cc>
  80cac0:	d8c00f17 	ldw	r3,60(sp)
  80cac4:	00800584 	movi	r2,22
  80cac8:	10c2ca0e 	bge	r2,r3,80d5f4 <_strtod_r+0xf9c>
  80cacc:	d8801817 	ldw	r2,96(sp)
  80cad0:	d8c00f17 	ldw	r3,60(sp)
  80cad4:	20a3c83a 	sub	r17,r4,r2
  80cad8:	88800584 	addi	r2,r17,22
  80cadc:	10c09316 	blt	r2,r3,80cd2c <_strtod_r+0x6d4>
  80cae0:	880890fa 	slli	r4,r17,3
  80cae4:	04002074 	movhi	r16,129
  80cae8:	8413db04 	addi	r16,r16,20332
  80caec:	e0800017 	ldw	r2,0(fp)
  80caf0:	2409883a 	add	r4,r4,r16
  80caf4:	22000017 	ldw	r8,0(r4)
  80caf8:	22400117 	ldw	r9,4(r4)
  80cafc:	e0c00117 	ldw	r3,4(fp)
  80cb00:	1009883a 	mov	r4,r2
  80cb04:	480f883a 	mov	r7,r9
  80cb08:	180b883a 	mov	r5,r3
  80cb0c:	400d883a 	mov	r6,r8
  80cb10:	08109100 	call	810910 <__muldf3>
  80cb14:	d9000f17 	ldw	r4,60(sp)
  80cb18:	180b883a 	mov	r5,r3
  80cb1c:	2455c83a 	sub	r10,r4,r17
  80cb20:	501490fa 	slli	r10,r10,3
  80cb24:	1009883a 	mov	r4,r2
  80cb28:	5415883a 	add	r10,r10,r16
  80cb2c:	52000017 	ldw	r8,0(r10)
  80cb30:	52400117 	ldw	r9,4(r10)
  80cb34:	0002b906 	br	80d61c <_strtod_r+0xfc4>
  80cb38:	80c00047 	ldb	r3,1(r16)
  80cb3c:	00801604 	movi	r2,88
  80cb40:	18805226 	beq	r3,r2,80cc8c <_strtod_r+0x634>
  80cb44:	00801e04 	movi	r2,120
  80cb48:	18805026 	beq	r3,r2,80cc8c <_strtod_r+0x634>
  80cb4c:	84000044 	addi	r16,r16,1
  80cb50:	dc000415 	stw	r16,16(sp)
  80cb54:	80c00007 	ldb	r3,0(r16)
  80cb58:	00800c04 	movi	r2,48
  80cb5c:	18bffb26 	beq	r3,r2,80cb4c <_strtod_r+0x4f4>
  80cb60:	183f4726 	beq	r3,zero,80c880 <_strtod_r+0x228>
  80cb64:	01000044 	movi	r4,1
  80cb68:	d9001615 	stw	r4,88(sp)
  80cb6c:	003f0a06 	br	80c798 <_strtod_r+0x140>
  80cb70:	84000044 	addi	r16,r16,1
  80cb74:	dc000415 	stw	r16,16(sp)
  80cb78:	94400047 	ldb	r17,1(r18)
  80cb7c:	9800ba26 	beq	r19,zero,80ce68 <_strtod_r+0x810>
  80cb80:	dcc01815 	stw	r19,96(sp)
  80cb84:	d8001715 	stw	zero,92(sp)
  80cb88:	000d883a 	mov	r6,zero
  80cb8c:	8dbff404 	addi	r22,r17,-48
  80cb90:	00800244 	movi	r2,9
  80cb94:	15826e2e 	bgeu	r2,r22,80d550 <_strtod_r+0xef8>
  80cb98:	01000044 	movi	r4,1
  80cb9c:	d9001b15 	stw	r4,108(sp)
  80cba0:	003f2e06 	br	80c85c <_strtod_r+0x204>
  80cba4:	d8c01617 	ldw	r3,88(sp)
  80cba8:	1804c03a 	cmpne	r2,r3,zero
  80cbac:	103f341e 	bne	r2,zero,80c880 <_strtod_r+0x228>
  80cbb0:	d9001b17 	ldw	r4,108(sp)
  80cbb4:	2004c03a 	cmpne	r2,r4,zero
  80cbb8:	103f521e 	bne	r2,zero,80c904 <_strtod_r+0x2ac>
  80cbbc:	00801384 	movi	r2,78
  80cbc0:	8883b526 	beq	r17,r2,80da98 <_strtod_r+0x1440>
  80cbc4:	1443b016 	blt	r2,r17,80da88 <_strtod_r+0x1430>
  80cbc8:	00801244 	movi	r2,73
  80cbcc:	88bf4d1e 	bne	r17,r2,80c904 <_strtod_r+0x2ac>
  80cbd0:	dc000404 	addi	r16,sp,16
  80cbd4:	8009883a 	mov	r4,r16
  80cbd8:	01402074 	movhi	r5,129
  80cbdc:	29542404 	addi	r5,r5,20624
  80cbe0:	080c6100 	call	80c610 <match>
  80cbe4:	103f4726 	beq	r2,zero,80c904 <_strtod_r+0x2ac>
  80cbe8:	d8800417 	ldw	r2,16(sp)
  80cbec:	8009883a 	mov	r4,r16
  80cbf0:	01402074 	movhi	r5,129
  80cbf4:	29542504 	addi	r5,r5,20628
  80cbf8:	143fffc4 	addi	r16,r2,-1
  80cbfc:	dc000415 	stw	r16,16(sp)
  80cc00:	080c6100 	call	80c610 <match>
  80cc04:	1000031e 	bne	r2,zero,80cc14 <_strtod_r+0x5bc>
  80cc08:	d8800417 	ldw	r2,16(sp)
  80cc0c:	14000044 	addi	r16,r2,1
  80cc10:	dc000415 	stw	r16,16(sp)
  80cc14:	019ffc34 	movhi	r6,32752
  80cc18:	e1800115 	stw	r6,4(fp)
  80cc1c:	e0000015 	stw	zero,0(fp)
  80cc20:	003f1706 	br	80c880 <_strtod_r+0x228>
  80cc24:	9829883a 	mov	r20,r19
  80cc28:	003f7e06 	br	80ca24 <_strtod_r+0x3cc>
  80cc2c:	d8001515 	stw	zero,84(sp)
  80cc30:	84000044 	addi	r16,r16,1
  80cc34:	dc000415 	stw	r16,16(sp)
  80cc38:	80800007 	ldb	r2,0(r16)
  80cc3c:	103ed21e 	bne	r2,zero,80c788 <_strtod_r+0x130>
  80cc40:	d8001515 	stw	zero,84(sp)
  80cc44:	dd000415 	stw	r20,16(sp)
  80cc48:	003f0d06 	br	80c880 <_strtod_r+0x228>
  80cc4c:	84000044 	addi	r16,r16,1
  80cc50:	dc000415 	stw	r16,16(sp)
  80cc54:	003e9206 	br	80c6a0 <_strtod_r+0x48>
  80cc58:	00800044 	movi	r2,1
  80cc5c:	d8801515 	stw	r2,84(sp)
  80cc60:	003ff306 	br	80cc30 <_strtod_r+0x5d8>
  80cc64:	d8001915 	stw	zero,100(sp)
  80cc68:	84000044 	addi	r16,r16,1
  80cc6c:	dc000415 	stw	r16,16(sp)
  80cc70:	24400047 	ldb	r17,1(r4)
  80cc74:	00800244 	movi	r2,9
  80cc78:	88fff404 	addi	r3,r17,-48
  80cc7c:	10ff352e 	bgeu	r2,r3,80c954 <_strtod_r+0x2fc>
  80cc80:	0009883a 	mov	r4,zero
  80cc84:	dd000415 	stw	r20,16(sp)
  80cc88:	003efb06 	br	80c878 <_strtod_r+0x220>
  80cc8c:	d8c01517 	ldw	r3,84(sp)
  80cc90:	04402074 	movhi	r17,129
  80cc94:	8c565104 	addi	r17,r17,22852
  80cc98:	d8800504 	addi	r2,sp,20
  80cc9c:	a809883a 	mov	r4,r21
  80cca0:	d9400404 	addi	r5,sp,16
  80cca4:	880d883a 	mov	r6,r17
  80cca8:	d9c00604 	addi	r7,sp,24
  80ccac:	d8800015 	stw	r2,0(sp)
  80ccb0:	d8c00115 	stw	r3,4(sp)
  80ccb4:	080e9800 	call	80e980 <__gethex>
  80ccb8:	140001cc 	andi	r16,r2,7
  80ccbc:	1025883a 	mov	r18,r2
  80ccc0:	803eef26 	beq	r16,zero,80c880 <_strtod_r+0x228>
  80ccc4:	04c00184 	movi	r19,6
  80ccc8:	84ff0e26 	beq	r16,r19,80c904 <_strtod_r+0x2ac>
  80cccc:	d9800517 	ldw	r6,20(sp)
  80ccd0:	30000626 	beq	r6,zero,80ccec <_strtod_r+0x694>
  80ccd4:	89400017 	ldw	r5,0(r17)
  80ccd8:	d9000d04 	addi	r4,sp,52
  80ccdc:	080b0f00 	call	80b0f0 <__copybits>
  80cce0:	d9400517 	ldw	r5,20(sp)
  80cce4:	a809883a 	mov	r4,r21
  80cce8:	080ac500 	call	80ac50 <_Bfree>
  80ccec:	d9400617 	ldw	r5,24(sp)
  80ccf0:	9c025436 	bltu	r19,r16,80d644 <_strtod_r+0xfec>
  80ccf4:	8405883a 	add	r2,r16,r16
  80ccf8:	1085883a 	add	r2,r2,r2
  80ccfc:	00c02074 	movhi	r3,129
  80cd00:	18f34404 	addi	r3,r3,-13040
  80cd04:	10c5883a 	add	r2,r2,r3
  80cd08:	11000017 	ldw	r4,0(r2)
  80cd0c:	2000683a 	jmp	r4
  80cd10:	0080d684 	movi	r2,858
  80cd14:	0080d690 	cmplti	r2,zero,858
  80cd18:	0080d634 	movhi	r2,856
  80cd1c:	0080d65c 	xori	r2,zero,857
  80cd20:	0080d66c 	andhi	r2,zero,857
  80cd24:	0080d690 	cmplti	r2,zero,858
  80cd28:	0080d684 	movi	r2,858
  80cd2c:	d9001817 	ldw	r4,96(sp)
  80cd30:	d8c00f17 	ldw	r3,60(sp)
  80cd34:	2485c83a 	sub	r2,r4,r18
  80cd38:	18a1883a 	add	r16,r3,r2
  80cd3c:	0402e80e 	bge	zero,r16,80d8e0 <_strtod_r+0x1288>
  80cd40:	814003cc 	andi	r5,r16,15
  80cd44:	28000f26 	beq	r5,zero,80cd84 <_strtod_r+0x72c>
  80cd48:	280a90fa 	slli	r5,r5,3
  80cd4c:	01002074 	movhi	r4,129
  80cd50:	2113db04 	addi	r4,r4,20332
  80cd54:	e0800017 	ldw	r2,0(fp)
  80cd58:	290b883a 	add	r5,r5,r4
  80cd5c:	2a000017 	ldw	r8,0(r5)
  80cd60:	e0c00117 	ldw	r3,4(fp)
  80cd64:	2a400117 	ldw	r9,4(r5)
  80cd68:	1009883a 	mov	r4,r2
  80cd6c:	180b883a 	mov	r5,r3
  80cd70:	480f883a 	mov	r7,r9
  80cd74:	400d883a 	mov	r6,r8
  80cd78:	08109100 	call	810910 <__muldf3>
  80cd7c:	e0c00115 	stw	r3,4(fp)
  80cd80:	e0800015 	stw	r2,0(fp)
  80cd84:	00bffc04 	movi	r2,-16
  80cd88:	808c703a 	and	r6,r16,r2
  80cd8c:	30006726 	beq	r6,zero,80cf2c <_strtod_r+0x8d4>
  80cd90:	00804d04 	movi	r2,308
  80cd94:	11820f16 	blt	r2,r6,80d5d4 <_strtod_r+0xf7c>
  80cd98:	3021d13a 	srai	r16,r6,4
  80cd9c:	00800044 	movi	r2,1
  80cda0:	14037f0e 	bge	r2,r16,80dba0 <_strtod_r+0x1548>
  80cda4:	05802074 	movhi	r22,129
  80cda8:	b5940d04 	addi	r22,r22,20532
  80cdac:	1027883a 	mov	r19,r2
  80cdb0:	0025883a 	mov	r18,zero
  80cdb4:	b023883a 	mov	r17,r22
  80cdb8:	8080004c 	andi	r2,r16,1
  80cdbc:	1005003a 	cmpeq	r2,r2,zero
  80cdc0:	1000091e 	bne	r2,zero,80cde8 <_strtod_r+0x790>
  80cdc4:	e0800017 	ldw	r2,0(fp)
  80cdc8:	e0c00117 	ldw	r3,4(fp)
  80cdcc:	89800017 	ldw	r6,0(r17)
  80cdd0:	89c00117 	ldw	r7,4(r17)
  80cdd4:	180b883a 	mov	r5,r3
  80cdd8:	1009883a 	mov	r4,r2
  80cddc:	08109100 	call	810910 <__muldf3>
  80cde0:	e0c00115 	stw	r3,4(fp)
  80cde4:	e0800015 	stw	r2,0(fp)
  80cde8:	8021d07a 	srai	r16,r16,1
  80cdec:	94800044 	addi	r18,r18,1
  80cdf0:	8c400204 	addi	r17,r17,8
  80cdf4:	9c3ff016 	blt	r19,r16,80cdb8 <_strtod_r+0x760>
  80cdf8:	900e90fa 	slli	r7,r18,3
  80cdfc:	e2000117 	ldw	r8,4(fp)
  80ce00:	e1000017 	ldw	r4,0(fp)
  80ce04:	3d8f883a 	add	r7,r7,r22
  80ce08:	38800017 	ldw	r2,0(r7)
  80ce0c:	38c00117 	ldw	r3,4(r7)
  80ce10:	01bf2c34 	movhi	r6,64688
  80ce14:	418d883a 	add	r6,r8,r6
  80ce18:	300b883a 	mov	r5,r6
  80ce1c:	180f883a 	mov	r7,r3
  80ce20:	100d883a 	mov	r6,r2
  80ce24:	08109100 	call	810910 <__muldf3>
  80ce28:	1009883a 	mov	r4,r2
  80ce2c:	180b883a 	mov	r5,r3
  80ce30:	199ffc2c 	andhi	r6,r3,32752
  80ce34:	009f2834 	movhi	r2,31904
  80ce38:	e1000015 	stw	r4,0(fp)
  80ce3c:	e1400115 	stw	r5,4(fp)
  80ce40:	1181e436 	bltu	r2,r6,80d5d4 <_strtod_r+0xf7c>
  80ce44:	009f2434 	movhi	r2,31888
  80ce48:	11833f2e 	bgeu	r2,r6,80db48 <_strtod_r+0x14f0>
  80ce4c:	d8001c15 	stw	zero,112(sp)
  80ce50:	019ffc34 	movhi	r6,32752
  80ce54:	31bfffc4 	addi	r6,r6,-1
  80ce58:	01ffffc4 	movi	r7,-1
  80ce5c:	e1800115 	stw	r6,4(fp)
  80ce60:	e1c00015 	stw	r7,0(fp)
  80ce64:	00003206 	br	80cf30 <_strtod_r+0x8d8>
  80ce68:	00800c04 	movi	r2,48
  80ce6c:	8883221e 	bne	r17,r2,80daf8 <_strtod_r+0x14a0>
  80ce70:	8805883a 	mov	r2,r17
  80ce74:	000d883a 	mov	r6,zero
  80ce78:	84000044 	addi	r16,r16,1
  80ce7c:	dc000415 	stw	r16,16(sp)
  80ce80:	84400007 	ldb	r17,0(r16)
  80ce84:	31800044 	addi	r6,r6,1
  80ce88:	88bffb26 	beq	r17,r2,80ce78 <_strtod_r+0x820>
  80ce8c:	88fff3c4 	addi	r3,r17,-49
  80ce90:	00800204 	movi	r2,8
  80ce94:	10c1ca36 	bltu	r2,r3,80d5c0 <_strtod_r+0xf68>
  80ce98:	d8c00417 	ldw	r3,16(sp)
  80ce9c:	d9801715 	stw	r6,92(sp)
  80cea0:	8dbff404 	addi	r22,r17,-48
  80cea4:	d8c01415 	stw	r3,80(sp)
  80cea8:	1821883a 	mov	r16,r3
  80ceac:	d8001815 	stw	zero,96(sp)
  80ceb0:	01800044 	movi	r6,1
  80ceb4:	b0023526 	beq	r22,zero,80d78c <_strtod_r+0x1134>
  80ceb8:	d9001717 	ldw	r4,92(sp)
  80cebc:	00800044 	movi	r2,1
  80cec0:	2189883a 	add	r4,r4,r6
  80cec4:	d9001715 	stw	r4,92(sp)
  80cec8:	1183390e 	bge	r2,r6,80dbb0 <_strtod_r+0x1558>
  80cecc:	dc401817 	ldw	r17,96(sp)
  80ced0:	1025883a 	mov	r18,r2
  80ced4:	05c00204 	movi	r23,8
  80ced8:	00000806 	br	80cefc <_strtod_r+0x8a4>
  80cedc:	d9001217 	ldw	r4,72(sp)
  80cee0:	01400284 	movi	r5,10
  80cee4:	d9802015 	stw	r6,128(sp)
  80cee8:	0801c5c0 	call	801c5c <__mulsi3>
  80ceec:	d9802017 	ldw	r6,128(sp)
  80cef0:	d8801215 	stw	r2,72(sp)
  80cef4:	94800044 	addi	r18,r18,1
  80cef8:	91821726 	beq	r18,r6,80d758 <_strtod_r+0x1100>
  80cefc:	8c400044 	addi	r17,r17,1
  80cf00:	88bfffc4 	addi	r2,r17,-1
  80cf04:	b8bff50e 	bge	r23,r2,80cedc <_strtod_r+0x884>
  80cf08:	00800404 	movi	r2,16
  80cf0c:	147ff916 	blt	r2,r17,80cef4 <_strtod_r+0x89c>
  80cf10:	d9001117 	ldw	r4,68(sp)
  80cf14:	01400284 	movi	r5,10
  80cf18:	d9802015 	stw	r6,128(sp)
  80cf1c:	0801c5c0 	call	801c5c <__mulsi3>
  80cf20:	d9802017 	ldw	r6,128(sp)
  80cf24:	d8801115 	stw	r2,68(sp)
  80cf28:	003ff206 	br	80cef4 <_strtod_r+0x89c>
  80cf2c:	d8001c15 	stw	zero,112(sp)
  80cf30:	d8c01217 	ldw	r3,72(sp)
  80cf34:	d9401417 	ldw	r5,80(sp)
  80cf38:	d9c01817 	ldw	r7,96(sp)
  80cf3c:	a809883a 	mov	r4,r21
  80cf40:	a00d883a 	mov	r6,r20
  80cf44:	d8c00015 	stw	r3,0(sp)
  80cf48:	080bbbc0 	call	80bbbc <__s2b>
  80cf4c:	11000304 	addi	r4,r2,12
  80cf50:	d8801015 	stw	r2,64(sp)
  80cf54:	d8800f17 	ldw	r2,60(sp)
  80cf58:	d9001f15 	stw	r4,124(sp)
  80cf5c:	1004803a 	cmplt	r2,r2,zero
  80cf60:	d8801e15 	stw	r2,120(sp)
  80cf64:	d8c01017 	ldw	r3,64(sp)
  80cf68:	a809883a 	mov	r4,r21
  80cf6c:	19400117 	ldw	r5,4(r3)
  80cf70:	080b1d00 	call	80b1d0 <_Balloc>
  80cf74:	d9001017 	ldw	r4,64(sp)
  80cf78:	d9401f17 	ldw	r5,124(sp)
  80cf7c:	102f883a 	mov	r23,r2
  80cf80:	21800417 	ldw	r6,16(r4)
  80cf84:	11000304 	addi	r4,r2,12
  80cf88:	318d883a 	add	r6,r6,r6
  80cf8c:	318d883a 	add	r6,r6,r6
  80cf90:	31800204 	addi	r6,r6,8
  80cf94:	08044e00 	call	8044e0 <memcpy>
  80cf98:	e2000017 	ldw	r8,0(fp)
  80cf9c:	e2400117 	ldw	r9,4(fp)
  80cfa0:	a809883a 	mov	r4,r21
  80cfa4:	400b883a 	mov	r5,r8
  80cfa8:	d9c00204 	addi	r7,sp,8
  80cfac:	d8800304 	addi	r2,sp,12
  80cfb0:	480d883a 	mov	r6,r9
  80cfb4:	d8800015 	stw	r2,0(sp)
  80cfb8:	080b28c0 	call	80b28c <__d2b>
  80cfbc:	a809883a 	mov	r4,r21
  80cfc0:	01400044 	movi	r5,1
  80cfc4:	d8800515 	stw	r2,20(sp)
  80cfc8:	080b9340 	call	80b934 <__i2b>
  80cfcc:	d8c01e17 	ldw	r3,120(sp)
  80cfd0:	102d883a 	mov	r22,r2
  80cfd4:	1801091e 	bne	r3,zero,80d3fc <_strtod_r+0xda4>
  80cfd8:	dd000f17 	ldw	r20,60(sp)
  80cfdc:	000f883a 	mov	r7,zero
  80cfe0:	0013883a 	mov	r9,zero
  80cfe4:	a011883a 	mov	r8,r20
  80cfe8:	d8800217 	ldw	r2,8(sp)
  80cfec:	10010116 	blt	r2,zero,80d3f4 <_strtod_r+0xd9c>
  80cff0:	388f883a 	add	r7,r7,r2
  80cff4:	d8c01c17 	ldw	r3,112(sp)
  80cff8:	d9400317 	ldw	r5,12(sp)
  80cffc:	10c9c83a 	sub	r4,r2,r3
  80d000:	2145883a 	add	r2,r4,r5
  80d004:	10bfffc4 	addi	r2,r2,-1
  80d008:	00ff0084 	movi	r3,-1022
  80d00c:	10c09f0e 	bge	r2,r3,80d28c <_strtod_r+0xc34>
  80d010:	21810cc4 	addi	r6,r4,1075
  80d014:	d9001c17 	ldw	r4,112(sp)
  80d018:	4185883a 	add	r2,r8,r6
  80d01c:	39a1883a 	add	r16,r7,r6
  80d020:	20a5883a 	add	r18,r4,r2
  80d024:	3807883a 	mov	r3,r7
  80d028:	81c0010e 	bge	r16,r7,80d030 <_strtod_r+0x9d8>
  80d02c:	8007883a 	mov	r3,r16
  80d030:	9005883a 	mov	r2,r18
  80d034:	1c80010e 	bge	r3,r18,80d03c <_strtod_r+0x9e4>
  80d038:	1805883a 	mov	r2,r3
  80d03c:	0080eb0e 	bge	zero,r2,80d3ec <_strtod_r+0xd94>
  80d040:	38a7c83a 	sub	r19,r7,r2
  80d044:	80a1c83a 	sub	r16,r16,r2
  80d048:	90a5c83a 	sub	r18,r18,r2
  80d04c:	02400e0e 	bge	zero,r9,80d088 <_strtod_r+0xa30>
  80d050:	480d883a 	mov	r6,r9
  80d054:	b00b883a 	mov	r5,r22
  80d058:	a809883a 	mov	r4,r21
  80d05c:	080ba9c0 	call	80ba9c <__pow5mult>
  80d060:	d9800517 	ldw	r6,20(sp)
  80d064:	a809883a 	mov	r4,r21
  80d068:	100b883a 	mov	r5,r2
  80d06c:	102d883a 	mov	r22,r2
  80d070:	080b6e00 	call	80b6e0 <__multiply>
  80d074:	d9400517 	ldw	r5,20(sp)
  80d078:	1023883a 	mov	r17,r2
  80d07c:	a809883a 	mov	r4,r21
  80d080:	080ac500 	call	80ac50 <_Bfree>
  80d084:	dc400515 	stw	r17,20(sp)
  80d088:	0400050e 	bge	zero,r16,80d0a0 <_strtod_r+0xa48>
  80d08c:	d9400517 	ldw	r5,20(sp)
  80d090:	800d883a 	mov	r6,r16
  80d094:	a809883a 	mov	r4,r21
  80d098:	080b5940 	call	80b594 <__lshift>
  80d09c:	d8800515 	stw	r2,20(sp)
  80d0a0:	a000741e 	bne	r20,zero,80d274 <_strtod_r+0xc1c>
  80d0a4:	0480050e 	bge	zero,r18,80d0bc <_strtod_r+0xa64>
  80d0a8:	b80b883a 	mov	r5,r23
  80d0ac:	900d883a 	mov	r6,r18
  80d0b0:	a809883a 	mov	r4,r21
  80d0b4:	080b5940 	call	80b594 <__lshift>
  80d0b8:	102f883a 	mov	r23,r2
  80d0bc:	04c0050e 	bge	zero,r19,80d0d4 <_strtod_r+0xa7c>
  80d0c0:	b00b883a 	mov	r5,r22
  80d0c4:	980d883a 	mov	r6,r19
  80d0c8:	a809883a 	mov	r4,r21
  80d0cc:	080b5940 	call	80b594 <__lshift>
  80d0d0:	102d883a 	mov	r22,r2
  80d0d4:	d9400517 	ldw	r5,20(sp)
  80d0d8:	a809883a 	mov	r4,r21
  80d0dc:	b80d883a 	mov	r6,r23
  80d0e0:	080b4080 	call	80b408 <__mdiff>
  80d0e4:	1029883a 	mov	r20,r2
  80d0e8:	10800317 	ldw	r2,12(r2)
  80d0ec:	a009883a 	mov	r4,r20
  80d0f0:	a0000315 	stw	zero,12(r20)
  80d0f4:	b00b883a 	mov	r5,r22
  80d0f8:	d8801a15 	stw	r2,104(sp)
  80d0fc:	080adac0 	call	80adac <__mcmp>
  80d100:	1001a616 	blt	r2,zero,80d79c <_strtod_r+0x1144>
  80d104:	10016d26 	beq	r2,zero,80d6bc <_strtod_r+0x1064>
  80d108:	a009883a 	mov	r4,r20
  80d10c:	b00b883a 	mov	r5,r22
  80d110:	080afac0 	call	80afac <__ratio>
  80d114:	0011883a 	mov	r8,zero
  80d118:	02500034 	movhi	r9,16384
  80d11c:	480f883a 	mov	r7,r9
  80d120:	1009883a 	mov	r4,r2
  80d124:	180b883a 	mov	r5,r3
  80d128:	400d883a 	mov	r6,r8
  80d12c:	1021883a 	mov	r16,r2
  80d130:	1823883a 	mov	r17,r3
  80d134:	0810f7c0 	call	810f7c <__ledf2>
  80d138:	00805716 	blt	zero,r2,80d298 <_strtod_r+0xc40>
  80d13c:	d8801a17 	ldw	r2,104(sp)
  80d140:	1025003a 	cmpeq	r18,r2,zero
  80d144:	90008c1e 	bne	r18,zero,80d378 <_strtod_r+0xd20>
  80d148:	008ffc34 	movhi	r2,16368
  80d14c:	0021883a 	mov	r16,zero
  80d150:	1023883a 	mov	r17,r2
  80d154:	d8000715 	stw	zero,28(sp)
  80d158:	d8800815 	stw	r2,32(sp)
  80d15c:	e1c00117 	ldw	r7,4(fp)
  80d160:	009ff834 	movhi	r2,32736
  80d164:	3cdffc2c 	andhi	r19,r7,32752
  80d168:	98805f26 	beq	r19,r2,80d2e8 <_strtod_r+0xc90>
  80d16c:	d8c01c17 	ldw	r3,112(sp)
  80d170:	18001b26 	beq	r3,zero,80d1e0 <_strtod_r+0xb88>
  80d174:	0081a834 	movhi	r2,1696
  80d178:	14c01936 	bltu	r2,r19,80d1e0 <_strtod_r+0xb88>
  80d17c:	00bff034 	movhi	r2,65472
  80d180:	00d07834 	movhi	r3,16864
  80d184:	18ffffc4 	addi	r3,r3,-1
  80d188:	180f883a 	mov	r7,r3
  80d18c:	8009883a 	mov	r4,r16
  80d190:	880b883a 	mov	r5,r17
  80d194:	100d883a 	mov	r6,r2
  80d198:	0810f7c0 	call	810f7c <__ledf2>
  80d19c:	00800b16 	blt	zero,r2,80d1cc <_strtod_r+0xb74>
  80d1a0:	880b883a 	mov	r5,r17
  80d1a4:	8009883a 	mov	r4,r16
  80d1a8:	080f5340 	call	80f534 <__fixunsdfsi>
  80d1ac:	1000e31e 	bne	r2,zero,80d53c <_strtod_r+0xee4>
  80d1b0:	0021883a 	mov	r16,zero
  80d1b4:	044ffc34 	movhi	r17,16368
  80d1b8:	9000dd1e 	bne	r18,zero,80d530 <_strtod_r+0xed8>
  80d1bc:	8005883a 	mov	r2,r16
  80d1c0:	8807883a 	mov	r3,r17
  80d1c4:	d8c00815 	stw	r3,32(sp)
  80d1c8:	d8800715 	stw	r2,28(sp)
  80d1cc:	d8800817 	ldw	r2,32(sp)
  80d1d0:	00c1ac34 	movhi	r3,1712
  80d1d4:	14c5c83a 	sub	r2,r2,r19
  80d1d8:	10c5883a 	add	r2,r2,r3
  80d1dc:	d8800815 	stw	r2,32(sp)
  80d1e0:	e0800017 	ldw	r2,0(fp)
  80d1e4:	e0c00117 	ldw	r3,4(fp)
  80d1e8:	1009883a 	mov	r4,r2
  80d1ec:	180b883a 	mov	r5,r3
  80d1f0:	080ae0c0 	call	80ae0c <__ulp>
  80d1f4:	d9800717 	ldw	r6,28(sp)
  80d1f8:	d9c00817 	ldw	r7,32(sp)
  80d1fc:	180b883a 	mov	r5,r3
  80d200:	1009883a 	mov	r4,r2
  80d204:	08109100 	call	810910 <__muldf3>
  80d208:	e2000017 	ldw	r8,0(fp)
  80d20c:	e2400117 	ldw	r9,4(fp)
  80d210:	180b883a 	mov	r5,r3
  80d214:	1009883a 	mov	r4,r2
  80d218:	480f883a 	mov	r7,r9
  80d21c:	400d883a 	mov	r6,r8
  80d220:	081089c0 	call	81089c <__adddf3>
  80d224:	e0c00115 	stw	r3,4(fp)
  80d228:	e0800015 	stw	r2,0(fp)
  80d22c:	d9001c17 	ldw	r4,112(sp)
  80d230:	e4800117 	ldw	r18,4(fp)
  80d234:	2000021e 	bne	r4,zero,80d240 <_strtod_r+0xbe8>
  80d238:	909ffc2c 	andhi	r2,r18,32752
  80d23c:	98807f26 	beq	r19,r2,80d43c <_strtod_r+0xde4>
  80d240:	d9400517 	ldw	r5,20(sp)
  80d244:	a809883a 	mov	r4,r21
  80d248:	080ac500 	call	80ac50 <_Bfree>
  80d24c:	a809883a 	mov	r4,r21
  80d250:	b80b883a 	mov	r5,r23
  80d254:	080ac500 	call	80ac50 <_Bfree>
  80d258:	a809883a 	mov	r4,r21
  80d25c:	b00b883a 	mov	r5,r22
  80d260:	080ac500 	call	80ac50 <_Bfree>
  80d264:	a809883a 	mov	r4,r21
  80d268:	a00b883a 	mov	r5,r20
  80d26c:	080ac500 	call	80ac50 <_Bfree>
  80d270:	003f3c06 	br	80cf64 <_strtod_r+0x90c>
  80d274:	b80b883a 	mov	r5,r23
  80d278:	a00d883a 	mov	r6,r20
  80d27c:	a809883a 	mov	r4,r21
  80d280:	080ba9c0 	call	80ba9c <__pow5mult>
  80d284:	102f883a 	mov	r23,r2
  80d288:	003f8606 	br	80d0a4 <_strtod_r+0xa4c>
  80d28c:	00800d84 	movi	r2,54
  80d290:	114dc83a 	sub	r6,r2,r5
  80d294:	003f5f06 	br	80d014 <_strtod_r+0x9bc>
  80d298:	0005883a 	mov	r2,zero
  80d29c:	00cff834 	movhi	r3,16352
  80d2a0:	8009883a 	mov	r4,r16
  80d2a4:	880b883a 	mov	r5,r17
  80d2a8:	180f883a 	mov	r7,r3
  80d2ac:	100d883a 	mov	r6,r2
  80d2b0:	08109100 	call	810910 <__muldf3>
  80d2b4:	1009883a 	mov	r4,r2
  80d2b8:	d8801a17 	ldw	r2,104(sp)
  80d2bc:	2021883a 	mov	r16,r4
  80d2c0:	1823883a 	mov	r17,r3
  80d2c4:	1025003a 	cmpeq	r18,r2,zero
  80d2c8:	9000451e 	bne	r18,zero,80d3e0 <_strtod_r+0xd88>
  80d2cc:	2005883a 	mov	r2,r4
  80d2d0:	d8800715 	stw	r2,28(sp)
  80d2d4:	d8c00815 	stw	r3,32(sp)
  80d2d8:	e1c00117 	ldw	r7,4(fp)
  80d2dc:	009ff834 	movhi	r2,32736
  80d2e0:	3cdffc2c 	andhi	r19,r7,32752
  80d2e4:	98bfa11e 	bne	r19,r2,80d16c <_strtod_r+0xb14>
  80d2e8:	e1000017 	ldw	r4,0(fp)
  80d2ec:	01bf2c34 	movhi	r6,64688
  80d2f0:	398d883a 	add	r6,r7,r6
  80d2f4:	d9000b15 	stw	r4,44(sp)
  80d2f8:	d9c00c15 	stw	r7,48(sp)
  80d2fc:	300b883a 	mov	r5,r6
  80d300:	e1800115 	stw	r6,4(fp)
  80d304:	080ae0c0 	call	80ae0c <__ulp>
  80d308:	d9800717 	ldw	r6,28(sp)
  80d30c:	d9c00817 	ldw	r7,32(sp)
  80d310:	180b883a 	mov	r5,r3
  80d314:	1009883a 	mov	r4,r2
  80d318:	08109100 	call	810910 <__muldf3>
  80d31c:	e2000017 	ldw	r8,0(fp)
  80d320:	e2400117 	ldw	r9,4(fp)
  80d324:	180b883a 	mov	r5,r3
  80d328:	1009883a 	mov	r4,r2
  80d32c:	480f883a 	mov	r7,r9
  80d330:	400d883a 	mov	r6,r8
  80d334:	081089c0 	call	81089c <__adddf3>
  80d338:	1009883a 	mov	r4,r2
  80d33c:	180b883a 	mov	r5,r3
  80d340:	009f2834 	movhi	r2,31904
  80d344:	10bfffc4 	addi	r2,r2,-1
  80d348:	18dffc2c 	andhi	r3,r3,32752
  80d34c:	e1000015 	stw	r4,0(fp)
  80d350:	e1400115 	stw	r5,4(fp)
  80d354:	10c0722e 	bgeu	r2,r3,80d520 <_strtod_r+0xec8>
  80d358:	d8800c17 	ldw	r2,48(sp)
  80d35c:	011ffc34 	movhi	r4,32752
  80d360:	213fffc4 	addi	r4,r4,-1
  80d364:	11007d26 	beq	r2,r4,80d55c <_strtod_r+0xf04>
  80d368:	01ffffc4 	movi	r7,-1
  80d36c:	e1000115 	stw	r4,4(fp)
  80d370:	e1c00015 	stw	r7,0(fp)
  80d374:	003fb206 	br	80d240 <_strtod_r+0xbe8>
  80d378:	e0c00017 	ldw	r3,0(fp)
  80d37c:	1800251e 	bne	r3,zero,80d414 <_strtod_r+0xdbc>
  80d380:	e0800117 	ldw	r2,4(fp)
  80d384:	00c00434 	movhi	r3,16
  80d388:	18ffffc4 	addi	r3,r3,-1
  80d38c:	10c4703a 	and	r2,r2,r3
  80d390:	1000241e 	bne	r2,zero,80d424 <_strtod_r+0xdcc>
  80d394:	0005883a 	mov	r2,zero
  80d398:	00cffc34 	movhi	r3,16368
  80d39c:	180f883a 	mov	r7,r3
  80d3a0:	8009883a 	mov	r4,r16
  80d3a4:	880b883a 	mov	r5,r17
  80d3a8:	100d883a 	mov	r6,r2
  80d3ac:	0810ef40 	call	810ef4 <__ltdf2>
  80d3b0:	10014616 	blt	r2,zero,80d8cc <_strtod_r+0x1274>
  80d3b4:	0005883a 	mov	r2,zero
  80d3b8:	00cff834 	movhi	r3,16352
  80d3bc:	880b883a 	mov	r5,r17
  80d3c0:	8009883a 	mov	r4,r16
  80d3c4:	180f883a 	mov	r7,r3
  80d3c8:	100d883a 	mov	r6,r2
  80d3cc:	08109100 	call	810910 <__muldf3>
  80d3d0:	1823883a 	mov	r17,r3
  80d3d4:	1021883a 	mov	r16,r2
  80d3d8:	18e0003c 	xorhi	r3,r3,32768
  80d3dc:	003fbc06 	br	80d2d0 <_strtod_r+0xc78>
  80d3e0:	2005883a 	mov	r2,r4
  80d3e4:	18e0003c 	xorhi	r3,r3,32768
  80d3e8:	003fb906 	br	80d2d0 <_strtod_r+0xc78>
  80d3ec:	3827883a 	mov	r19,r7
  80d3f0:	003f1606 	br	80d04c <_strtod_r+0x9f4>
  80d3f4:	4091c83a 	sub	r8,r8,r2
  80d3f8:	003efe06 	br	80cff4 <_strtod_r+0x99c>
  80d3fc:	d9000f17 	ldw	r4,60(sp)
  80d400:	0011883a 	mov	r8,zero
  80d404:	0029883a 	mov	r20,zero
  80d408:	0113c83a 	sub	r9,zero,r4
  80d40c:	480f883a 	mov	r7,r9
  80d410:	003ef506 	br	80cfe8 <_strtod_r+0x990>
  80d414:	00800044 	movi	r2,1
  80d418:	1880021e 	bne	r3,r2,80d424 <_strtod_r+0xdcc>
  80d41c:	e0800117 	ldw	r2,4(fp)
  80d420:	1000c526 	beq	r2,zero,80d738 <_strtod_r+0x10e0>
  80d424:	00affc34 	movhi	r2,49136
  80d428:	0021883a 	mov	r16,zero
  80d42c:	044ffc34 	movhi	r17,16368
  80d430:	d8800815 	stw	r2,32(sp)
  80d434:	d8000715 	stw	zero,28(sp)
  80d438:	003f4806 	br	80d15c <_strtod_r+0xb04>
  80d43c:	880b883a 	mov	r5,r17
  80d440:	8009883a 	mov	r4,r16
  80d444:	08110fc0 	call	8110fc <__fixdfsi>
  80d448:	1009883a 	mov	r4,r2
  80d44c:	08110040 	call	811004 <__floatsidf>
  80d450:	880b883a 	mov	r5,r17
  80d454:	8009883a 	mov	r4,r16
  80d458:	100d883a 	mov	r6,r2
  80d45c:	180f883a 	mov	r7,r3
  80d460:	081081c0 	call	81081c <__subdf3>
  80d464:	100b883a 	mov	r5,r2
  80d468:	1021883a 	mov	r16,r2
  80d46c:	d8801a17 	ldw	r2,104(sp)
  80d470:	180d883a 	mov	r6,r3
  80d474:	1823883a 	mov	r17,r3
  80d478:	1000061e 	bne	r2,zero,80d494 <_strtod_r+0xe3c>
  80d47c:	e0800017 	ldw	r2,0(fp)
  80d480:	1000041e 	bne	r2,zero,80d494 <_strtod_r+0xe3c>
  80d484:	00c00434 	movhi	r3,16
  80d488:	18ffffc4 	addi	r3,r3,-1
  80d48c:	90c4703a 	and	r2,r18,r3
  80d490:	10004026 	beq	r2,zero,80d594 <_strtod_r+0xf3c>
  80d494:	00a52834 	movhi	r2,38048
  80d498:	108d6544 	addi	r2,r2,13717
  80d49c:	00cff834 	movhi	r3,16352
  80d4a0:	18ffffc4 	addi	r3,r3,-1
  80d4a4:	180f883a 	mov	r7,r3
  80d4a8:	8009883a 	mov	r4,r16
  80d4ac:	880b883a 	mov	r5,r17
  80d4b0:	100d883a 	mov	r6,r2
  80d4b4:	0810ef40 	call	810ef4 <__ltdf2>
  80d4b8:	10000916 	blt	r2,zero,80d4e0 <_strtod_r+0xe88>
  80d4bc:	008d6c34 	movhi	r2,13744
  80d4c0:	10b94d44 	addi	r2,r2,-6859
  80d4c4:	00cff834 	movhi	r3,16352
  80d4c8:	880b883a 	mov	r5,r17
  80d4cc:	180f883a 	mov	r7,r3
  80d4d0:	8009883a 	mov	r4,r16
  80d4d4:	100d883a 	mov	r6,r2
  80d4d8:	0810de40 	call	810de4 <__gtdf2>
  80d4dc:	00bf580e 	bge	zero,r2,80d240 <_strtod_r+0xbe8>
  80d4e0:	d9400517 	ldw	r5,20(sp)
  80d4e4:	a809883a 	mov	r4,r21
  80d4e8:	080ac500 	call	80ac50 <_Bfree>
  80d4ec:	a809883a 	mov	r4,r21
  80d4f0:	b80b883a 	mov	r5,r23
  80d4f4:	080ac500 	call	80ac50 <_Bfree>
  80d4f8:	a809883a 	mov	r4,r21
  80d4fc:	b00b883a 	mov	r5,r22
  80d500:	080ac500 	call	80ac50 <_Bfree>
  80d504:	d9401017 	ldw	r5,64(sp)
  80d508:	a809883a 	mov	r4,r21
  80d50c:	080ac500 	call	80ac50 <_Bfree>
  80d510:	a809883a 	mov	r4,r21
  80d514:	a00b883a 	mov	r5,r20
  80d518:	080ac500 	call	80ac50 <_Bfree>
  80d51c:	003cd806 	br	80c880 <_strtod_r+0x228>
  80d520:	0080d434 	movhi	r2,848
  80d524:	288d883a 	add	r6,r5,r2
  80d528:	e1800115 	stw	r6,4(fp)
  80d52c:	003f3f06 	br	80d22c <_strtod_r+0xbd4>
  80d530:	8005883a 	mov	r2,r16
  80d534:	88e0003c 	xorhi	r3,r17,32768
  80d538:	003f2206 	br	80d1c4 <_strtod_r+0xb6c>
  80d53c:	1009883a 	mov	r4,r2
  80d540:	0801ac80 	call	801ac8 <__floatunsidf>
  80d544:	1021883a 	mov	r16,r2
  80d548:	1823883a 	mov	r17,r3
  80d54c:	003f1a06 	br	80d1b8 <_strtod_r+0xb60>
  80d550:	dc000417 	ldw	r16,16(sp)
  80d554:	31800044 	addi	r6,r6,1
  80d558:	003e5606 	br	80ceb4 <_strtod_r+0x85c>
  80d55c:	d8c00b17 	ldw	r3,44(sp)
  80d560:	00bfffc4 	movi	r2,-1
  80d564:	18bf801e 	bne	r3,r2,80d368 <_strtod_r+0xd10>
  80d568:	00c00884 	movi	r3,34
  80d56c:	a8c00015 	stw	r3,0(r21)
  80d570:	009ffc34 	movhi	r2,32752
  80d574:	e0800115 	stw	r2,4(fp)
  80d578:	e0000015 	stw	zero,0(fp)
  80d57c:	003fd806 	br	80d4e0 <_strtod_r+0xe88>
  80d580:	8025883a 	mov	r18,r16
  80d584:	0027883a 	mov	r19,zero
  80d588:	d8001215 	stw	zero,72(sp)
  80d58c:	d8001115 	stw	zero,68(sp)
  80d590:	003cac06 	br	80c844 <_strtod_r+0x1ec>
  80d594:	00a52834 	movhi	r2,38048
  80d598:	108d6544 	addi	r2,r2,13717
  80d59c:	00cff434 	movhi	r3,16336
  80d5a0:	18ffffc4 	addi	r3,r3,-1
  80d5a4:	2809883a 	mov	r4,r5
  80d5a8:	180f883a 	mov	r7,r3
  80d5ac:	300b883a 	mov	r5,r6
  80d5b0:	100d883a 	mov	r6,r2
  80d5b4:	0810ef40 	call	810ef4 <__ltdf2>
  80d5b8:	103f210e 	bge	r2,zero,80d240 <_strtod_r+0xbe8>
  80d5bc:	003fc806 	br	80d4e0 <_strtod_r+0xe88>
  80d5c0:	00800044 	movi	r2,1
  80d5c4:	d8001815 	stw	zero,96(sp)
  80d5c8:	d8801b15 	stw	r2,108(sp)
  80d5cc:	d8001715 	stw	zero,92(sp)
  80d5d0:	003ca206 	br	80c85c <_strtod_r+0x204>
  80d5d4:	00800884 	movi	r2,34
  80d5d8:	a8800015 	stw	r2,0(r21)
  80d5dc:	019ffc34 	movhi	r6,32752
  80d5e0:	e1800115 	stw	r6,4(fp)
  80d5e4:	e0000015 	stw	zero,0(fp)
  80d5e8:	003ca506 	br	80c880 <_strtod_r+0x228>
  80d5ec:	011387c4 	movi	r4,19999
  80d5f0:	003d0206 	br	80c9fc <_strtod_r+0x3a4>
  80d5f4:	180a90fa 	slli	r5,r3,3
  80d5f8:	e0800017 	ldw	r2,0(fp)
  80d5fc:	e0c00117 	ldw	r3,4(fp)
  80d600:	01002074 	movhi	r4,129
  80d604:	2113db04 	addi	r4,r4,20332
  80d608:	290b883a 	add	r5,r5,r4
  80d60c:	2a000017 	ldw	r8,0(r5)
  80d610:	2a400117 	ldw	r9,4(r5)
  80d614:	1009883a 	mov	r4,r2
  80d618:	180b883a 	mov	r5,r3
  80d61c:	480f883a 	mov	r7,r9
  80d620:	400d883a 	mov	r6,r8
  80d624:	08109100 	call	810910 <__muldf3>
  80d628:	e0c00115 	stw	r3,4(fp)
  80d62c:	e0800015 	stw	r2,0(fp)
  80d630:	003c9306 	br	80c880 <_strtod_r+0x228>
  80d634:	d8800d17 	ldw	r2,52(sp)
  80d638:	e0800015 	stw	r2,0(fp)
  80d63c:	d8c00e17 	ldw	r3,56(sp)
  80d640:	e0c00115 	stw	r3,4(fp)
  80d644:	9080020c 	andi	r2,r18,8
  80d648:	103c8d26 	beq	r2,zero,80c880 <_strtod_r+0x228>
  80d64c:	e0800117 	ldw	r2,4(fp)
  80d650:	10a00034 	orhi	r2,r2,32768
  80d654:	e0800115 	stw	r2,4(fp)
  80d658:	003c8906 	br	80c880 <_strtod_r+0x228>
  80d65c:	009ffc34 	movhi	r2,32752
  80d660:	e0800115 	stw	r2,4(fp)
  80d664:	e0000015 	stw	zero,0(fp)
  80d668:	003ff606 	br	80d644 <_strtod_r+0xfec>
  80d66c:	00a00034 	movhi	r2,32768
  80d670:	10bfffc4 	addi	r2,r2,-1
  80d674:	00ffffc4 	movi	r3,-1
  80d678:	e0800115 	stw	r2,4(fp)
  80d67c:	e0c00015 	stw	r3,0(fp)
  80d680:	003ff006 	br	80d644 <_strtod_r+0xfec>
  80d684:	e0000115 	stw	zero,4(fp)
  80d688:	e0000015 	stw	zero,0(fp)
  80d68c:	003fed06 	br	80d644 <_strtod_r+0xfec>
  80d690:	d8800e17 	ldw	r2,56(sp)
  80d694:	29010cc4 	addi	r4,r5,1075
  80d698:	00fffc34 	movhi	r3,65520
  80d69c:	18ffffc4 	addi	r3,r3,-1
  80d6a0:	2008953a 	slli	r4,r4,20
  80d6a4:	10c4703a 	and	r2,r2,r3
  80d6a8:	d8c00d17 	ldw	r3,52(sp)
  80d6ac:	1104b03a 	or	r2,r2,r4
  80d6b0:	e0800115 	stw	r2,4(fp)
  80d6b4:	e0c00015 	stw	r3,0(fp)
  80d6b8:	003fe206 	br	80d644 <_strtod_r+0xfec>
  80d6bc:	d8c01a17 	ldw	r3,104(sp)
  80d6c0:	1825003a 	cmpeq	r18,r3,zero
  80d6c4:	9000cf1e 	bne	r18,zero,80da04 <_strtod_r+0x13ac>
  80d6c8:	e1400117 	ldw	r5,4(fp)
  80d6cc:	01000434 	movhi	r4,16
  80d6d0:	213fffc4 	addi	r4,r4,-1
  80d6d4:	2904703a 	and	r2,r5,r4
  80d6d8:	11006826 	beq	r2,r4,80d87c <_strtod_r+0x1224>
  80d6dc:	e1c00017 	ldw	r7,0(fp)
  80d6e0:	3880004c 	andi	r2,r7,1
  80d6e4:	1005003a 	cmpeq	r2,r2,zero
  80d6e8:	1000601e 	bne	r2,zero,80d86c <_strtod_r+0x1214>
  80d6ec:	90010426 	beq	r18,zero,80db00 <_strtod_r+0x14a8>
  80d6f0:	e4400117 	ldw	r17,4(fp)
  80d6f4:	3809883a 	mov	r4,r7
  80d6f8:	3821883a 	mov	r16,r7
  80d6fc:	880b883a 	mov	r5,r17
  80d700:	080ae0c0 	call	80ae0c <__ulp>
  80d704:	180f883a 	mov	r7,r3
  80d708:	880b883a 	mov	r5,r17
  80d70c:	8009883a 	mov	r4,r16
  80d710:	100d883a 	mov	r6,r2
  80d714:	081081c0 	call	81081c <__subdf3>
  80d718:	1009883a 	mov	r4,r2
  80d71c:	000d883a 	mov	r6,zero
  80d720:	000f883a 	mov	r7,zero
  80d724:	180b883a 	mov	r5,r3
  80d728:	e0800015 	stw	r2,0(fp)
  80d72c:	e0c00115 	stw	r3,4(fp)
  80d730:	0810d5c0 	call	810d5c <__nedf2>
  80d734:	10004d1e 	bne	r2,zero,80d86c <_strtod_r+0x1214>
  80d738:	00800884 	movi	r2,34
  80d73c:	a8800015 	stw	r2,0(r21)
  80d740:	e0000015 	stw	zero,0(fp)
  80d744:	e0000115 	stw	zero,4(fp)
  80d748:	003f6506 	br	80d4e0 <_strtod_r+0xe88>
  80d74c:	00800044 	movi	r2,1
  80d750:	d8801915 	stw	r2,100(sp)
  80d754:	003d4406 	br	80cc68 <_strtod_r+0x610>
  80d758:	d8c01817 	ldw	r3,96(sp)
  80d75c:	1985883a 	add	r2,r3,r6
  80d760:	11ffffc4 	addi	r7,r2,-1
  80d764:	39000044 	addi	r4,r7,1
  80d768:	00800204 	movi	r2,8
  80d76c:	d9001815 	stw	r4,96(sp)
  80d770:	11c0d716 	blt	r2,r7,80dad0 <_strtod_r+0x1478>
  80d774:	d9001217 	ldw	r4,72(sp)
  80d778:	01400284 	movi	r5,10
  80d77c:	0801c5c0 	call	801c5c <__mulsi3>
  80d780:	1585883a 	add	r2,r2,r22
  80d784:	d8801215 	stw	r2,72(sp)
  80d788:	000d883a 	mov	r6,zero
  80d78c:	84000044 	addi	r16,r16,1
  80d790:	dc000415 	stw	r16,16(sp)
  80d794:	84400007 	ldb	r17,0(r16)
  80d798:	003cfc06 	br	80cb8c <_strtod_r+0x534>
  80d79c:	d8c01a17 	ldw	r3,104(sp)
  80d7a0:	1800321e 	bne	r3,zero,80d86c <_strtod_r+0x1214>
  80d7a4:	e0800017 	ldw	r2,0(fp)
  80d7a8:	1000b31e 	bne	r2,zero,80da78 <_strtod_r+0x1420>
  80d7ac:	e0c00117 	ldw	r3,4(fp)
  80d7b0:	01000434 	movhi	r4,16
  80d7b4:	213fffc4 	addi	r4,r4,-1
  80d7b8:	1904703a 	and	r2,r3,r4
  80d7bc:	1000e71e 	bne	r2,zero,80db5c <_strtod_r+0x1504>
  80d7c0:	18dffc2c 	andhi	r3,r3,32752
  80d7c4:	0081ac34 	movhi	r2,1712
  80d7c8:	10c0282e 	bgeu	r2,r3,80d86c <_strtod_r+0x1214>
  80d7cc:	a0800517 	ldw	r2,20(r20)
  80d7d0:	1000031e 	bne	r2,zero,80d7e0 <_strtod_r+0x1188>
  80d7d4:	a0c00417 	ldw	r3,16(r20)
  80d7d8:	00800044 	movi	r2,1
  80d7dc:	10c0a60e 	bge	r2,r3,80da78 <_strtod_r+0x1420>
  80d7e0:	a00b883a 	mov	r5,r20
  80d7e4:	a809883a 	mov	r4,r21
  80d7e8:	01800044 	movi	r6,1
  80d7ec:	080b5940 	call	80b594 <__lshift>
  80d7f0:	1009883a 	mov	r4,r2
  80d7f4:	b00b883a 	mov	r5,r22
  80d7f8:	1029883a 	mov	r20,r2
  80d7fc:	080adac0 	call	80adac <__mcmp>
  80d800:	00809d0e 	bge	zero,r2,80da78 <_strtod_r+0x1420>
  80d804:	e1800117 	ldw	r6,4(fp)
  80d808:	d9001c17 	ldw	r4,112(sp)
  80d80c:	2013003a 	cmpeq	r9,r4,zero
  80d810:	4800d61e 	bne	r9,zero,80db6c <_strtod_r+0x1514>
  80d814:	30dffc2c 	andhi	r3,r6,32752
  80d818:	0081ac34 	movhi	r2,1712
  80d81c:	10c0d336 	bltu	r2,r3,80db6c <_strtod_r+0x1514>
  80d820:	0080dc34 	movhi	r2,880
  80d824:	10ffc42e 	bgeu	r2,r3,80d738 <_strtod_r+0x10e0>
  80d828:	e0800017 	ldw	r2,0(fp)
  80d82c:	e0c00117 	ldw	r3,4(fp)
  80d830:	020e5434 	movhi	r8,14672
  80d834:	000d883a 	mov	r6,zero
  80d838:	400f883a 	mov	r7,r8
  80d83c:	180b883a 	mov	r5,r3
  80d840:	1009883a 	mov	r4,r2
  80d844:	da000c15 	stw	r8,48(sp)
  80d848:	d8000b15 	stw	zero,44(sp)
  80d84c:	08109100 	call	810910 <__muldf3>
  80d850:	e0800015 	stw	r2,0(fp)
  80d854:	e0c00115 	stw	r3,4(fp)
  80d858:	183f211e 	bne	r3,zero,80d4e0 <_strtod_r+0xe88>
  80d85c:	103f201e 	bne	r2,zero,80d4e0 <_strtod_r+0xe88>
  80d860:	00800884 	movi	r2,34
  80d864:	a8800015 	stw	r2,0(r21)
  80d868:	003f1d06 	br	80d4e0 <_strtod_r+0xe88>
  80d86c:	d9001c17 	ldw	r4,112(sp)
  80d870:	2013003a 	cmpeq	r9,r4,zero
  80d874:	483f1a1e 	bne	r9,zero,80d4e0 <_strtod_r+0xe88>
  80d878:	003feb06 	br	80d828 <_strtod_r+0x11d0>
  80d87c:	d8801c17 	ldw	r2,112(sp)
  80d880:	e1c00017 	ldw	r7,0(fp)
  80d884:	1013003a 	cmpeq	r9,r2,zero
  80d888:	4800c31e 	bne	r9,zero,80db98 <_strtod_r+0x1540>
  80d88c:	28dffc2c 	andhi	r3,r5,32752
  80d890:	0081a834 	movhi	r2,1696
  80d894:	10c0c036 	bltu	r2,r3,80db98 <_strtod_r+0x1540>
  80d898:	1804d53a 	srli	r2,r3,20
  80d89c:	00c01ac4 	movi	r3,107
  80d8a0:	013fffc4 	movi	r4,-1
  80d8a4:	1887c83a 	sub	r3,r3,r2
  80d8a8:	20c4983a 	sll	r2,r4,r3
  80d8ac:	11ff8c1e 	bne	r2,r7,80d6e0 <_strtod_r+0x1088>
  80d8b0:	28dffc2c 	andhi	r3,r5,32752
  80d8b4:	00800434 	movhi	r2,16
  80d8b8:	188d883a 	add	r6,r3,r2
  80d8bc:	e1800115 	stw	r6,4(fp)
  80d8c0:	e0000015 	stw	zero,0(fp)
  80d8c4:	483f061e 	bne	r9,zero,80d4e0 <_strtod_r+0xe88>
  80d8c8:	003fd706 	br	80d828 <_strtod_r+0x11d0>
  80d8cc:	0021883a 	mov	r16,zero
  80d8d0:	0005883a 	mov	r2,zero
  80d8d4:	044ff834 	movhi	r17,16352
  80d8d8:	00eff834 	movhi	r3,49120
  80d8dc:	003e7c06 	br	80d2d0 <_strtod_r+0xc78>
  80d8e0:	803d9226 	beq	r16,zero,80cf2c <_strtod_r+0x8d4>
  80d8e4:	0421c83a 	sub	r16,zero,r16
  80d8e8:	814003cc 	andi	r5,r16,15
  80d8ec:	28000f26 	beq	r5,zero,80d92c <_strtod_r+0x12d4>
  80d8f0:	280a90fa 	slli	r5,r5,3
  80d8f4:	01002074 	movhi	r4,129
  80d8f8:	2113db04 	addi	r4,r4,20332
  80d8fc:	e0800017 	ldw	r2,0(fp)
  80d900:	290b883a 	add	r5,r5,r4
  80d904:	2a000017 	ldw	r8,0(r5)
  80d908:	e0c00117 	ldw	r3,4(fp)
  80d90c:	2a400117 	ldw	r9,4(r5)
  80d910:	1009883a 	mov	r4,r2
  80d914:	180b883a 	mov	r5,r3
  80d918:	480f883a 	mov	r7,r9
  80d91c:	400d883a 	mov	r6,r8
  80d920:	08018700 	call	801870 <__divdf3>
  80d924:	e0c00115 	stw	r3,4(fp)
  80d928:	e0800015 	stw	r2,0(fp)
  80d92c:	8021d13a 	srai	r16,r16,4
  80d930:	803d7e26 	beq	r16,zero,80cf2c <_strtod_r+0x8d4>
  80d934:	008007c4 	movi	r2,31
  80d938:	14002d16 	blt	r2,r16,80d9f0 <_strtod_r+0x1398>
  80d93c:	8080040c 	andi	r2,r16,16
  80d940:	10009d26 	beq	r2,zero,80dbb8 <_strtod_r+0x1560>
  80d944:	01001a84 	movi	r4,106
  80d948:	d9001c15 	stw	r4,112(sp)
  80d94c:	0400110e 	bge	zero,r16,80d994 <_strtod_r+0x133c>
  80d950:	04402074 	movhi	r17,129
  80d954:	8c542804 	addi	r17,r17,20640
  80d958:	8080004c 	andi	r2,r16,1
  80d95c:	1005003a 	cmpeq	r2,r2,zero
  80d960:	1000091e 	bne	r2,zero,80d988 <_strtod_r+0x1330>
  80d964:	e0800017 	ldw	r2,0(fp)
  80d968:	e0c00117 	ldw	r3,4(fp)
  80d96c:	89800017 	ldw	r6,0(r17)
  80d970:	89c00117 	ldw	r7,4(r17)
  80d974:	180b883a 	mov	r5,r3
  80d978:	1009883a 	mov	r4,r2
  80d97c:	08109100 	call	810910 <__muldf3>
  80d980:	e0c00115 	stw	r3,4(fp)
  80d984:	e0800015 	stw	r2,0(fp)
  80d988:	8021d07a 	srai	r16,r16,1
  80d98c:	8c400204 	addi	r17,r17,8
  80d990:	043ff116 	blt	zero,r16,80d958 <_strtod_r+0x1300>
  80d994:	d8801c17 	ldw	r2,112(sp)
  80d998:	10000d26 	beq	r2,zero,80d9d0 <_strtod_r+0x1378>
  80d99c:	e1000117 	ldw	r4,4(fp)
  80d9a0:	00c01ac4 	movi	r3,107
  80d9a4:	209ffc2c 	andhi	r2,r4,32752
  80d9a8:	1004d53a 	srli	r2,r2,20
  80d9ac:	1887c83a 	sub	r3,r3,r2
  80d9b0:	00c0070e 	bge	zero,r3,80d9d0 <_strtod_r+0x1378>
  80d9b4:	008007c4 	movi	r2,31
  80d9b8:	10c0940e 	bge	r2,r3,80dc0c <_strtod_r+0x15b4>
  80d9bc:	00800d04 	movi	r2,52
  80d9c0:	e0000015 	stw	zero,0(fp)
  80d9c4:	10c08b0e 	bge	r2,r3,80dbf4 <_strtod_r+0x159c>
  80d9c8:	0180dc34 	movhi	r6,880
  80d9cc:	e1800115 	stw	r6,4(fp)
  80d9d0:	e0800017 	ldw	r2,0(fp)
  80d9d4:	e0c00117 	ldw	r3,4(fp)
  80d9d8:	000d883a 	mov	r6,zero
  80d9dc:	000f883a 	mov	r7,zero
  80d9e0:	180b883a 	mov	r5,r3
  80d9e4:	1009883a 	mov	r4,r2
  80d9e8:	0810d5c0 	call	810d5c <__nedf2>
  80d9ec:	103d501e 	bne	r2,zero,80cf30 <_strtod_r+0x8d8>
  80d9f0:	00800884 	movi	r2,34
  80d9f4:	a8800015 	stw	r2,0(r21)
  80d9f8:	e0000015 	stw	zero,0(fp)
  80d9fc:	e0000115 	stw	zero,4(fp)
  80da00:	003b9f06 	br	80c880 <_strtod_r+0x228>
  80da04:	e1800117 	ldw	r6,4(fp)
  80da08:	00c00434 	movhi	r3,16
  80da0c:	18ffffc4 	addi	r3,r3,-1
  80da10:	30c4703a 	and	r2,r6,r3
  80da14:	103f311e 	bne	r2,zero,80d6dc <_strtod_r+0x1084>
  80da18:	e1c00017 	ldw	r7,0(fp)
  80da1c:	383f301e 	bne	r7,zero,80d6e0 <_strtod_r+0x1088>
  80da20:	003f7906 	br	80d808 <_strtod_r+0x11b0>
  80da24:	d8c00f17 	ldw	r3,60(sp)
  80da28:	00bffa84 	movi	r2,-22
  80da2c:	18bcbf16 	blt	r3,r2,80cd2c <_strtod_r+0x6d4>
  80da30:	1809883a 	mov	r4,r3
  80da34:	017ffe04 	movi	r5,-8
  80da38:	0801c5c0 	call	801c5c <__mulsi3>
  80da3c:	00c02074 	movhi	r3,129
  80da40:	18d3db04 	addi	r3,r3,20332
  80da44:	10c5883a 	add	r2,r2,r3
  80da48:	e2000017 	ldw	r8,0(fp)
  80da4c:	e2400117 	ldw	r9,4(fp)
  80da50:	12800017 	ldw	r10,0(r2)
  80da54:	12c00117 	ldw	r11,4(r2)
  80da58:	480b883a 	mov	r5,r9
  80da5c:	4009883a 	mov	r4,r8
  80da60:	580f883a 	mov	r7,r11
  80da64:	500d883a 	mov	r6,r10
  80da68:	08018700 	call	801870 <__divdf3>
  80da6c:	e0c00115 	stw	r3,4(fp)
  80da70:	e0800015 	stw	r2,0(fp)
  80da74:	003b8206 	br	80c880 <_strtod_r+0x228>
  80da78:	d8801c17 	ldw	r2,112(sp)
  80da7c:	1013003a 	cmpeq	r9,r2,zero
  80da80:	483e971e 	bne	r9,zero,80d4e0 <_strtod_r+0xe88>
  80da84:	003f6806 	br	80d828 <_strtod_r+0x11d0>
  80da88:	00801a44 	movi	r2,105
  80da8c:	88bc5026 	beq	r17,r2,80cbd0 <_strtod_r+0x578>
  80da90:	00801b84 	movi	r2,110
  80da94:	88bb9b1e 	bne	r17,r2,80c904 <_strtod_r+0x2ac>
  80da98:	dc000404 	addi	r16,sp,16
  80da9c:	8009883a 	mov	r4,r16
  80daa0:	01402074 	movhi	r5,129
  80daa4:	29542704 	addi	r5,r5,20636
  80daa8:	080c6100 	call	80c610 <match>
  80daac:	103b9526 	beq	r2,zero,80c904 <_strtod_r+0x2ac>
  80dab0:	d8800417 	ldw	r2,16(sp)
  80dab4:	00c00a04 	movi	r3,40
  80dab8:	11000007 	ldb	r4,0(r2)
  80dabc:	20c04026 	beq	r4,r3,80dbc0 <_strtod_r+0x1568>
  80dac0:	01bffe34 	movhi	r6,65528
  80dac4:	e1800115 	stw	r6,4(fp)
  80dac8:	e0000015 	stw	zero,0(fp)
  80dacc:	003b6c06 	br	80c880 <_strtod_r+0x228>
  80dad0:	d8c01817 	ldw	r3,96(sp)
  80dad4:	00800404 	movi	r2,16
  80dad8:	10c00516 	blt	r2,r3,80daf0 <_strtod_r+0x1498>
  80dadc:	d9001117 	ldw	r4,68(sp)
  80dae0:	01400284 	movi	r5,10
  80dae4:	0801c5c0 	call	801c5c <__mulsi3>
  80dae8:	1585883a 	add	r2,r2,r22
  80daec:	d8801115 	stw	r2,68(sp)
  80daf0:	000d883a 	mov	r6,zero
  80daf4:	003f2506 	br	80d78c <_strtod_r+0x1134>
  80daf8:	000d883a 	mov	r6,zero
  80dafc:	003ce306 	br	80ce8c <_strtod_r+0x834>
  80db00:	e4400117 	ldw	r17,4(fp)
  80db04:	3809883a 	mov	r4,r7
  80db08:	3821883a 	mov	r16,r7
  80db0c:	880b883a 	mov	r5,r17
  80db10:	080ae0c0 	call	80ae0c <__ulp>
  80db14:	180f883a 	mov	r7,r3
  80db18:	880b883a 	mov	r5,r17
  80db1c:	8009883a 	mov	r4,r16
  80db20:	100d883a 	mov	r6,r2
  80db24:	081089c0 	call	81089c <__adddf3>
  80db28:	180b883a 	mov	r5,r3
  80db2c:	d8c01c17 	ldw	r3,112(sp)
  80db30:	1009883a 	mov	r4,r2
  80db34:	e1400115 	stw	r5,4(fp)
  80db38:	1813003a 	cmpeq	r9,r3,zero
  80db3c:	e1000015 	stw	r4,0(fp)
  80db40:	483e671e 	bne	r9,zero,80d4e0 <_strtod_r+0xe88>
  80db44:	003f3806 	br	80d828 <_strtod_r+0x11d0>
  80db48:	0080d434 	movhi	r2,848
  80db4c:	188d883a 	add	r6,r3,r2
  80db50:	d8001c15 	stw	zero,112(sp)
  80db54:	e1800115 	stw	r6,4(fp)
  80db58:	003cf506 	br	80cf30 <_strtod_r+0x8d8>
  80db5c:	d8c01c17 	ldw	r3,112(sp)
  80db60:	1813003a 	cmpeq	r9,r3,zero
  80db64:	483e5e1e 	bne	r9,zero,80d4e0 <_strtod_r+0xe88>
  80db68:	003f2f06 	br	80d828 <_strtod_r+0x11d0>
  80db6c:	309ffc2c 	andhi	r2,r6,32752
  80db70:	00fffc34 	movhi	r3,65520
  80db74:	10c5883a 	add	r2,r2,r3
  80db78:	00c00434 	movhi	r3,16
  80db7c:	18ffffc4 	addi	r3,r3,-1
  80db80:	10ccb03a 	or	r6,r2,r3
  80db84:	01ffffc4 	movi	r7,-1
  80db88:	e1800115 	stw	r6,4(fp)
  80db8c:	e1c00015 	stw	r7,0(fp)
  80db90:	483e531e 	bne	r9,zero,80d4e0 <_strtod_r+0xe88>
  80db94:	003f2406 	br	80d828 <_strtod_r+0x11d0>
  80db98:	00bfffc4 	movi	r2,-1
  80db9c:	003f4306 	br	80d8ac <_strtod_r+0x1254>
  80dba0:	0025883a 	mov	r18,zero
  80dba4:	05802074 	movhi	r22,129
  80dba8:	b5940d04 	addi	r22,r22,20532
  80dbac:	003c9206 	br	80cdf8 <_strtod_r+0x7a0>
  80dbb0:	d9c01817 	ldw	r7,96(sp)
  80dbb4:	003eeb06 	br	80d764 <_strtod_r+0x110c>
  80dbb8:	d8001c15 	stw	zero,112(sp)
  80dbbc:	003f6306 	br	80d94c <_strtod_r+0x12f4>
  80dbc0:	8009883a 	mov	r4,r16
  80dbc4:	01402074 	movhi	r5,129
  80dbc8:	29564c04 	addi	r5,r5,22832
  80dbcc:	d9800d04 	addi	r6,sp,52
  80dbd0:	080f1c80 	call	80f1c8 <__hexnan>
  80dbd4:	00c00144 	movi	r3,5
  80dbd8:	10ffb91e 	bne	r2,r3,80dac0 <_strtod_r+0x1468>
  80dbdc:	d8800e17 	ldw	r2,56(sp)
  80dbe0:	d9c00d17 	ldw	r7,52(sp)
  80dbe4:	119ffc34 	orhi	r6,r2,32752
  80dbe8:	e1800115 	stw	r6,4(fp)
  80dbec:	e1c00015 	stw	r7,0(fp)
  80dbf0:	003b2306 	br	80c880 <_strtod_r+0x228>
  80dbf4:	18fff804 	addi	r3,r3,-32
  80dbf8:	00bfffc4 	movi	r2,-1
  80dbfc:	10c4983a 	sll	r2,r2,r3
  80dc00:	208c703a 	and	r6,r4,r2
  80dc04:	e1800115 	stw	r6,4(fp)
  80dc08:	003f7106 	br	80d9d0 <_strtod_r+0x1378>
  80dc0c:	00bfffc4 	movi	r2,-1
  80dc10:	10c4983a 	sll	r2,r2,r3
  80dc14:	e0c00017 	ldw	r3,0(fp)
  80dc18:	188e703a 	and	r7,r3,r2
  80dc1c:	e1c00015 	stw	r7,0(fp)
  80dc20:	003f6b06 	br	80d9d0 <_strtod_r+0x1378>

0080dc24 <strtof>:
  80dc24:	defffa04 	addi	sp,sp,-24
  80dc28:	dd000415 	stw	r20,16(sp)
  80dc2c:	05002074 	movhi	r20,129
  80dc30:	a51ae304 	addi	r20,r20,27532
  80dc34:	2007883a 	mov	r3,r4
  80dc38:	a1000017 	ldw	r4,0(r20)
  80dc3c:	280d883a 	mov	r6,r5
  80dc40:	180b883a 	mov	r5,r3
  80dc44:	dfc00515 	stw	ra,20(sp)
  80dc48:	dcc00315 	stw	r19,12(sp)
  80dc4c:	dc800215 	stw	r18,8(sp)
  80dc50:	dc400115 	stw	r17,4(sp)
  80dc54:	dc000015 	stw	r16,0(sp)
  80dc58:	080c6580 	call	80c658 <_strtod_r>
  80dc5c:	180b883a 	mov	r5,r3
  80dc60:	1009883a 	mov	r4,r2
  80dc64:	1823883a 	mov	r17,r3
  80dc68:	1021883a 	mov	r16,r2
  80dc6c:	08111d40 	call	8111d4 <__truncdfsf2>
  80dc70:	1009883a 	mov	r4,r2
  80dc74:	000b883a 	mov	r5,zero
  80dc78:	1025883a 	mov	r18,r2
  80dc7c:	1027883a 	mov	r19,r2
  80dc80:	08102a40 	call	8102a4 <__nesf2>
  80dc84:	000d883a 	mov	r6,zero
  80dc88:	000f883a 	mov	r7,zero
  80dc8c:	8009883a 	mov	r4,r16
  80dc90:	880b883a 	mov	r5,r17
  80dc94:	10000e1e 	bne	r2,zero,80dcd0 <strtof+0xac>
  80dc98:	0810d5c0 	call	810d5c <__nedf2>
  80dc9c:	10000c26 	beq	r2,zero,80dcd0 <strtof+0xac>
  80dca0:	a0c00017 	ldw	r3,0(r20)
  80dca4:	00800884 	movi	r2,34
  80dca8:	18800015 	stw	r2,0(r3)
  80dcac:	9805883a 	mov	r2,r19
  80dcb0:	dfc00517 	ldw	ra,20(sp)
  80dcb4:	dd000417 	ldw	r20,16(sp)
  80dcb8:	dcc00317 	ldw	r19,12(sp)
  80dcbc:	dc800217 	ldw	r18,8(sp)
  80dcc0:	dc400117 	ldw	r17,4(sp)
  80dcc4:	dc000017 	ldw	r16,0(sp)
  80dcc8:	dec00604 	addi	sp,sp,24
  80dccc:	f800283a 	ret
  80dcd0:	9009883a 	mov	r4,r18
  80dcd4:	015fe034 	movhi	r5,32640
  80dcd8:	297fffc4 	addi	r5,r5,-1
  80dcdc:	081031c0 	call	81031c <__gtsf2>
  80dce0:	00ffffc4 	movi	r3,-1
  80dce4:	011ffc34 	movhi	r4,32752
  80dce8:	213fffc4 	addi	r4,r4,-1
  80dcec:	200f883a 	mov	r7,r4
  80dcf0:	180d883a 	mov	r6,r3
  80dcf4:	8009883a 	mov	r4,r16
  80dcf8:	880b883a 	mov	r5,r17
  80dcfc:	00800f16 	blt	zero,r2,80dd3c <strtof+0x118>
  80dd00:	9009883a 	mov	r4,r18
  80dd04:	017fe034 	movhi	r5,65408
  80dd08:	297fffc4 	addi	r5,r5,-1
  80dd0c:	08103940 	call	810394 <__ltsf2>
  80dd10:	023fffc4 	movi	r8,-1
  80dd14:	027ffc34 	movhi	r9,65520
  80dd18:	4a7fffc4 	addi	r9,r9,-1
  80dd1c:	880b883a 	mov	r5,r17
  80dd20:	480f883a 	mov	r7,r9
  80dd24:	8009883a 	mov	r4,r16
  80dd28:	400d883a 	mov	r6,r8
  80dd2c:	103fdf0e 	bge	r2,zero,80dcac <strtof+0x88>
  80dd30:	0810ef40 	call	810ef4 <__ltdf2>
  80dd34:	103fda0e 	bge	r2,zero,80dca0 <strtof+0x7c>
  80dd38:	003fdc06 	br	80dcac <strtof+0x88>
  80dd3c:	0810de40 	call	810de4 <__gtdf2>
  80dd40:	00bfd70e 	bge	zero,r2,80dca0 <strtof+0x7c>
  80dd44:	003fee06 	br	80dd00 <strtof+0xdc>

0080dd48 <strtod>:
  80dd48:	01802074 	movhi	r6,129
  80dd4c:	319ae304 	addi	r6,r6,27532
  80dd50:	2007883a 	mov	r3,r4
  80dd54:	31000017 	ldw	r4,0(r6)
  80dd58:	280d883a 	mov	r6,r5
  80dd5c:	180b883a 	mov	r5,r3
  80dd60:	080c6581 	jmpi	80c658 <_strtod_r>

0080dd64 <_strtol_r>:
  80dd64:	defff304 	addi	sp,sp,-52
  80dd68:	00802074 	movhi	r2,129
  80dd6c:	109ae204 	addi	r2,r2,27528
  80dd70:	dd000715 	stw	r20,28(sp)
  80dd74:	15000017 	ldw	r20,0(r2)
  80dd78:	ddc00a15 	stw	r23,40(sp)
  80dd7c:	dc800515 	stw	r18,20(sp)
  80dd80:	dc400415 	stw	r17,16(sp)
  80dd84:	dfc00c15 	stw	ra,48(sp)
  80dd88:	df000b15 	stw	fp,44(sp)
  80dd8c:	dd800915 	stw	r22,36(sp)
  80dd90:	dd400815 	stw	r21,32(sp)
  80dd94:	dcc00615 	stw	r19,24(sp)
  80dd98:	dc000315 	stw	r16,12(sp)
  80dd9c:	282f883a 	mov	r23,r5
  80dda0:	d9000115 	stw	r4,4(sp)
  80dda4:	d9800215 	stw	r6,8(sp)
  80dda8:	3825883a 	mov	r18,r7
  80ddac:	2823883a 	mov	r17,r5
  80ddb0:	8c000007 	ldb	r16,0(r17)
  80ddb4:	8c400044 	addi	r17,r17,1
  80ddb8:	a407883a 	add	r3,r20,r16
  80ddbc:	18800003 	ldbu	r2,0(r3)
  80ddc0:	1080020c 	andi	r2,r2,8
  80ddc4:	103ffa1e 	bne	r2,zero,80ddb0 <_strtol_r+0x4c>
  80ddc8:	00800b44 	movi	r2,45
  80ddcc:	80805c26 	beq	r16,r2,80df40 <_strtol_r+0x1dc>
  80ddd0:	00800ac4 	movi	r2,43
  80ddd4:	80805726 	beq	r16,r2,80df34 <_strtol_r+0x1d0>
  80ddd8:	d8000015 	stw	zero,0(sp)
  80dddc:	9007003a 	cmpeq	r3,r18,zero
  80dde0:	1800431e 	bne	r3,zero,80def0 <_strtol_r+0x18c>
  80dde4:	00800404 	movi	r2,16
  80dde8:	90804126 	beq	r18,r2,80def0 <_strtol_r+0x18c>
  80ddec:	902b883a 	mov	r21,r18
  80ddf0:	d8c00017 	ldw	r3,0(sp)
  80ddf4:	1838c03a 	cmpne	fp,r3,zero
  80ddf8:	e0004a1e 	bne	fp,zero,80df24 <_strtol_r+0x1c0>
  80ddfc:	04e00034 	movhi	r19,32768
  80de00:	9cffffc4 	addi	r19,r19,-1
  80de04:	9809883a 	mov	r4,r19
  80de08:	a80b883a 	mov	r5,r21
  80de0c:	081138c0 	call	81138c <__umodsi3>
  80de10:	9809883a 	mov	r4,r19
  80de14:	a80b883a 	mov	r5,r21
  80de18:	102d883a 	mov	r22,r2
  80de1c:	08113840 	call	811384 <__udivsi3>
  80de20:	1027883a 	mov	r19,r2
  80de24:	a405883a 	add	r2,r20,r16
  80de28:	11400003 	ldbu	r5,0(r2)
  80de2c:	0009883a 	mov	r4,zero
  80de30:	000d883a 	mov	r6,zero
  80de34:	28c0010c 	andi	r3,r5,4
  80de38:	18000f26 	beq	r3,zero,80de78 <_strtol_r+0x114>
  80de3c:	843ff404 	addi	r16,r16,-48
  80de40:	8480150e 	bge	r16,r18,80de98 <_strtol_r+0x134>
  80de44:	30003216 	blt	r6,zero,80df10 <_strtol_r+0x1ac>
  80de48:	99003136 	bltu	r19,r4,80df10 <_strtol_r+0x1ac>
  80de4c:	24c02f26 	beq	r4,r19,80df0c <_strtol_r+0x1a8>
  80de50:	a80b883a 	mov	r5,r21
  80de54:	0801c5c0 	call	801c5c <__mulsi3>
  80de58:	1409883a 	add	r4,r2,r16
  80de5c:	01800044 	movi	r6,1
  80de60:	8c000007 	ldb	r16,0(r17)
  80de64:	8c400044 	addi	r17,r17,1
  80de68:	a405883a 	add	r2,r20,r16
  80de6c:	11400003 	ldbu	r5,0(r2)
  80de70:	28c0010c 	andi	r3,r5,4
  80de74:	183ff11e 	bne	r3,zero,80de3c <_strtol_r+0xd8>
  80de78:	288000cc 	andi	r2,r5,3
  80de7c:	10000626 	beq	r2,zero,80de98 <_strtol_r+0x134>
  80de80:	2880004c 	andi	r2,r5,1
  80de84:	1005003a 	cmpeq	r2,r2,zero
  80de88:	1000231e 	bne	r2,zero,80df18 <_strtol_r+0x1b4>
  80de8c:	00800dc4 	movi	r2,55
  80de90:	80a1c83a 	sub	r16,r16,r2
  80de94:	84bfeb16 	blt	r16,r18,80de44 <_strtol_r+0xe0>
  80de98:	30002e16 	blt	r6,zero,80df54 <_strtol_r+0x1f0>
  80de9c:	e000231e 	bne	fp,zero,80df2c <_strtol_r+0x1c8>
  80dea0:	2007883a 	mov	r3,r4
  80dea4:	d8800217 	ldw	r2,8(sp)
  80dea8:	10000426 	beq	r2,zero,80debc <_strtol_r+0x158>
  80deac:	30000126 	beq	r6,zero,80deb4 <_strtol_r+0x150>
  80deb0:	8dffffc4 	addi	r23,r17,-1
  80deb4:	d9000217 	ldw	r4,8(sp)
  80deb8:	25c00015 	stw	r23,0(r4)
  80debc:	1805883a 	mov	r2,r3
  80dec0:	dfc00c17 	ldw	ra,48(sp)
  80dec4:	df000b17 	ldw	fp,44(sp)
  80dec8:	ddc00a17 	ldw	r23,40(sp)
  80decc:	dd800917 	ldw	r22,36(sp)
  80ded0:	dd400817 	ldw	r21,32(sp)
  80ded4:	dd000717 	ldw	r20,28(sp)
  80ded8:	dcc00617 	ldw	r19,24(sp)
  80dedc:	dc800517 	ldw	r18,20(sp)
  80dee0:	dc400417 	ldw	r17,16(sp)
  80dee4:	dc000317 	ldw	r16,12(sp)
  80dee8:	dec00d04 	addi	sp,sp,52
  80deec:	f800283a 	ret
  80def0:	00800c04 	movi	r2,48
  80def4:	80801f26 	beq	r16,r2,80df74 <_strtol_r+0x210>
  80def8:	183fbc26 	beq	r3,zero,80ddec <_strtol_r+0x88>
  80defc:	00800c04 	movi	r2,48
  80df00:	80802926 	beq	r16,r2,80dfa8 <_strtol_r+0x244>
  80df04:	04800284 	movi	r18,10
  80df08:	003fb806 	br	80ddec <_strtol_r+0x88>
  80df0c:	b43fd00e 	bge	r22,r16,80de50 <_strtol_r+0xec>
  80df10:	01bfffc4 	movi	r6,-1
  80df14:	003fd206 	br	80de60 <_strtol_r+0xfc>
  80df18:	008015c4 	movi	r2,87
  80df1c:	80a1c83a 	sub	r16,r16,r2
  80df20:	003fdc06 	br	80de94 <_strtol_r+0x130>
  80df24:	04e00034 	movhi	r19,32768
  80df28:	003fb606 	br	80de04 <_strtol_r+0xa0>
  80df2c:	0107c83a 	sub	r3,zero,r4
  80df30:	003fdc06 	br	80dea4 <_strtol_r+0x140>
  80df34:	8c000007 	ldb	r16,0(r17)
  80df38:	8c400044 	addi	r17,r17,1
  80df3c:	003fa606 	br	80ddd8 <_strtol_r+0x74>
  80df40:	8c000007 	ldb	r16,0(r17)
  80df44:	00800044 	movi	r2,1
  80df48:	8c400044 	addi	r17,r17,1
  80df4c:	d8800015 	stw	r2,0(sp)
  80df50:	003fa206 	br	80dddc <_strtol_r+0x78>
  80df54:	d9000017 	ldw	r4,0(sp)
  80df58:	2005003a 	cmpeq	r2,r4,zero
  80df5c:	10000f1e 	bne	r2,zero,80df9c <_strtol_r+0x238>
  80df60:	00e00034 	movhi	r3,32768
  80df64:	d9000117 	ldw	r4,4(sp)
  80df68:	00800884 	movi	r2,34
  80df6c:	20800015 	stw	r2,0(r4)
  80df70:	003fcc06 	br	80dea4 <_strtol_r+0x140>
  80df74:	89000007 	ldb	r4,0(r17)
  80df78:	00801e04 	movi	r2,120
  80df7c:	20800226 	beq	r4,r2,80df88 <_strtol_r+0x224>
  80df80:	00801604 	movi	r2,88
  80df84:	20bfdc1e 	bne	r4,r2,80def8 <_strtol_r+0x194>
  80df88:	8c000047 	ldb	r16,1(r17)
  80df8c:	04800404 	movi	r18,16
  80df90:	8c400084 	addi	r17,r17,2
  80df94:	902b883a 	mov	r21,r18
  80df98:	003f9506 	br	80ddf0 <_strtol_r+0x8c>
  80df9c:	00e00034 	movhi	r3,32768
  80dfa0:	18ffffc4 	addi	r3,r3,-1
  80dfa4:	003fef06 	br	80df64 <_strtol_r+0x200>
  80dfa8:	04800204 	movi	r18,8
  80dfac:	902b883a 	mov	r21,r18
  80dfb0:	003f8f06 	br	80ddf0 <_strtol_r+0x8c>

0080dfb4 <strtol>:
  80dfb4:	00802074 	movhi	r2,129
  80dfb8:	109ae304 	addi	r2,r2,27532
  80dfbc:	2013883a 	mov	r9,r4
  80dfc0:	11000017 	ldw	r4,0(r2)
  80dfc4:	2805883a 	mov	r2,r5
  80dfc8:	300f883a 	mov	r7,r6
  80dfcc:	480b883a 	mov	r5,r9
  80dfd0:	100d883a 	mov	r6,r2
  80dfd4:	080dd641 	jmpi	80dd64 <_strtol_r>

0080dfd8 <_strtoll_r>:
  80dfd8:	defff004 	addi	sp,sp,-64
  80dfdc:	00802074 	movhi	r2,129
  80dfe0:	109ae204 	addi	r2,r2,27528
  80dfe4:	df000e15 	stw	fp,56(sp)
  80dfe8:	17000017 	ldw	fp,0(r2)
  80dfec:	ddc00d15 	stw	r23,52(sp)
  80dff0:	dd000a15 	stw	r20,40(sp)
  80dff4:	dfc00f15 	stw	ra,60(sp)
  80dff8:	dd800c15 	stw	r22,48(sp)
  80dffc:	dd400b15 	stw	r21,44(sp)
  80e000:	dcc00915 	stw	r19,36(sp)
  80e004:	dc800815 	stw	r18,32(sp)
  80e008:	dc400715 	stw	r17,28(sp)
  80e00c:	dc000615 	stw	r16,24(sp)
  80e010:	d9400315 	stw	r5,12(sp)
  80e014:	d9000215 	stw	r4,8(sp)
  80e018:	d9800415 	stw	r6,16(sp)
  80e01c:	382f883a 	mov	r23,r7
  80e020:	2829883a 	mov	r20,r5
  80e024:	a4c00007 	ldb	r19,0(r20)
  80e028:	a5000044 	addi	r20,r20,1
  80e02c:	e4c7883a 	add	r3,fp,r19
  80e030:	18800003 	ldbu	r2,0(r3)
  80e034:	1080020c 	andi	r2,r2,8
  80e038:	103ffa1e 	bne	r2,zero,80e024 <_strtoll_r+0x4c>
  80e03c:	00800b44 	movi	r2,45
  80e040:	98808826 	beq	r19,r2,80e264 <_strtoll_r+0x28c>
  80e044:	00800ac4 	movi	r2,43
  80e048:	98808326 	beq	r19,r2,80e258 <_strtoll_r+0x280>
  80e04c:	d8000115 	stw	zero,4(sp)
  80e050:	b807003a 	cmpeq	r3,r23,zero
  80e054:	18005f1e 	bne	r3,zero,80e1d4 <_strtoll_r+0x1fc>
  80e058:	00800404 	movi	r2,16
  80e05c:	b8805d26 	beq	r23,r2,80e1d4 <_strtoll_r+0x1fc>
  80e060:	b82dd7fa 	srai	r22,r23,31
  80e064:	b82b883a 	mov	r21,r23
  80e068:	d8c00117 	ldw	r3,4(sp)
  80e06c:	1806c03a 	cmpne	r3,r3,zero
  80e070:	d8c00515 	stw	r3,20(sp)
  80e074:	1800631e 	bne	r3,zero,80e204 <_strtoll_r+0x22c>
  80e078:	043fffc4 	movi	r16,-1
  80e07c:	04600034 	movhi	r17,32768
  80e080:	8c7fffc4 	addi	r17,r17,-1
  80e084:	880b883a 	mov	r5,r17
  80e088:	8009883a 	mov	r4,r16
  80e08c:	a80d883a 	mov	r6,r21
  80e090:	b00f883a 	mov	r7,r22
  80e094:	080fc440 	call	80fc44 <__umoddi3>
  80e098:	880b883a 	mov	r5,r17
  80e09c:	8009883a 	mov	r4,r16
  80e0a0:	b00f883a 	mov	r7,r22
  80e0a4:	a80d883a 	mov	r6,r21
  80e0a8:	d8800015 	stw	r2,0(sp)
  80e0ac:	080f5d80 	call	80f5d8 <__udivdi3>
  80e0b0:	1023883a 	mov	r17,r2
  80e0b4:	e4c5883a 	add	r2,fp,r19
  80e0b8:	11000003 	ldbu	r4,0(r2)
  80e0bc:	1825883a 	mov	r18,r3
  80e0c0:	0015883a 	mov	r10,zero
  80e0c4:	20c0010c 	andi	r3,r4,4
  80e0c8:	0017883a 	mov	r11,zero
  80e0cc:	000f883a 	mov	r7,zero
  80e0d0:	18001a26 	beq	r3,zero,80e13c <_strtoll_r+0x164>
  80e0d4:	9c3ff404 	addi	r16,r19,-48
  80e0d8:	85c0200e 	bge	r16,r23,80e15c <_strtoll_r+0x184>
  80e0dc:	38003b16 	blt	r7,zero,80e1cc <_strtoll_r+0x1f4>
  80e0e0:	92c03a36 	bltu	r18,r11,80e1cc <_strtoll_r+0x1f4>
  80e0e4:	5c803826 	beq	r11,r18,80e1c8 <_strtoll_r+0x1f0>
  80e0e8:	54404c26 	beq	r10,r17,80e21c <_strtoll_r+0x244>
  80e0ec:	580b883a 	mov	r5,r11
  80e0f0:	5009883a 	mov	r4,r10
  80e0f4:	a80d883a 	mov	r6,r21
  80e0f8:	b00f883a 	mov	r7,r22
  80e0fc:	080f4100 	call	80f410 <__muldi3>
  80e100:	8013d7fa 	srai	r9,r16,31
  80e104:	100d883a 	mov	r6,r2
  80e108:	1405883a 	add	r2,r2,r16
  80e10c:	118d803a 	cmpltu	r6,r2,r6
  80e110:	1a47883a 	add	r3,r3,r9
  80e114:	30cd883a 	add	r6,r6,r3
  80e118:	1015883a 	mov	r10,r2
  80e11c:	3017883a 	mov	r11,r6
  80e120:	01c00044 	movi	r7,1
  80e124:	a4c00007 	ldb	r19,0(r20)
  80e128:	a5000044 	addi	r20,r20,1
  80e12c:	e4c5883a 	add	r2,fp,r19
  80e130:	11000003 	ldbu	r4,0(r2)
  80e134:	20c0010c 	andi	r3,r4,4
  80e138:	183fe61e 	bne	r3,zero,80e0d4 <_strtoll_r+0xfc>
  80e13c:	208000cc 	andi	r2,r4,3
  80e140:	10000626 	beq	r2,zero,80e15c <_strtoll_r+0x184>
  80e144:	2080004c 	andi	r2,r4,1
  80e148:	1005003a 	cmpeq	r2,r2,zero
  80e14c:	1000301e 	bne	r2,zero,80e210 <_strtoll_r+0x238>
  80e150:	02000dc4 	movi	r8,55
  80e154:	9a21c83a 	sub	r16,r19,r8
  80e158:	85ffe016 	blt	r16,r23,80e0dc <_strtoll_r+0x104>
  80e15c:	38004616 	blt	r7,zero,80e278 <_strtoll_r+0x2a0>
  80e160:	d8800517 	ldw	r2,20(sp)
  80e164:	1000341e 	bne	r2,zero,80e238 <_strtoll_r+0x260>
  80e168:	500b883a 	mov	r5,r10
  80e16c:	580d883a 	mov	r6,r11
  80e170:	d8c00417 	ldw	r3,16(sp)
  80e174:	18000626 	beq	r3,zero,80e190 <_strtoll_r+0x1b8>
  80e178:	38000226 	beq	r7,zero,80e184 <_strtoll_r+0x1ac>
  80e17c:	a53fffc4 	addi	r20,r20,-1
  80e180:	dd000315 	stw	r20,12(sp)
  80e184:	d8c00317 	ldw	r3,12(sp)
  80e188:	d8800417 	ldw	r2,16(sp)
  80e18c:	10c00015 	stw	r3,0(r2)
  80e190:	2805883a 	mov	r2,r5
  80e194:	3007883a 	mov	r3,r6
  80e198:	dfc00f17 	ldw	ra,60(sp)
  80e19c:	df000e17 	ldw	fp,56(sp)
  80e1a0:	ddc00d17 	ldw	r23,52(sp)
  80e1a4:	dd800c17 	ldw	r22,48(sp)
  80e1a8:	dd400b17 	ldw	r21,44(sp)
  80e1ac:	dd000a17 	ldw	r20,40(sp)
  80e1b0:	dcc00917 	ldw	r19,36(sp)
  80e1b4:	dc800817 	ldw	r18,32(sp)
  80e1b8:	dc400717 	ldw	r17,28(sp)
  80e1bc:	dc000617 	ldw	r16,24(sp)
  80e1c0:	dec01004 	addi	sp,sp,64
  80e1c4:	f800283a 	ret
  80e1c8:	8abfc72e 	bgeu	r17,r10,80e0e8 <_strtoll_r+0x110>
  80e1cc:	01ffffc4 	movi	r7,-1
  80e1d0:	003fd406 	br	80e124 <_strtoll_r+0x14c>
  80e1d4:	00800c04 	movi	r2,48
  80e1d8:	98803226 	beq	r19,r2,80e2a4 <_strtoll_r+0x2cc>
  80e1dc:	183fa026 	beq	r3,zero,80e060 <_strtoll_r+0x88>
  80e1e0:	00800c04 	movi	r2,48
  80e1e4:	98803e26 	beq	r19,r2,80e2e0 <_strtoll_r+0x308>
  80e1e8:	d8c00117 	ldw	r3,4(sp)
  80e1ec:	05c00284 	movi	r23,10
  80e1f0:	b82b883a 	mov	r21,r23
  80e1f4:	1806c03a 	cmpne	r3,r3,zero
  80e1f8:	002d883a 	mov	r22,zero
  80e1fc:	d8c00515 	stw	r3,20(sp)
  80e200:	183f9d26 	beq	r3,zero,80e078 <_strtoll_r+0xa0>
  80e204:	0021883a 	mov	r16,zero
  80e208:	04600034 	movhi	r17,32768
  80e20c:	003f9d06 	br	80e084 <_strtoll_r+0xac>
  80e210:	020015c4 	movi	r8,87
  80e214:	9a21c83a 	sub	r16,r19,r8
  80e218:	003fcf06 	br	80e158 <_strtoll_r+0x180>
  80e21c:	5cbfb31e 	bne	r11,r18,80e0ec <_strtoll_r+0x114>
  80e220:	d8800017 	ldw	r2,0(sp)
  80e224:	143fb10e 	bge	r2,r16,80e0ec <_strtoll_r+0x114>
  80e228:	8815883a 	mov	r10,r17
  80e22c:	9017883a 	mov	r11,r18
  80e230:	01ffffc4 	movi	r7,-1
  80e234:	003fbb06 	br	80e124 <_strtoll_r+0x14c>
  80e238:	0009883a 	mov	r4,zero
  80e23c:	2285c83a 	sub	r2,r4,r10
  80e240:	2089803a 	cmpltu	r4,r4,r2
  80e244:	02c7c83a 	sub	r3,zero,r11
  80e248:	1909c83a 	sub	r4,r3,r4
  80e24c:	100b883a 	mov	r5,r2
  80e250:	200d883a 	mov	r6,r4
  80e254:	003fc606 	br	80e170 <_strtoll_r+0x198>
  80e258:	a4c00007 	ldb	r19,0(r20)
  80e25c:	a5000044 	addi	r20,r20,1
  80e260:	003f7a06 	br	80e04c <_strtoll_r+0x74>
  80e264:	a4c00007 	ldb	r19,0(r20)
  80e268:	00800044 	movi	r2,1
  80e26c:	a5000044 	addi	r20,r20,1
  80e270:	d8800115 	stw	r2,4(sp)
  80e274:	003f7606 	br	80e050 <_strtoll_r+0x78>
  80e278:	d8c00117 	ldw	r3,4(sp)
  80e27c:	1805003a 	cmpeq	r2,r3,zero
  80e280:	1000131e 	bne	r2,zero,80e2d0 <_strtoll_r+0x2f8>
  80e284:	0005883a 	mov	r2,zero
  80e288:	00e00034 	movhi	r3,32768
  80e28c:	100b883a 	mov	r5,r2
  80e290:	180d883a 	mov	r6,r3
  80e294:	d8c00217 	ldw	r3,8(sp)
  80e298:	00800884 	movi	r2,34
  80e29c:	18800015 	stw	r2,0(r3)
  80e2a0:	003fb306 	br	80e170 <_strtoll_r+0x198>
  80e2a4:	a1000007 	ldb	r4,0(r20)
  80e2a8:	00801e04 	movi	r2,120
  80e2ac:	20800226 	beq	r4,r2,80e2b8 <_strtoll_r+0x2e0>
  80e2b0:	00801604 	movi	r2,88
  80e2b4:	20bfc91e 	bne	r4,r2,80e1dc <_strtoll_r+0x204>
  80e2b8:	a4c00047 	ldb	r19,1(r20)
  80e2bc:	05c00404 	movi	r23,16
  80e2c0:	b82b883a 	mov	r21,r23
  80e2c4:	a5000084 	addi	r20,r20,2
  80e2c8:	002d883a 	mov	r22,zero
  80e2cc:	003f6606 	br	80e068 <_strtoll_r+0x90>
  80e2d0:	017fffc4 	movi	r5,-1
  80e2d4:	01a00034 	movhi	r6,32768
  80e2d8:	31bfffc4 	addi	r6,r6,-1
  80e2dc:	003fed06 	br	80e294 <_strtoll_r+0x2bc>
  80e2e0:	05c00204 	movi	r23,8
  80e2e4:	b82b883a 	mov	r21,r23
  80e2e8:	002d883a 	mov	r22,zero
  80e2ec:	003f5e06 	br	80e068 <_strtoll_r+0x90>

0080e2f0 <_strtoul_r>:
  80e2f0:	defff404 	addi	sp,sp,-48
  80e2f4:	00802074 	movhi	r2,129
  80e2f8:	109ae204 	addi	r2,r2,27528
  80e2fc:	dd000615 	stw	r20,24(sp)
  80e300:	15000017 	ldw	r20,0(r2)
  80e304:	df000a15 	stw	fp,40(sp)
  80e308:	ddc00915 	stw	r23,36(sp)
  80e30c:	dc800415 	stw	r18,16(sp)
  80e310:	dc400315 	stw	r17,12(sp)
  80e314:	dfc00b15 	stw	ra,44(sp)
  80e318:	dd800815 	stw	r22,32(sp)
  80e31c:	dd400715 	stw	r21,28(sp)
  80e320:	dcc00515 	stw	r19,20(sp)
  80e324:	dc000215 	stw	r16,8(sp)
  80e328:	282f883a 	mov	r23,r5
  80e32c:	d9000115 	stw	r4,4(sp)
  80e330:	3039883a 	mov	fp,r6
  80e334:	3825883a 	mov	r18,r7
  80e338:	2823883a 	mov	r17,r5
  80e33c:	8c000007 	ldb	r16,0(r17)
  80e340:	8c400044 	addi	r17,r17,1
  80e344:	a407883a 	add	r3,r20,r16
  80e348:	18800003 	ldbu	r2,0(r3)
  80e34c:	1080020c 	andi	r2,r2,8
  80e350:	103ffa1e 	bne	r2,zero,80e33c <_strtoul_r+0x4c>
  80e354:	00800b44 	movi	r2,45
  80e358:	80805826 	beq	r16,r2,80e4bc <_strtoul_r+0x1cc>
  80e35c:	00800ac4 	movi	r2,43
  80e360:	80805326 	beq	r16,r2,80e4b0 <_strtoul_r+0x1c0>
  80e364:	d8000015 	stw	zero,0(sp)
  80e368:	9007003a 	cmpeq	r3,r18,zero
  80e36c:	18003d1e 	bne	r3,zero,80e464 <_strtoul_r+0x174>
  80e370:	00800404 	movi	r2,16
  80e374:	90803b26 	beq	r18,r2,80e464 <_strtoul_r+0x174>
  80e378:	013fffc4 	movi	r4,-1
  80e37c:	900b883a 	mov	r5,r18
  80e380:	08113840 	call	811384 <__udivsi3>
  80e384:	013fffc4 	movi	r4,-1
  80e388:	900b883a 	mov	r5,r18
  80e38c:	1027883a 	mov	r19,r2
  80e390:	081138c0 	call	81138c <__umodsi3>
  80e394:	102d883a 	mov	r22,r2
  80e398:	902b883a 	mov	r21,r18
  80e39c:	a405883a 	add	r2,r20,r16
  80e3a0:	11400003 	ldbu	r5,0(r2)
  80e3a4:	0009883a 	mov	r4,zero
  80e3a8:	000d883a 	mov	r6,zero
  80e3ac:	28c0010c 	andi	r3,r5,4
  80e3b0:	18000f26 	beq	r3,zero,80e3f0 <_strtoul_r+0x100>
  80e3b4:	843ff404 	addi	r16,r16,-48
  80e3b8:	8480150e 	bge	r16,r18,80e410 <_strtoul_r+0x120>
  80e3bc:	30003516 	blt	r6,zero,80e494 <_strtoul_r+0x1a4>
  80e3c0:	99003436 	bltu	r19,r4,80e494 <_strtoul_r+0x1a4>
  80e3c4:	24c03226 	beq	r4,r19,80e490 <_strtoul_r+0x1a0>
  80e3c8:	a80b883a 	mov	r5,r21
  80e3cc:	0801c5c0 	call	801c5c <__mulsi3>
  80e3d0:	1409883a 	add	r4,r2,r16
  80e3d4:	01800044 	movi	r6,1
  80e3d8:	8c000007 	ldb	r16,0(r17)
  80e3dc:	8c400044 	addi	r17,r17,1
  80e3e0:	a405883a 	add	r2,r20,r16
  80e3e4:	11400003 	ldbu	r5,0(r2)
  80e3e8:	28c0010c 	andi	r3,r5,4
  80e3ec:	183ff11e 	bne	r3,zero,80e3b4 <_strtoul_r+0xc4>
  80e3f0:	288000cc 	andi	r2,r5,3
  80e3f4:	10000626 	beq	r2,zero,80e410 <_strtoul_r+0x120>
  80e3f8:	2880004c 	andi	r2,r5,1
  80e3fc:	1005003a 	cmpeq	r2,r2,zero
  80e400:	1000261e 	bne	r2,zero,80e49c <_strtoul_r+0x1ac>
  80e404:	00800dc4 	movi	r2,55
  80e408:	80a1c83a 	sub	r16,r16,r2
  80e40c:	84bfeb16 	blt	r16,r18,80e3bc <_strtoul_r+0xcc>
  80e410:	3000420e 	bge	r6,zero,80e51c <_strtoul_r+0x22c>
  80e414:	d8c00117 	ldw	r3,4(sp)
  80e418:	00800884 	movi	r2,34
  80e41c:	013fffc4 	movi	r4,-1
  80e420:	18800015 	stw	r2,0(r3)
  80e424:	e0000226 	beq	fp,zero,80e430 <_strtoul_r+0x140>
  80e428:	30001f1e 	bne	r6,zero,80e4a8 <_strtoul_r+0x1b8>
  80e42c:	e5c00015 	stw	r23,0(fp)
  80e430:	2005883a 	mov	r2,r4
  80e434:	dfc00b17 	ldw	ra,44(sp)
  80e438:	df000a17 	ldw	fp,40(sp)
  80e43c:	ddc00917 	ldw	r23,36(sp)
  80e440:	dd800817 	ldw	r22,32(sp)
  80e444:	dd400717 	ldw	r21,28(sp)
  80e448:	dd000617 	ldw	r20,24(sp)
  80e44c:	dcc00517 	ldw	r19,20(sp)
  80e450:	dc800417 	ldw	r18,16(sp)
  80e454:	dc400317 	ldw	r17,12(sp)
  80e458:	dc000217 	ldw	r16,8(sp)
  80e45c:	dec00c04 	addi	sp,sp,48
  80e460:	f800283a 	ret
  80e464:	00800c04 	movi	r2,48
  80e468:	80801926 	beq	r16,r2,80e4d0 <_strtoul_r+0x1e0>
  80e46c:	183fc226 	beq	r3,zero,80e378 <_strtoul_r+0x88>
  80e470:	00800c04 	movi	r2,48
  80e474:	80802326 	beq	r16,r2,80e504 <_strtoul_r+0x214>
  80e478:	04800284 	movi	r18,10
  80e47c:	902b883a 	mov	r21,r18
  80e480:	04c666b4 	movhi	r19,6554
  80e484:	9ce66644 	addi	r19,r19,-26215
  80e488:	05800144 	movi	r22,5
  80e48c:	003fc306 	br	80e39c <_strtoul_r+0xac>
  80e490:	b43fcd0e 	bge	r22,r16,80e3c8 <_strtoul_r+0xd8>
  80e494:	01bfffc4 	movi	r6,-1
  80e498:	003fcf06 	br	80e3d8 <_strtoul_r+0xe8>
  80e49c:	008015c4 	movi	r2,87
  80e4a0:	80a1c83a 	sub	r16,r16,r2
  80e4a4:	003fd906 	br	80e40c <_strtoul_r+0x11c>
  80e4a8:	8dffffc4 	addi	r23,r17,-1
  80e4ac:	003fdf06 	br	80e42c <_strtoul_r+0x13c>
  80e4b0:	8c000007 	ldb	r16,0(r17)
  80e4b4:	8c400044 	addi	r17,r17,1
  80e4b8:	003faa06 	br	80e364 <_strtoul_r+0x74>
  80e4bc:	8c000007 	ldb	r16,0(r17)
  80e4c0:	00800044 	movi	r2,1
  80e4c4:	8c400044 	addi	r17,r17,1
  80e4c8:	d8800015 	stw	r2,0(sp)
  80e4cc:	003fa606 	br	80e368 <_strtoul_r+0x78>
  80e4d0:	89000007 	ldb	r4,0(r17)
  80e4d4:	00801e04 	movi	r2,120
  80e4d8:	20800226 	beq	r4,r2,80e4e4 <_strtoul_r+0x1f4>
  80e4dc:	00801604 	movi	r2,88
  80e4e0:	20bfe21e 	bne	r4,r2,80e46c <_strtoul_r+0x17c>
  80e4e4:	8c000047 	ldb	r16,1(r17)
  80e4e8:	04800404 	movi	r18,16
  80e4ec:	8c400084 	addi	r17,r17,2
  80e4f0:	902b883a 	mov	r21,r18
  80e4f4:	04c40034 	movhi	r19,4096
  80e4f8:	9cffffc4 	addi	r19,r19,-1
  80e4fc:	058003c4 	movi	r22,15
  80e500:	003fa606 	br	80e39c <_strtoul_r+0xac>
  80e504:	04800204 	movi	r18,8
  80e508:	902b883a 	mov	r21,r18
  80e50c:	04c80034 	movhi	r19,8192
  80e510:	9cffffc4 	addi	r19,r19,-1
  80e514:	058001c4 	movi	r22,7
  80e518:	003fa006 	br	80e39c <_strtoul_r+0xac>
  80e51c:	d8c00017 	ldw	r3,0(sp)
  80e520:	1805003a 	cmpeq	r2,r3,zero
  80e524:	103fbf1e 	bne	r2,zero,80e424 <_strtoul_r+0x134>
  80e528:	0109c83a 	sub	r4,zero,r4
  80e52c:	003fbd06 	br	80e424 <_strtoul_r+0x134>

0080e530 <strtoul>:
  80e530:	00802074 	movhi	r2,129
  80e534:	109ae304 	addi	r2,r2,27532
  80e538:	2013883a 	mov	r9,r4
  80e53c:	11000017 	ldw	r4,0(r2)
  80e540:	2805883a 	mov	r2,r5
  80e544:	300f883a 	mov	r7,r6
  80e548:	480b883a 	mov	r5,r9
  80e54c:	100d883a 	mov	r6,r2
  80e550:	080e2f01 	jmpi	80e2f0 <_strtoul_r>

0080e554 <_strtoull_r>:
  80e554:	defff104 	addi	sp,sp,-60
  80e558:	00802074 	movhi	r2,129
  80e55c:	109ae204 	addi	r2,r2,27528
  80e560:	df000d15 	stw	fp,52(sp)
  80e564:	17000017 	ldw	fp,0(r2)
  80e568:	ddc00c15 	stw	r23,48(sp)
  80e56c:	dcc00815 	stw	r19,32(sp)
  80e570:	dfc00e15 	stw	ra,56(sp)
  80e574:	dd800b15 	stw	r22,44(sp)
  80e578:	dd400a15 	stw	r21,40(sp)
  80e57c:	dd000915 	stw	r20,36(sp)
  80e580:	dc800715 	stw	r18,28(sp)
  80e584:	dc400615 	stw	r17,24(sp)
  80e588:	dc000515 	stw	r16,20(sp)
  80e58c:	d9400215 	stw	r5,8(sp)
  80e590:	d9000115 	stw	r4,4(sp)
  80e594:	d9800315 	stw	r6,12(sp)
  80e598:	382f883a 	mov	r23,r7
  80e59c:	2827883a 	mov	r19,r5
  80e5a0:	9d000007 	ldb	r20,0(r19)
  80e5a4:	9cc00044 	addi	r19,r19,1
  80e5a8:	e507883a 	add	r3,fp,r20
  80e5ac:	18800003 	ldbu	r2,0(r3)
  80e5b0:	1080020c 	andi	r2,r2,8
  80e5b4:	103ffa1e 	bne	r2,zero,80e5a0 <_strtoull_r+0x4c>
  80e5b8:	00800b44 	movi	r2,45
  80e5bc:	a0807a26 	beq	r20,r2,80e7a8 <_strtoull_r+0x254>
  80e5c0:	00800ac4 	movi	r2,43
  80e5c4:	a0807526 	beq	r20,r2,80e79c <_strtoull_r+0x248>
  80e5c8:	d8000015 	stw	zero,0(sp)
  80e5cc:	b807003a 	cmpeq	r3,r23,zero
  80e5d0:	18005a1e 	bne	r3,zero,80e73c <_strtoull_r+0x1e8>
  80e5d4:	00800404 	movi	r2,16
  80e5d8:	b8805826 	beq	r23,r2,80e73c <_strtoull_r+0x1e8>
  80e5dc:	b82dd7fa 	srai	r22,r23,31
  80e5e0:	043fffc4 	movi	r16,-1
  80e5e4:	8009883a 	mov	r4,r16
  80e5e8:	800b883a 	mov	r5,r16
  80e5ec:	b80d883a 	mov	r6,r23
  80e5f0:	b00f883a 	mov	r7,r22
  80e5f4:	080f5d80 	call	80f5d8 <__udivdi3>
  80e5f8:	8009883a 	mov	r4,r16
  80e5fc:	800b883a 	mov	r5,r16
  80e600:	b80d883a 	mov	r6,r23
  80e604:	b00f883a 	mov	r7,r22
  80e608:	1023883a 	mov	r17,r2
  80e60c:	1825883a 	mov	r18,r3
  80e610:	080fc440 	call	80fc44 <__umoddi3>
  80e614:	b82b883a 	mov	r21,r23
  80e618:	1019883a 	mov	r12,r2
  80e61c:	e505883a 	add	r2,fp,r20
  80e620:	11000003 	ldbu	r4,0(r2)
  80e624:	0015883a 	mov	r10,zero
  80e628:	0017883a 	mov	r11,zero
  80e62c:	20c0010c 	andi	r3,r4,4
  80e630:	000d883a 	mov	r6,zero
  80e634:	18001c26 	beq	r3,zero,80e6a8 <_strtoull_r+0x154>
  80e638:	a43ff404 	addi	r16,r20,-48
  80e63c:	85c0220e 	bge	r16,r23,80e6c8 <_strtoull_r+0x174>
  80e640:	30003c16 	blt	r6,zero,80e734 <_strtoull_r+0x1e0>
  80e644:	92c03b36 	bltu	r18,r11,80e734 <_strtoull_r+0x1e0>
  80e648:	5c803926 	beq	r11,r18,80e730 <_strtoull_r+0x1dc>
  80e64c:	54404c26 	beq	r10,r17,80e780 <_strtoull_r+0x22c>
  80e650:	580b883a 	mov	r5,r11
  80e654:	5009883a 	mov	r4,r10
  80e658:	a80d883a 	mov	r6,r21
  80e65c:	b00f883a 	mov	r7,r22
  80e660:	db000415 	stw	r12,16(sp)
  80e664:	080f4100 	call	80f410 <__muldi3>
  80e668:	8013d7fa 	srai	r9,r16,31
  80e66c:	100d883a 	mov	r6,r2
  80e670:	1405883a 	add	r2,r2,r16
  80e674:	118d803a 	cmpltu	r6,r2,r6
  80e678:	1a47883a 	add	r3,r3,r9
  80e67c:	db000417 	ldw	r12,16(sp)
  80e680:	30cd883a 	add	r6,r6,r3
  80e684:	3017883a 	mov	r11,r6
  80e688:	1015883a 	mov	r10,r2
  80e68c:	01800044 	movi	r6,1
  80e690:	9d000007 	ldb	r20,0(r19)
  80e694:	9cc00044 	addi	r19,r19,1
  80e698:	e505883a 	add	r2,fp,r20
  80e69c:	11000003 	ldbu	r4,0(r2)
  80e6a0:	20c0010c 	andi	r3,r4,4
  80e6a4:	183fe41e 	bne	r3,zero,80e638 <_strtoull_r+0xe4>
  80e6a8:	208000cc 	andi	r2,r4,3
  80e6ac:	10000626 	beq	r2,zero,80e6c8 <_strtoull_r+0x174>
  80e6b0:	2080004c 	andi	r2,r4,1
  80e6b4:	1005003a 	cmpeq	r2,r2,zero
  80e6b8:	10002e1e 	bne	r2,zero,80e774 <_strtoull_r+0x220>
  80e6bc:	02000dc4 	movi	r8,55
  80e6c0:	a221c83a 	sub	r16,r20,r8
  80e6c4:	85ffde16 	blt	r16,r23,80e640 <_strtoull_r+0xec>
  80e6c8:	3000530e 	bge	r6,zero,80e818 <_strtoull_r+0x2c4>
  80e6cc:	d8c00117 	ldw	r3,4(sp)
  80e6d0:	02bfffc4 	movi	r10,-1
  80e6d4:	00800884 	movi	r2,34
  80e6d8:	5017883a 	mov	r11,r10
  80e6dc:	18800015 	stw	r2,0(r3)
  80e6e0:	d8800317 	ldw	r2,12(sp)
  80e6e4:	10000426 	beq	r2,zero,80e6f8 <_strtoull_r+0x1a4>
  80e6e8:	3000291e 	bne	r6,zero,80e790 <_strtoull_r+0x23c>
  80e6ec:	d8800217 	ldw	r2,8(sp)
  80e6f0:	d8c00317 	ldw	r3,12(sp)
  80e6f4:	18800015 	stw	r2,0(r3)
  80e6f8:	5005883a 	mov	r2,r10
  80e6fc:	5807883a 	mov	r3,r11
  80e700:	dfc00e17 	ldw	ra,56(sp)
  80e704:	df000d17 	ldw	fp,52(sp)
  80e708:	ddc00c17 	ldw	r23,48(sp)
  80e70c:	dd800b17 	ldw	r22,44(sp)
  80e710:	dd400a17 	ldw	r21,40(sp)
  80e714:	dd000917 	ldw	r20,36(sp)
  80e718:	dcc00817 	ldw	r19,32(sp)
  80e71c:	dc800717 	ldw	r18,28(sp)
  80e720:	dc400617 	ldw	r17,24(sp)
  80e724:	dc000517 	ldw	r16,20(sp)
  80e728:	dec00f04 	addi	sp,sp,60
  80e72c:	f800283a 	ret
  80e730:	8abfc62e 	bgeu	r17,r10,80e64c <_strtoull_r+0xf8>
  80e734:	01bfffc4 	movi	r6,-1
  80e738:	003fd506 	br	80e690 <_strtoull_r+0x13c>
  80e73c:	00800c04 	movi	r2,48
  80e740:	a0801e26 	beq	r20,r2,80e7bc <_strtoull_r+0x268>
  80e744:	183fa526 	beq	r3,zero,80e5dc <_strtoull_r+0x88>
  80e748:	00800c04 	movi	r2,48
  80e74c:	a0802a26 	beq	r20,r2,80e7f8 <_strtoull_r+0x2a4>
  80e750:	05c00284 	movi	r23,10
  80e754:	b82b883a 	mov	r21,r23
  80e758:	046666b4 	movhi	r17,39322
  80e75c:	8c666644 	addi	r17,r17,-26215
  80e760:	002d883a 	mov	r22,zero
  80e764:	048666b4 	movhi	r18,6554
  80e768:	94a66644 	addi	r18,r18,-26215
  80e76c:	03000144 	movi	r12,5
  80e770:	003faa06 	br	80e61c <_strtoull_r+0xc8>
  80e774:	020015c4 	movi	r8,87
  80e778:	a221c83a 	sub	r16,r20,r8
  80e77c:	003fd106 	br	80e6c4 <_strtoull_r+0x170>
  80e780:	5cbfb31e 	bne	r11,r18,80e650 <_strtoull_r+0xfc>
  80e784:	643fb20e 	bge	r12,r16,80e650 <_strtoull_r+0xfc>
  80e788:	01bfffc4 	movi	r6,-1
  80e78c:	003fc006 	br	80e690 <_strtoull_r+0x13c>
  80e790:	9cffffc4 	addi	r19,r19,-1
  80e794:	dcc00215 	stw	r19,8(sp)
  80e798:	003fd406 	br	80e6ec <_strtoull_r+0x198>
  80e79c:	9d000007 	ldb	r20,0(r19)
  80e7a0:	9cc00044 	addi	r19,r19,1
  80e7a4:	003f8806 	br	80e5c8 <_strtoull_r+0x74>
  80e7a8:	9d000007 	ldb	r20,0(r19)
  80e7ac:	00800044 	movi	r2,1
  80e7b0:	9cc00044 	addi	r19,r19,1
  80e7b4:	d8800015 	stw	r2,0(sp)
  80e7b8:	003f8406 	br	80e5cc <_strtoull_r+0x78>
  80e7bc:	99000007 	ldb	r4,0(r19)
  80e7c0:	00801e04 	movi	r2,120
  80e7c4:	20800226 	beq	r4,r2,80e7d0 <_strtoull_r+0x27c>
  80e7c8:	00801604 	movi	r2,88
  80e7cc:	20bfdd1e 	bne	r4,r2,80e744 <_strtoull_r+0x1f0>
  80e7d0:	9d000047 	ldb	r20,1(r19)
  80e7d4:	05c00404 	movi	r23,16
  80e7d8:	b82b883a 	mov	r21,r23
  80e7dc:	047fffc4 	movi	r17,-1
  80e7e0:	9cc00084 	addi	r19,r19,2
  80e7e4:	002d883a 	mov	r22,zero
  80e7e8:	04840034 	movhi	r18,4096
  80e7ec:	94bfffc4 	addi	r18,r18,-1
  80e7f0:	030003c4 	movi	r12,15
  80e7f4:	003f8906 	br	80e61c <_strtoull_r+0xc8>
  80e7f8:	05c00204 	movi	r23,8
  80e7fc:	b82b883a 	mov	r21,r23
  80e800:	047fffc4 	movi	r17,-1
  80e804:	002d883a 	mov	r22,zero
  80e808:	04880034 	movhi	r18,8192
  80e80c:	94bfffc4 	addi	r18,r18,-1
  80e810:	030001c4 	movi	r12,7
  80e814:	003f8106 	br	80e61c <_strtoull_r+0xc8>
  80e818:	d8c00017 	ldw	r3,0(sp)
  80e81c:	1805003a 	cmpeq	r2,r3,zero
  80e820:	103faf1e 	bne	r2,zero,80e6e0 <_strtoull_r+0x18c>
  80e824:	0009883a 	mov	r4,zero
  80e828:	2285c83a 	sub	r2,r4,r10
  80e82c:	02c7c83a 	sub	r3,zero,r11
  80e830:	2089803a 	cmpltu	r4,r4,r2
  80e834:	1909c83a 	sub	r4,r3,r4
  80e838:	1015883a 	mov	r10,r2
  80e83c:	2017883a 	mov	r11,r4
  80e840:	003fa706 	br	80e6e0 <_strtoull_r+0x18c>

0080e844 <htinit>:
  80e844:	28800003 	ldbu	r2,0(r5)
  80e848:	10000626 	beq	r2,zero,80e864 <htinit+0x20>
  80e84c:	1105883a 	add	r2,r2,r4
  80e850:	11800005 	stb	r6,0(r2)
  80e854:	28800043 	ldbu	r2,1(r5)
  80e858:	31800044 	addi	r6,r6,1
  80e85c:	29400044 	addi	r5,r5,1
  80e860:	103ffa1e 	bne	r2,zero,80e84c <htinit+0x8>
  80e864:	f800283a 	ret

0080e868 <__hexdig_init>:
  80e868:	defffd04 	addi	sp,sp,-12
  80e86c:	dc400015 	stw	r17,0(sp)
  80e870:	044020b4 	movhi	r17,130
  80e874:	8c61dc04 	addi	r17,r17,-30864
  80e878:	dcc00115 	stw	r19,4(sp)
  80e87c:	8809883a 	mov	r4,r17
  80e880:	04c00684 	movi	r19,26
  80e884:	01402074 	movhi	r5,129
  80e888:	29543204 	addi	r5,r5,20680
  80e88c:	01800404 	movi	r6,16
  80e890:	dfc00215 	stw	ra,8(sp)
  80e894:	080e8440 	call	80e844 <htinit>
  80e898:	980d883a 	mov	r6,r19
  80e89c:	8809883a 	mov	r4,r17
  80e8a0:	01402074 	movhi	r5,129
  80e8a4:	29543504 	addi	r5,r5,20692
  80e8a8:	080e8440 	call	80e844 <htinit>
  80e8ac:	8809883a 	mov	r4,r17
  80e8b0:	980d883a 	mov	r6,r19
  80e8b4:	01402074 	movhi	r5,129
  80e8b8:	29543704 	addi	r5,r5,20700
  80e8bc:	dfc00217 	ldw	ra,8(sp)
  80e8c0:	dcc00117 	ldw	r19,4(sp)
  80e8c4:	dc400017 	ldw	r17,0(sp)
  80e8c8:	dec00304 	addi	sp,sp,12
  80e8cc:	080e8441 	jmpi	80e844 <htinit>

0080e8d0 <rshift>:
  80e8d0:	2807d17a 	srai	r3,r5,5
  80e8d4:	20800417 	ldw	r2,16(r4)
  80e8d8:	22400504 	addi	r9,r4,20
  80e8dc:	480f883a 	mov	r7,r9
  80e8e0:	1880190e 	bge	r3,r2,80e948 <rshift+0x78>
  80e8e4:	1085883a 	add	r2,r2,r2
  80e8e8:	18c7883a 	add	r3,r3,r3
  80e8ec:	1085883a 	add	r2,r2,r2
  80e8f0:	18c7883a 	add	r3,r3,r3
  80e8f4:	294007cc 	andi	r5,r5,31
  80e8f8:	4891883a 	add	r8,r9,r2
  80e8fc:	48cd883a 	add	r6,r9,r3
  80e900:	28001726 	beq	r5,zero,80e960 <rshift+0x90>
  80e904:	30c00017 	ldw	r3,0(r6)
  80e908:	00800804 	movi	r2,32
  80e90c:	31800104 	addi	r6,r6,4
  80e910:	1155c83a 	sub	r10,r2,r5
  80e914:	1946d83a 	srl	r3,r3,r5
  80e918:	3200092e 	bgeu	r6,r8,80e940 <rshift+0x70>
  80e91c:	30800017 	ldw	r2,0(r6)
  80e920:	1284983a 	sll	r2,r2,r10
  80e924:	10c4b03a 	or	r2,r2,r3
  80e928:	38800015 	stw	r2,0(r7)
  80e92c:	30c00017 	ldw	r3,0(r6)
  80e930:	31800104 	addi	r6,r6,4
  80e934:	39c00104 	addi	r7,r7,4
  80e938:	1946d83a 	srl	r3,r3,r5
  80e93c:	323ff736 	bltu	r6,r8,80e91c <rshift+0x4c>
  80e940:	38c00015 	stw	r3,0(r7)
  80e944:	18000c1e 	bne	r3,zero,80e978 <rshift+0xa8>
  80e948:	3a45c83a 	sub	r2,r7,r9
  80e94c:	1005d0ba 	srai	r2,r2,2
  80e950:	20800415 	stw	r2,16(r4)
  80e954:	1000011e 	bne	r2,zero,80e95c <rshift+0x8c>
  80e958:	20000515 	stw	zero,20(r4)
  80e95c:	f800283a 	ret
  80e960:	323ff92e 	bgeu	r6,r8,80e948 <rshift+0x78>
  80e964:	30800017 	ldw	r2,0(r6)
  80e968:	31800104 	addi	r6,r6,4
  80e96c:	38800015 	stw	r2,0(r7)
  80e970:	39c00104 	addi	r7,r7,4
  80e974:	003ffa06 	br	80e960 <rshift+0x90>
  80e978:	39c00104 	addi	r7,r7,4
  80e97c:	003ff206 	br	80e948 <rshift+0x78>

0080e980 <__gethex>:
  80e980:	defff104 	addi	sp,sp,-60
  80e984:	df000d15 	stw	fp,52(sp)
  80e988:	dcc00815 	stw	r19,32(sp)
  80e98c:	dfc00e15 	stw	ra,56(sp)
  80e990:	ddc00c15 	stw	r23,48(sp)
  80e994:	dd800b15 	stw	r22,44(sp)
  80e998:	dd400a15 	stw	r21,40(sp)
  80e99c:	dd000915 	stw	r20,36(sp)
  80e9a0:	dc800715 	stw	r18,28(sp)
  80e9a4:	dc400615 	stw	r17,24(sp)
  80e9a8:	dc000515 	stw	r16,20(sp)
  80e9ac:	04c020b4 	movhi	r19,130
  80e9b0:	9ce1dc04 	addi	r19,r19,-30864
  80e9b4:	98800c03 	ldbu	r2,48(r19)
  80e9b8:	d9000115 	stw	r4,4(sp)
  80e9bc:	2839883a 	mov	fp,r5
  80e9c0:	d9800215 	stw	r6,8(sp)
  80e9c4:	d9c00315 	stw	r7,12(sp)
  80e9c8:	10007526 	beq	r2,zero,80eba0 <__gethex+0x220>
  80e9cc:	e1800017 	ldw	r6,0(fp)
  80e9d0:	00800c04 	movi	r2,48
  80e9d4:	31000083 	ldbu	r4,2(r6)
  80e9d8:	30c00084 	addi	r3,r6,2
  80e9dc:	2080761e 	bne	r4,r2,80ebb8 <__gethex+0x238>
  80e9e0:	200b883a 	mov	r5,r4
  80e9e4:	3007883a 	mov	r3,r6
  80e9e8:	188000c3 	ldbu	r2,3(r3)
  80e9ec:	18c00044 	addi	r3,r3,1
  80e9f0:	1009883a 	mov	r4,r2
  80e9f4:	117ffc26 	beq	r2,r5,80e9e8 <__gethex+0x68>
  80e9f8:	198fc83a 	sub	r7,r3,r6
  80e9fc:	19400084 	addi	r5,r3,2
  80ea00:	24c5883a 	add	r2,r4,r19
  80ea04:	10c00003 	ldbu	r3,0(r2)
  80ea08:	18002e26 	beq	r3,zero,80eac4 <__gethex+0x144>
  80ea0c:	29000003 	ldbu	r4,0(r5)
  80ea10:	282b883a 	mov	r21,r5
  80ea14:	000d883a 	mov	r6,zero
  80ea18:	002d883a 	mov	r22,zero
  80ea1c:	21003fcc 	andi	r4,r4,255
  80ea20:	24c5883a 	add	r2,r4,r19
  80ea24:	10c00003 	ldbu	r3,0(r2)
  80ea28:	18000526 	beq	r3,zero,80ea40 <__gethex+0xc0>
  80ea2c:	29400044 	addi	r5,r5,1
  80ea30:	29000003 	ldbu	r4,0(r5)
  80ea34:	24c5883a 	add	r2,r4,r19
  80ea38:	10c00003 	ldbu	r3,0(r2)
  80ea3c:	183ffb1e 	bne	r3,zero,80ea2c <__gethex+0xac>
  80ea40:	00800b84 	movi	r2,46
  80ea44:	20805f26 	beq	r4,r2,80ebc4 <__gethex+0x244>
  80ea48:	30008226 	beq	r6,zero,80ec54 <__gethex+0x2d4>
  80ea4c:	2985c83a 	sub	r2,r5,r6
  80ea50:	1085883a 	add	r2,r2,r2
  80ea54:	1085883a 	add	r2,r2,r2
  80ea58:	0085c83a 	sub	r2,zero,r2
  80ea5c:	d8800015 	stw	r2,0(sp)
  80ea60:	2825883a 	mov	r18,r5
  80ea64:	90c00003 	ldbu	r3,0(r18)
  80ea68:	00801404 	movi	r2,80
  80ea6c:	18801e26 	beq	r3,r2,80eae8 <__gethex+0x168>
  80ea70:	00801c04 	movi	r2,112
  80ea74:	18801c26 	beq	r3,r2,80eae8 <__gethex+0x168>
  80ea78:	9023883a 	mov	r17,r18
  80ea7c:	b005003a 	cmpeq	r2,r22,zero
  80ea80:	e4400015 	stw	r17,0(fp)
  80ea84:	10008d1e 	bne	r2,zero,80ecbc <__gethex+0x33c>
  80ea88:	38004326 	beq	r7,zero,80eb98 <__gethex+0x218>
  80ea8c:	0025883a 	mov	r18,zero
  80ea90:	9005883a 	mov	r2,r18
  80ea94:	dfc00e17 	ldw	ra,56(sp)
  80ea98:	df000d17 	ldw	fp,52(sp)
  80ea9c:	ddc00c17 	ldw	r23,48(sp)
  80eaa0:	dd800b17 	ldw	r22,44(sp)
  80eaa4:	dd400a17 	ldw	r21,40(sp)
  80eaa8:	dd000917 	ldw	r20,36(sp)
  80eaac:	dcc00817 	ldw	r19,32(sp)
  80eab0:	dc800717 	ldw	r18,28(sp)
  80eab4:	dc400617 	ldw	r17,24(sp)
  80eab8:	dc000517 	ldw	r16,20(sp)
  80eabc:	dec00f04 	addi	sp,sp,60
  80eac0:	f800283a 	ret
  80eac4:	00800b84 	movi	r2,46
  80eac8:	20805126 	beq	r4,r2,80ec10 <__gethex+0x290>
  80eacc:	2825883a 	mov	r18,r5
  80ead0:	d8000015 	stw	zero,0(sp)
  80ead4:	90c00003 	ldbu	r3,0(r18)
  80ead8:	00801404 	movi	r2,80
  80eadc:	282b883a 	mov	r21,r5
  80eae0:	05800044 	movi	r22,1
  80eae4:	18bfe21e 	bne	r3,r2,80ea70 <__gethex+0xf0>
  80eae8:	90c00043 	ldbu	r3,1(r18)
  80eaec:	00800ac4 	movi	r2,43
  80eaf0:	91400044 	addi	r5,r18,1
  80eaf4:	18805126 	beq	r3,r2,80ec3c <__gethex+0x2bc>
  80eaf8:	00800b44 	movi	r2,45
  80eafc:	18805326 	beq	r3,r2,80ec4c <__gethex+0x2cc>
  80eb00:	002f883a 	mov	r23,zero
  80eb04:	1cc5883a 	add	r2,r3,r19
  80eb08:	10800003 	ldbu	r2,0(r2)
  80eb0c:	103fda26 	beq	r2,zero,80ea78 <__gethex+0xf8>
  80eb10:	01800644 	movi	r6,25
  80eb14:	30bfd816 	blt	r6,r2,80ea78 <__gethex+0xf8>
  80eb18:	28c00043 	ldbu	r3,1(r5)
  80eb1c:	113ffc04 	addi	r4,r2,-16
  80eb20:	008020b4 	movhi	r2,130
  80eb24:	10a1dc04 	addi	r2,r2,-30864
  80eb28:	1887883a 	add	r3,r3,r2
  80eb2c:	18800003 	ldbu	r2,0(r3)
  80eb30:	2c400044 	addi	r17,r5,1
  80eb34:	10001126 	beq	r2,zero,80eb7c <__gethex+0x1fc>
  80eb38:	1021883a 	mov	r16,r2
  80eb3c:	30800f16 	blt	r6,r2,80eb7c <__gethex+0x1fc>
  80eb40:	3029883a 	mov	r20,r6
  80eb44:	00000106 	br	80eb4c <__gethex+0x1cc>
  80eb48:	a0800c16 	blt	r20,r2,80eb7c <__gethex+0x1fc>
  80eb4c:	8c400044 	addi	r17,r17,1
  80eb50:	01400284 	movi	r5,10
  80eb54:	d9c00415 	stw	r7,16(sp)
  80eb58:	0801c5c0 	call	801c5c <__mulsi3>
  80eb5c:	88c00003 	ldbu	r3,0(r17)
  80eb60:	1405883a 	add	r2,r2,r16
  80eb64:	113ffc04 	addi	r4,r2,-16
  80eb68:	1cc7883a 	add	r3,r3,r19
  80eb6c:	18800003 	ldbu	r2,0(r3)
  80eb70:	d9c00417 	ldw	r7,16(sp)
  80eb74:	1021883a 	mov	r16,r2
  80eb78:	103ff31e 	bne	r2,zero,80eb48 <__gethex+0x1c8>
  80eb7c:	b805003a 	cmpeq	r2,r23,zero
  80eb80:	1000011e 	bne	r2,zero,80eb88 <__gethex+0x208>
  80eb84:	0109c83a 	sub	r4,zero,r4
  80eb88:	d8800017 	ldw	r2,0(sp)
  80eb8c:	1105883a 	add	r2,r2,r4
  80eb90:	d8800015 	stw	r2,0(sp)
  80eb94:	003fb906 	br	80ea7c <__gethex+0xfc>
  80eb98:	04800184 	movi	r18,6
  80eb9c:	003fbc06 	br	80ea90 <__gethex+0x110>
  80eba0:	080e8680 	call	80e868 <__hexdig_init>
  80eba4:	e1800017 	ldw	r6,0(fp)
  80eba8:	00800c04 	movi	r2,48
  80ebac:	31000083 	ldbu	r4,2(r6)
  80ebb0:	30c00084 	addi	r3,r6,2
  80ebb4:	20bf8a26 	beq	r4,r2,80e9e0 <__gethex+0x60>
  80ebb8:	180b883a 	mov	r5,r3
  80ebbc:	000f883a 	mov	r7,zero
  80ebc0:	003f8f06 	br	80ea00 <__gethex+0x80>
  80ebc4:	303fa11e 	bne	r6,zero,80ea4c <__gethex+0xcc>
  80ebc8:	29400044 	addi	r5,r5,1
  80ebcc:	28800003 	ldbu	r2,0(r5)
  80ebd0:	14c5883a 	add	r2,r2,r19
  80ebd4:	10c00003 	ldbu	r3,0(r2)
  80ebd8:	1800b526 	beq	r3,zero,80eeb0 <__gethex+0x530>
  80ebdc:	2809883a 	mov	r4,r5
  80ebe0:	21000044 	addi	r4,r4,1
  80ebe4:	20800003 	ldbu	r2,0(r4)
  80ebe8:	14c5883a 	add	r2,r2,r19
  80ebec:	10c00003 	ldbu	r3,0(r2)
  80ebf0:	183ffb1e 	bne	r3,zero,80ebe0 <__gethex+0x260>
  80ebf4:	2145c83a 	sub	r2,r4,r5
  80ebf8:	1085883a 	add	r2,r2,r2
  80ebfc:	1085883a 	add	r2,r2,r2
  80ec00:	0085c83a 	sub	r2,zero,r2
  80ec04:	200b883a 	mov	r5,r4
  80ec08:	d8800015 	stw	r2,0(sp)
  80ec0c:	003f9406 	br	80ea60 <__gethex+0xe0>
  80ec10:	29000043 	ldbu	r4,1(r5)
  80ec14:	008020b4 	movhi	r2,130
  80ec18:	10a1dc04 	addi	r2,r2,-30864
  80ec1c:	2c800044 	addi	r18,r5,1
  80ec20:	2085883a 	add	r2,r4,r2
  80ec24:	10c00003 	ldbu	r3,0(r2)
  80ec28:	18000d1e 	bne	r3,zero,80ec60 <__gethex+0x2e0>
  80ec2c:	282b883a 	mov	r21,r5
  80ec30:	05800044 	movi	r22,1
  80ec34:	d8000015 	stw	zero,0(sp)
  80ec38:	003f8a06 	br	80ea64 <__gethex+0xe4>
  80ec3c:	002f883a 	mov	r23,zero
  80ec40:	29400044 	addi	r5,r5,1
  80ec44:	28c00003 	ldbu	r3,0(r5)
  80ec48:	003fae06 	br	80eb04 <__gethex+0x184>
  80ec4c:	05c00044 	movi	r23,1
  80ec50:	003ffb06 	br	80ec40 <__gethex+0x2c0>
  80ec54:	2825883a 	mov	r18,r5
  80ec58:	d8000015 	stw	zero,0(sp)
  80ec5c:	003f8106 	br	80ea64 <__gethex+0xe4>
  80ec60:	00800c04 	movi	r2,48
  80ec64:	20800e1e 	bne	r4,r2,80eca0 <__gethex+0x320>
  80ec68:	2007883a 	mov	r3,r4
  80ec6c:	900b883a 	mov	r5,r18
  80ec70:	29400044 	addi	r5,r5,1
  80ec74:	29000003 	ldbu	r4,0(r5)
  80ec78:	20803fcc 	andi	r2,r4,255
  80ec7c:	10fffc26 	beq	r2,r3,80ec70 <__gethex+0x2f0>
  80ec80:	14c5883a 	add	r2,r2,r19
  80ec84:	10c00003 	ldbu	r3,0(r2)
  80ec88:	1800071e 	bne	r3,zero,80eca8 <__gethex+0x328>
  80ec8c:	01c00044 	movi	r7,1
  80ec90:	900d883a 	mov	r6,r18
  80ec94:	282b883a 	mov	r21,r5
  80ec98:	382d883a 	mov	r22,r7
  80ec9c:	003f5f06 	br	80ea1c <__gethex+0x9c>
  80eca0:	91000003 	ldbu	r4,0(r18)
  80eca4:	900b883a 	mov	r5,r18
  80eca8:	900d883a 	mov	r6,r18
  80ecac:	282b883a 	mov	r21,r5
  80ecb0:	01c00044 	movi	r7,1
  80ecb4:	002d883a 	mov	r22,zero
  80ecb8:	003f5806 	br	80ea1c <__gethex+0x9c>
  80ecbc:	9545c83a 	sub	r2,r18,r21
  80ecc0:	10bfffc4 	addi	r2,r2,-1
  80ecc4:	00c001c4 	movi	r3,7
  80ecc8:	1880770e 	bge	r3,r2,80eea8 <__gethex+0x528>
  80eccc:	000b883a 	mov	r5,zero
  80ecd0:	1005d07a 	srai	r2,r2,1
  80ecd4:	29400044 	addi	r5,r5,1
  80ecd8:	18bffd16 	blt	r3,r2,80ecd0 <__gethex+0x350>
  80ecdc:	d9000117 	ldw	r4,4(sp)
  80ece0:	080b1d00 	call	80b1d0 <_Balloc>
  80ece4:	1029883a 	mov	r20,r2
  80ece8:	15800504 	addi	r22,r2,20
  80ecec:	ac80562e 	bgeu	r21,r18,80ee48 <__gethex+0x4c8>
  80ecf0:	900b883a 	mov	r5,r18
  80ecf4:	b011883a 	mov	r8,r22
  80ecf8:	000f883a 	mov	r7,zero
  80ecfc:	0009883a 	mov	r4,zero
  80ed00:	02400b84 	movi	r9,46
  80ed04:	02800804 	movi	r10,32
  80ed08:	297fffc4 	addi	r5,r5,-1
  80ed0c:	28c00003 	ldbu	r3,0(r5)
  80ed10:	1a400826 	beq	r3,r9,80ed34 <__gethex+0x3b4>
  80ed14:	380d883a 	mov	r6,r7
  80ed18:	3a802a26 	beq	r7,r10,80edc4 <__gethex+0x444>
  80ed1c:	39c00104 	addi	r7,r7,4
  80ed20:	1cc7883a 	add	r3,r3,r19
  80ed24:	18800003 	ldbu	r2,0(r3)
  80ed28:	108003cc 	andi	r2,r2,15
  80ed2c:	1184983a 	sll	r2,r2,r6
  80ed30:	2088b03a 	or	r4,r4,r2
  80ed34:	a97ff436 	bltu	r21,r5,80ed08 <__gethex+0x388>
  80ed38:	40800104 	addi	r2,r8,4
  80ed3c:	1585c83a 	sub	r2,r2,r22
  80ed40:	1021d0ba 	srai	r16,r2,2
  80ed44:	41000015 	stw	r4,0(r8)
  80ed48:	a4000415 	stw	r16,16(r20)
  80ed4c:	080ac780 	call	80ac78 <__hi0bits>
  80ed50:	d9000217 	ldw	r4,8(sp)
  80ed54:	8006917a 	slli	r3,r16,5
  80ed58:	24c00017 	ldw	r19,0(r4)
  80ed5c:	1885c83a 	sub	r2,r3,r2
  80ed60:	98801f16 	blt	r19,r2,80ede0 <__gethex+0x460>
  80ed64:	14c00c16 	blt	r2,r19,80ed98 <__gethex+0x418>
  80ed68:	002b883a 	mov	r21,zero
  80ed6c:	d9000217 	ldw	r4,8(sp)
  80ed70:	d8c00017 	ldw	r3,0(sp)
  80ed74:	20800217 	ldw	r2,8(r4)
  80ed78:	10c0360e 	bge	r2,r3,80ee54 <__gethex+0x4d4>
  80ed7c:	d9000117 	ldw	r4,4(sp)
  80ed80:	a00b883a 	mov	r5,r20
  80ed84:	048028c4 	movi	r18,163
  80ed88:	080ac500 	call	80ac50 <_Bfree>
  80ed8c:	d9000f17 	ldw	r4,60(sp)
  80ed90:	20000015 	stw	zero,0(r4)
  80ed94:	003f3e06 	br	80ea90 <__gethex+0x110>
  80ed98:	d9000117 	ldw	r4,4(sp)
  80ed9c:	98a1c83a 	sub	r16,r19,r2
  80eda0:	a00b883a 	mov	r5,r20
  80eda4:	800d883a 	mov	r6,r16
  80eda8:	080b5940 	call	80b594 <__lshift>
  80edac:	d8c00017 	ldw	r3,0(sp)
  80edb0:	1029883a 	mov	r20,r2
  80edb4:	15800504 	addi	r22,r2,20
  80edb8:	1c07c83a 	sub	r3,r3,r16
  80edbc:	d8c00015 	stw	r3,0(sp)
  80edc0:	003fe906 	br	80ed68 <__gethex+0x3e8>
  80edc4:	41000015 	stw	r4,0(r8)
  80edc8:	28c00003 	ldbu	r3,0(r5)
  80edcc:	01c00104 	movi	r7,4
  80edd0:	000d883a 	mov	r6,zero
  80edd4:	41d1883a 	add	r8,r8,r7
  80edd8:	0009883a 	mov	r4,zero
  80eddc:	003fd006 	br	80ed20 <__gethex+0x3a0>
  80ede0:	14e1c83a 	sub	r16,r2,r19
  80ede4:	a009883a 	mov	r4,r20
  80ede8:	800b883a 	mov	r5,r16
  80edec:	080b1480 	call	80b148 <__any_on>
  80edf0:	1000081e 	bne	r2,zero,80ee14 <__gethex+0x494>
  80edf4:	002b883a 	mov	r21,zero
  80edf8:	a009883a 	mov	r4,r20
  80edfc:	800b883a 	mov	r5,r16
  80ee00:	080e8d00 	call	80e8d0 <rshift>
  80ee04:	d8800017 	ldw	r2,0(sp)
  80ee08:	1405883a 	add	r2,r2,r16
  80ee0c:	d8800015 	stw	r2,0(sp)
  80ee10:	003fd606 	br	80ed6c <__gethex+0x3ec>
  80ee14:	817fffc4 	addi	r5,r16,-1
  80ee18:	2805d17a 	srai	r2,r5,5
  80ee1c:	290007cc 	andi	r4,r5,31
  80ee20:	01800044 	movi	r6,1
  80ee24:	1085883a 	add	r2,r2,r2
  80ee28:	1085883a 	add	r2,r2,r2
  80ee2c:	1585883a 	add	r2,r2,r22
  80ee30:	3108983a 	sll	r4,r6,r4
  80ee34:	10c00017 	ldw	r3,0(r2)
  80ee38:	20c8703a 	and	r4,r4,r3
  80ee3c:	20001e1e 	bne	r4,zero,80eeb8 <__gethex+0x538>
  80ee40:	302b883a 	mov	r21,r6
  80ee44:	003fec06 	br	80edf8 <__gethex+0x478>
  80ee48:	b011883a 	mov	r8,r22
  80ee4c:	0009883a 	mov	r4,zero
  80ee50:	003fb906 	br	80ed38 <__gethex+0x3b8>
  80ee54:	d8800217 	ldw	r2,8(sp)
  80ee58:	d8c00017 	ldw	r3,0(sp)
  80ee5c:	11000117 	ldw	r4,4(r2)
  80ee60:	19001c16 	blt	r3,r4,80eed4 <__gethex+0x554>
  80ee64:	04800044 	movi	r18,1
  80ee68:	a8000926 	beq	r21,zero,80ee90 <__gethex+0x510>
  80ee6c:	d8c00217 	ldw	r3,8(sp)
  80ee70:	00800084 	movi	r2,2
  80ee74:	19000317 	ldw	r4,12(r3)
  80ee78:	20809826 	beq	r4,r2,80f0dc <__gethex+0x75c>
  80ee7c:	008000c4 	movi	r2,3
  80ee80:	20805b26 	beq	r4,r2,80eff0 <__gethex+0x670>
  80ee84:	00800044 	movi	r2,1
  80ee88:	20804326 	beq	r4,r2,80ef98 <__gethex+0x618>
  80ee8c:	94800414 	ori	r18,r18,16
  80ee90:	d9000f17 	ldw	r4,60(sp)
  80ee94:	d8800017 	ldw	r2,0(sp)
  80ee98:	d8c00317 	ldw	r3,12(sp)
  80ee9c:	25000015 	stw	r20,0(r4)
  80eea0:	18800015 	stw	r2,0(r3)
  80eea4:	003efa06 	br	80ea90 <__gethex+0x110>
  80eea8:	000b883a 	mov	r5,zero
  80eeac:	003f8b06 	br	80ecdc <__gethex+0x35c>
  80eeb0:	d8000015 	stw	zero,0(sp)
  80eeb4:	003eea06 	br	80ea60 <__gethex+0xe0>
  80eeb8:	3140180e 	bge	r6,r5,80ef1c <__gethex+0x59c>
  80eebc:	a009883a 	mov	r4,r20
  80eec0:	817fff84 	addi	r5,r16,-2
  80eec4:	080b1480 	call	80b148 <__any_on>
  80eec8:	10001426 	beq	r2,zero,80ef1c <__gethex+0x59c>
  80eecc:	054000c4 	movi	r21,3
  80eed0:	003fc906 	br	80edf8 <__gethex+0x478>
  80eed4:	d8800017 	ldw	r2,0(sp)
  80eed8:	20a3c83a 	sub	r17,r4,r2
  80eedc:	8cc01116 	blt	r17,r19,80ef24 <__gethex+0x5a4>
  80eee0:	d8800217 	ldw	r2,8(sp)
  80eee4:	10c00317 	ldw	r3,12(r2)
  80eee8:	00800084 	movi	r2,2
  80eeec:	18809426 	beq	r3,r2,80f140 <__gethex+0x7c0>
  80eef0:	008000c4 	movi	r2,3
  80eef4:	18808f26 	beq	r3,r2,80f134 <__gethex+0x7b4>
  80eef8:	00800044 	movi	r2,1
  80eefc:	18807c26 	beq	r3,r2,80f0f0 <__gethex+0x770>
  80ef00:	d9000117 	ldw	r4,4(sp)
  80ef04:	a00b883a 	mov	r5,r20
  80ef08:	04801404 	movi	r18,80
  80ef0c:	080ac500 	call	80ac50 <_Bfree>
  80ef10:	d9000f17 	ldw	r4,60(sp)
  80ef14:	20000015 	stw	zero,0(r4)
  80ef18:	003edd06 	br	80ea90 <__gethex+0x110>
  80ef1c:	05400084 	movi	r21,2
  80ef20:	003fb506 	br	80edf8 <__gethex+0x478>
  80ef24:	8c3fffc4 	addi	r16,r17,-1
  80ef28:	a8001526 	beq	r21,zero,80ef80 <__gethex+0x600>
  80ef2c:	05400044 	movi	r21,1
  80ef30:	8005d17a 	srai	r2,r16,5
  80ef34:	814007cc 	andi	r5,r16,31
  80ef38:	00c00044 	movi	r3,1
  80ef3c:	1085883a 	add	r2,r2,r2
  80ef40:	1085883a 	add	r2,r2,r2
  80ef44:	1585883a 	add	r2,r2,r22
  80ef48:	1946983a 	sll	r3,r3,r5
  80ef4c:	11000017 	ldw	r4,0(r2)
  80ef50:	1906703a 	and	r3,r3,r4
  80ef54:	18000126 	beq	r3,zero,80ef5c <__gethex+0x5dc>
  80ef58:	ad400094 	ori	r21,r21,2
  80ef5c:	880b883a 	mov	r5,r17
  80ef60:	a009883a 	mov	r4,r20
  80ef64:	080e8d00 	call	80e8d0 <rshift>
  80ef68:	d8800217 	ldw	r2,8(sp)
  80ef6c:	9c67c83a 	sub	r19,r19,r17
  80ef70:	04800084 	movi	r18,2
  80ef74:	10800117 	ldw	r2,4(r2)
  80ef78:	d8800015 	stw	r2,0(sp)
  80ef7c:	003fba06 	br	80ee68 <__gethex+0x4e8>
  80ef80:	043feb0e 	bge	zero,r16,80ef30 <__gethex+0x5b0>
  80ef84:	a009883a 	mov	r4,r20
  80ef88:	800b883a 	mov	r5,r16
  80ef8c:	080b1480 	call	80b148 <__any_on>
  80ef90:	102b883a 	mov	r21,r2
  80ef94:	003fe606 	br	80ef30 <__gethex+0x5b0>
  80ef98:	a880008c 	andi	r2,r21,2
  80ef9c:	103fbb26 	beq	r2,zero,80ee8c <__gethex+0x50c>
  80efa0:	b0800017 	ldw	r2,0(r22)
  80efa4:	a884b03a 	or	r2,r21,r2
  80efa8:	1104703a 	and	r2,r2,r4
  80efac:	103fb726 	beq	r2,zero,80ee8c <__gethex+0x50c>
  80efb0:	a4000417 	ldw	r16,16(r20)
  80efb4:	b007883a 	mov	r3,r22
  80efb8:	017fffc4 	movi	r5,-1
  80efbc:	8405883a 	add	r2,r16,r16
  80efc0:	10ab883a 	add	r21,r2,r2
  80efc4:	802f883a 	mov	r23,r16
  80efc8:	b549883a 	add	r4,r22,r21
  80efcc:	00000306 	br	80efdc <__gethex+0x65c>
  80efd0:	18000015 	stw	zero,0(r3)
  80efd4:	18c00104 	addi	r3,r3,4
  80efd8:	1900082e 	bgeu	r3,r4,80effc <__gethex+0x67c>
  80efdc:	18800017 	ldw	r2,0(r3)
  80efe0:	117ffb26 	beq	r2,r5,80efd0 <__gethex+0x650>
  80efe4:	10800044 	addi	r2,r2,1
  80efe8:	18800015 	stw	r2,0(r3)
  80efec:	00001e06 	br	80f068 <__gethex+0x6e8>
  80eff0:	d8801017 	ldw	r2,64(sp)
  80eff4:	103fa526 	beq	r2,zero,80ee8c <__gethex+0x50c>
  80eff8:	003fed06 	br	80efb0 <__gethex+0x630>
  80effc:	a0800217 	ldw	r2,8(r20)
  80f000:	80801216 	blt	r16,r2,80f04c <__gethex+0x6cc>
  80f004:	a1400117 	ldw	r5,4(r20)
  80f008:	d9000117 	ldw	r4,4(sp)
  80f00c:	29400044 	addi	r5,r5,1
  80f010:	080b1d00 	call	80b1d0 <_Balloc>
  80f014:	a1800417 	ldw	r6,16(r20)
  80f018:	a1400304 	addi	r5,r20,12
  80f01c:	11000304 	addi	r4,r2,12
  80f020:	318d883a 	add	r6,r6,r6
  80f024:	318d883a 	add	r6,r6,r6
  80f028:	31800204 	addi	r6,r6,8
  80f02c:	1023883a 	mov	r17,r2
  80f030:	08044e00 	call	8044e0 <memcpy>
  80f034:	d9000117 	ldw	r4,4(sp)
  80f038:	a00b883a 	mov	r5,r20
  80f03c:	8d800504 	addi	r22,r17,20
  80f040:	080ac500 	call	80ac50 <_Bfree>
  80f044:	8c000417 	ldw	r16,16(r17)
  80f048:	8829883a 	mov	r20,r17
  80f04c:	8405883a 	add	r2,r16,r16
  80f050:	1085883a 	add	r2,r2,r2
  80f054:	1505883a 	add	r2,r2,r20
  80f058:	84000044 	addi	r16,r16,1
  80f05c:	00c00044 	movi	r3,1
  80f060:	10c00515 	stw	r3,20(r2)
  80f064:	a4000415 	stw	r16,16(r20)
  80f068:	00800084 	movi	r2,2
  80f06c:	90801526 	beq	r18,r2,80f0c4 <__gethex+0x744>
  80f070:	bc000a16 	blt	r23,r16,80f09c <__gethex+0x71c>
  80f074:	9c0007cc 	andi	r16,r19,31
  80f078:	8000021e 	bne	r16,zero,80f084 <__gethex+0x704>
  80f07c:	94800814 	ori	r18,r18,32
  80f080:	003f8306 	br	80ee90 <__gethex+0x510>
  80f084:	b545883a 	add	r2,r22,r21
  80f088:	113fff17 	ldw	r4,-4(r2)
  80f08c:	080ac780 	call	80ac78 <__hi0bits>
  80f090:	00c00804 	movi	r3,32
  80f094:	1c07c83a 	sub	r3,r3,r16
  80f098:	10fff80e 	bge	r2,r3,80f07c <__gethex+0x6fc>
  80f09c:	a009883a 	mov	r4,r20
  80f0a0:	01400044 	movi	r5,1
  80f0a4:	080e8d00 	call	80e8d0 <rshift>
  80f0a8:	d9000217 	ldw	r4,8(sp)
  80f0ac:	d8c00017 	ldw	r3,0(sp)
  80f0b0:	20800217 	ldw	r2,8(r4)
  80f0b4:	18c00044 	addi	r3,r3,1
  80f0b8:	d8c00015 	stw	r3,0(sp)
  80f0bc:	10ff2f16 	blt	r2,r3,80ed7c <__gethex+0x3fc>
  80f0c0:	003fee06 	br	80f07c <__gethex+0x6fc>
  80f0c4:	d8c00217 	ldw	r3,8(sp)
  80f0c8:	18800017 	ldw	r2,0(r3)
  80f0cc:	10bfffc4 	addi	r2,r2,-1
  80f0d0:	98801e26 	beq	r19,r2,80f14c <__gethex+0x7cc>
  80f0d4:	04800884 	movi	r18,34
  80f0d8:	003f6d06 	br	80ee90 <__gethex+0x510>
  80f0dc:	d9001017 	ldw	r4,64(sp)
  80f0e0:	00800044 	movi	r2,1
  80f0e4:	1105c83a 	sub	r2,r2,r4
  80f0e8:	103f6826 	beq	r2,zero,80ee8c <__gethex+0x50c>
  80f0ec:	003fb006 	br	80efb0 <__gethex+0x630>
  80f0f0:	9c7f831e 	bne	r19,r17,80ef00 <__gethex+0x580>
  80f0f4:	1cc0060e 	bge	r3,r19,80f110 <__gethex+0x790>
  80f0f8:	98cbc83a 	sub	r5,r19,r3
  80f0fc:	a009883a 	mov	r4,r20
  80f100:	080b1480 	call	80b148 <__any_on>
  80f104:	103f7e26 	beq	r2,zero,80ef00 <__gethex+0x580>
  80f108:	d8c00217 	ldw	r3,8(sp)
  80f10c:	19000117 	ldw	r4,4(r3)
  80f110:	d8800317 	ldw	r2,12(sp)
  80f114:	d8c00f17 	ldw	r3,60(sp)
  80f118:	04000044 	movi	r16,1
  80f11c:	11000015 	stw	r4,0(r2)
  80f120:	04801884 	movi	r18,98
  80f124:	b4000015 	stw	r16,0(r22)
  80f128:	1d000015 	stw	r20,0(r3)
  80f12c:	a4000415 	stw	r16,16(r20)
  80f130:	003e5706 	br	80ea90 <__gethex+0x110>
  80f134:	d8801017 	ldw	r2,64(sp)
  80f138:	103f7126 	beq	r2,zero,80ef00 <__gethex+0x580>
  80f13c:	003ff406 	br	80f110 <__gethex+0x790>
  80f140:	d8c01017 	ldw	r3,64(sp)
  80f144:	183ff226 	beq	r3,zero,80f110 <__gethex+0x790>
  80f148:	003f6d06 	br	80ef00 <__gethex+0x580>
  80f14c:	9805d17a 	srai	r2,r19,5
  80f150:	994007cc 	andi	r5,r19,31
  80f154:	00c00044 	movi	r3,1
  80f158:	1085883a 	add	r2,r2,r2
  80f15c:	1085883a 	add	r2,r2,r2
  80f160:	1585883a 	add	r2,r2,r22
  80f164:	1946983a 	sll	r3,r3,r5
  80f168:	11000017 	ldw	r4,0(r2)
  80f16c:	1906703a 	and	r3,r3,r4
  80f170:	183fd826 	beq	r3,zero,80f0d4 <__gethex+0x754>
  80f174:	04800844 	movi	r18,33
  80f178:	003f4506 	br	80ee90 <__gethex+0x510>

0080f17c <L_shift>:
  80f17c:	00800204 	movi	r2,8
  80f180:	1185c83a 	sub	r2,r2,r6
  80f184:	1085883a 	add	r2,r2,r2
  80f188:	21c00017 	ldw	r7,0(r4)
  80f18c:	1093883a 	add	r9,r2,r2
  80f190:	00800804 	movi	r2,32
  80f194:	200d883a 	mov	r6,r4
  80f198:	1251c83a 	sub	r8,r2,r9
  80f19c:	31800104 	addi	r6,r6,4
  80f1a0:	3805883a 	mov	r2,r7
  80f1a4:	31c00017 	ldw	r7,0(r6)
  80f1a8:	3a08983a 	sll	r4,r7,r8
  80f1ac:	3a46d83a 	srl	r3,r7,r9
  80f1b0:	1104b03a 	or	r2,r2,r4
  80f1b4:	180f883a 	mov	r7,r3
  80f1b8:	30bfff15 	stw	r2,-4(r6)
  80f1bc:	30c00015 	stw	r3,0(r6)
  80f1c0:	317ff636 	bltu	r6,r5,80f19c <L_shift+0x20>
  80f1c4:	f800283a 	ret

0080f1c8 <__hexnan>:
  80f1c8:	defff404 	addi	sp,sp,-48
  80f1cc:	dd800815 	stw	r22,32(sp)
  80f1d0:	058020b4 	movhi	r22,130
  80f1d4:	b5a1dc04 	addi	r22,r22,-30864
  80f1d8:	b0800c03 	ldbu	r2,48(r22)
  80f1dc:	dcc00515 	stw	r19,20(sp)
  80f1e0:	dc000215 	stw	r16,8(sp)
  80f1e4:	dfc00b15 	stw	ra,44(sp)
  80f1e8:	df000a15 	stw	fp,40(sp)
  80f1ec:	ddc00915 	stw	r23,36(sp)
  80f1f0:	dd400715 	stw	r21,28(sp)
  80f1f4:	dd000615 	stw	r20,24(sp)
  80f1f8:	dc800415 	stw	r18,16(sp)
  80f1fc:	dc400315 	stw	r17,12(sp)
  80f200:	d9000115 	stw	r4,4(sp)
  80f204:	2821883a 	mov	r16,r5
  80f208:	3027883a 	mov	r19,r6
  80f20c:	10007426 	beq	r2,zero,80f3e0 <__hexnan+0x218>
  80f210:	80c00017 	ldw	r3,0(r16)
  80f214:	1805d17a 	srai	r2,r3,5
  80f218:	18c007cc 	andi	r3,r3,31
  80f21c:	1839003a 	cmpeq	fp,r3,zero
  80f220:	1085883a 	add	r2,r2,r2
  80f224:	1085883a 	add	r2,r2,r2
  80f228:	d8c00015 	stw	r3,0(sp)
  80f22c:	14c5883a 	add	r2,r2,r19
  80f230:	e000011e 	bne	fp,zero,80f238 <__hexnan+0x70>
  80f234:	10800104 	addi	r2,r2,4
  80f238:	d8c00117 	ldw	r3,4(sp)
  80f23c:	153fff04 	addi	r20,r2,-4
  80f240:	a021883a 	mov	r16,r20
  80f244:	1c400017 	ldw	r17,0(r3)
  80f248:	a02b883a 	mov	r21,r20
  80f24c:	0025883a 	mov	r18,zero
  80f250:	002f883a 	mov	r23,zero
  80f254:	000d883a 	mov	r6,zero
  80f258:	103fff15 	stw	zero,-4(r2)
  80f25c:	8c400044 	addi	r17,r17,1
  80f260:	89000003 	ldbu	r4,0(r17)
  80f264:	20000e26 	beq	r4,zero,80f2a0 <__hexnan+0xd8>
  80f268:	2585883a 	add	r2,r4,r22
  80f26c:	10c00003 	ldbu	r3,0(r2)
  80f270:	18002e1e 	bne	r3,zero,80f32c <__hexnan+0x164>
  80f274:	00800804 	movi	r2,32
  80f278:	11005536 	bltu	r2,r4,80f3d0 <__hexnan+0x208>
  80f27c:	bcbff70e 	bge	r23,r18,80f25c <__hexnan+0x94>
  80f280:	8540022e 	bgeu	r16,r21,80f28c <__hexnan+0xc4>
  80f284:	008001c4 	movi	r2,7
  80f288:	11803c0e 	bge	r2,r6,80f37c <__hexnan+0x1b4>
  80f28c:	9c003536 	bltu	r19,r16,80f364 <__hexnan+0x19c>
  80f290:	8c400044 	addi	r17,r17,1
  80f294:	89000003 	ldbu	r4,0(r17)
  80f298:	01800204 	movi	r6,8
  80f29c:	203ff21e 	bne	r4,zero,80f268 <__hexnan+0xa0>
  80f2a0:	90004d26 	beq	r18,zero,80f3d8 <__hexnan+0x210>
  80f2a4:	85404336 	bltu	r16,r21,80f3b4 <__hexnan+0x1ec>
  80f2a8:	9c00382e 	bgeu	r19,r16,80f38c <__hexnan+0x1c4>
  80f2ac:	9807883a 	mov	r3,r19
  80f2b0:	80800017 	ldw	r2,0(r16)
  80f2b4:	84000104 	addi	r16,r16,4
  80f2b8:	18800015 	stw	r2,0(r3)
  80f2bc:	18c00104 	addi	r3,r3,4
  80f2c0:	a43ffb2e 	bgeu	r20,r16,80f2b0 <__hexnan+0xe8>
  80f2c4:	18000015 	stw	zero,0(r3)
  80f2c8:	18c00104 	addi	r3,r3,4
  80f2cc:	a0fffd2e 	bgeu	r20,r3,80f2c4 <__hexnan+0xfc>
  80f2d0:	a0800017 	ldw	r2,0(r20)
  80f2d4:	1000071e 	bne	r2,zero,80f2f4 <__hexnan+0x12c>
  80f2d8:	9d004326 	beq	r19,r20,80f3e8 <__hexnan+0x220>
  80f2dc:	a007883a 	mov	r3,r20
  80f2e0:	00000106 	br	80f2e8 <__hexnan+0x120>
  80f2e4:	98c04026 	beq	r19,r3,80f3e8 <__hexnan+0x220>
  80f2e8:	18ffff04 	addi	r3,r3,-4
  80f2ec:	18800017 	ldw	r2,0(r3)
  80f2f0:	103ffc26 	beq	r2,zero,80f2e4 <__hexnan+0x11c>
  80f2f4:	00c00144 	movi	r3,5
  80f2f8:	1805883a 	mov	r2,r3
  80f2fc:	dfc00b17 	ldw	ra,44(sp)
  80f300:	df000a17 	ldw	fp,40(sp)
  80f304:	ddc00917 	ldw	r23,36(sp)
  80f308:	dd800817 	ldw	r22,32(sp)
  80f30c:	dd400717 	ldw	r21,28(sp)
  80f310:	dd000617 	ldw	r20,24(sp)
  80f314:	dcc00517 	ldw	r19,20(sp)
  80f318:	dc800417 	ldw	r18,16(sp)
  80f31c:	dc400317 	ldw	r17,12(sp)
  80f320:	dc000217 	ldw	r16,8(sp)
  80f324:	dec00c04 	addi	sp,sp,48
  80f328:	f800283a 	ret
  80f32c:	31800044 	addi	r6,r6,1
  80f330:	00800204 	movi	r2,8
  80f334:	94800044 	addi	r18,r18,1
  80f338:	1180040e 	bge	r2,r6,80f34c <__hexnan+0x184>
  80f33c:	9c3fc72e 	bgeu	r19,r16,80f25c <__hexnan+0x94>
  80f340:	843fff04 	addi	r16,r16,-4
  80f344:	80000015 	stw	zero,0(r16)
  80f348:	01800044 	movi	r6,1
  80f34c:	80800017 	ldw	r2,0(r16)
  80f350:	18c003cc 	andi	r3,r3,15
  80f354:	1004913a 	slli	r2,r2,4
  80f358:	10c4b03a 	or	r2,r2,r3
  80f35c:	80800015 	stw	r2,0(r16)
  80f360:	003fbe06 	br	80f25c <__hexnan+0x94>
  80f364:	843fff04 	addi	r16,r16,-4
  80f368:	802b883a 	mov	r21,r16
  80f36c:	902f883a 	mov	r23,r18
  80f370:	000d883a 	mov	r6,zero
  80f374:	80000015 	stw	zero,0(r16)
  80f378:	003fb806 	br	80f25c <__hexnan+0x94>
  80f37c:	8009883a 	mov	r4,r16
  80f380:	a80b883a 	mov	r5,r21
  80f384:	080f17c0 	call	80f17c <L_shift>
  80f388:	003fc006 	br	80f28c <__hexnan+0xc4>
  80f38c:	e03fd01e 	bne	fp,zero,80f2d0 <__hexnan+0x108>
  80f390:	d8c00017 	ldw	r3,0(sp)
  80f394:	00800804 	movi	r2,32
  80f398:	10c5c83a 	sub	r2,r2,r3
  80f39c:	00ffffc4 	movi	r3,-1
  80f3a0:	1886d83a 	srl	r3,r3,r2
  80f3a4:	a0800017 	ldw	r2,0(r20)
  80f3a8:	10c4703a 	and	r2,r2,r3
  80f3ac:	a0800015 	stw	r2,0(r20)
  80f3b0:	003fc806 	br	80f2d4 <__hexnan+0x10c>
  80f3b4:	008001c4 	movi	r2,7
  80f3b8:	11bfbb16 	blt	r2,r6,80f2a8 <__hexnan+0xe0>
  80f3bc:	a80b883a 	mov	r5,r21
  80f3c0:	8009883a 	mov	r4,r16
  80f3c4:	080f17c0 	call	80f17c <L_shift>
  80f3c8:	9c3ff02e 	bgeu	r19,r16,80f38c <__hexnan+0x1c4>
  80f3cc:	003fb706 	br	80f2ac <__hexnan+0xe4>
  80f3d0:	00800a44 	movi	r2,41
  80f3d4:	20800826 	beq	r4,r2,80f3f8 <__hexnan+0x230>
  80f3d8:	00c00104 	movi	r3,4
  80f3dc:	003fc606 	br	80f2f8 <__hexnan+0x130>
  80f3e0:	080e8680 	call	80e868 <__hexdig_init>
  80f3e4:	003f8a06 	br	80f210 <__hexnan+0x48>
  80f3e8:	00800044 	movi	r2,1
  80f3ec:	00c00144 	movi	r3,5
  80f3f0:	98800015 	stw	r2,0(r19)
  80f3f4:	003fc006 	br	80f2f8 <__hexnan+0x130>
  80f3f8:	903ff726 	beq	r18,zero,80f3d8 <__hexnan+0x210>
  80f3fc:	d8c00117 	ldw	r3,4(sp)
  80f400:	88800044 	addi	r2,r17,1
  80f404:	18800015 	stw	r2,0(r3)
  80f408:	857fa72e 	bgeu	r16,r21,80f2a8 <__hexnan+0xe0>
  80f40c:	003fe906 	br	80f3b4 <__hexnan+0x1ec>

0080f410 <__muldi3>:
  80f410:	defff204 	addi	sp,sp,-56
  80f414:	df000c15 	stw	fp,48(sp)
  80f418:	3038d43a 	srli	fp,r6,16
  80f41c:	dd000815 	stw	r20,32(sp)
  80f420:	dc400515 	stw	r17,20(sp)
  80f424:	2028d43a 	srli	r20,r4,16
  80f428:	247fffcc 	andi	r17,r4,65535
  80f42c:	dc000415 	stw	r16,16(sp)
  80f430:	343fffcc 	andi	r16,r6,65535
  80f434:	dcc00715 	stw	r19,28(sp)
  80f438:	d9000015 	stw	r4,0(sp)
  80f43c:	2827883a 	mov	r19,r5
  80f440:	8809883a 	mov	r4,r17
  80f444:	d9400115 	stw	r5,4(sp)
  80f448:	800b883a 	mov	r5,r16
  80f44c:	d9800215 	stw	r6,8(sp)
  80f450:	dfc00d15 	stw	ra,52(sp)
  80f454:	d9c00315 	stw	r7,12(sp)
  80f458:	dd800a15 	stw	r22,40(sp)
  80f45c:	dd400915 	stw	r21,36(sp)
  80f460:	302d883a 	mov	r22,r6
  80f464:	ddc00b15 	stw	r23,44(sp)
  80f468:	dc800615 	stw	r18,24(sp)
  80f46c:	0801c5c0 	call	801c5c <__mulsi3>
  80f470:	8809883a 	mov	r4,r17
  80f474:	e00b883a 	mov	r5,fp
  80f478:	102b883a 	mov	r21,r2
  80f47c:	0801c5c0 	call	801c5c <__mulsi3>
  80f480:	800b883a 	mov	r5,r16
  80f484:	a009883a 	mov	r4,r20
  80f488:	1023883a 	mov	r17,r2
  80f48c:	0801c5c0 	call	801c5c <__mulsi3>
  80f490:	a009883a 	mov	r4,r20
  80f494:	e00b883a 	mov	r5,fp
  80f498:	1021883a 	mov	r16,r2
  80f49c:	0801c5c0 	call	801c5c <__mulsi3>
  80f4a0:	a8ffffcc 	andi	r3,r21,65535
  80f4a4:	a82ad43a 	srli	r21,r21,16
  80f4a8:	8c23883a 	add	r17,r17,r16
  80f4ac:	1011883a 	mov	r8,r2
  80f4b0:	ac6b883a 	add	r21,r21,r17
  80f4b4:	a804943a 	slli	r2,r21,16
  80f4b8:	b009883a 	mov	r4,r22
  80f4bc:	980b883a 	mov	r5,r19
  80f4c0:	10c7883a 	add	r3,r2,r3
  80f4c4:	a812d43a 	srli	r9,r21,16
  80f4c8:	180d883a 	mov	r6,r3
  80f4cc:	ac00022e 	bgeu	r21,r16,80f4d8 <__muldi3+0xc8>
  80f4d0:	00800074 	movhi	r2,1
  80f4d4:	4091883a 	add	r8,r8,r2
  80f4d8:	4267883a 	add	r19,r8,r9
  80f4dc:	302d883a 	mov	r22,r6
  80f4e0:	0801c5c0 	call	801c5c <__mulsi3>
  80f4e4:	d9400317 	ldw	r5,12(sp)
  80f4e8:	d9000017 	ldw	r4,0(sp)
  80f4ec:	1023883a 	mov	r17,r2
  80f4f0:	0801c5c0 	call	801c5c <__mulsi3>
  80f4f4:	14cb883a 	add	r5,r2,r19
  80f4f8:	894b883a 	add	r5,r17,r5
  80f4fc:	b005883a 	mov	r2,r22
  80f500:	2807883a 	mov	r3,r5
  80f504:	dfc00d17 	ldw	ra,52(sp)
  80f508:	df000c17 	ldw	fp,48(sp)
  80f50c:	ddc00b17 	ldw	r23,44(sp)
  80f510:	dd800a17 	ldw	r22,40(sp)
  80f514:	dd400917 	ldw	r21,36(sp)
  80f518:	dd000817 	ldw	r20,32(sp)
  80f51c:	dcc00717 	ldw	r19,28(sp)
  80f520:	dc800617 	ldw	r18,24(sp)
  80f524:	dc400517 	ldw	r17,20(sp)
  80f528:	dc000417 	ldw	r16,16(sp)
  80f52c:	dec00e04 	addi	sp,sp,56
  80f530:	f800283a 	ret

0080f534 <__fixunsdfsi>:
  80f534:	defffb04 	addi	sp,sp,-20
  80f538:	dc400115 	stw	r17,4(sp)
  80f53c:	dc000015 	stw	r16,0(sp)
  80f540:	04507834 	movhi	r17,16864
  80f544:	0021883a 	mov	r16,zero
  80f548:	800d883a 	mov	r6,r16
  80f54c:	880f883a 	mov	r7,r17
  80f550:	dcc00315 	stw	r19,12(sp)
  80f554:	dc800215 	stw	r18,8(sp)
  80f558:	2827883a 	mov	r19,r5
  80f55c:	2025883a 	mov	r18,r4
  80f560:	dfc00415 	stw	ra,16(sp)
  80f564:	0810e6c0 	call	810e6c <__gedf2>
  80f568:	000d883a 	mov	r6,zero
  80f56c:	880f883a 	mov	r7,r17
  80f570:	980b883a 	mov	r5,r19
  80f574:	9009883a 	mov	r4,r18
  80f578:	10000d16 	blt	r2,zero,80f5b0 <__fixunsdfsi+0x7c>
  80f57c:	081081c0 	call	81081c <__subdf3>
  80f580:	180b883a 	mov	r5,r3
  80f584:	1009883a 	mov	r4,r2
  80f588:	08110fc0 	call	8110fc <__fixdfsi>
  80f58c:	00e00034 	movhi	r3,32768
  80f590:	10c5883a 	add	r2,r2,r3
  80f594:	dfc00417 	ldw	ra,16(sp)
  80f598:	dcc00317 	ldw	r19,12(sp)
  80f59c:	dc800217 	ldw	r18,8(sp)
  80f5a0:	dc400117 	ldw	r17,4(sp)
  80f5a4:	dc000017 	ldw	r16,0(sp)
  80f5a8:	dec00504 	addi	sp,sp,20
  80f5ac:	f800283a 	ret
  80f5b0:	980b883a 	mov	r5,r19
  80f5b4:	9009883a 	mov	r4,r18
  80f5b8:	08110fc0 	call	8110fc <__fixdfsi>
  80f5bc:	dfc00417 	ldw	ra,16(sp)
  80f5c0:	dcc00317 	ldw	r19,12(sp)
  80f5c4:	dc800217 	ldw	r18,8(sp)
  80f5c8:	dc400117 	ldw	r17,4(sp)
  80f5cc:	dc000017 	ldw	r16,0(sp)
  80f5d0:	dec00504 	addi	sp,sp,20
  80f5d4:	f800283a 	ret

0080f5d8 <__udivdi3>:
  80f5d8:	defff104 	addi	sp,sp,-60
  80f5dc:	0015883a 	mov	r10,zero
  80f5e0:	2005883a 	mov	r2,r4
  80f5e4:	3011883a 	mov	r8,r6
  80f5e8:	df000d15 	stw	fp,52(sp)
  80f5ec:	dd400a15 	stw	r21,40(sp)
  80f5f0:	dcc00815 	stw	r19,32(sp)
  80f5f4:	dfc00e15 	stw	ra,56(sp)
  80f5f8:	ddc00c15 	stw	r23,48(sp)
  80f5fc:	dd800b15 	stw	r22,44(sp)
  80f600:	dd000915 	stw	r20,36(sp)
  80f604:	dc800715 	stw	r18,28(sp)
  80f608:	dc400615 	stw	r17,24(sp)
  80f60c:	dc000515 	stw	r16,20(sp)
  80f610:	da800315 	stw	r10,12(sp)
  80f614:	4027883a 	mov	r19,r8
  80f618:	1039883a 	mov	fp,r2
  80f61c:	282b883a 	mov	r21,r5
  80f620:	da800415 	stw	r10,16(sp)
  80f624:	3800401e 	bne	r7,zero,80f728 <__udivdi3+0x150>
  80f628:	2a006536 	bltu	r5,r8,80f7c0 <__udivdi3+0x1e8>
  80f62c:	4000b526 	beq	r8,zero,80f904 <__udivdi3+0x32c>
  80f630:	00bfffd4 	movui	r2,65535
  80f634:	14c0ad36 	bltu	r2,r19,80f8ec <__udivdi3+0x314>
  80f638:	00803fc4 	movi	r2,255
  80f63c:	14c15e36 	bltu	r2,r19,80fbb8 <__udivdi3+0x5e0>
  80f640:	000b883a 	mov	r5,zero
  80f644:	0005883a 	mov	r2,zero
  80f648:	9884d83a 	srl	r2,r19,r2
  80f64c:	01002074 	movhi	r4,129
  80f650:	2112ba04 	addi	r4,r4,19176
  80f654:	01800804 	movi	r6,32
  80f658:	1105883a 	add	r2,r2,r4
  80f65c:	10c00003 	ldbu	r3,0(r2)
  80f660:	28c7883a 	add	r3,r5,r3
  80f664:	30e9c83a 	sub	r20,r6,r3
  80f668:	a0010a1e 	bne	r20,zero,80fa94 <__udivdi3+0x4bc>
  80f66c:	982ed43a 	srli	r23,r19,16
  80f670:	acebc83a 	sub	r21,r21,r19
  80f674:	9dbfffcc 	andi	r22,r19,65535
  80f678:	05000044 	movi	r20,1
  80f67c:	a809883a 	mov	r4,r21
  80f680:	b80b883a 	mov	r5,r23
  80f684:	08113840 	call	811384 <__udivsi3>
  80f688:	100b883a 	mov	r5,r2
  80f68c:	b009883a 	mov	r4,r22
  80f690:	1021883a 	mov	r16,r2
  80f694:	0801c5c0 	call	801c5c <__mulsi3>
  80f698:	a809883a 	mov	r4,r21
  80f69c:	b80b883a 	mov	r5,r23
  80f6a0:	1023883a 	mov	r17,r2
  80f6a4:	081138c0 	call	81138c <__umodsi3>
  80f6a8:	1004943a 	slli	r2,r2,16
  80f6ac:	e006d43a 	srli	r3,fp,16
  80f6b0:	10c4b03a 	or	r2,r2,r3
  80f6b4:	1440042e 	bgeu	r2,r17,80f6c8 <__udivdi3+0xf0>
  80f6b8:	14c5883a 	add	r2,r2,r19
  80f6bc:	843fffc4 	addi	r16,r16,-1
  80f6c0:	14c00136 	bltu	r2,r19,80f6c8 <__udivdi3+0xf0>
  80f6c4:	14415c36 	bltu	r2,r17,80fc38 <__udivdi3+0x660>
  80f6c8:	1463c83a 	sub	r17,r2,r17
  80f6cc:	8809883a 	mov	r4,r17
  80f6d0:	b80b883a 	mov	r5,r23
  80f6d4:	08113840 	call	811384 <__udivsi3>
  80f6d8:	100b883a 	mov	r5,r2
  80f6dc:	b009883a 	mov	r4,r22
  80f6e0:	102b883a 	mov	r21,r2
  80f6e4:	0801c5c0 	call	801c5c <__mulsi3>
  80f6e8:	8809883a 	mov	r4,r17
  80f6ec:	b80b883a 	mov	r5,r23
  80f6f0:	1025883a 	mov	r18,r2
  80f6f4:	081138c0 	call	81138c <__umodsi3>
  80f6f8:	1004943a 	slli	r2,r2,16
  80f6fc:	e0ffffcc 	andi	r3,fp,65535
  80f700:	10c4b03a 	or	r2,r2,r3
  80f704:	1480042e 	bgeu	r2,r18,80f718 <__udivdi3+0x140>
  80f708:	9885883a 	add	r2,r19,r2
  80f70c:	ad7fffc4 	addi	r21,r21,-1
  80f710:	14c00136 	bltu	r2,r19,80f718 <__udivdi3+0x140>
  80f714:	14813c36 	bltu	r2,r18,80fc08 <__udivdi3+0x630>
  80f718:	8004943a 	slli	r2,r16,16
  80f71c:	a009883a 	mov	r4,r20
  80f720:	a884b03a 	or	r2,r21,r2
  80f724:	00001506 	br	80f77c <__udivdi3+0x1a4>
  80f728:	380d883a 	mov	r6,r7
  80f72c:	29c06c36 	bltu	r5,r7,80f8e0 <__udivdi3+0x308>
  80f730:	00bfffd4 	movui	r2,65535
  80f734:	11c06436 	bltu	r2,r7,80f8c8 <__udivdi3+0x2f0>
  80f738:	00803fc4 	movi	r2,255
  80f73c:	11c11836 	bltu	r2,r7,80fba0 <__udivdi3+0x5c8>
  80f740:	000b883a 	mov	r5,zero
  80f744:	0005883a 	mov	r2,zero
  80f748:	3084d83a 	srl	r2,r6,r2
  80f74c:	01002074 	movhi	r4,129
  80f750:	2112ba04 	addi	r4,r4,19176
  80f754:	01c00804 	movi	r7,32
  80f758:	1105883a 	add	r2,r2,r4
  80f75c:	10c00003 	ldbu	r3,0(r2)
  80f760:	28c7883a 	add	r3,r5,r3
  80f764:	38edc83a 	sub	r22,r7,r3
  80f768:	b000731e 	bne	r22,zero,80f938 <__udivdi3+0x360>
  80f76c:	35400136 	bltu	r6,r21,80f774 <__udivdi3+0x19c>
  80f770:	e4c05b36 	bltu	fp,r19,80f8e0 <__udivdi3+0x308>
  80f774:	00800044 	movi	r2,1
  80f778:	0009883a 	mov	r4,zero
  80f77c:	d8800315 	stw	r2,12(sp)
  80f780:	d9400317 	ldw	r5,12(sp)
  80f784:	2007883a 	mov	r3,r4
  80f788:	d9000415 	stw	r4,16(sp)
  80f78c:	2805883a 	mov	r2,r5
  80f790:	dfc00e17 	ldw	ra,56(sp)
  80f794:	df000d17 	ldw	fp,52(sp)
  80f798:	ddc00c17 	ldw	r23,48(sp)
  80f79c:	dd800b17 	ldw	r22,44(sp)
  80f7a0:	dd400a17 	ldw	r21,40(sp)
  80f7a4:	dd000917 	ldw	r20,36(sp)
  80f7a8:	dcc00817 	ldw	r19,32(sp)
  80f7ac:	dc800717 	ldw	r18,28(sp)
  80f7b0:	dc400617 	ldw	r17,24(sp)
  80f7b4:	dc000517 	ldw	r16,20(sp)
  80f7b8:	dec00f04 	addi	sp,sp,60
  80f7bc:	f800283a 	ret
  80f7c0:	00bfffd4 	movui	r2,65535
  80f7c4:	12005636 	bltu	r2,r8,80f920 <__udivdi3+0x348>
  80f7c8:	00803fc4 	movi	r2,255
  80f7cc:	12010036 	bltu	r2,r8,80fbd0 <__udivdi3+0x5f8>
  80f7d0:	000b883a 	mov	r5,zero
  80f7d4:	0005883a 	mov	r2,zero
  80f7d8:	9884d83a 	srl	r2,r19,r2
  80f7dc:	01002074 	movhi	r4,129
  80f7e0:	2112ba04 	addi	r4,r4,19176
  80f7e4:	01800804 	movi	r6,32
  80f7e8:	1105883a 	add	r2,r2,r4
  80f7ec:	10c00003 	ldbu	r3,0(r2)
  80f7f0:	28c7883a 	add	r3,r5,r3
  80f7f4:	30cbc83a 	sub	r5,r6,r3
  80f7f8:	28000626 	beq	r5,zero,80f814 <__udivdi3+0x23c>
  80f7fc:	3145c83a 	sub	r2,r6,r5
  80f800:	e084d83a 	srl	r2,fp,r2
  80f804:	a946983a 	sll	r3,r21,r5
  80f808:	e178983a 	sll	fp,fp,r5
  80f80c:	9966983a 	sll	r19,r19,r5
  80f810:	18aab03a 	or	r21,r3,r2
  80f814:	982ed43a 	srli	r23,r19,16
  80f818:	a809883a 	mov	r4,r21
  80f81c:	9cbfffcc 	andi	r18,r19,65535
  80f820:	b80b883a 	mov	r5,r23
  80f824:	08113840 	call	811384 <__udivsi3>
  80f828:	100b883a 	mov	r5,r2
  80f82c:	9009883a 	mov	r4,r18
  80f830:	1021883a 	mov	r16,r2
  80f834:	0801c5c0 	call	801c5c <__mulsi3>
  80f838:	a809883a 	mov	r4,r21
  80f83c:	b80b883a 	mov	r5,r23
  80f840:	1023883a 	mov	r17,r2
  80f844:	081138c0 	call	81138c <__umodsi3>
  80f848:	1004943a 	slli	r2,r2,16
  80f84c:	e006d43a 	srli	r3,fp,16
  80f850:	10c4b03a 	or	r2,r2,r3
  80f854:	1440042e 	bgeu	r2,r17,80f868 <__udivdi3+0x290>
  80f858:	14c5883a 	add	r2,r2,r19
  80f85c:	843fffc4 	addi	r16,r16,-1
  80f860:	14c00136 	bltu	r2,r19,80f868 <__udivdi3+0x290>
  80f864:	1440ea36 	bltu	r2,r17,80fc10 <__udivdi3+0x638>
  80f868:	1463c83a 	sub	r17,r2,r17
  80f86c:	8809883a 	mov	r4,r17
  80f870:	b80b883a 	mov	r5,r23
  80f874:	08113840 	call	811384 <__udivsi3>
  80f878:	100b883a 	mov	r5,r2
  80f87c:	9009883a 	mov	r4,r18
  80f880:	102b883a 	mov	r21,r2
  80f884:	0801c5c0 	call	801c5c <__mulsi3>
  80f888:	8809883a 	mov	r4,r17
  80f88c:	b80b883a 	mov	r5,r23
  80f890:	1025883a 	mov	r18,r2
  80f894:	081138c0 	call	81138c <__umodsi3>
  80f898:	1004943a 	slli	r2,r2,16
  80f89c:	e0ffffcc 	andi	r3,fp,65535
  80f8a0:	10c4b03a 	or	r2,r2,r3
  80f8a4:	1480042e 	bgeu	r2,r18,80f8b8 <__udivdi3+0x2e0>
  80f8a8:	9885883a 	add	r2,r19,r2
  80f8ac:	ad7fffc4 	addi	r21,r21,-1
  80f8b0:	14c00136 	bltu	r2,r19,80f8b8 <__udivdi3+0x2e0>
  80f8b4:	1480d936 	bltu	r2,r18,80fc1c <__udivdi3+0x644>
  80f8b8:	8004943a 	slli	r2,r16,16
  80f8bc:	0009883a 	mov	r4,zero
  80f8c0:	a884b03a 	or	r2,r21,r2
  80f8c4:	003fad06 	br	80f77c <__udivdi3+0x1a4>
  80f8c8:	00804034 	movhi	r2,256
  80f8cc:	10bfffc4 	addi	r2,r2,-1
  80f8d0:	11c0b636 	bltu	r2,r7,80fbac <__udivdi3+0x5d4>
  80f8d4:	01400404 	movi	r5,16
  80f8d8:	2805883a 	mov	r2,r5
  80f8dc:	003f9a06 	br	80f748 <__udivdi3+0x170>
  80f8e0:	0005883a 	mov	r2,zero
  80f8e4:	0009883a 	mov	r4,zero
  80f8e8:	003fa406 	br	80f77c <__udivdi3+0x1a4>
  80f8ec:	00804034 	movhi	r2,256
  80f8f0:	10bfffc4 	addi	r2,r2,-1
  80f8f4:	14c0b336 	bltu	r2,r19,80fbc4 <__udivdi3+0x5ec>
  80f8f8:	01400404 	movi	r5,16
  80f8fc:	2805883a 	mov	r2,r5
  80f900:	003f5106 	br	80f648 <__udivdi3+0x70>
  80f904:	01000044 	movi	r4,1
  80f908:	000b883a 	mov	r5,zero
  80f90c:	08113840 	call	811384 <__udivsi3>
  80f910:	1027883a 	mov	r19,r2
  80f914:	00bfffd4 	movui	r2,65535
  80f918:	14fff436 	bltu	r2,r19,80f8ec <__udivdi3+0x314>
  80f91c:	003f4606 	br	80f638 <__udivdi3+0x60>
  80f920:	00804034 	movhi	r2,256
  80f924:	10bfffc4 	addi	r2,r2,-1
  80f928:	1200ac36 	bltu	r2,r8,80fbdc <__udivdi3+0x604>
  80f92c:	01400404 	movi	r5,16
  80f930:	2805883a 	mov	r2,r5
  80f934:	003fa806 	br	80f7d8 <__udivdi3+0x200>
  80f938:	3d85c83a 	sub	r2,r7,r22
  80f93c:	3588983a 	sll	r4,r6,r22
  80f940:	9886d83a 	srl	r3,r19,r2
  80f944:	a8a2d83a 	srl	r17,r21,r2
  80f948:	e084d83a 	srl	r2,fp,r2
  80f94c:	20eeb03a 	or	r23,r4,r3
  80f950:	b824d43a 	srli	r18,r23,16
  80f954:	ad86983a 	sll	r3,r21,r22
  80f958:	8809883a 	mov	r4,r17
  80f95c:	900b883a 	mov	r5,r18
  80f960:	1886b03a 	or	r3,r3,r2
  80f964:	d8c00115 	stw	r3,4(sp)
  80f968:	bc3fffcc 	andi	r16,r23,65535
  80f96c:	08113840 	call	811384 <__udivsi3>
  80f970:	100b883a 	mov	r5,r2
  80f974:	8009883a 	mov	r4,r16
  80f978:	1029883a 	mov	r20,r2
  80f97c:	0801c5c0 	call	801c5c <__mulsi3>
  80f980:	900b883a 	mov	r5,r18
  80f984:	8809883a 	mov	r4,r17
  80f988:	102b883a 	mov	r21,r2
  80f98c:	081138c0 	call	81138c <__umodsi3>
  80f990:	d9400117 	ldw	r5,4(sp)
  80f994:	1004943a 	slli	r2,r2,16
  80f998:	9da6983a 	sll	r19,r19,r22
  80f99c:	2806d43a 	srli	r3,r5,16
  80f9a0:	10c4b03a 	or	r2,r2,r3
  80f9a4:	1540032e 	bgeu	r2,r21,80f9b4 <__udivdi3+0x3dc>
  80f9a8:	15c5883a 	add	r2,r2,r23
  80f9ac:	a53fffc4 	addi	r20,r20,-1
  80f9b0:	15c0912e 	bgeu	r2,r23,80fbf8 <__udivdi3+0x620>
  80f9b4:	1563c83a 	sub	r17,r2,r21
  80f9b8:	8809883a 	mov	r4,r17
  80f9bc:	900b883a 	mov	r5,r18
  80f9c0:	08113840 	call	811384 <__udivsi3>
  80f9c4:	100b883a 	mov	r5,r2
  80f9c8:	8009883a 	mov	r4,r16
  80f9cc:	102b883a 	mov	r21,r2
  80f9d0:	0801c5c0 	call	801c5c <__mulsi3>
  80f9d4:	8809883a 	mov	r4,r17
  80f9d8:	900b883a 	mov	r5,r18
  80f9dc:	1021883a 	mov	r16,r2
  80f9e0:	081138c0 	call	81138c <__umodsi3>
  80f9e4:	da800117 	ldw	r10,4(sp)
  80f9e8:	1004943a 	slli	r2,r2,16
  80f9ec:	50ffffcc 	andi	r3,r10,65535
  80f9f0:	10c6b03a 	or	r3,r2,r3
  80f9f4:	1c00032e 	bgeu	r3,r16,80fa04 <__udivdi3+0x42c>
  80f9f8:	1dc7883a 	add	r3,r3,r23
  80f9fc:	ad7fffc4 	addi	r21,r21,-1
  80fa00:	1dc0792e 	bgeu	r3,r23,80fbe8 <__udivdi3+0x610>
  80fa04:	a004943a 	slli	r2,r20,16
  80fa08:	982ed43a 	srli	r23,r19,16
  80fa0c:	9cffffcc 	andi	r19,r19,65535
  80fa10:	a8a4b03a 	or	r18,r21,r2
  80fa14:	947fffcc 	andi	r17,r18,65535
  80fa18:	902ad43a 	srli	r21,r18,16
  80fa1c:	8809883a 	mov	r4,r17
  80fa20:	980b883a 	mov	r5,r19
  80fa24:	1c21c83a 	sub	r16,r3,r16
  80fa28:	0801c5c0 	call	801c5c <__mulsi3>
  80fa2c:	8809883a 	mov	r4,r17
  80fa30:	b80b883a 	mov	r5,r23
  80fa34:	1029883a 	mov	r20,r2
  80fa38:	0801c5c0 	call	801c5c <__mulsi3>
  80fa3c:	980b883a 	mov	r5,r19
  80fa40:	a809883a 	mov	r4,r21
  80fa44:	1023883a 	mov	r17,r2
  80fa48:	0801c5c0 	call	801c5c <__mulsi3>
  80fa4c:	a809883a 	mov	r4,r21
  80fa50:	b80b883a 	mov	r5,r23
  80fa54:	1027883a 	mov	r19,r2
  80fa58:	0801c5c0 	call	801c5c <__mulsi3>
  80fa5c:	1009883a 	mov	r4,r2
  80fa60:	a004d43a 	srli	r2,r20,16
  80fa64:	8ce3883a 	add	r17,r17,r19
  80fa68:	1447883a 	add	r3,r2,r17
  80fa6c:	1cc0022e 	bgeu	r3,r19,80fa78 <__udivdi3+0x4a0>
  80fa70:	00800074 	movhi	r2,1
  80fa74:	2089883a 	add	r4,r4,r2
  80fa78:	1804d43a 	srli	r2,r3,16
  80fa7c:	2085883a 	add	r2,r4,r2
  80fa80:	80804436 	bltu	r16,r2,80fb94 <__udivdi3+0x5bc>
  80fa84:	80803e26 	beq	r16,r2,80fb80 <__udivdi3+0x5a8>
  80fa88:	9005883a 	mov	r2,r18
  80fa8c:	0009883a 	mov	r4,zero
  80fa90:	003f3a06 	br	80f77c <__udivdi3+0x1a4>
  80fa94:	9d26983a 	sll	r19,r19,r20
  80fa98:	3505c83a 	sub	r2,r6,r20
  80fa9c:	a8a2d83a 	srl	r17,r21,r2
  80faa0:	982ed43a 	srli	r23,r19,16
  80faa4:	e084d83a 	srl	r2,fp,r2
  80faa8:	ad06983a 	sll	r3,r21,r20
  80faac:	8809883a 	mov	r4,r17
  80fab0:	b80b883a 	mov	r5,r23
  80fab4:	1886b03a 	or	r3,r3,r2
  80fab8:	d8c00015 	stw	r3,0(sp)
  80fabc:	9dbfffcc 	andi	r22,r19,65535
  80fac0:	08113840 	call	811384 <__udivsi3>
  80fac4:	100b883a 	mov	r5,r2
  80fac8:	b009883a 	mov	r4,r22
  80facc:	d8800215 	stw	r2,8(sp)
  80fad0:	0801c5c0 	call	801c5c <__mulsi3>
  80fad4:	8809883a 	mov	r4,r17
  80fad8:	b80b883a 	mov	r5,r23
  80fadc:	102b883a 	mov	r21,r2
  80fae0:	081138c0 	call	81138c <__umodsi3>
  80fae4:	d9000017 	ldw	r4,0(sp)
  80fae8:	1004943a 	slli	r2,r2,16
  80faec:	2006d43a 	srli	r3,r4,16
  80faf0:	10c4b03a 	or	r2,r2,r3
  80faf4:	1540052e 	bgeu	r2,r21,80fb0c <__udivdi3+0x534>
  80faf8:	d9400217 	ldw	r5,8(sp)
  80fafc:	14c5883a 	add	r2,r2,r19
  80fb00:	297fffc4 	addi	r5,r5,-1
  80fb04:	d9400215 	stw	r5,8(sp)
  80fb08:	14c0462e 	bgeu	r2,r19,80fc24 <__udivdi3+0x64c>
  80fb0c:	1563c83a 	sub	r17,r2,r21
  80fb10:	8809883a 	mov	r4,r17
  80fb14:	b80b883a 	mov	r5,r23
  80fb18:	08113840 	call	811384 <__udivsi3>
  80fb1c:	100b883a 	mov	r5,r2
  80fb20:	b009883a 	mov	r4,r22
  80fb24:	1025883a 	mov	r18,r2
  80fb28:	0801c5c0 	call	801c5c <__mulsi3>
  80fb2c:	8809883a 	mov	r4,r17
  80fb30:	b80b883a 	mov	r5,r23
  80fb34:	1021883a 	mov	r16,r2
  80fb38:	081138c0 	call	81138c <__umodsi3>
  80fb3c:	da800017 	ldw	r10,0(sp)
  80fb40:	1004943a 	slli	r2,r2,16
  80fb44:	50ffffcc 	andi	r3,r10,65535
  80fb48:	10c6b03a 	or	r3,r2,r3
  80fb4c:	1c00062e 	bgeu	r3,r16,80fb68 <__udivdi3+0x590>
  80fb50:	1cc7883a 	add	r3,r3,r19
  80fb54:	94bfffc4 	addi	r18,r18,-1
  80fb58:	1cc00336 	bltu	r3,r19,80fb68 <__udivdi3+0x590>
  80fb5c:	1c00022e 	bgeu	r3,r16,80fb68 <__udivdi3+0x590>
  80fb60:	94bfffc4 	addi	r18,r18,-1
  80fb64:	1cc7883a 	add	r3,r3,r19
  80fb68:	d9000217 	ldw	r4,8(sp)
  80fb6c:	e538983a 	sll	fp,fp,r20
  80fb70:	1c2bc83a 	sub	r21,r3,r16
  80fb74:	2004943a 	slli	r2,r4,16
  80fb78:	90a8b03a 	or	r20,r18,r2
  80fb7c:	003ebf06 	br	80f67c <__udivdi3+0xa4>
  80fb80:	1804943a 	slli	r2,r3,16
  80fb84:	e588983a 	sll	r4,fp,r22
  80fb88:	a0ffffcc 	andi	r3,r20,65535
  80fb8c:	10c5883a 	add	r2,r2,r3
  80fb90:	20bfbd2e 	bgeu	r4,r2,80fa88 <__udivdi3+0x4b0>
  80fb94:	90bfffc4 	addi	r2,r18,-1
  80fb98:	0009883a 	mov	r4,zero
  80fb9c:	003ef706 	br	80f77c <__udivdi3+0x1a4>
  80fba0:	01400204 	movi	r5,8
  80fba4:	2805883a 	mov	r2,r5
  80fba8:	003ee706 	br	80f748 <__udivdi3+0x170>
  80fbac:	01400604 	movi	r5,24
  80fbb0:	2805883a 	mov	r2,r5
  80fbb4:	003ee406 	br	80f748 <__udivdi3+0x170>
  80fbb8:	01400204 	movi	r5,8
  80fbbc:	2805883a 	mov	r2,r5
  80fbc0:	003ea106 	br	80f648 <__udivdi3+0x70>
  80fbc4:	01400604 	movi	r5,24
  80fbc8:	2805883a 	mov	r2,r5
  80fbcc:	003e9e06 	br	80f648 <__udivdi3+0x70>
  80fbd0:	01400204 	movi	r5,8
  80fbd4:	2805883a 	mov	r2,r5
  80fbd8:	003eff06 	br	80f7d8 <__udivdi3+0x200>
  80fbdc:	01400604 	movi	r5,24
  80fbe0:	2805883a 	mov	r2,r5
  80fbe4:	003efc06 	br	80f7d8 <__udivdi3+0x200>
  80fbe8:	1c3f862e 	bgeu	r3,r16,80fa04 <__udivdi3+0x42c>
  80fbec:	1dc7883a 	add	r3,r3,r23
  80fbf0:	ad7fffc4 	addi	r21,r21,-1
  80fbf4:	003f8306 	br	80fa04 <__udivdi3+0x42c>
  80fbf8:	157f6e2e 	bgeu	r2,r21,80f9b4 <__udivdi3+0x3dc>
  80fbfc:	a53fffc4 	addi	r20,r20,-1
  80fc00:	15c5883a 	add	r2,r2,r23
  80fc04:	003f6b06 	br	80f9b4 <__udivdi3+0x3dc>
  80fc08:	ad7fffc4 	addi	r21,r21,-1
  80fc0c:	003ec206 	br	80f718 <__udivdi3+0x140>
  80fc10:	843fffc4 	addi	r16,r16,-1
  80fc14:	14c5883a 	add	r2,r2,r19
  80fc18:	003f1306 	br	80f868 <__udivdi3+0x290>
  80fc1c:	ad7fffc4 	addi	r21,r21,-1
  80fc20:	003f2506 	br	80f8b8 <__udivdi3+0x2e0>
  80fc24:	157fb92e 	bgeu	r2,r21,80fb0c <__udivdi3+0x534>
  80fc28:	297fffc4 	addi	r5,r5,-1
  80fc2c:	14c5883a 	add	r2,r2,r19
  80fc30:	d9400215 	stw	r5,8(sp)
  80fc34:	003fb506 	br	80fb0c <__udivdi3+0x534>
  80fc38:	843fffc4 	addi	r16,r16,-1
  80fc3c:	14c5883a 	add	r2,r2,r19
  80fc40:	003ea106 	br	80f6c8 <__udivdi3+0xf0>

0080fc44 <__umoddi3>:
  80fc44:	defff004 	addi	sp,sp,-64
  80fc48:	3011883a 	mov	r8,r6
  80fc4c:	000d883a 	mov	r6,zero
  80fc50:	dd400b15 	stw	r21,44(sp)
  80fc54:	dcc00915 	stw	r19,36(sp)
  80fc58:	dc000615 	stw	r16,24(sp)
  80fc5c:	dfc00f15 	stw	ra,60(sp)
  80fc60:	df000e15 	stw	fp,56(sp)
  80fc64:	ddc00d15 	stw	r23,52(sp)
  80fc68:	dd800c15 	stw	r22,48(sp)
  80fc6c:	dd000a15 	stw	r20,40(sp)
  80fc70:	dc800815 	stw	r18,32(sp)
  80fc74:	dc400715 	stw	r17,28(sp)
  80fc78:	2817883a 	mov	r11,r5
  80fc7c:	d9800415 	stw	r6,16(sp)
  80fc80:	4027883a 	mov	r19,r8
  80fc84:	d9800515 	stw	r6,20(sp)
  80fc88:	2021883a 	mov	r16,r4
  80fc8c:	282b883a 	mov	r21,r5
  80fc90:	38002c1e 	bne	r7,zero,80fd44 <__umoddi3+0x100>
  80fc94:	2a005636 	bltu	r5,r8,80fdf0 <__umoddi3+0x1ac>
  80fc98:	40009a26 	beq	r8,zero,80ff04 <__umoddi3+0x2c0>
  80fc9c:	00bfffd4 	movui	r2,65535
  80fca0:	14c09236 	bltu	r2,r19,80feec <__umoddi3+0x2a8>
  80fca4:	00803fc4 	movi	r2,255
  80fca8:	14c15c36 	bltu	r2,r19,81021c <__umoddi3+0x5d8>
  80fcac:	000b883a 	mov	r5,zero
  80fcb0:	0005883a 	mov	r2,zero
  80fcb4:	9884d83a 	srl	r2,r19,r2
  80fcb8:	01002074 	movhi	r4,129
  80fcbc:	2112ba04 	addi	r4,r4,19176
  80fcc0:	01800804 	movi	r6,32
  80fcc4:	1105883a 	add	r2,r2,r4
  80fcc8:	10c00003 	ldbu	r3,0(r2)
  80fccc:	28c7883a 	add	r3,r5,r3
  80fcd0:	30e5c83a 	sub	r18,r6,r3
  80fcd4:	9000a41e 	bne	r18,zero,80ff68 <__umoddi3+0x324>
  80fcd8:	982ed43a 	srli	r23,r19,16
  80fcdc:	acebc83a 	sub	r21,r21,r19
  80fce0:	9d3fffcc 	andi	r20,r19,65535
  80fce4:	002d883a 	mov	r22,zero
  80fce8:	a809883a 	mov	r4,r21
  80fcec:	b80b883a 	mov	r5,r23
  80fcf0:	08113840 	call	811384 <__udivsi3>
  80fcf4:	100b883a 	mov	r5,r2
  80fcf8:	a009883a 	mov	r4,r20
  80fcfc:	0801c5c0 	call	801c5c <__mulsi3>
  80fd00:	a809883a 	mov	r4,r21
  80fd04:	b80b883a 	mov	r5,r23
  80fd08:	1023883a 	mov	r17,r2
  80fd0c:	081138c0 	call	81138c <__umodsi3>
  80fd10:	1004943a 	slli	r2,r2,16
  80fd14:	8006d43a 	srli	r3,r16,16
  80fd18:	10c4b03a 	or	r2,r2,r3
  80fd1c:	1440032e 	bgeu	r2,r17,80fd2c <__umoddi3+0xe8>
  80fd20:	14c5883a 	add	r2,r2,r19
  80fd24:	14c00136 	bltu	r2,r19,80fd2c <__umoddi3+0xe8>
  80fd28:	14415836 	bltu	r2,r17,81028c <__umoddi3+0x648>
  80fd2c:	1463c83a 	sub	r17,r2,r17
  80fd30:	8809883a 	mov	r4,r17
  80fd34:	b80b883a 	mov	r5,r23
  80fd38:	08113840 	call	811384 <__udivsi3>
  80fd3c:	a009883a 	mov	r4,r20
  80fd40:	00005306 	br	80fe90 <__umoddi3+0x24c>
  80fd44:	380d883a 	mov	r6,r7
  80fd48:	29c0132e 	bgeu	r5,r7,80fd98 <__umoddi3+0x154>
  80fd4c:	d9000415 	stw	r4,16(sp)
  80fd50:	d9400515 	stw	r5,20(sp)
  80fd54:	d9400417 	ldw	r5,16(sp)
  80fd58:	5813883a 	mov	r9,r11
  80fd5c:	2811883a 	mov	r8,r5
  80fd60:	4005883a 	mov	r2,r8
  80fd64:	4807883a 	mov	r3,r9
  80fd68:	dfc00f17 	ldw	ra,60(sp)
  80fd6c:	df000e17 	ldw	fp,56(sp)
  80fd70:	ddc00d17 	ldw	r23,52(sp)
  80fd74:	dd800c17 	ldw	r22,48(sp)
  80fd78:	dd400b17 	ldw	r21,44(sp)
  80fd7c:	dd000a17 	ldw	r20,40(sp)
  80fd80:	dcc00917 	ldw	r19,36(sp)
  80fd84:	dc800817 	ldw	r18,32(sp)
  80fd88:	dc400717 	ldw	r17,28(sp)
  80fd8c:	dc000617 	ldw	r16,24(sp)
  80fd90:	dec01004 	addi	sp,sp,64
  80fd94:	f800283a 	ret
  80fd98:	00bfffd4 	movui	r2,65535
  80fd9c:	11c06636 	bltu	r2,r7,80ff38 <__umoddi3+0x2f4>
  80fda0:	00803fc4 	movi	r2,255
  80fda4:	11c12036 	bltu	r2,r7,810228 <__umoddi3+0x5e4>
  80fda8:	000b883a 	mov	r5,zero
  80fdac:	0005883a 	mov	r2,zero
  80fdb0:	3084d83a 	srl	r2,r6,r2
  80fdb4:	01002074 	movhi	r4,129
  80fdb8:	2112ba04 	addi	r4,r4,19176
  80fdbc:	01c00804 	movi	r7,32
  80fdc0:	1105883a 	add	r2,r2,r4
  80fdc4:	10c00003 	ldbu	r3,0(r2)
  80fdc8:	28c7883a 	add	r3,r5,r3
  80fdcc:	38e5c83a 	sub	r18,r7,r3
  80fdd0:	9000941e 	bne	r18,zero,810024 <__umoddi3+0x3e0>
  80fdd4:	35405e36 	bltu	r6,r21,80ff50 <__umoddi3+0x30c>
  80fdd8:	84c05d2e 	bgeu	r16,r19,80ff50 <__umoddi3+0x30c>
  80fddc:	8011883a 	mov	r8,r16
  80fde0:	a813883a 	mov	r9,r21
  80fde4:	dc000415 	stw	r16,16(sp)
  80fde8:	dd400515 	stw	r21,20(sp)
  80fdec:	003fdc06 	br	80fd60 <__umoddi3+0x11c>
  80fdf0:	00bfffd4 	movui	r2,65535
  80fdf4:	12004a36 	bltu	r2,r8,80ff20 <__umoddi3+0x2dc>
  80fdf8:	00803fc4 	movi	r2,255
  80fdfc:	12010d36 	bltu	r2,r8,810234 <__umoddi3+0x5f0>
  80fe00:	000b883a 	mov	r5,zero
  80fe04:	0005883a 	mov	r2,zero
  80fe08:	9884d83a 	srl	r2,r19,r2
  80fe0c:	01002074 	movhi	r4,129
  80fe10:	2112ba04 	addi	r4,r4,19176
  80fe14:	01800804 	movi	r6,32
  80fe18:	1105883a 	add	r2,r2,r4
  80fe1c:	10c00003 	ldbu	r3,0(r2)
  80fe20:	28c7883a 	add	r3,r5,r3
  80fe24:	30c7c83a 	sub	r3,r6,r3
  80fe28:	1800dc1e 	bne	r3,zero,81019c <__umoddi3+0x558>
  80fe2c:	002d883a 	mov	r22,zero
  80fe30:	982ed43a 	srli	r23,r19,16
  80fe34:	a809883a 	mov	r4,r21
  80fe38:	9cbfffcc 	andi	r18,r19,65535
  80fe3c:	b80b883a 	mov	r5,r23
  80fe40:	08113840 	call	811384 <__udivsi3>
  80fe44:	100b883a 	mov	r5,r2
  80fe48:	9009883a 	mov	r4,r18
  80fe4c:	0801c5c0 	call	801c5c <__mulsi3>
  80fe50:	a809883a 	mov	r4,r21
  80fe54:	b80b883a 	mov	r5,r23
  80fe58:	1023883a 	mov	r17,r2
  80fe5c:	081138c0 	call	81138c <__umodsi3>
  80fe60:	1004943a 	slli	r2,r2,16
  80fe64:	8006d43a 	srli	r3,r16,16
  80fe68:	10c4b03a 	or	r2,r2,r3
  80fe6c:	1440032e 	bgeu	r2,r17,80fe7c <__umoddi3+0x238>
  80fe70:	14c5883a 	add	r2,r2,r19
  80fe74:	14c00136 	bltu	r2,r19,80fe7c <__umoddi3+0x238>
  80fe78:	14410236 	bltu	r2,r17,810284 <__umoddi3+0x640>
  80fe7c:	1463c83a 	sub	r17,r2,r17
  80fe80:	8809883a 	mov	r4,r17
  80fe84:	b80b883a 	mov	r5,r23
  80fe88:	08113840 	call	811384 <__udivsi3>
  80fe8c:	9009883a 	mov	r4,r18
  80fe90:	100b883a 	mov	r5,r2
  80fe94:	0801c5c0 	call	801c5c <__mulsi3>
  80fe98:	8809883a 	mov	r4,r17
  80fe9c:	b80b883a 	mov	r5,r23
  80fea0:	102b883a 	mov	r21,r2
  80fea4:	081138c0 	call	81138c <__umodsi3>
  80fea8:	1004943a 	slli	r2,r2,16
  80feac:	80ffffcc 	andi	r3,r16,65535
  80feb0:	10c4b03a 	or	r2,r2,r3
  80feb4:	1540042e 	bgeu	r2,r21,80fec8 <__umoddi3+0x284>
  80feb8:	14c5883a 	add	r2,r2,r19
  80febc:	14c00236 	bltu	r2,r19,80fec8 <__umoddi3+0x284>
  80fec0:	1540012e 	bgeu	r2,r21,80fec8 <__umoddi3+0x284>
  80fec4:	14c5883a 	add	r2,r2,r19
  80fec8:	1545c83a 	sub	r2,r2,r21
  80fecc:	1584d83a 	srl	r2,r2,r22
  80fed0:	0013883a 	mov	r9,zero
  80fed4:	d8800415 	stw	r2,16(sp)
  80fed8:	d8c00417 	ldw	r3,16(sp)
  80fedc:	0005883a 	mov	r2,zero
  80fee0:	d8800515 	stw	r2,20(sp)
  80fee4:	1811883a 	mov	r8,r3
  80fee8:	003f9d06 	br	80fd60 <__umoddi3+0x11c>
  80feec:	00804034 	movhi	r2,256
  80fef0:	10bfffc4 	addi	r2,r2,-1
  80fef4:	14c0c636 	bltu	r2,r19,810210 <__umoddi3+0x5cc>
  80fef8:	01400404 	movi	r5,16
  80fefc:	2805883a 	mov	r2,r5
  80ff00:	003f6c06 	br	80fcb4 <__umoddi3+0x70>
  80ff04:	01000044 	movi	r4,1
  80ff08:	000b883a 	mov	r5,zero
  80ff0c:	08113840 	call	811384 <__udivsi3>
  80ff10:	1027883a 	mov	r19,r2
  80ff14:	00bfffd4 	movui	r2,65535
  80ff18:	14fff436 	bltu	r2,r19,80feec <__umoddi3+0x2a8>
  80ff1c:	003f6106 	br	80fca4 <__umoddi3+0x60>
  80ff20:	00804034 	movhi	r2,256
  80ff24:	10bfffc4 	addi	r2,r2,-1
  80ff28:	1200c536 	bltu	r2,r8,810240 <__umoddi3+0x5fc>
  80ff2c:	01400404 	movi	r5,16
  80ff30:	2805883a 	mov	r2,r5
  80ff34:	003fb406 	br	80fe08 <__umoddi3+0x1c4>
  80ff38:	00804034 	movhi	r2,256
  80ff3c:	10bfffc4 	addi	r2,r2,-1
  80ff40:	11c0c236 	bltu	r2,r7,81024c <__umoddi3+0x608>
  80ff44:	01400404 	movi	r5,16
  80ff48:	2805883a 	mov	r2,r5
  80ff4c:	003f9806 	br	80fdb0 <__umoddi3+0x16c>
  80ff50:	84c9c83a 	sub	r4,r16,r19
  80ff54:	8105803a 	cmpltu	r2,r16,r4
  80ff58:	a987c83a 	sub	r3,r21,r6
  80ff5c:	18abc83a 	sub	r21,r3,r2
  80ff60:	2021883a 	mov	r16,r4
  80ff64:	003f9d06 	br	80fddc <__umoddi3+0x198>
  80ff68:	9ca6983a 	sll	r19,r19,r18
  80ff6c:	3485c83a 	sub	r2,r6,r18
  80ff70:	a8a2d83a 	srl	r17,r21,r2
  80ff74:	982ed43a 	srli	r23,r19,16
  80ff78:	ac86983a 	sll	r3,r21,r18
  80ff7c:	8084d83a 	srl	r2,r16,r2
  80ff80:	8809883a 	mov	r4,r17
  80ff84:	b80b883a 	mov	r5,r23
  80ff88:	18b8b03a 	or	fp,r3,r2
  80ff8c:	9d3fffcc 	andi	r20,r19,65535
  80ff90:	08113840 	call	811384 <__udivsi3>
  80ff94:	100b883a 	mov	r5,r2
  80ff98:	a009883a 	mov	r4,r20
  80ff9c:	0801c5c0 	call	801c5c <__mulsi3>
  80ffa0:	8809883a 	mov	r4,r17
  80ffa4:	b80b883a 	mov	r5,r23
  80ffa8:	102b883a 	mov	r21,r2
  80ffac:	081138c0 	call	81138c <__umodsi3>
  80ffb0:	1004943a 	slli	r2,r2,16
  80ffb4:	e006d43a 	srli	r3,fp,16
  80ffb8:	902d883a 	mov	r22,r18
  80ffbc:	10c4b03a 	or	r2,r2,r3
  80ffc0:	1540022e 	bgeu	r2,r21,80ffcc <__umoddi3+0x388>
  80ffc4:	14c5883a 	add	r2,r2,r19
  80ffc8:	14c0ab2e 	bgeu	r2,r19,810278 <__umoddi3+0x634>
  80ffcc:	1563c83a 	sub	r17,r2,r21
  80ffd0:	8809883a 	mov	r4,r17
  80ffd4:	b80b883a 	mov	r5,r23
  80ffd8:	08113840 	call	811384 <__udivsi3>
  80ffdc:	100b883a 	mov	r5,r2
  80ffe0:	a009883a 	mov	r4,r20
  80ffe4:	0801c5c0 	call	801c5c <__mulsi3>
  80ffe8:	8809883a 	mov	r4,r17
  80ffec:	b80b883a 	mov	r5,r23
  80fff0:	102b883a 	mov	r21,r2
  80fff4:	081138c0 	call	81138c <__umodsi3>
  80fff8:	1004943a 	slli	r2,r2,16
  80fffc:	e0ffffcc 	andi	r3,fp,65535
  810000:	10c4b03a 	or	r2,r2,r3
  810004:	1540042e 	bgeu	r2,r21,810018 <__umoddi3+0x3d4>
  810008:	14c5883a 	add	r2,r2,r19
  81000c:	14c00236 	bltu	r2,r19,810018 <__umoddi3+0x3d4>
  810010:	1540012e 	bgeu	r2,r21,810018 <__umoddi3+0x3d4>
  810014:	14c5883a 	add	r2,r2,r19
  810018:	84a0983a 	sll	r16,r16,r18
  81001c:	156bc83a 	sub	r21,r2,r21
  810020:	003f3106 	br	80fce8 <__umoddi3+0xa4>
  810024:	3c8fc83a 	sub	r7,r7,r18
  810028:	3486983a 	sll	r3,r6,r18
  81002c:	99c4d83a 	srl	r2,r19,r7
  810030:	a9e2d83a 	srl	r17,r21,r7
  810034:	ac8c983a 	sll	r6,r21,r18
  810038:	18acb03a 	or	r22,r3,r2
  81003c:	b02ed43a 	srli	r23,r22,16
  810040:	81c4d83a 	srl	r2,r16,r7
  810044:	8809883a 	mov	r4,r17
  810048:	b80b883a 	mov	r5,r23
  81004c:	308cb03a 	or	r6,r6,r2
  810050:	d9c00315 	stw	r7,12(sp)
  810054:	d9800215 	stw	r6,8(sp)
  810058:	b53fffcc 	andi	r20,r22,65535
  81005c:	08113840 	call	811384 <__udivsi3>
  810060:	100b883a 	mov	r5,r2
  810064:	a009883a 	mov	r4,r20
  810068:	1039883a 	mov	fp,r2
  81006c:	0801c5c0 	call	801c5c <__mulsi3>
  810070:	8809883a 	mov	r4,r17
  810074:	b80b883a 	mov	r5,r23
  810078:	102b883a 	mov	r21,r2
  81007c:	081138c0 	call	81138c <__umodsi3>
  810080:	d9000217 	ldw	r4,8(sp)
  810084:	1004943a 	slli	r2,r2,16
  810088:	9ca6983a 	sll	r19,r19,r18
  81008c:	2006d43a 	srli	r3,r4,16
  810090:	84a0983a 	sll	r16,r16,r18
  810094:	dcc00015 	stw	r19,0(sp)
  810098:	10c4b03a 	or	r2,r2,r3
  81009c:	dc000115 	stw	r16,4(sp)
  8100a0:	1540032e 	bgeu	r2,r21,8100b0 <__umoddi3+0x46c>
  8100a4:	1585883a 	add	r2,r2,r22
  8100a8:	e73fffc4 	addi	fp,fp,-1
  8100ac:	15806e2e 	bgeu	r2,r22,810268 <__umoddi3+0x624>
  8100b0:	1563c83a 	sub	r17,r2,r21
  8100b4:	8809883a 	mov	r4,r17
  8100b8:	b80b883a 	mov	r5,r23
  8100bc:	08113840 	call	811384 <__udivsi3>
  8100c0:	100b883a 	mov	r5,r2
  8100c4:	a009883a 	mov	r4,r20
  8100c8:	1021883a 	mov	r16,r2
  8100cc:	0801c5c0 	call	801c5c <__mulsi3>
  8100d0:	b80b883a 	mov	r5,r23
  8100d4:	8809883a 	mov	r4,r17
  8100d8:	1029883a 	mov	r20,r2
  8100dc:	081138c0 	call	81138c <__umodsi3>
  8100e0:	d9400217 	ldw	r5,8(sp)
  8100e4:	1004943a 	slli	r2,r2,16
  8100e8:	28ffffcc 	andi	r3,r5,65535
  8100ec:	10c4b03a 	or	r2,r2,r3
  8100f0:	1500032e 	bgeu	r2,r20,810100 <__umoddi3+0x4bc>
  8100f4:	1585883a 	add	r2,r2,r22
  8100f8:	843fffc4 	addi	r16,r16,-1
  8100fc:	1580562e 	bgeu	r2,r22,810258 <__umoddi3+0x614>
  810100:	d9800017 	ldw	r6,0(sp)
  810104:	e022943a 	slli	r17,fp,16
  810108:	302ed43a 	srli	r23,r6,16
  81010c:	8462b03a 	or	r17,r16,r17
  810110:	34ffffcc 	andi	r19,r6,65535
  810114:	882ad43a 	srli	r21,r17,16
  810118:	8c7fffcc 	andi	r17,r17,65535
  81011c:	8809883a 	mov	r4,r17
  810120:	980b883a 	mov	r5,r19
  810124:	1521c83a 	sub	r16,r2,r20
  810128:	0801c5c0 	call	801c5c <__mulsi3>
  81012c:	8809883a 	mov	r4,r17
  810130:	b80b883a 	mov	r5,r23
  810134:	1029883a 	mov	r20,r2
  810138:	0801c5c0 	call	801c5c <__mulsi3>
  81013c:	980b883a 	mov	r5,r19
  810140:	a809883a 	mov	r4,r21
  810144:	1023883a 	mov	r17,r2
  810148:	0801c5c0 	call	801c5c <__mulsi3>
  81014c:	a809883a 	mov	r4,r21
  810150:	b80b883a 	mov	r5,r23
  810154:	1027883a 	mov	r19,r2
  810158:	0801c5c0 	call	801c5c <__mulsi3>
  81015c:	100b883a 	mov	r5,r2
  810160:	a004d43a 	srli	r2,r20,16
  810164:	8ce3883a 	add	r17,r17,r19
  810168:	1449883a 	add	r4,r2,r17
  81016c:	24c0022e 	bgeu	r4,r19,810178 <__umoddi3+0x534>
  810170:	00800074 	movhi	r2,1
  810174:	288b883a 	add	r5,r5,r2
  810178:	2004d43a 	srli	r2,r4,16
  81017c:	2008943a 	slli	r4,r4,16
  810180:	a0ffffcc 	andi	r3,r20,65535
  810184:	288d883a 	add	r6,r5,r2
  810188:	20c9883a 	add	r4,r4,r3
  81018c:	81800b36 	bltu	r16,r6,8101bc <__umoddi3+0x578>
  810190:	81804026 	beq	r16,r6,810294 <__umoddi3+0x650>
  810194:	818dc83a 	sub	r6,r16,r6
  810198:	00000f06 	br	8101d8 <__umoddi3+0x594>
  81019c:	30c5c83a 	sub	r2,r6,r3
  8101a0:	182d883a 	mov	r22,r3
  8101a4:	8084d83a 	srl	r2,r16,r2
  8101a8:	a8c6983a 	sll	r3,r21,r3
  8101ac:	9da6983a 	sll	r19,r19,r22
  8101b0:	85a0983a 	sll	r16,r16,r22
  8101b4:	18aab03a 	or	r21,r3,r2
  8101b8:	003f1d06 	br	80fe30 <__umoddi3+0x1ec>
  8101bc:	d8c00017 	ldw	r3,0(sp)
  8101c0:	20c5c83a 	sub	r2,r4,r3
  8101c4:	2089803a 	cmpltu	r4,r4,r2
  8101c8:	3587c83a 	sub	r3,r6,r22
  8101cc:	1907c83a 	sub	r3,r3,r4
  8101d0:	80cdc83a 	sub	r6,r16,r3
  8101d4:	1009883a 	mov	r4,r2
  8101d8:	d9400117 	ldw	r5,4(sp)
  8101dc:	2905c83a 	sub	r2,r5,r4
  8101e0:	2887803a 	cmpltu	r3,r5,r2
  8101e4:	30c7c83a 	sub	r3,r6,r3
  8101e8:	d9800317 	ldw	r6,12(sp)
  8101ec:	1484d83a 	srl	r2,r2,r18
  8101f0:	1988983a 	sll	r4,r3,r6
  8101f4:	1c86d83a 	srl	r3,r3,r18
  8101f8:	2088b03a 	or	r4,r4,r2
  8101fc:	2011883a 	mov	r8,r4
  810200:	1813883a 	mov	r9,r3
  810204:	d9000415 	stw	r4,16(sp)
  810208:	d8c00515 	stw	r3,20(sp)
  81020c:	003ed406 	br	80fd60 <__umoddi3+0x11c>
  810210:	01400604 	movi	r5,24
  810214:	2805883a 	mov	r2,r5
  810218:	003ea606 	br	80fcb4 <__umoddi3+0x70>
  81021c:	01400204 	movi	r5,8
  810220:	2805883a 	mov	r2,r5
  810224:	003ea306 	br	80fcb4 <__umoddi3+0x70>
  810228:	01400204 	movi	r5,8
  81022c:	2805883a 	mov	r2,r5
  810230:	003edf06 	br	80fdb0 <__umoddi3+0x16c>
  810234:	01400204 	movi	r5,8
  810238:	2805883a 	mov	r2,r5
  81023c:	003ef206 	br	80fe08 <__umoddi3+0x1c4>
  810240:	01400604 	movi	r5,24
  810244:	2805883a 	mov	r2,r5
  810248:	003eef06 	br	80fe08 <__umoddi3+0x1c4>
  81024c:	01400604 	movi	r5,24
  810250:	2805883a 	mov	r2,r5
  810254:	003ed606 	br	80fdb0 <__umoddi3+0x16c>
  810258:	153fa92e 	bgeu	r2,r20,810100 <__umoddi3+0x4bc>
  81025c:	843fffc4 	addi	r16,r16,-1
  810260:	1585883a 	add	r2,r2,r22
  810264:	003fa606 	br	810100 <__umoddi3+0x4bc>
  810268:	157f912e 	bgeu	r2,r21,8100b0 <__umoddi3+0x46c>
  81026c:	e73fffc4 	addi	fp,fp,-1
  810270:	1585883a 	add	r2,r2,r22
  810274:	003f8e06 	br	8100b0 <__umoddi3+0x46c>
  810278:	157f542e 	bgeu	r2,r21,80ffcc <__umoddi3+0x388>
  81027c:	14c5883a 	add	r2,r2,r19
  810280:	003f5206 	br	80ffcc <__umoddi3+0x388>
  810284:	14c5883a 	add	r2,r2,r19
  810288:	003efc06 	br	80fe7c <__umoddi3+0x238>
  81028c:	14c5883a 	add	r2,r2,r19
  810290:	003ea606 	br	80fd2c <__umoddi3+0xe8>
  810294:	d8800117 	ldw	r2,4(sp)
  810298:	113fc836 	bltu	r2,r4,8101bc <__umoddi3+0x578>
  81029c:	000d883a 	mov	r6,zero
  8102a0:	003fcd06 	br	8101d8 <__umoddi3+0x594>

008102a4 <__nesf2>:
  8102a4:	defff304 	addi	sp,sp,-52
  8102a8:	dc400b15 	stw	r17,44(sp)
  8102ac:	dc400204 	addi	r17,sp,8
  8102b0:	dc000a15 	stw	r16,40(sp)
  8102b4:	d9000015 	stw	r4,0(sp)
  8102b8:	d9400115 	stw	r5,4(sp)
  8102bc:	d809883a 	mov	r4,sp
  8102c0:	880b883a 	mov	r5,r17
  8102c4:	dc000604 	addi	r16,sp,24
  8102c8:	dfc00c15 	stw	ra,48(sp)
  8102cc:	08113940 	call	811394 <__unpack_f>
  8102d0:	d9000104 	addi	r4,sp,4
  8102d4:	800b883a 	mov	r5,r16
  8102d8:	08113940 	call	811394 <__unpack_f>
  8102dc:	d8800217 	ldw	r2,8(sp)
  8102e0:	00c00044 	movi	r3,1
  8102e4:	180d883a 	mov	r6,r3
  8102e8:	1880062e 	bgeu	r3,r2,810304 <__nesf2+0x60>
  8102ec:	d8800617 	ldw	r2,24(sp)
  8102f0:	8809883a 	mov	r4,r17
  8102f4:	800b883a 	mov	r5,r16
  8102f8:	1880022e 	bgeu	r3,r2,810304 <__nesf2+0x60>
  8102fc:	081145c0 	call	81145c <__fpcmp_parts_f>
  810300:	100d883a 	mov	r6,r2
  810304:	3005883a 	mov	r2,r6
  810308:	dfc00c17 	ldw	ra,48(sp)
  81030c:	dc400b17 	ldw	r17,44(sp)
  810310:	dc000a17 	ldw	r16,40(sp)
  810314:	dec00d04 	addi	sp,sp,52
  810318:	f800283a 	ret

0081031c <__gtsf2>:
  81031c:	defff304 	addi	sp,sp,-52
  810320:	dc400b15 	stw	r17,44(sp)
  810324:	dc400204 	addi	r17,sp,8
  810328:	dc000a15 	stw	r16,40(sp)
  81032c:	d9000015 	stw	r4,0(sp)
  810330:	d9400115 	stw	r5,4(sp)
  810334:	d809883a 	mov	r4,sp
  810338:	880b883a 	mov	r5,r17
  81033c:	dc000604 	addi	r16,sp,24
  810340:	dfc00c15 	stw	ra,48(sp)
  810344:	08113940 	call	811394 <__unpack_f>
  810348:	d9000104 	addi	r4,sp,4
  81034c:	800b883a 	mov	r5,r16
  810350:	08113940 	call	811394 <__unpack_f>
  810354:	d8800217 	ldw	r2,8(sp)
  810358:	00c00044 	movi	r3,1
  81035c:	01bfffc4 	movi	r6,-1
  810360:	1880062e 	bgeu	r3,r2,81037c <__gtsf2+0x60>
  810364:	d8800617 	ldw	r2,24(sp)
  810368:	8809883a 	mov	r4,r17
  81036c:	800b883a 	mov	r5,r16
  810370:	1880022e 	bgeu	r3,r2,81037c <__gtsf2+0x60>
  810374:	081145c0 	call	81145c <__fpcmp_parts_f>
  810378:	100d883a 	mov	r6,r2
  81037c:	3005883a 	mov	r2,r6
  810380:	dfc00c17 	ldw	ra,48(sp)
  810384:	dc400b17 	ldw	r17,44(sp)
  810388:	dc000a17 	ldw	r16,40(sp)
  81038c:	dec00d04 	addi	sp,sp,52
  810390:	f800283a 	ret

00810394 <__ltsf2>:
  810394:	defff304 	addi	sp,sp,-52
  810398:	dc400b15 	stw	r17,44(sp)
  81039c:	dc400204 	addi	r17,sp,8
  8103a0:	dc000a15 	stw	r16,40(sp)
  8103a4:	d9000015 	stw	r4,0(sp)
  8103a8:	d9400115 	stw	r5,4(sp)
  8103ac:	d809883a 	mov	r4,sp
  8103b0:	880b883a 	mov	r5,r17
  8103b4:	dc000604 	addi	r16,sp,24
  8103b8:	dfc00c15 	stw	ra,48(sp)
  8103bc:	08113940 	call	811394 <__unpack_f>
  8103c0:	d9000104 	addi	r4,sp,4
  8103c4:	800b883a 	mov	r5,r16
  8103c8:	08113940 	call	811394 <__unpack_f>
  8103cc:	d8800217 	ldw	r2,8(sp)
  8103d0:	00c00044 	movi	r3,1
  8103d4:	180d883a 	mov	r6,r3
  8103d8:	1880062e 	bgeu	r3,r2,8103f4 <__ltsf2+0x60>
  8103dc:	d8800617 	ldw	r2,24(sp)
  8103e0:	8809883a 	mov	r4,r17
  8103e4:	800b883a 	mov	r5,r16
  8103e8:	1880022e 	bgeu	r3,r2,8103f4 <__ltsf2+0x60>
  8103ec:	081145c0 	call	81145c <__fpcmp_parts_f>
  8103f0:	100d883a 	mov	r6,r2
  8103f4:	3005883a 	mov	r2,r6
  8103f8:	dfc00c17 	ldw	ra,48(sp)
  8103fc:	dc400b17 	ldw	r17,44(sp)
  810400:	dc000a17 	ldw	r16,40(sp)
  810404:	dec00d04 	addi	sp,sp,52
  810408:	f800283a 	ret

0081040c <_fpadd_parts>:
  81040c:	defff804 	addi	sp,sp,-32
  810410:	dcc00315 	stw	r19,12(sp)
  810414:	2027883a 	mov	r19,r4
  810418:	21000017 	ldw	r4,0(r4)
  81041c:	00c00044 	movi	r3,1
  810420:	dd400515 	stw	r21,20(sp)
  810424:	dd000415 	stw	r20,16(sp)
  810428:	ddc00715 	stw	r23,28(sp)
  81042c:	dd800615 	stw	r22,24(sp)
  810430:	dc800215 	stw	r18,8(sp)
  810434:	dc400115 	stw	r17,4(sp)
  810438:	dc000015 	stw	r16,0(sp)
  81043c:	282b883a 	mov	r21,r5
  810440:	3029883a 	mov	r20,r6
  810444:	1900632e 	bgeu	r3,r4,8105d4 <_fpadd_parts+0x1c8>
  810448:	28800017 	ldw	r2,0(r5)
  81044c:	1880812e 	bgeu	r3,r2,810654 <_fpadd_parts+0x248>
  810450:	00c00104 	movi	r3,4
  810454:	20c0dc26 	beq	r4,r3,8107c8 <_fpadd_parts+0x3bc>
  810458:	10c07e26 	beq	r2,r3,810654 <_fpadd_parts+0x248>
  81045c:	00c00084 	movi	r3,2
  810460:	10c06726 	beq	r2,r3,810600 <_fpadd_parts+0x1f4>
  810464:	20c07b26 	beq	r4,r3,810654 <_fpadd_parts+0x248>
  810468:	9dc00217 	ldw	r23,8(r19)
  81046c:	28c00217 	ldw	r3,8(r5)
  810470:	9c400317 	ldw	r17,12(r19)
  810474:	2bc00317 	ldw	r15,12(r5)
  810478:	b8cdc83a 	sub	r6,r23,r3
  81047c:	9c800417 	ldw	r18,16(r19)
  810480:	2c000417 	ldw	r16,16(r5)
  810484:	3009883a 	mov	r4,r6
  810488:	30009716 	blt	r6,zero,8106e8 <_fpadd_parts+0x2dc>
  81048c:	00800fc4 	movi	r2,63
  810490:	11806b16 	blt	r2,r6,810640 <_fpadd_parts+0x234>
  810494:	0100a40e 	bge	zero,r4,810728 <_fpadd_parts+0x31c>
  810498:	35bff804 	addi	r22,r6,-32
  81049c:	b000bc16 	blt	r22,zero,810790 <_fpadd_parts+0x384>
  8104a0:	8596d83a 	srl	r11,r16,r22
  8104a4:	0019883a 	mov	r12,zero
  8104a8:	0013883a 	mov	r9,zero
  8104ac:	01000044 	movi	r4,1
  8104b0:	0015883a 	mov	r10,zero
  8104b4:	b000be16 	blt	r22,zero,8107b0 <_fpadd_parts+0x3a4>
  8104b8:	2590983a 	sll	r8,r4,r22
  8104bc:	000f883a 	mov	r7,zero
  8104c0:	00bfffc4 	movi	r2,-1
  8104c4:	3889883a 	add	r4,r7,r2
  8104c8:	408b883a 	add	r5,r8,r2
  8104cc:	21cd803a 	cmpltu	r6,r4,r7
  8104d0:	314b883a 	add	r5,r6,r5
  8104d4:	7904703a 	and	r2,r15,r4
  8104d8:	8146703a 	and	r3,r16,r5
  8104dc:	10c4b03a 	or	r2,r2,r3
  8104e0:	10000226 	beq	r2,zero,8104ec <_fpadd_parts+0xe0>
  8104e4:	02400044 	movi	r9,1
  8104e8:	0015883a 	mov	r10,zero
  8104ec:	5a5eb03a 	or	r15,r11,r9
  8104f0:	62a0b03a 	or	r16,r12,r10
  8104f4:	99400117 	ldw	r5,4(r19)
  8104f8:	a8800117 	ldw	r2,4(r21)
  8104fc:	28806e26 	beq	r5,r2,8106b8 <_fpadd_parts+0x2ac>
  810500:	28006626 	beq	r5,zero,81069c <_fpadd_parts+0x290>
  810504:	7c45c83a 	sub	r2,r15,r17
  810508:	7889803a 	cmpltu	r4,r15,r2
  81050c:	8487c83a 	sub	r3,r16,r18
  810510:	1909c83a 	sub	r4,r3,r4
  810514:	100d883a 	mov	r6,r2
  810518:	200f883a 	mov	r7,r4
  81051c:	38007716 	blt	r7,zero,8106fc <_fpadd_parts+0x2f0>
  810520:	a5c00215 	stw	r23,8(r20)
  810524:	a1c00415 	stw	r7,16(r20)
  810528:	a0000115 	stw	zero,4(r20)
  81052c:	a1800315 	stw	r6,12(r20)
  810530:	a2000317 	ldw	r8,12(r20)
  810534:	a2400417 	ldw	r9,16(r20)
  810538:	00bfffc4 	movi	r2,-1
  81053c:	408b883a 	add	r5,r8,r2
  810540:	2a09803a 	cmpltu	r4,r5,r8
  810544:	488d883a 	add	r6,r9,r2
  810548:	01c40034 	movhi	r7,4096
  81054c:	39ffffc4 	addi	r7,r7,-1
  810550:	218d883a 	add	r6,r4,r6
  810554:	39801736 	bltu	r7,r6,8105b4 <_fpadd_parts+0x1a8>
  810558:	31c06526 	beq	r6,r7,8106f0 <_fpadd_parts+0x2e4>
  81055c:	a3000217 	ldw	r12,8(r20)
  810560:	4209883a 	add	r4,r8,r8
  810564:	00bfffc4 	movi	r2,-1
  810568:	220f803a 	cmpltu	r7,r4,r8
  81056c:	4a4b883a 	add	r5,r9,r9
  810570:	394f883a 	add	r7,r7,r5
  810574:	2095883a 	add	r10,r4,r2
  810578:	3897883a 	add	r11,r7,r2
  81057c:	510d803a 	cmpltu	r6,r10,r4
  810580:	6099883a 	add	r12,r12,r2
  810584:	32d7883a 	add	r11,r6,r11
  810588:	00840034 	movhi	r2,4096
  81058c:	10bfffc4 	addi	r2,r2,-1
  810590:	2011883a 	mov	r8,r4
  810594:	3813883a 	mov	r9,r7
  810598:	a1000315 	stw	r4,12(r20)
  81059c:	a1c00415 	stw	r7,16(r20)
  8105a0:	a3000215 	stw	r12,8(r20)
  8105a4:	12c00336 	bltu	r2,r11,8105b4 <_fpadd_parts+0x1a8>
  8105a8:	58bfed1e 	bne	r11,r2,810560 <_fpadd_parts+0x154>
  8105ac:	00bfff84 	movi	r2,-2
  8105b0:	12bfeb2e 	bgeu	r2,r10,810560 <_fpadd_parts+0x154>
  8105b4:	a2800417 	ldw	r10,16(r20)
  8105b8:	008000c4 	movi	r2,3
  8105bc:	00c80034 	movhi	r3,8192
  8105c0:	18ffffc4 	addi	r3,r3,-1
  8105c4:	a2400317 	ldw	r9,12(r20)
  8105c8:	a0800015 	stw	r2,0(r20)
  8105cc:	1a802336 	bltu	r3,r10,81065c <_fpadd_parts+0x250>
  8105d0:	a027883a 	mov	r19,r20
  8105d4:	9805883a 	mov	r2,r19
  8105d8:	ddc00717 	ldw	r23,28(sp)
  8105dc:	dd800617 	ldw	r22,24(sp)
  8105e0:	dd400517 	ldw	r21,20(sp)
  8105e4:	dd000417 	ldw	r20,16(sp)
  8105e8:	dcc00317 	ldw	r19,12(sp)
  8105ec:	dc800217 	ldw	r18,8(sp)
  8105f0:	dc400117 	ldw	r17,4(sp)
  8105f4:	dc000017 	ldw	r16,0(sp)
  8105f8:	dec00804 	addi	sp,sp,32
  8105fc:	f800283a 	ret
  810600:	20fff41e 	bne	r4,r3,8105d4 <_fpadd_parts+0x1c8>
  810604:	31000015 	stw	r4,0(r6)
  810608:	98800117 	ldw	r2,4(r19)
  81060c:	30800115 	stw	r2,4(r6)
  810610:	98c00217 	ldw	r3,8(r19)
  810614:	30c00215 	stw	r3,8(r6)
  810618:	98800317 	ldw	r2,12(r19)
  81061c:	30800315 	stw	r2,12(r6)
  810620:	98c00417 	ldw	r3,16(r19)
  810624:	30c00415 	stw	r3,16(r6)
  810628:	98800117 	ldw	r2,4(r19)
  81062c:	28c00117 	ldw	r3,4(r5)
  810630:	3027883a 	mov	r19,r6
  810634:	10c4703a 	and	r2,r2,r3
  810638:	30800115 	stw	r2,4(r6)
  81063c:	003fe506 	br	8105d4 <_fpadd_parts+0x1c8>
  810640:	1dc02616 	blt	r3,r23,8106dc <_fpadd_parts+0x2d0>
  810644:	0023883a 	mov	r17,zero
  810648:	182f883a 	mov	r23,r3
  81064c:	0025883a 	mov	r18,zero
  810650:	003fa806 	br	8104f4 <_fpadd_parts+0xe8>
  810654:	a827883a 	mov	r19,r21
  810658:	003fde06 	br	8105d4 <_fpadd_parts+0x1c8>
  81065c:	01800044 	movi	r6,1
  810660:	500497fa 	slli	r2,r10,31
  810664:	4808d07a 	srli	r4,r9,1
  810668:	518ad83a 	srl	r5,r10,r6
  81066c:	a2000217 	ldw	r8,8(r20)
  810670:	1108b03a 	or	r4,r2,r4
  810674:	0007883a 	mov	r3,zero
  810678:	4984703a 	and	r2,r9,r6
  81067c:	208cb03a 	or	r6,r4,r2
  810680:	28ceb03a 	or	r7,r5,r3
  810684:	42000044 	addi	r8,r8,1
  810688:	a027883a 	mov	r19,r20
  81068c:	a1c00415 	stw	r7,16(r20)
  810690:	a2000215 	stw	r8,8(r20)
  810694:	a1800315 	stw	r6,12(r20)
  810698:	003fce06 	br	8105d4 <_fpadd_parts+0x1c8>
  81069c:	8bc5c83a 	sub	r2,r17,r15
  8106a0:	8889803a 	cmpltu	r4,r17,r2
  8106a4:	9407c83a 	sub	r3,r18,r16
  8106a8:	1909c83a 	sub	r4,r3,r4
  8106ac:	100d883a 	mov	r6,r2
  8106b0:	200f883a 	mov	r7,r4
  8106b4:	003f9906 	br	81051c <_fpadd_parts+0x110>
  8106b8:	7c45883a 	add	r2,r15,r17
  8106bc:	13c9803a 	cmpltu	r4,r2,r15
  8106c0:	8487883a 	add	r3,r16,r18
  8106c4:	20c9883a 	add	r4,r4,r3
  8106c8:	a1400115 	stw	r5,4(r20)
  8106cc:	a5c00215 	stw	r23,8(r20)
  8106d0:	a0800315 	stw	r2,12(r20)
  8106d4:	a1000415 	stw	r4,16(r20)
  8106d8:	003fb606 	br	8105b4 <_fpadd_parts+0x1a8>
  8106dc:	001f883a 	mov	r15,zero
  8106e0:	0021883a 	mov	r16,zero
  8106e4:	003f8306 	br	8104f4 <_fpadd_parts+0xe8>
  8106e8:	018dc83a 	sub	r6,zero,r6
  8106ec:	003f6706 	br	81048c <_fpadd_parts+0x80>
  8106f0:	00bfff84 	movi	r2,-2
  8106f4:	117faf36 	bltu	r2,r5,8105b4 <_fpadd_parts+0x1a8>
  8106f8:	003f9806 	br	81055c <_fpadd_parts+0x150>
  8106fc:	0005883a 	mov	r2,zero
  810700:	1189c83a 	sub	r4,r2,r6
  810704:	1105803a 	cmpltu	r2,r2,r4
  810708:	01cbc83a 	sub	r5,zero,r7
  81070c:	2885c83a 	sub	r2,r5,r2
  810710:	01800044 	movi	r6,1
  810714:	a1800115 	stw	r6,4(r20)
  810718:	a5c00215 	stw	r23,8(r20)
  81071c:	a1000315 	stw	r4,12(r20)
  810720:	a0800415 	stw	r2,16(r20)
  810724:	003f8206 	br	810530 <_fpadd_parts+0x124>
  810728:	203f7226 	beq	r4,zero,8104f4 <_fpadd_parts+0xe8>
  81072c:	35bff804 	addi	r22,r6,-32
  810730:	b9af883a 	add	r23,r23,r6
  810734:	b0003116 	blt	r22,zero,8107fc <_fpadd_parts+0x3f0>
  810738:	959ad83a 	srl	r13,r18,r22
  81073c:	001d883a 	mov	r14,zero
  810740:	000f883a 	mov	r7,zero
  810744:	01000044 	movi	r4,1
  810748:	0011883a 	mov	r8,zero
  81074c:	b0002516 	blt	r22,zero,8107e4 <_fpadd_parts+0x3d8>
  810750:	2594983a 	sll	r10,r4,r22
  810754:	0013883a 	mov	r9,zero
  810758:	00bfffc4 	movi	r2,-1
  81075c:	4889883a 	add	r4,r9,r2
  810760:	508b883a 	add	r5,r10,r2
  810764:	224d803a 	cmpltu	r6,r4,r9
  810768:	314b883a 	add	r5,r6,r5
  81076c:	8904703a 	and	r2,r17,r4
  810770:	9146703a 	and	r3,r18,r5
  810774:	10c4b03a 	or	r2,r2,r3
  810778:	10000226 	beq	r2,zero,810784 <_fpadd_parts+0x378>
  81077c:	01c00044 	movi	r7,1
  810780:	0011883a 	mov	r8,zero
  810784:	69e2b03a 	or	r17,r13,r7
  810788:	7224b03a 	or	r18,r14,r8
  81078c:	003f5906 	br	8104f4 <_fpadd_parts+0xe8>
  810790:	8407883a 	add	r3,r16,r16
  810794:	008007c4 	movi	r2,31
  810798:	1185c83a 	sub	r2,r2,r6
  81079c:	1886983a 	sll	r3,r3,r2
  8107a0:	7996d83a 	srl	r11,r15,r6
  8107a4:	8198d83a 	srl	r12,r16,r6
  8107a8:	1ad6b03a 	or	r11,r3,r11
  8107ac:	003f3e06 	br	8104a8 <_fpadd_parts+0x9c>
  8107b0:	2006d07a 	srli	r3,r4,1
  8107b4:	008007c4 	movi	r2,31
  8107b8:	1185c83a 	sub	r2,r2,r6
  8107bc:	1890d83a 	srl	r8,r3,r2
  8107c0:	218e983a 	sll	r7,r4,r6
  8107c4:	003f3e06 	br	8104c0 <_fpadd_parts+0xb4>
  8107c8:	113f821e 	bne	r2,r4,8105d4 <_fpadd_parts+0x1c8>
  8107cc:	28c00117 	ldw	r3,4(r5)
  8107d0:	98800117 	ldw	r2,4(r19)
  8107d4:	10ff7f26 	beq	r2,r3,8105d4 <_fpadd_parts+0x1c8>
  8107d8:	04c02074 	movhi	r19,129
  8107dc:	9cd2b504 	addi	r19,r19,19156
  8107e0:	003f7c06 	br	8105d4 <_fpadd_parts+0x1c8>
  8107e4:	2006d07a 	srli	r3,r4,1
  8107e8:	008007c4 	movi	r2,31
  8107ec:	1185c83a 	sub	r2,r2,r6
  8107f0:	1894d83a 	srl	r10,r3,r2
  8107f4:	2192983a 	sll	r9,r4,r6
  8107f8:	003fd706 	br	810758 <_fpadd_parts+0x34c>
  8107fc:	9487883a 	add	r3,r18,r18
  810800:	008007c4 	movi	r2,31
  810804:	1185c83a 	sub	r2,r2,r6
  810808:	1886983a 	sll	r3,r3,r2
  81080c:	899ad83a 	srl	r13,r17,r6
  810810:	919cd83a 	srl	r14,r18,r6
  810814:	1b5ab03a 	or	r13,r3,r13
  810818:	003fc906 	br	810740 <_fpadd_parts+0x334>

0081081c <__subdf3>:
  81081c:	deffea04 	addi	sp,sp,-88
  810820:	dcc01415 	stw	r19,80(sp)
  810824:	dcc00404 	addi	r19,sp,16
  810828:	2011883a 	mov	r8,r4
  81082c:	2813883a 	mov	r9,r5
  810830:	dc401315 	stw	r17,76(sp)
  810834:	d809883a 	mov	r4,sp
  810838:	980b883a 	mov	r5,r19
  81083c:	dc400904 	addi	r17,sp,36
  810840:	dfc01515 	stw	ra,84(sp)
  810844:	da400115 	stw	r9,4(sp)
  810848:	d9c00315 	stw	r7,12(sp)
  81084c:	da000015 	stw	r8,0(sp)
  810850:	d9800215 	stw	r6,8(sp)
  810854:	08020280 	call	802028 <__unpack_d>
  810858:	d9000204 	addi	r4,sp,8
  81085c:	880b883a 	mov	r5,r17
  810860:	08020280 	call	802028 <__unpack_d>
  810864:	d8800a17 	ldw	r2,40(sp)
  810868:	880b883a 	mov	r5,r17
  81086c:	9809883a 	mov	r4,r19
  810870:	d9800e04 	addi	r6,sp,56
  810874:	1080005c 	xori	r2,r2,1
  810878:	d8800a15 	stw	r2,40(sp)
  81087c:	081040c0 	call	81040c <_fpadd_parts>
  810880:	1009883a 	mov	r4,r2
  810884:	0801d140 	call	801d14 <__pack_d>
  810888:	dfc01517 	ldw	ra,84(sp)
  81088c:	dcc01417 	ldw	r19,80(sp)
  810890:	dc401317 	ldw	r17,76(sp)
  810894:	dec01604 	addi	sp,sp,88
  810898:	f800283a 	ret

0081089c <__adddf3>:
  81089c:	deffea04 	addi	sp,sp,-88
  8108a0:	dcc01415 	stw	r19,80(sp)
  8108a4:	dcc00404 	addi	r19,sp,16
  8108a8:	2011883a 	mov	r8,r4
  8108ac:	2813883a 	mov	r9,r5
  8108b0:	dc401315 	stw	r17,76(sp)
  8108b4:	d809883a 	mov	r4,sp
  8108b8:	980b883a 	mov	r5,r19
  8108bc:	dc400904 	addi	r17,sp,36
  8108c0:	dfc01515 	stw	ra,84(sp)
  8108c4:	da400115 	stw	r9,4(sp)
  8108c8:	d9c00315 	stw	r7,12(sp)
  8108cc:	da000015 	stw	r8,0(sp)
  8108d0:	d9800215 	stw	r6,8(sp)
  8108d4:	08020280 	call	802028 <__unpack_d>
  8108d8:	d9000204 	addi	r4,sp,8
  8108dc:	880b883a 	mov	r5,r17
  8108e0:	08020280 	call	802028 <__unpack_d>
  8108e4:	d9800e04 	addi	r6,sp,56
  8108e8:	9809883a 	mov	r4,r19
  8108ec:	880b883a 	mov	r5,r17
  8108f0:	081040c0 	call	81040c <_fpadd_parts>
  8108f4:	1009883a 	mov	r4,r2
  8108f8:	0801d140 	call	801d14 <__pack_d>
  8108fc:	dfc01517 	ldw	ra,84(sp)
  810900:	dcc01417 	ldw	r19,80(sp)
  810904:	dc401317 	ldw	r17,76(sp)
  810908:	dec01604 	addi	sp,sp,88
  81090c:	f800283a 	ret

00810910 <__muldf3>:
  810910:	deffe004 	addi	sp,sp,-128
  810914:	dc401815 	stw	r17,96(sp)
  810918:	dc400404 	addi	r17,sp,16
  81091c:	2011883a 	mov	r8,r4
  810920:	2813883a 	mov	r9,r5
  810924:	dc001715 	stw	r16,92(sp)
  810928:	d809883a 	mov	r4,sp
  81092c:	880b883a 	mov	r5,r17
  810930:	dc000904 	addi	r16,sp,36
  810934:	dfc01f15 	stw	ra,124(sp)
  810938:	da400115 	stw	r9,4(sp)
  81093c:	d9c00315 	stw	r7,12(sp)
  810940:	da000015 	stw	r8,0(sp)
  810944:	d9800215 	stw	r6,8(sp)
  810948:	ddc01e15 	stw	r23,120(sp)
  81094c:	dd801d15 	stw	r22,116(sp)
  810950:	dd401c15 	stw	r21,112(sp)
  810954:	dd001b15 	stw	r20,108(sp)
  810958:	dcc01a15 	stw	r19,104(sp)
  81095c:	dc801915 	stw	r18,100(sp)
  810960:	08020280 	call	802028 <__unpack_d>
  810964:	d9000204 	addi	r4,sp,8
  810968:	800b883a 	mov	r5,r16
  81096c:	08020280 	call	802028 <__unpack_d>
  810970:	d9000417 	ldw	r4,16(sp)
  810974:	00800044 	movi	r2,1
  810978:	1100102e 	bgeu	r2,r4,8109bc <__muldf3+0xac>
  81097c:	d8c00917 	ldw	r3,36(sp)
  810980:	10c0062e 	bgeu	r2,r3,81099c <__muldf3+0x8c>
  810984:	00800104 	movi	r2,4
  810988:	20800a26 	beq	r4,r2,8109b4 <__muldf3+0xa4>
  81098c:	1880cc26 	beq	r3,r2,810cc0 <__muldf3+0x3b0>
  810990:	00800084 	movi	r2,2
  810994:	20800926 	beq	r4,r2,8109bc <__muldf3+0xac>
  810998:	1880191e 	bne	r3,r2,810a00 <__muldf3+0xf0>
  81099c:	d8c00a17 	ldw	r3,40(sp)
  8109a0:	d8800517 	ldw	r2,20(sp)
  8109a4:	8009883a 	mov	r4,r16
  8109a8:	10c4c03a 	cmpne	r2,r2,r3
  8109ac:	d8800a15 	stw	r2,40(sp)
  8109b0:	00000706 	br	8109d0 <__muldf3+0xc0>
  8109b4:	00800084 	movi	r2,2
  8109b8:	1880c326 	beq	r3,r2,810cc8 <__muldf3+0x3b8>
  8109bc:	d8800517 	ldw	r2,20(sp)
  8109c0:	d8c00a17 	ldw	r3,40(sp)
  8109c4:	8809883a 	mov	r4,r17
  8109c8:	10c4c03a 	cmpne	r2,r2,r3
  8109cc:	d8800515 	stw	r2,20(sp)
  8109d0:	0801d140 	call	801d14 <__pack_d>
  8109d4:	dfc01f17 	ldw	ra,124(sp)
  8109d8:	ddc01e17 	ldw	r23,120(sp)
  8109dc:	dd801d17 	ldw	r22,116(sp)
  8109e0:	dd401c17 	ldw	r21,112(sp)
  8109e4:	dd001b17 	ldw	r20,108(sp)
  8109e8:	dcc01a17 	ldw	r19,104(sp)
  8109ec:	dc801917 	ldw	r18,100(sp)
  8109f0:	dc401817 	ldw	r17,96(sp)
  8109f4:	dc001717 	ldw	r16,92(sp)
  8109f8:	dec02004 	addi	sp,sp,128
  8109fc:	f800283a 	ret
  810a00:	dd800717 	ldw	r22,28(sp)
  810a04:	dc800c17 	ldw	r18,48(sp)
  810a08:	002b883a 	mov	r21,zero
  810a0c:	0023883a 	mov	r17,zero
  810a10:	a80b883a 	mov	r5,r21
  810a14:	b00d883a 	mov	r6,r22
  810a18:	880f883a 	mov	r7,r17
  810a1c:	ddc00817 	ldw	r23,32(sp)
  810a20:	dcc00d17 	ldw	r19,52(sp)
  810a24:	9009883a 	mov	r4,r18
  810a28:	080f4100 	call	80f410 <__muldi3>
  810a2c:	001b883a 	mov	r13,zero
  810a30:	680f883a 	mov	r7,r13
  810a34:	b009883a 	mov	r4,r22
  810a38:	000b883a 	mov	r5,zero
  810a3c:	980d883a 	mov	r6,r19
  810a40:	b82d883a 	mov	r22,r23
  810a44:	002f883a 	mov	r23,zero
  810a48:	db401615 	stw	r13,88(sp)
  810a4c:	d8801315 	stw	r2,76(sp)
  810a50:	d8c01415 	stw	r3,80(sp)
  810a54:	dcc01515 	stw	r19,84(sp)
  810a58:	080f4100 	call	80f410 <__muldi3>
  810a5c:	b00d883a 	mov	r6,r22
  810a60:	000b883a 	mov	r5,zero
  810a64:	9009883a 	mov	r4,r18
  810a68:	b80f883a 	mov	r7,r23
  810a6c:	1021883a 	mov	r16,r2
  810a70:	1823883a 	mov	r17,r3
  810a74:	080f4100 	call	80f410 <__muldi3>
  810a78:	8085883a 	add	r2,r16,r2
  810a7c:	140d803a 	cmpltu	r6,r2,r16
  810a80:	88c7883a 	add	r3,r17,r3
  810a84:	30cd883a 	add	r6,r6,r3
  810a88:	1029883a 	mov	r20,r2
  810a8c:	302b883a 	mov	r21,r6
  810a90:	da801317 	ldw	r10,76(sp)
  810a94:	dac01417 	ldw	r11,80(sp)
  810a98:	db001517 	ldw	r12,84(sp)
  810a9c:	db401617 	ldw	r13,88(sp)
  810aa0:	3440612e 	bgeu	r6,r17,810c28 <__muldf3+0x318>
  810aa4:	0009883a 	mov	r4,zero
  810aa8:	5105883a 	add	r2,r10,r4
  810aac:	128d803a 	cmpltu	r6,r2,r10
  810ab0:	5d07883a 	add	r3,r11,r20
  810ab4:	30cd883a 	add	r6,r6,r3
  810ab8:	0021883a 	mov	r16,zero
  810abc:	04400044 	movi	r17,1
  810ac0:	1025883a 	mov	r18,r2
  810ac4:	3027883a 	mov	r19,r6
  810ac8:	32c06236 	bltu	r6,r11,810c54 <__muldf3+0x344>
  810acc:	59807a26 	beq	r11,r6,810cb8 <__muldf3+0x3a8>
  810ad0:	680b883a 	mov	r5,r13
  810ad4:	b80f883a 	mov	r7,r23
  810ad8:	6009883a 	mov	r4,r12
  810adc:	b00d883a 	mov	r6,r22
  810ae0:	080f4100 	call	80f410 <__muldi3>
  810ae4:	1009883a 	mov	r4,r2
  810ae8:	000f883a 	mov	r7,zero
  810aec:	1545883a 	add	r2,r2,r21
  810af0:	1111803a 	cmpltu	r8,r2,r4
  810af4:	19c7883a 	add	r3,r3,r7
  810af8:	40c7883a 	add	r3,r8,r3
  810afc:	88cb883a 	add	r5,r17,r3
  810b00:	d8c00617 	ldw	r3,24(sp)
  810b04:	8089883a 	add	r4,r16,r2
  810b08:	d8800b17 	ldw	r2,44(sp)
  810b0c:	18c00104 	addi	r3,r3,4
  810b10:	240d803a 	cmpltu	r6,r4,r16
  810b14:	10c7883a 	add	r3,r2,r3
  810b18:	2013883a 	mov	r9,r4
  810b1c:	d8800a17 	ldw	r2,40(sp)
  810b20:	d9000517 	ldw	r4,20(sp)
  810b24:	314d883a 	add	r6,r6,r5
  810b28:	3015883a 	mov	r10,r6
  810b2c:	2088c03a 	cmpne	r4,r4,r2
  810b30:	00880034 	movhi	r2,8192
  810b34:	10bfffc4 	addi	r2,r2,-1
  810b38:	d9000f15 	stw	r4,60(sp)
  810b3c:	d8c01015 	stw	r3,64(sp)
  810b40:	1180162e 	bgeu	r2,r6,810b9c <__muldf3+0x28c>
  810b44:	1811883a 	mov	r8,r3
  810b48:	101f883a 	mov	r15,r2
  810b4c:	980497fa 	slli	r2,r19,31
  810b50:	9016d07a 	srli	r11,r18,1
  810b54:	500697fa 	slli	r3,r10,31
  810b58:	480cd07a 	srli	r6,r9,1
  810b5c:	500ed07a 	srli	r7,r10,1
  810b60:	12d6b03a 	or	r11,r2,r11
  810b64:	00800044 	movi	r2,1
  810b68:	198cb03a 	or	r6,r3,r6
  810b6c:	4888703a 	and	r4,r9,r2
  810b70:	9818d07a 	srli	r12,r19,1
  810b74:	001b883a 	mov	r13,zero
  810b78:	03a00034 	movhi	r14,32768
  810b7c:	3013883a 	mov	r9,r6
  810b80:	3815883a 	mov	r10,r7
  810b84:	4091883a 	add	r8,r8,r2
  810b88:	20000226 	beq	r4,zero,810b94 <__muldf3+0x284>
  810b8c:	5b64b03a 	or	r18,r11,r13
  810b90:	63a6b03a 	or	r19,r12,r14
  810b94:	7abfed36 	bltu	r15,r10,810b4c <__muldf3+0x23c>
  810b98:	da001015 	stw	r8,64(sp)
  810b9c:	00840034 	movhi	r2,4096
  810ba0:	10bfffc4 	addi	r2,r2,-1
  810ba4:	12801436 	bltu	r2,r10,810bf8 <__muldf3+0x2e8>
  810ba8:	da001017 	ldw	r8,64(sp)
  810bac:	101f883a 	mov	r15,r2
  810bb0:	4a45883a 	add	r2,r9,r9
  810bb4:	124d803a 	cmpltu	r6,r2,r9
  810bb8:	5287883a 	add	r3,r10,r10
  810bbc:	9497883a 	add	r11,r18,r18
  810bc0:	5c8f803a 	cmpltu	r7,r11,r18
  810bc4:	9cd9883a 	add	r12,r19,r19
  810bc8:	01000044 	movi	r4,1
  810bcc:	30cd883a 	add	r6,r6,r3
  810bd0:	3b0f883a 	add	r7,r7,r12
  810bd4:	423fffc4 	addi	r8,r8,-1
  810bd8:	1013883a 	mov	r9,r2
  810bdc:	3015883a 	mov	r10,r6
  810be0:	111ab03a 	or	r13,r2,r4
  810be4:	98003016 	blt	r19,zero,810ca8 <__muldf3+0x398>
  810be8:	5825883a 	mov	r18,r11
  810bec:	3827883a 	mov	r19,r7
  810bf0:	7abfef2e 	bgeu	r15,r10,810bb0 <__muldf3+0x2a0>
  810bf4:	da001015 	stw	r8,64(sp)
  810bf8:	00803fc4 	movi	r2,255
  810bfc:	488e703a 	and	r7,r9,r2
  810c00:	00802004 	movi	r2,128
  810c04:	0007883a 	mov	r3,zero
  810c08:	0011883a 	mov	r8,zero
  810c0c:	38801826 	beq	r7,r2,810c70 <__muldf3+0x360>
  810c10:	008000c4 	movi	r2,3
  810c14:	d9000e04 	addi	r4,sp,56
  810c18:	da801215 	stw	r10,72(sp)
  810c1c:	d8800e15 	stw	r2,56(sp)
  810c20:	da401115 	stw	r9,68(sp)
  810c24:	003f6a06 	br	8109d0 <__muldf3+0xc0>
  810c28:	89802126 	beq	r17,r6,810cb0 <__muldf3+0x3a0>
  810c2c:	0009883a 	mov	r4,zero
  810c30:	5105883a 	add	r2,r10,r4
  810c34:	128d803a 	cmpltu	r6,r2,r10
  810c38:	5d07883a 	add	r3,r11,r20
  810c3c:	30cd883a 	add	r6,r6,r3
  810c40:	0021883a 	mov	r16,zero
  810c44:	0023883a 	mov	r17,zero
  810c48:	1025883a 	mov	r18,r2
  810c4c:	3027883a 	mov	r19,r6
  810c50:	32ff9e2e 	bgeu	r6,r11,810acc <__muldf3+0x1bc>
  810c54:	00800044 	movi	r2,1
  810c58:	8089883a 	add	r4,r16,r2
  810c5c:	240d803a 	cmpltu	r6,r4,r16
  810c60:	344d883a 	add	r6,r6,r17
  810c64:	2021883a 	mov	r16,r4
  810c68:	3023883a 	mov	r17,r6
  810c6c:	003f9806 	br	810ad0 <__muldf3+0x1c0>
  810c70:	403fe71e 	bne	r8,zero,810c10 <__muldf3+0x300>
  810c74:	01004004 	movi	r4,256
  810c78:	4904703a 	and	r2,r9,r4
  810c7c:	10c4b03a 	or	r2,r2,r3
  810c80:	103fe31e 	bne	r2,zero,810c10 <__muldf3+0x300>
  810c84:	94c4b03a 	or	r2,r18,r19
  810c88:	103fe126 	beq	r2,zero,810c10 <__muldf3+0x300>
  810c8c:	49c5883a 	add	r2,r9,r7
  810c90:	1251803a 	cmpltu	r8,r2,r9
  810c94:	4291883a 	add	r8,r8,r10
  810c98:	013fc004 	movi	r4,-256
  810c9c:	1112703a 	and	r9,r2,r4
  810ca0:	4015883a 	mov	r10,r8
  810ca4:	003fda06 	br	810c10 <__muldf3+0x300>
  810ca8:	6813883a 	mov	r9,r13
  810cac:	003fce06 	br	810be8 <__muldf3+0x2d8>
  810cb0:	143f7c36 	bltu	r2,r16,810aa4 <__muldf3+0x194>
  810cb4:	003fdd06 	br	810c2c <__muldf3+0x31c>
  810cb8:	12bf852e 	bgeu	r2,r10,810ad0 <__muldf3+0x1c0>
  810cbc:	003fe506 	br	810c54 <__muldf3+0x344>
  810cc0:	00800084 	movi	r2,2
  810cc4:	20bf351e 	bne	r4,r2,81099c <__muldf3+0x8c>
  810cc8:	01002074 	movhi	r4,129
  810ccc:	2112b504 	addi	r4,r4,19156
  810cd0:	003f3f06 	br	8109d0 <__muldf3+0xc0>

00810cd4 <__eqdf2>:
  810cd4:	deffef04 	addi	sp,sp,-68
  810cd8:	dc400f15 	stw	r17,60(sp)
  810cdc:	dc400404 	addi	r17,sp,16
  810ce0:	2005883a 	mov	r2,r4
  810ce4:	2807883a 	mov	r3,r5
  810ce8:	dc000e15 	stw	r16,56(sp)
  810cec:	d809883a 	mov	r4,sp
  810cf0:	880b883a 	mov	r5,r17
  810cf4:	dc000904 	addi	r16,sp,36
  810cf8:	d8c00115 	stw	r3,4(sp)
  810cfc:	d8800015 	stw	r2,0(sp)
  810d00:	d9800215 	stw	r6,8(sp)
  810d04:	dfc01015 	stw	ra,64(sp)
  810d08:	d9c00315 	stw	r7,12(sp)
  810d0c:	08020280 	call	802028 <__unpack_d>
  810d10:	d9000204 	addi	r4,sp,8
  810d14:	800b883a 	mov	r5,r16
  810d18:	08020280 	call	802028 <__unpack_d>
  810d1c:	d8800417 	ldw	r2,16(sp)
  810d20:	00c00044 	movi	r3,1
  810d24:	180d883a 	mov	r6,r3
  810d28:	1880062e 	bgeu	r3,r2,810d44 <__eqdf2+0x70>
  810d2c:	d8800917 	ldw	r2,36(sp)
  810d30:	8809883a 	mov	r4,r17
  810d34:	800b883a 	mov	r5,r16
  810d38:	1880022e 	bgeu	r3,r2,810d44 <__eqdf2+0x70>
  810d3c:	08115300 	call	811530 <__fpcmp_parts_d>
  810d40:	100d883a 	mov	r6,r2
  810d44:	3005883a 	mov	r2,r6
  810d48:	dfc01017 	ldw	ra,64(sp)
  810d4c:	dc400f17 	ldw	r17,60(sp)
  810d50:	dc000e17 	ldw	r16,56(sp)
  810d54:	dec01104 	addi	sp,sp,68
  810d58:	f800283a 	ret

00810d5c <__nedf2>:
  810d5c:	deffef04 	addi	sp,sp,-68
  810d60:	dc400f15 	stw	r17,60(sp)
  810d64:	dc400404 	addi	r17,sp,16
  810d68:	2005883a 	mov	r2,r4
  810d6c:	2807883a 	mov	r3,r5
  810d70:	dc000e15 	stw	r16,56(sp)
  810d74:	d809883a 	mov	r4,sp
  810d78:	880b883a 	mov	r5,r17
  810d7c:	dc000904 	addi	r16,sp,36
  810d80:	d8c00115 	stw	r3,4(sp)
  810d84:	d8800015 	stw	r2,0(sp)
  810d88:	d9800215 	stw	r6,8(sp)
  810d8c:	dfc01015 	stw	ra,64(sp)
  810d90:	d9c00315 	stw	r7,12(sp)
  810d94:	08020280 	call	802028 <__unpack_d>
  810d98:	d9000204 	addi	r4,sp,8
  810d9c:	800b883a 	mov	r5,r16
  810da0:	08020280 	call	802028 <__unpack_d>
  810da4:	d8800417 	ldw	r2,16(sp)
  810da8:	00c00044 	movi	r3,1
  810dac:	180d883a 	mov	r6,r3
  810db0:	1880062e 	bgeu	r3,r2,810dcc <__nedf2+0x70>
  810db4:	d8800917 	ldw	r2,36(sp)
  810db8:	8809883a 	mov	r4,r17
  810dbc:	800b883a 	mov	r5,r16
  810dc0:	1880022e 	bgeu	r3,r2,810dcc <__nedf2+0x70>
  810dc4:	08115300 	call	811530 <__fpcmp_parts_d>
  810dc8:	100d883a 	mov	r6,r2
  810dcc:	3005883a 	mov	r2,r6
  810dd0:	dfc01017 	ldw	ra,64(sp)
  810dd4:	dc400f17 	ldw	r17,60(sp)
  810dd8:	dc000e17 	ldw	r16,56(sp)
  810ddc:	dec01104 	addi	sp,sp,68
  810de0:	f800283a 	ret

00810de4 <__gtdf2>:
  810de4:	deffef04 	addi	sp,sp,-68
  810de8:	dc400f15 	stw	r17,60(sp)
  810dec:	dc400404 	addi	r17,sp,16
  810df0:	2005883a 	mov	r2,r4
  810df4:	2807883a 	mov	r3,r5
  810df8:	dc000e15 	stw	r16,56(sp)
  810dfc:	d809883a 	mov	r4,sp
  810e00:	880b883a 	mov	r5,r17
  810e04:	dc000904 	addi	r16,sp,36
  810e08:	d8c00115 	stw	r3,4(sp)
  810e0c:	d8800015 	stw	r2,0(sp)
  810e10:	d9800215 	stw	r6,8(sp)
  810e14:	dfc01015 	stw	ra,64(sp)
  810e18:	d9c00315 	stw	r7,12(sp)
  810e1c:	08020280 	call	802028 <__unpack_d>
  810e20:	d9000204 	addi	r4,sp,8
  810e24:	800b883a 	mov	r5,r16
  810e28:	08020280 	call	802028 <__unpack_d>
  810e2c:	d8800417 	ldw	r2,16(sp)
  810e30:	00c00044 	movi	r3,1
  810e34:	01bfffc4 	movi	r6,-1
  810e38:	1880062e 	bgeu	r3,r2,810e54 <__gtdf2+0x70>
  810e3c:	d8800917 	ldw	r2,36(sp)
  810e40:	8809883a 	mov	r4,r17
  810e44:	800b883a 	mov	r5,r16
  810e48:	1880022e 	bgeu	r3,r2,810e54 <__gtdf2+0x70>
  810e4c:	08115300 	call	811530 <__fpcmp_parts_d>
  810e50:	100d883a 	mov	r6,r2
  810e54:	3005883a 	mov	r2,r6
  810e58:	dfc01017 	ldw	ra,64(sp)
  810e5c:	dc400f17 	ldw	r17,60(sp)
  810e60:	dc000e17 	ldw	r16,56(sp)
  810e64:	dec01104 	addi	sp,sp,68
  810e68:	f800283a 	ret

00810e6c <__gedf2>:
  810e6c:	deffef04 	addi	sp,sp,-68
  810e70:	dc400f15 	stw	r17,60(sp)
  810e74:	dc400404 	addi	r17,sp,16
  810e78:	2005883a 	mov	r2,r4
  810e7c:	2807883a 	mov	r3,r5
  810e80:	dc000e15 	stw	r16,56(sp)
  810e84:	d809883a 	mov	r4,sp
  810e88:	880b883a 	mov	r5,r17
  810e8c:	dc000904 	addi	r16,sp,36
  810e90:	d8c00115 	stw	r3,4(sp)
  810e94:	d8800015 	stw	r2,0(sp)
  810e98:	d9800215 	stw	r6,8(sp)
  810e9c:	dfc01015 	stw	ra,64(sp)
  810ea0:	d9c00315 	stw	r7,12(sp)
  810ea4:	08020280 	call	802028 <__unpack_d>
  810ea8:	d9000204 	addi	r4,sp,8
  810eac:	800b883a 	mov	r5,r16
  810eb0:	08020280 	call	802028 <__unpack_d>
  810eb4:	d8800417 	ldw	r2,16(sp)
  810eb8:	00c00044 	movi	r3,1
  810ebc:	01bfffc4 	movi	r6,-1
  810ec0:	1880062e 	bgeu	r3,r2,810edc <__gedf2+0x70>
  810ec4:	d8800917 	ldw	r2,36(sp)
  810ec8:	8809883a 	mov	r4,r17
  810ecc:	800b883a 	mov	r5,r16
  810ed0:	1880022e 	bgeu	r3,r2,810edc <__gedf2+0x70>
  810ed4:	08115300 	call	811530 <__fpcmp_parts_d>
  810ed8:	100d883a 	mov	r6,r2
  810edc:	3005883a 	mov	r2,r6
  810ee0:	dfc01017 	ldw	ra,64(sp)
  810ee4:	dc400f17 	ldw	r17,60(sp)
  810ee8:	dc000e17 	ldw	r16,56(sp)
  810eec:	dec01104 	addi	sp,sp,68
  810ef0:	f800283a 	ret

00810ef4 <__ltdf2>:
  810ef4:	deffef04 	addi	sp,sp,-68
  810ef8:	dc400f15 	stw	r17,60(sp)
  810efc:	dc400404 	addi	r17,sp,16
  810f00:	2005883a 	mov	r2,r4
  810f04:	2807883a 	mov	r3,r5
  810f08:	dc000e15 	stw	r16,56(sp)
  810f0c:	d809883a 	mov	r4,sp
  810f10:	880b883a 	mov	r5,r17
  810f14:	dc000904 	addi	r16,sp,36
  810f18:	d8c00115 	stw	r3,4(sp)
  810f1c:	d8800015 	stw	r2,0(sp)
  810f20:	d9800215 	stw	r6,8(sp)
  810f24:	dfc01015 	stw	ra,64(sp)
  810f28:	d9c00315 	stw	r7,12(sp)
  810f2c:	08020280 	call	802028 <__unpack_d>
  810f30:	d9000204 	addi	r4,sp,8
  810f34:	800b883a 	mov	r5,r16
  810f38:	08020280 	call	802028 <__unpack_d>
  810f3c:	d8800417 	ldw	r2,16(sp)
  810f40:	00c00044 	movi	r3,1
  810f44:	180d883a 	mov	r6,r3
  810f48:	1880062e 	bgeu	r3,r2,810f64 <__ltdf2+0x70>
  810f4c:	d8800917 	ldw	r2,36(sp)
  810f50:	8809883a 	mov	r4,r17
  810f54:	800b883a 	mov	r5,r16
  810f58:	1880022e 	bgeu	r3,r2,810f64 <__ltdf2+0x70>
  810f5c:	08115300 	call	811530 <__fpcmp_parts_d>
  810f60:	100d883a 	mov	r6,r2
  810f64:	3005883a 	mov	r2,r6
  810f68:	dfc01017 	ldw	ra,64(sp)
  810f6c:	dc400f17 	ldw	r17,60(sp)
  810f70:	dc000e17 	ldw	r16,56(sp)
  810f74:	dec01104 	addi	sp,sp,68
  810f78:	f800283a 	ret

00810f7c <__ledf2>:
  810f7c:	deffef04 	addi	sp,sp,-68
  810f80:	dc400f15 	stw	r17,60(sp)
  810f84:	dc400404 	addi	r17,sp,16
  810f88:	2005883a 	mov	r2,r4
  810f8c:	2807883a 	mov	r3,r5
  810f90:	dc000e15 	stw	r16,56(sp)
  810f94:	d809883a 	mov	r4,sp
  810f98:	880b883a 	mov	r5,r17
  810f9c:	dc000904 	addi	r16,sp,36
  810fa0:	d8c00115 	stw	r3,4(sp)
  810fa4:	d8800015 	stw	r2,0(sp)
  810fa8:	d9800215 	stw	r6,8(sp)
  810fac:	dfc01015 	stw	ra,64(sp)
  810fb0:	d9c00315 	stw	r7,12(sp)
  810fb4:	08020280 	call	802028 <__unpack_d>
  810fb8:	d9000204 	addi	r4,sp,8
  810fbc:	800b883a 	mov	r5,r16
  810fc0:	08020280 	call	802028 <__unpack_d>
  810fc4:	d8800417 	ldw	r2,16(sp)
  810fc8:	00c00044 	movi	r3,1
  810fcc:	180d883a 	mov	r6,r3
  810fd0:	1880062e 	bgeu	r3,r2,810fec <__ledf2+0x70>
  810fd4:	d8800917 	ldw	r2,36(sp)
  810fd8:	8809883a 	mov	r4,r17
  810fdc:	800b883a 	mov	r5,r16
  810fe0:	1880022e 	bgeu	r3,r2,810fec <__ledf2+0x70>
  810fe4:	08115300 	call	811530 <__fpcmp_parts_d>
  810fe8:	100d883a 	mov	r6,r2
  810fec:	3005883a 	mov	r2,r6
  810ff0:	dfc01017 	ldw	ra,64(sp)
  810ff4:	dc400f17 	ldw	r17,60(sp)
  810ff8:	dc000e17 	ldw	r16,56(sp)
  810ffc:	dec01104 	addi	sp,sp,68
  811000:	f800283a 	ret

00811004 <__floatsidf>:
  811004:	2006d7fa 	srli	r3,r4,31
  811008:	defff604 	addi	sp,sp,-40
  81100c:	008000c4 	movi	r2,3
  811010:	dfc00915 	stw	ra,36(sp)
  811014:	dcc00815 	stw	r19,32(sp)
  811018:	dc800715 	stw	r18,28(sp)
  81101c:	dc400615 	stw	r17,24(sp)
  811020:	dc000515 	stw	r16,20(sp)
  811024:	d8800015 	stw	r2,0(sp)
  811028:	d8c00115 	stw	r3,4(sp)
  81102c:	20000f1e 	bne	r4,zero,81106c <__floatsidf+0x68>
  811030:	00800084 	movi	r2,2
  811034:	d8800015 	stw	r2,0(sp)
  811038:	d809883a 	mov	r4,sp
  81103c:	0801d140 	call	801d14 <__pack_d>
  811040:	1009883a 	mov	r4,r2
  811044:	180b883a 	mov	r5,r3
  811048:	2005883a 	mov	r2,r4
  81104c:	2807883a 	mov	r3,r5
  811050:	dfc00917 	ldw	ra,36(sp)
  811054:	dcc00817 	ldw	r19,32(sp)
  811058:	dc800717 	ldw	r18,28(sp)
  81105c:	dc400617 	ldw	r17,24(sp)
  811060:	dc000517 	ldw	r16,20(sp)
  811064:	dec00a04 	addi	sp,sp,40
  811068:	f800283a 	ret
  81106c:	00800f04 	movi	r2,60
  811070:	1807003a 	cmpeq	r3,r3,zero
  811074:	d8800215 	stw	r2,8(sp)
  811078:	18001126 	beq	r3,zero,8110c0 <__floatsidf+0xbc>
  81107c:	0027883a 	mov	r19,zero
  811080:	2025883a 	mov	r18,r4
  811084:	d9000315 	stw	r4,12(sp)
  811088:	dcc00415 	stw	r19,16(sp)
  81108c:	0801c940 	call	801c94 <__clzsi2>
  811090:	11000744 	addi	r4,r2,29
  811094:	013fe80e 	bge	zero,r4,811038 <__floatsidf+0x34>
  811098:	10bfff44 	addi	r2,r2,-3
  81109c:	10000c16 	blt	r2,zero,8110d0 <__floatsidf+0xcc>
  8110a0:	90a2983a 	sll	r17,r18,r2
  8110a4:	0021883a 	mov	r16,zero
  8110a8:	d8800217 	ldw	r2,8(sp)
  8110ac:	dc400415 	stw	r17,16(sp)
  8110b0:	dc000315 	stw	r16,12(sp)
  8110b4:	1105c83a 	sub	r2,r2,r4
  8110b8:	d8800215 	stw	r2,8(sp)
  8110bc:	003fde06 	br	811038 <__floatsidf+0x34>
  8110c0:	00a00034 	movhi	r2,32768
  8110c4:	20800a26 	beq	r4,r2,8110f0 <__floatsidf+0xec>
  8110c8:	0109c83a 	sub	r4,zero,r4
  8110cc:	003feb06 	br	81107c <__floatsidf+0x78>
  8110d0:	9006d07a 	srli	r3,r18,1
  8110d4:	008007c4 	movi	r2,31
  8110d8:	1105c83a 	sub	r2,r2,r4
  8110dc:	1886d83a 	srl	r3,r3,r2
  8110e0:	9922983a 	sll	r17,r19,r4
  8110e4:	9120983a 	sll	r16,r18,r4
  8110e8:	1c62b03a 	or	r17,r3,r17
  8110ec:	003fee06 	br	8110a8 <__floatsidf+0xa4>
  8110f0:	0009883a 	mov	r4,zero
  8110f4:	01707834 	movhi	r5,49632
  8110f8:	003fd306 	br	811048 <__floatsidf+0x44>

008110fc <__fixdfsi>:
  8110fc:	defff804 	addi	sp,sp,-32
  811100:	2005883a 	mov	r2,r4
  811104:	2807883a 	mov	r3,r5
  811108:	d809883a 	mov	r4,sp
  81110c:	d9400204 	addi	r5,sp,8
  811110:	d8c00115 	stw	r3,4(sp)
  811114:	d8800015 	stw	r2,0(sp)
  811118:	dfc00715 	stw	ra,28(sp)
  81111c:	08020280 	call	802028 <__unpack_d>
  811120:	d8c00217 	ldw	r3,8(sp)
  811124:	00800084 	movi	r2,2
  811128:	1880051e 	bne	r3,r2,811140 <__fixdfsi+0x44>
  81112c:	0007883a 	mov	r3,zero
  811130:	1805883a 	mov	r2,r3
  811134:	dfc00717 	ldw	ra,28(sp)
  811138:	dec00804 	addi	sp,sp,32
  81113c:	f800283a 	ret
  811140:	00800044 	movi	r2,1
  811144:	10fff92e 	bgeu	r2,r3,81112c <__fixdfsi+0x30>
  811148:	00800104 	movi	r2,4
  81114c:	18800426 	beq	r3,r2,811160 <__fixdfsi+0x64>
  811150:	d8c00417 	ldw	r3,16(sp)
  811154:	183ff516 	blt	r3,zero,81112c <__fixdfsi+0x30>
  811158:	00800784 	movi	r2,30
  81115c:	10c0080e 	bge	r2,r3,811180 <__fixdfsi+0x84>
  811160:	d8800317 	ldw	r2,12(sp)
  811164:	1000121e 	bne	r2,zero,8111b0 <__fixdfsi+0xb4>
  811168:	00e00034 	movhi	r3,32768
  81116c:	18ffffc4 	addi	r3,r3,-1
  811170:	1805883a 	mov	r2,r3
  811174:	dfc00717 	ldw	ra,28(sp)
  811178:	dec00804 	addi	sp,sp,32
  81117c:	f800283a 	ret
  811180:	00800f04 	movi	r2,60
  811184:	10d1c83a 	sub	r8,r2,r3
  811188:	40bff804 	addi	r2,r8,-32
  81118c:	d9800517 	ldw	r6,20(sp)
  811190:	d9c00617 	ldw	r7,24(sp)
  811194:	10000816 	blt	r2,zero,8111b8 <__fixdfsi+0xbc>
  811198:	3888d83a 	srl	r4,r7,r2
  81119c:	d8800317 	ldw	r2,12(sp)
  8111a0:	2007883a 	mov	r3,r4
  8111a4:	103fe226 	beq	r2,zero,811130 <__fixdfsi+0x34>
  8111a8:	0107c83a 	sub	r3,zero,r4
  8111ac:	003fe006 	br	811130 <__fixdfsi+0x34>
  8111b0:	00e00034 	movhi	r3,32768
  8111b4:	003fde06 	br	811130 <__fixdfsi+0x34>
  8111b8:	39c7883a 	add	r3,r7,r7
  8111bc:	008007c4 	movi	r2,31
  8111c0:	1205c83a 	sub	r2,r2,r8
  8111c4:	1886983a 	sll	r3,r3,r2
  8111c8:	3208d83a 	srl	r4,r6,r8
  8111cc:	1908b03a 	or	r4,r3,r4
  8111d0:	003ff206 	br	81119c <__fixdfsi+0xa0>

008111d4 <__truncdfsf2>:
  8111d4:	defff804 	addi	sp,sp,-32
  8111d8:	2005883a 	mov	r2,r4
  8111dc:	2807883a 	mov	r3,r5
  8111e0:	d809883a 	mov	r4,sp
  8111e4:	d9400204 	addi	r5,sp,8
  8111e8:	d8c00115 	stw	r3,4(sp)
  8111ec:	d8800015 	stw	r2,0(sp)
  8111f0:	dfc00715 	stw	ra,28(sp)
  8111f4:	08020280 	call	802028 <__unpack_d>
  8111f8:	d9c00517 	ldw	r7,20(sp)
  8111fc:	da000617 	ldw	r8,24(sp)
  811200:	02d00034 	movhi	r11,16384
  811204:	5affffc4 	addi	r11,r11,-1
  811208:	3812d7ba 	srli	r9,r7,30
  81120c:	401a90ba 	slli	r13,r8,2
  811210:	3ac4703a 	and	r2,r7,r11
  811214:	0007883a 	mov	r3,zero
  811218:	6a52b03a 	or	r9,r13,r9
  81121c:	10c4b03a 	or	r2,r2,r3
  811220:	d9000217 	ldw	r4,8(sp)
  811224:	d9400317 	ldw	r5,12(sp)
  811228:	d9800417 	ldw	r6,16(sp)
  81122c:	480f883a 	mov	r7,r9
  811230:	10000126 	beq	r2,zero,811238 <__truncdfsf2+0x64>
  811234:	49c00054 	ori	r7,r9,1
  811238:	08115040 	call	811504 <__make_fp>
  81123c:	dfc00717 	ldw	ra,28(sp)
  811240:	dec00804 	addi	sp,sp,32
  811244:	f800283a 	ret

00811248 <udivmodsi4>:
  811248:	29001b2e 	bgeu	r5,r4,8112b8 <udivmodsi4+0x70>
  81124c:	28001a16 	blt	r5,zero,8112b8 <udivmodsi4+0x70>
  811250:	00800044 	movi	r2,1
  811254:	0007883a 	mov	r3,zero
  811258:	01c007c4 	movi	r7,31
  81125c:	00000306 	br	81126c <udivmodsi4+0x24>
  811260:	19c01326 	beq	r3,r7,8112b0 <udivmodsi4+0x68>
  811264:	18c00044 	addi	r3,r3,1
  811268:	28000416 	blt	r5,zero,81127c <udivmodsi4+0x34>
  81126c:	294b883a 	add	r5,r5,r5
  811270:	1085883a 	add	r2,r2,r2
  811274:	293ffa36 	bltu	r5,r4,811260 <udivmodsi4+0x18>
  811278:	10000d26 	beq	r2,zero,8112b0 <udivmodsi4+0x68>
  81127c:	0007883a 	mov	r3,zero
  811280:	21400236 	bltu	r4,r5,81128c <udivmodsi4+0x44>
  811284:	2149c83a 	sub	r4,r4,r5
  811288:	1886b03a 	or	r3,r3,r2
  81128c:	1004d07a 	srli	r2,r2,1
  811290:	280ad07a 	srli	r5,r5,1
  811294:	103ffa1e 	bne	r2,zero,811280 <udivmodsi4+0x38>
  811298:	30000226 	beq	r6,zero,8112a4 <udivmodsi4+0x5c>
  81129c:	2005883a 	mov	r2,r4
  8112a0:	f800283a 	ret
  8112a4:	1809883a 	mov	r4,r3
  8112a8:	2005883a 	mov	r2,r4
  8112ac:	f800283a 	ret
  8112b0:	0007883a 	mov	r3,zero
  8112b4:	003ff806 	br	811298 <udivmodsi4+0x50>
  8112b8:	00800044 	movi	r2,1
  8112bc:	0007883a 	mov	r3,zero
  8112c0:	003fef06 	br	811280 <udivmodsi4+0x38>

008112c4 <__divsi3>:
  8112c4:	defffe04 	addi	sp,sp,-8
  8112c8:	dc000015 	stw	r16,0(sp)
  8112cc:	dfc00115 	stw	ra,4(sp)
  8112d0:	0021883a 	mov	r16,zero
  8112d4:	20000c16 	blt	r4,zero,811308 <__divsi3+0x44>
  8112d8:	000d883a 	mov	r6,zero
  8112dc:	28000e16 	blt	r5,zero,811318 <__divsi3+0x54>
  8112e0:	08112480 	call	811248 <udivmodsi4>
  8112e4:	1007883a 	mov	r3,r2
  8112e8:	8005003a 	cmpeq	r2,r16,zero
  8112ec:	1000011e 	bne	r2,zero,8112f4 <__divsi3+0x30>
  8112f0:	00c7c83a 	sub	r3,zero,r3
  8112f4:	1805883a 	mov	r2,r3
  8112f8:	dfc00117 	ldw	ra,4(sp)
  8112fc:	dc000017 	ldw	r16,0(sp)
  811300:	dec00204 	addi	sp,sp,8
  811304:	f800283a 	ret
  811308:	0109c83a 	sub	r4,zero,r4
  81130c:	04000044 	movi	r16,1
  811310:	000d883a 	mov	r6,zero
  811314:	283ff20e 	bge	r5,zero,8112e0 <__divsi3+0x1c>
  811318:	014bc83a 	sub	r5,zero,r5
  81131c:	8021003a 	cmpeq	r16,r16,zero
  811320:	003fef06 	br	8112e0 <__divsi3+0x1c>

00811324 <__modsi3>:
  811324:	deffff04 	addi	sp,sp,-4
  811328:	dfc00015 	stw	ra,0(sp)
  81132c:	01800044 	movi	r6,1
  811330:	2807883a 	mov	r3,r5
  811334:	20000416 	blt	r4,zero,811348 <__modsi3+0x24>
  811338:	28000c16 	blt	r5,zero,81136c <__modsi3+0x48>
  81133c:	dfc00017 	ldw	ra,0(sp)
  811340:	dec00104 	addi	sp,sp,4
  811344:	08112481 	jmpi	811248 <udivmodsi4>
  811348:	0109c83a 	sub	r4,zero,r4
  81134c:	28000b16 	blt	r5,zero,81137c <__modsi3+0x58>
  811350:	180b883a 	mov	r5,r3
  811354:	01800044 	movi	r6,1
  811358:	08112480 	call	811248 <udivmodsi4>
  81135c:	0085c83a 	sub	r2,zero,r2
  811360:	dfc00017 	ldw	ra,0(sp)
  811364:	dec00104 	addi	sp,sp,4
  811368:	f800283a 	ret
  81136c:	014bc83a 	sub	r5,zero,r5
  811370:	dfc00017 	ldw	ra,0(sp)
  811374:	dec00104 	addi	sp,sp,4
  811378:	08112481 	jmpi	811248 <udivmodsi4>
  81137c:	0147c83a 	sub	r3,zero,r5
  811380:	003ff306 	br	811350 <__modsi3+0x2c>

00811384 <__udivsi3>:
  811384:	000d883a 	mov	r6,zero
  811388:	08112481 	jmpi	811248 <udivmodsi4>

0081138c <__umodsi3>:
  81138c:	01800044 	movi	r6,1
  811390:	08112481 	jmpi	811248 <udivmodsi4>

00811394 <__unpack_f>:
  811394:	21800017 	ldw	r6,0(r4)
  811398:	00c02034 	movhi	r3,128
  81139c:	18ffffc4 	addi	r3,r3,-1
  8113a0:	3004d5fa 	srli	r2,r6,23
  8113a4:	3008d7fa 	srli	r4,r6,31
  8113a8:	30ce703a 	and	r7,r6,r3
  8113ac:	10c03fcc 	andi	r3,r2,255
  8113b0:	29000115 	stw	r4,4(r5)
  8113b4:	1800131e 	bne	r3,zero,811404 <__unpack_f+0x70>
  8113b8:	38000f26 	beq	r7,zero,8113f8 <__unpack_f+0x64>
  8113bc:	380691fa 	slli	r3,r7,7
  8113c0:	01bfe084 	movi	r6,-126
  8113c4:	008000c4 	movi	r2,3
  8113c8:	01100034 	movhi	r4,16384
  8113cc:	213fffc4 	addi	r4,r4,-1
  8113d0:	28800015 	stw	r2,0(r5)
  8113d4:	29800215 	stw	r6,8(r5)
  8113d8:	20c00536 	bltu	r4,r3,8113f0 <__unpack_f+0x5c>
  8113dc:	3005883a 	mov	r2,r6
  8113e0:	18c7883a 	add	r3,r3,r3
  8113e4:	10bfffc4 	addi	r2,r2,-1
  8113e8:	20fffd2e 	bgeu	r4,r3,8113e0 <__unpack_f+0x4c>
  8113ec:	28800215 	stw	r2,8(r5)
  8113f0:	28c00315 	stw	r3,12(r5)
  8113f4:	f800283a 	ret
  8113f8:	00800084 	movi	r2,2
  8113fc:	28800015 	stw	r2,0(r5)
  811400:	f800283a 	ret
  811404:	00803fc4 	movi	r2,255
  811408:	18800826 	beq	r3,r2,81142c <__unpack_f+0x98>
  81140c:	380491fa 	slli	r2,r7,7
  811410:	18ffe044 	addi	r3,r3,-127
  811414:	28c00215 	stw	r3,8(r5)
  811418:	10900034 	orhi	r2,r2,16384
  81141c:	28800315 	stw	r2,12(r5)
  811420:	008000c4 	movi	r2,3
  811424:	28800015 	stw	r2,0(r5)
  811428:	f800283a 	ret
  81142c:	3800031e 	bne	r7,zero,81143c <__unpack_f+0xa8>
  811430:	00800104 	movi	r2,4
  811434:	28800015 	stw	r2,0(r5)
  811438:	f800283a 	ret
  81143c:	3080042c 	andhi	r2,r6,16
  811440:	10000426 	beq	r2,zero,811454 <__unpack_f+0xc0>
  811444:	00800044 	movi	r2,1
  811448:	28800015 	stw	r2,0(r5)
  81144c:	29c00315 	stw	r7,12(r5)
  811450:	f800283a 	ret
  811454:	28000015 	stw	zero,0(r5)
  811458:	003ffc06 	br	81144c <__unpack_f+0xb8>

0081145c <__fpcmp_parts_f>:
  81145c:	21800017 	ldw	r6,0(r4)
  811460:	00c00044 	movi	r3,1
  811464:	19800a2e 	bgeu	r3,r6,811490 <__fpcmp_parts_f+0x34>
  811468:	28800017 	ldw	r2,0(r5)
  81146c:	1880082e 	bgeu	r3,r2,811490 <__fpcmp_parts_f+0x34>
  811470:	00c00104 	movi	r3,4
  811474:	30c01e26 	beq	r6,r3,8114f0 <__fpcmp_parts_f+0x94>
  811478:	10c01a26 	beq	r2,r3,8114e4 <__fpcmp_parts_f+0x88>
  81147c:	00c00084 	movi	r3,2
  811480:	30c00526 	beq	r6,r3,811498 <__fpcmp_parts_f+0x3c>
  811484:	10c0071e 	bne	r2,r3,8114a4 <__fpcmp_parts_f+0x48>
  811488:	20800117 	ldw	r2,4(r4)
  81148c:	1000091e 	bne	r2,zero,8114b4 <__fpcmp_parts_f+0x58>
  811490:	00800044 	movi	r2,1
  811494:	f800283a 	ret
  811498:	10c0121e 	bne	r2,r3,8114e4 <__fpcmp_parts_f+0x88>
  81149c:	0005883a 	mov	r2,zero
  8114a0:	f800283a 	ret
  8114a4:	20c00117 	ldw	r3,4(r4)
  8114a8:	28800117 	ldw	r2,4(r5)
  8114ac:	18800326 	beq	r3,r2,8114bc <__fpcmp_parts_f+0x60>
  8114b0:	183ff726 	beq	r3,zero,811490 <__fpcmp_parts_f+0x34>
  8114b4:	00bfffc4 	movi	r2,-1
  8114b8:	f800283a 	ret
  8114bc:	21800217 	ldw	r6,8(r4)
  8114c0:	28800217 	ldw	r2,8(r5)
  8114c4:	11bffa16 	blt	r2,r6,8114b0 <__fpcmp_parts_f+0x54>
  8114c8:	30800416 	blt	r6,r2,8114dc <__fpcmp_parts_f+0x80>
  8114cc:	21000317 	ldw	r4,12(r4)
  8114d0:	29400317 	ldw	r5,12(r5)
  8114d4:	293ff636 	bltu	r5,r4,8114b0 <__fpcmp_parts_f+0x54>
  8114d8:	217ff02e 	bgeu	r4,r5,81149c <__fpcmp_parts_f+0x40>
  8114dc:	183fec1e 	bne	r3,zero,811490 <__fpcmp_parts_f+0x34>
  8114e0:	003ff406 	br	8114b4 <__fpcmp_parts_f+0x58>
  8114e4:	28800117 	ldw	r2,4(r5)
  8114e8:	103fe91e 	bne	r2,zero,811490 <__fpcmp_parts_f+0x34>
  8114ec:	003ff106 	br	8114b4 <__fpcmp_parts_f+0x58>
  8114f0:	11bfe51e 	bne	r2,r6,811488 <__fpcmp_parts_f+0x2c>
  8114f4:	28c00117 	ldw	r3,4(r5)
  8114f8:	20800117 	ldw	r2,4(r4)
  8114fc:	1885c83a 	sub	r2,r3,r2
  811500:	f800283a 	ret

00811504 <__make_fp>:
  811504:	defffb04 	addi	sp,sp,-20
  811508:	d9000015 	stw	r4,0(sp)
  81150c:	d809883a 	mov	r4,sp
  811510:	dfc00415 	stw	ra,16(sp)
  811514:	d9400115 	stw	r5,4(sp)
  811518:	d9800215 	stw	r6,8(sp)
  81151c:	d9c00315 	stw	r7,12(sp)
  811520:	08115f80 	call	8115f8 <__pack_f>
  811524:	dfc00417 	ldw	ra,16(sp)
  811528:	dec00504 	addi	sp,sp,20
  81152c:	f800283a 	ret

00811530 <__fpcmp_parts_d>:
  811530:	21800017 	ldw	r6,0(r4)
  811534:	00c00044 	movi	r3,1
  811538:	19800a2e 	bgeu	r3,r6,811564 <__fpcmp_parts_d+0x34>
  81153c:	28800017 	ldw	r2,0(r5)
  811540:	1880082e 	bgeu	r3,r2,811564 <__fpcmp_parts_d+0x34>
  811544:	00c00104 	movi	r3,4
  811548:	30c02626 	beq	r6,r3,8115e4 <__fpcmp_parts_d+0xb4>
  81154c:	10c02226 	beq	r2,r3,8115d8 <__fpcmp_parts_d+0xa8>
  811550:	00c00084 	movi	r3,2
  811554:	30c00526 	beq	r6,r3,81156c <__fpcmp_parts_d+0x3c>
  811558:	10c0071e 	bne	r2,r3,811578 <__fpcmp_parts_d+0x48>
  81155c:	20800117 	ldw	r2,4(r4)
  811560:	1000091e 	bne	r2,zero,811588 <__fpcmp_parts_d+0x58>
  811564:	00800044 	movi	r2,1
  811568:	f800283a 	ret
  81156c:	10c01a1e 	bne	r2,r3,8115d8 <__fpcmp_parts_d+0xa8>
  811570:	0005883a 	mov	r2,zero
  811574:	f800283a 	ret
  811578:	22000117 	ldw	r8,4(r4)
  81157c:	28800117 	ldw	r2,4(r5)
  811580:	40800326 	beq	r8,r2,811590 <__fpcmp_parts_d+0x60>
  811584:	403ff726 	beq	r8,zero,811564 <__fpcmp_parts_d+0x34>
  811588:	00bfffc4 	movi	r2,-1
  81158c:	f800283a 	ret
  811590:	20c00217 	ldw	r3,8(r4)
  811594:	28800217 	ldw	r2,8(r5)
  811598:	10fffa16 	blt	r2,r3,811584 <__fpcmp_parts_d+0x54>
  81159c:	18800916 	blt	r3,r2,8115c4 <__fpcmp_parts_d+0x94>
  8115a0:	21c00417 	ldw	r7,16(r4)
  8115a4:	28c00417 	ldw	r3,16(r5)
  8115a8:	21800317 	ldw	r6,12(r4)
  8115ac:	28800317 	ldw	r2,12(r5)
  8115b0:	19fff436 	bltu	r3,r7,811584 <__fpcmp_parts_d+0x54>
  8115b4:	38c00526 	beq	r7,r3,8115cc <__fpcmp_parts_d+0x9c>
  8115b8:	38c00236 	bltu	r7,r3,8115c4 <__fpcmp_parts_d+0x94>
  8115bc:	19ffec1e 	bne	r3,r7,811570 <__fpcmp_parts_d+0x40>
  8115c0:	30bfeb2e 	bgeu	r6,r2,811570 <__fpcmp_parts_d+0x40>
  8115c4:	403fe71e 	bne	r8,zero,811564 <__fpcmp_parts_d+0x34>
  8115c8:	003fef06 	br	811588 <__fpcmp_parts_d+0x58>
  8115cc:	11bffa2e 	bgeu	r2,r6,8115b8 <__fpcmp_parts_d+0x88>
  8115d0:	403fe426 	beq	r8,zero,811564 <__fpcmp_parts_d+0x34>
  8115d4:	003fec06 	br	811588 <__fpcmp_parts_d+0x58>
  8115d8:	28800117 	ldw	r2,4(r5)
  8115dc:	103fe11e 	bne	r2,zero,811564 <__fpcmp_parts_d+0x34>
  8115e0:	003fe906 	br	811588 <__fpcmp_parts_d+0x58>
  8115e4:	11bfdd1e 	bne	r2,r6,81155c <__fpcmp_parts_d+0x2c>
  8115e8:	28c00117 	ldw	r3,4(r5)
  8115ec:	20800117 	ldw	r2,4(r4)
  8115f0:	1885c83a 	sub	r2,r3,r2
  8115f4:	f800283a 	ret

008115f8 <__pack_f>:
  8115f8:	20c00017 	ldw	r3,0(r4)
  8115fc:	01c00044 	movi	r7,1
  811600:	21800317 	ldw	r6,12(r4)
  811604:	21400117 	ldw	r5,4(r4)
  811608:	38c02d2e 	bgeu	r7,r3,8116c0 <__pack_f+0xc8>
  81160c:	00800104 	movi	r2,4
  811610:	18802826 	beq	r3,r2,8116b4 <__pack_f+0xbc>
  811614:	00800084 	movi	r2,2
  811618:	18800126 	beq	r3,r2,811620 <__pack_f+0x28>
  81161c:	3000101e 	bne	r6,zero,811660 <__pack_f+0x68>
  811620:	000d883a 	mov	r6,zero
  811624:	0007883a 	mov	r3,zero
  811628:	19003fcc 	andi	r4,r3,255
  81162c:	200895fa 	slli	r4,r4,23
  811630:	00c02034 	movhi	r3,128
  811634:	18ffffc4 	addi	r3,r3,-1
  811638:	30c6703a 	and	r3,r6,r3
  81163c:	10a0002c 	andhi	r2,r2,32768
  811640:	10c4b03a 	or	r2,r2,r3
  811644:	280a97fa 	slli	r5,r5,31
  811648:	1104b03a 	or	r2,r2,r4
  81164c:	00e00034 	movhi	r3,32768
  811650:	18ffffc4 	addi	r3,r3,-1
  811654:	10c4703a 	and	r2,r2,r3
  811658:	1144b03a 	or	r2,r2,r5
  81165c:	f800283a 	ret
  811660:	21000217 	ldw	r4,8(r4)
  811664:	00bfe084 	movi	r2,-126
  811668:	20801b16 	blt	r4,r2,8116d8 <__pack_f+0xe0>
  81166c:	00801fc4 	movi	r2,127
  811670:	11001016 	blt	r2,r4,8116b4 <__pack_f+0xbc>
  811674:	308e703a 	and	r7,r6,r2
  811678:	2087883a 	add	r3,r4,r2
  81167c:	00801004 	movi	r2,64
  811680:	38800526 	beq	r7,r2,811698 <__pack_f+0xa0>
  811684:	31800fc4 	addi	r6,r6,63
  811688:	30000716 	blt	r6,zero,8116a8 <__pack_f+0xb0>
  81168c:	300490ba 	slli	r2,r6,2
  811690:	100cd27a 	srli	r6,r2,9
  811694:	003fe406 	br	811628 <__pack_f+0x30>
  811698:	3080200c 	andi	r2,r6,128
  81169c:	103ffa26 	beq	r2,zero,811688 <__pack_f+0x90>
  8116a0:	31cd883a 	add	r6,r6,r7
  8116a4:	003ff806 	br	811688 <__pack_f+0x90>
  8116a8:	300cd07a 	srli	r6,r6,1
  8116ac:	18c00044 	addi	r3,r3,1
  8116b0:	003ff606 	br	81168c <__pack_f+0x94>
  8116b4:	000d883a 	mov	r6,zero
  8116b8:	00ffffc4 	movi	r3,-1
  8116bc:	003fda06 	br	811628 <__pack_f+0x30>
  8116c0:	31800434 	orhi	r6,r6,16
  8116c4:	00802034 	movhi	r2,128
  8116c8:	10bfffc4 	addi	r2,r2,-1
  8116cc:	308c703a 	and	r6,r6,r2
  8116d0:	00ffffc4 	movi	r3,-1
  8116d4:	003fd406 	br	811628 <__pack_f+0x30>
  8116d8:	1109c83a 	sub	r4,r2,r4
  8116dc:	00800644 	movi	r2,25
  8116e0:	11001216 	blt	r2,r4,81172c <__pack_f+0x134>
  8116e4:	3904983a 	sll	r2,r7,r4
  8116e8:	3106d83a 	srl	r3,r6,r4
  8116ec:	10bfffc4 	addi	r2,r2,-1
  8116f0:	3084703a 	and	r2,r6,r2
  8116f4:	1004c03a 	cmpne	r2,r2,zero
  8116f8:	1886b03a 	or	r3,r3,r2
  8116fc:	19001fcc 	andi	r4,r3,127
  811700:	00801004 	movi	r2,64
  811704:	20800c26 	beq	r4,r2,811738 <__pack_f+0x140>
  811708:	18c00fc4 	addi	r3,r3,63
  81170c:	00900034 	movhi	r2,16384
  811710:	10bfffc4 	addi	r2,r2,-1
  811714:	180cd1fa 	srli	r6,r3,7
  811718:	10c7803a 	cmpltu	r3,r2,r3
  81171c:	00802034 	movhi	r2,128
  811720:	10bfffc4 	addi	r2,r2,-1
  811724:	308c703a 	and	r6,r6,r2
  811728:	003fbf06 	br	811628 <__pack_f+0x30>
  81172c:	0007883a 	mov	r3,zero
  811730:	000d883a 	mov	r6,zero
  811734:	003ff906 	br	81171c <__pack_f+0x124>
  811738:	1880200c 	andi	r2,r3,128
  81173c:	10000126 	beq	r2,zero,811744 <__pack_f+0x14c>
  811740:	1907883a 	add	r3,r3,r4
  811744:	180cd1fa 	srli	r6,r3,7
  811748:	00900034 	movhi	r2,16384
  81174c:	10bfffc4 	addi	r2,r2,-1
  811750:	10c7803a 	cmpltu	r3,r2,r3
  811754:	003ff106 	br	81171c <__pack_f+0x124>

00811758 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  811758:	defff804 	addi	sp,sp,-32
  81175c:	dfc00715 	stw	ra,28(sp)
  811760:	df000615 	stw	fp,24(sp)
  811764:	df000604 	addi	fp,sp,24
  811768:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  81176c:	e0bffc17 	ldw	r2,-16(fp)
  811770:	1004803a 	cmplt	r2,r2,zero
  811774:	1000091e 	bne	r2,zero,81179c <close+0x44>
  811778:	e13ffc17 	ldw	r4,-16(fp)
  81177c:	01400304 	movi	r5,12
  811780:	0801c5c0 	call	801c5c <__mulsi3>
  811784:	1007883a 	mov	r3,r2
  811788:	00802074 	movhi	r2,129
  81178c:	10966004 	addi	r2,r2,22912
  811790:	1887883a 	add	r3,r3,r2
  811794:	e0ffff15 	stw	r3,-4(fp)
  811798:	00000106 	br	8117a0 <close+0x48>
  81179c:	e03fff15 	stw	zero,-4(fp)
  8117a0:	e0bfff17 	ldw	r2,-4(fp)
  8117a4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  8117a8:	e0bffb17 	ldw	r2,-20(fp)
  8117ac:	1005003a 	cmpeq	r2,r2,zero
  8117b0:	10001d1e 	bne	r2,zero,811828 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  8117b4:	e0bffb17 	ldw	r2,-20(fp)
  8117b8:	10800017 	ldw	r2,0(r2)
  8117bc:	10800417 	ldw	r2,16(r2)
  8117c0:	1005003a 	cmpeq	r2,r2,zero
  8117c4:	1000071e 	bne	r2,zero,8117e4 <close+0x8c>
  8117c8:	e0bffb17 	ldw	r2,-20(fp)
  8117cc:	10800017 	ldw	r2,0(r2)
  8117d0:	10800417 	ldw	r2,16(r2)
  8117d4:	e13ffb17 	ldw	r4,-20(fp)
  8117d8:	103ee83a 	callr	r2
  8117dc:	e0bffe15 	stw	r2,-8(fp)
  8117e0:	00000106 	br	8117e8 <close+0x90>
  8117e4:	e03ffe15 	stw	zero,-8(fp)
  8117e8:	e0bffe17 	ldw	r2,-8(fp)
  8117ec:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  8117f0:	e13ffc17 	ldw	r4,-16(fp)
  8117f4:	08122f40 	call	8122f4 <alt_release_fd>
    if (rval < 0)
  8117f8:	e0bffa17 	ldw	r2,-24(fp)
  8117fc:	1004403a 	cmpge	r2,r2,zero
  811800:	1000071e 	bne	r2,zero,811820 <close+0xc8>
    {
      ALT_ERRNO = -rval;
  811804:	08118580 	call	811858 <alt_get_errno>
  811808:	e0fffa17 	ldw	r3,-24(fp)
  81180c:	00c7c83a 	sub	r3,zero,r3
  811810:	10c00015 	stw	r3,0(r2)
      return -1;
  811814:	00bfffc4 	movi	r2,-1
  811818:	e0bffd15 	stw	r2,-12(fp)
  81181c:	00000806 	br	811840 <close+0xe8>
    }
    return 0;
  811820:	e03ffd15 	stw	zero,-12(fp)
  811824:	00000606 	br	811840 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  811828:	08118580 	call	811858 <alt_get_errno>
  81182c:	1007883a 	mov	r3,r2
  811830:	00801444 	movi	r2,81
  811834:	18800015 	stw	r2,0(r3)
    return -1;
  811838:	00bfffc4 	movi	r2,-1
  81183c:	e0bffd15 	stw	r2,-12(fp)
  811840:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  811844:	e037883a 	mov	sp,fp
  811848:	dfc00117 	ldw	ra,4(sp)
  81184c:	df000017 	ldw	fp,0(sp)
  811850:	dec00204 	addi	sp,sp,8
  811854:	f800283a 	ret

00811858 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811858:	defffd04 	addi	sp,sp,-12
  81185c:	dfc00215 	stw	ra,8(sp)
  811860:	df000115 	stw	fp,4(sp)
  811864:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811868:	00802074 	movhi	r2,129
  81186c:	109aee04 	addi	r2,r2,27576
  811870:	10800017 	ldw	r2,0(r2)
  811874:	1005003a 	cmpeq	r2,r2,zero
  811878:	1000061e 	bne	r2,zero,811894 <alt_get_errno+0x3c>
  81187c:	00802074 	movhi	r2,129
  811880:	109aee04 	addi	r2,r2,27576
  811884:	10800017 	ldw	r2,0(r2)
  811888:	103ee83a 	callr	r2
  81188c:	e0bfff15 	stw	r2,-4(fp)
  811890:	00000306 	br	8118a0 <alt_get_errno+0x48>
  811894:	008020b4 	movhi	r2,130
  811898:	10a1c304 	addi	r2,r2,-30964
  81189c:	e0bfff15 	stw	r2,-4(fp)
  8118a0:	e0bfff17 	ldw	r2,-4(fp)
}
  8118a4:	e037883a 	mov	sp,fp
  8118a8:	dfc00117 	ldw	ra,4(sp)
  8118ac:	df000017 	ldw	fp,0(sp)
  8118b0:	dec00204 	addi	sp,sp,8
  8118b4:	f800283a 	ret

008118b8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  8118b8:	defffc04 	addi	sp,sp,-16
  8118bc:	df000315 	stw	fp,12(sp)
  8118c0:	df000304 	addi	fp,sp,12
  8118c4:	e13ffd15 	stw	r4,-12(fp)
  8118c8:	e17ffe15 	stw	r5,-8(fp)
  8118cc:	e1bfff15 	stw	r6,-4(fp)
  return len;
  8118d0:	e0bfff17 	ldw	r2,-4(fp)
}
  8118d4:	e037883a 	mov	sp,fp
  8118d8:	df000017 	ldw	fp,0(sp)
  8118dc:	dec00104 	addi	sp,sp,4
  8118e0:	f800283a 	ret

008118e4 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  8118e4:	defffd04 	addi	sp,sp,-12
  8118e8:	df000215 	stw	fp,8(sp)
  8118ec:	df000204 	addi	fp,sp,8
  8118f0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  8118f4:	e0bfff17 	ldw	r2,-4(fp)
  8118f8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  8118fc:	e0bffe17 	ldw	r2,-8(fp)
  811900:	1005003a 	cmpeq	r2,r2,zero
  811904:	1000021e 	bne	r2,zero,811910 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  811908:	002af070 	cmpltui	zero,zero,43969
  81190c:	00000106 	br	811914 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  811910:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  811914:	e037883a 	mov	sp,fp
  811918:	df000017 	ldw	fp,0(sp)
  81191c:	dec00104 	addi	sp,sp,4
  811920:	f800283a 	ret

00811924 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  811924:	defffd04 	addi	sp,sp,-12
  811928:	dfc00215 	stw	ra,8(sp)
  81192c:	df000115 	stw	fp,4(sp)
  811930:	df000104 	addi	fp,sp,4
  811934:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  811938:	e13fff17 	ldw	r4,-4(fp)
  81193c:	08118e40 	call	8118e4 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  811940:	003fff06 	br	811940 <_exit+0x1c>

00811944 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  811944:	defff904 	addi	sp,sp,-28
  811948:	dfc00615 	stw	ra,24(sp)
  81194c:	df000515 	stw	fp,20(sp)
  811950:	df000504 	addi	fp,sp,20
  811954:	e13ffc15 	stw	r4,-16(fp)
  811958:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81195c:	e0bffc17 	ldw	r2,-16(fp)
  811960:	1004803a 	cmplt	r2,r2,zero
  811964:	1000091e 	bne	r2,zero,81198c <fstat+0x48>
  811968:	e13ffc17 	ldw	r4,-16(fp)
  81196c:	01400304 	movi	r5,12
  811970:	0801c5c0 	call	801c5c <__mulsi3>
  811974:	1007883a 	mov	r3,r2
  811978:	00802074 	movhi	r2,129
  81197c:	10966004 	addi	r2,r2,22912
  811980:	1887883a 	add	r3,r3,r2
  811984:	e0ffff15 	stw	r3,-4(fp)
  811988:	00000106 	br	811990 <fstat+0x4c>
  81198c:	e03fff15 	stw	zero,-4(fp)
  811990:	e0bfff17 	ldw	r2,-4(fp)
  811994:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  811998:	e0bffb17 	ldw	r2,-20(fp)
  81199c:	1005003a 	cmpeq	r2,r2,zero
  8119a0:	1000121e 	bne	r2,zero,8119ec <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  8119a4:	e0bffb17 	ldw	r2,-20(fp)
  8119a8:	10800017 	ldw	r2,0(r2)
  8119ac:	10800817 	ldw	r2,32(r2)
  8119b0:	1005003a 	cmpeq	r2,r2,zero
  8119b4:	1000081e 	bne	r2,zero,8119d8 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  8119b8:	e0bffb17 	ldw	r2,-20(fp)
  8119bc:	10800017 	ldw	r2,0(r2)
  8119c0:	10800817 	ldw	r2,32(r2)
  8119c4:	e13ffb17 	ldw	r4,-20(fp)
  8119c8:	e17ffd17 	ldw	r5,-12(fp)
  8119cc:	103ee83a 	callr	r2
  8119d0:	e0bffe15 	stw	r2,-8(fp)
  8119d4:	00000b06 	br	811a04 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  8119d8:	e0fffd17 	ldw	r3,-12(fp)
  8119dc:	00880004 	movi	r2,8192
  8119e0:	18800115 	stw	r2,4(r3)
      return 0;
  8119e4:	e03ffe15 	stw	zero,-8(fp)
  8119e8:	00000606 	br	811a04 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8119ec:	0811a1c0 	call	811a1c <alt_get_errno>
  8119f0:	1007883a 	mov	r3,r2
  8119f4:	00801444 	movi	r2,81
  8119f8:	18800015 	stw	r2,0(r3)
    return -1;
  8119fc:	00bfffc4 	movi	r2,-1
  811a00:	e0bffe15 	stw	r2,-8(fp)
  811a04:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  811a08:	e037883a 	mov	sp,fp
  811a0c:	dfc00117 	ldw	ra,4(sp)
  811a10:	df000017 	ldw	fp,0(sp)
  811a14:	dec00204 	addi	sp,sp,8
  811a18:	f800283a 	ret

00811a1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811a1c:	defffd04 	addi	sp,sp,-12
  811a20:	dfc00215 	stw	ra,8(sp)
  811a24:	df000115 	stw	fp,4(sp)
  811a28:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811a2c:	00802074 	movhi	r2,129
  811a30:	109aee04 	addi	r2,r2,27576
  811a34:	10800017 	ldw	r2,0(r2)
  811a38:	1005003a 	cmpeq	r2,r2,zero
  811a3c:	1000061e 	bne	r2,zero,811a58 <alt_get_errno+0x3c>
  811a40:	00802074 	movhi	r2,129
  811a44:	109aee04 	addi	r2,r2,27576
  811a48:	10800017 	ldw	r2,0(r2)
  811a4c:	103ee83a 	callr	r2
  811a50:	e0bfff15 	stw	r2,-4(fp)
  811a54:	00000306 	br	811a64 <alt_get_errno+0x48>
  811a58:	008020b4 	movhi	r2,130
  811a5c:	10a1c304 	addi	r2,r2,-30964
  811a60:	e0bfff15 	stw	r2,-4(fp)
  811a64:	e0bfff17 	ldw	r2,-4(fp)
}
  811a68:	e037883a 	mov	sp,fp
  811a6c:	dfc00117 	ldw	ra,4(sp)
  811a70:	df000017 	ldw	fp,0(sp)
  811a74:	dec00204 	addi	sp,sp,8
  811a78:	f800283a 	ret

00811a7c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  811a7c:	deffeb04 	addi	sp,sp,-84
  811a80:	dfc01415 	stw	ra,80(sp)
  811a84:	df001315 	stw	fp,76(sp)
  811a88:	df001304 	addi	fp,sp,76
  811a8c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  811a90:	e0bffd17 	ldw	r2,-12(fp)
  811a94:	1004803a 	cmplt	r2,r2,zero
  811a98:	1000091e 	bne	r2,zero,811ac0 <isatty+0x44>
  811a9c:	e13ffd17 	ldw	r4,-12(fp)
  811aa0:	01400304 	movi	r5,12
  811aa4:	0801c5c0 	call	801c5c <__mulsi3>
  811aa8:	1007883a 	mov	r3,r2
  811aac:	00802074 	movhi	r2,129
  811ab0:	10966004 	addi	r2,r2,22912
  811ab4:	1887883a 	add	r3,r3,r2
  811ab8:	e0ffff15 	stw	r3,-4(fp)
  811abc:	00000106 	br	811ac4 <isatty+0x48>
  811ac0:	e03fff15 	stw	zero,-4(fp)
  811ac4:	e0bfff17 	ldw	r2,-4(fp)
  811ac8:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  811acc:	e0bfed17 	ldw	r2,-76(fp)
  811ad0:	1005003a 	cmpeq	r2,r2,zero
  811ad4:	10000f1e 	bne	r2,zero,811b14 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  811ad8:	e0bfed17 	ldw	r2,-76(fp)
  811adc:	10800017 	ldw	r2,0(r2)
  811ae0:	10800817 	ldw	r2,32(r2)
  811ae4:	1004c03a 	cmpne	r2,r2,zero
  811ae8:	1000031e 	bne	r2,zero,811af8 <isatty+0x7c>
    {
      return 1;
  811aec:	00800044 	movi	r2,1
  811af0:	e0bffe15 	stw	r2,-8(fp)
  811af4:	00000c06 	br	811b28 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  811af8:	e17fee04 	addi	r5,fp,-72
  811afc:	e13ffd17 	ldw	r4,-12(fp)
  811b00:	08119440 	call	811944 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  811b04:	e0bfef17 	ldw	r2,-68(fp)
  811b08:	10880020 	cmpeqi	r2,r2,8192
  811b0c:	e0bffe15 	stw	r2,-8(fp)
  811b10:	00000506 	br	811b28 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  811b14:	0811b400 	call	811b40 <alt_get_errno>
  811b18:	1007883a 	mov	r3,r2
  811b1c:	00801444 	movi	r2,81
  811b20:	18800015 	stw	r2,0(r3)
    return 0;
  811b24:	e03ffe15 	stw	zero,-8(fp)
  811b28:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  811b2c:	e037883a 	mov	sp,fp
  811b30:	dfc00117 	ldw	ra,4(sp)
  811b34:	df000017 	ldw	fp,0(sp)
  811b38:	dec00204 	addi	sp,sp,8
  811b3c:	f800283a 	ret

00811b40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811b40:	defffd04 	addi	sp,sp,-12
  811b44:	dfc00215 	stw	ra,8(sp)
  811b48:	df000115 	stw	fp,4(sp)
  811b4c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811b50:	00802074 	movhi	r2,129
  811b54:	109aee04 	addi	r2,r2,27576
  811b58:	10800017 	ldw	r2,0(r2)
  811b5c:	1005003a 	cmpeq	r2,r2,zero
  811b60:	1000061e 	bne	r2,zero,811b7c <alt_get_errno+0x3c>
  811b64:	00802074 	movhi	r2,129
  811b68:	109aee04 	addi	r2,r2,27576
  811b6c:	10800017 	ldw	r2,0(r2)
  811b70:	103ee83a 	callr	r2
  811b74:	e0bfff15 	stw	r2,-4(fp)
  811b78:	00000306 	br	811b88 <alt_get_errno+0x48>
  811b7c:	008020b4 	movhi	r2,130
  811b80:	10a1c304 	addi	r2,r2,-30964
  811b84:	e0bfff15 	stw	r2,-4(fp)
  811b88:	e0bfff17 	ldw	r2,-4(fp)
}
  811b8c:	e037883a 	mov	sp,fp
  811b90:	dfc00117 	ldw	ra,4(sp)
  811b94:	df000017 	ldw	fp,0(sp)
  811b98:	dec00204 	addi	sp,sp,8
  811b9c:	f800283a 	ret

00811ba0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  811ba0:	defffe04 	addi	sp,sp,-8
  811ba4:	dfc00115 	stw	ra,4(sp)
  811ba8:	df000015 	stw	fp,0(sp)
  811bac:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  811bb0:	01002074 	movhi	r4,129
  811bb4:	211b0504 	addi	r4,r4,27668
  811bb8:	01402074 	movhi	r5,129
  811bbc:	29544704 	addi	r5,r5,20764
  811bc0:	01802074 	movhi	r6,129
  811bc4:	319b0504 	addi	r6,r6,27668
  811bc8:	0811c200 	call	811c20 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  811bcc:	01002034 	movhi	r4,128
  811bd0:	21000804 	addi	r4,r4,32
  811bd4:	01402034 	movhi	r5,128
  811bd8:	29400804 	addi	r5,r5,32
  811bdc:	01802034 	movhi	r6,128
  811be0:	31806d04 	addi	r6,r6,436
  811be4:	0811c200 	call	811c20 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  811be8:	01002074 	movhi	r4,129
  811bec:	21121104 	addi	r4,r4,18500
  811bf0:	01402074 	movhi	r5,129
  811bf4:	29521104 	addi	r5,r5,18500
  811bf8:	01802074 	movhi	r6,129
  811bfc:	31944704 	addi	r6,r6,20764
  811c00:	0811c200 	call	811c20 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  811c04:	0813ab00 	call	813ab0 <alt_dcache_flush_all>
  alt_icache_flush_all();
  811c08:	0813fe40 	call	813fe4 <alt_icache_flush_all>
}
  811c0c:	e037883a 	mov	sp,fp
  811c10:	dfc00117 	ldw	ra,4(sp)
  811c14:	df000017 	ldw	fp,0(sp)
  811c18:	dec00204 	addi	sp,sp,8
  811c1c:	f800283a 	ret

00811c20 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  811c20:	defffc04 	addi	sp,sp,-16
  811c24:	df000315 	stw	fp,12(sp)
  811c28:	df000304 	addi	fp,sp,12
  811c2c:	e13ffd15 	stw	r4,-12(fp)
  811c30:	e17ffe15 	stw	r5,-8(fp)
  811c34:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  811c38:	e0fffe17 	ldw	r3,-8(fp)
  811c3c:	e0bffd17 	ldw	r2,-12(fp)
  811c40:	18800e26 	beq	r3,r2,811c7c <alt_load_section+0x5c>
  {
    while( to != end )
  811c44:	00000a06 	br	811c70 <alt_load_section+0x50>
    {
      *to++ = *from++;
  811c48:	e0bffd17 	ldw	r2,-12(fp)
  811c4c:	10c00017 	ldw	r3,0(r2)
  811c50:	e0bffe17 	ldw	r2,-8(fp)
  811c54:	10c00015 	stw	r3,0(r2)
  811c58:	e0bffe17 	ldw	r2,-8(fp)
  811c5c:	10800104 	addi	r2,r2,4
  811c60:	e0bffe15 	stw	r2,-8(fp)
  811c64:	e0bffd17 	ldw	r2,-12(fp)
  811c68:	10800104 	addi	r2,r2,4
  811c6c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  811c70:	e0fffe17 	ldw	r3,-8(fp)
  811c74:	e0bfff17 	ldw	r2,-4(fp)
  811c78:	18bff31e 	bne	r3,r2,811c48 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  811c7c:	e037883a 	mov	sp,fp
  811c80:	df000017 	ldw	fp,0(sp)
  811c84:	dec00104 	addi	sp,sp,4
  811c88:	f800283a 	ret

00811c8c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  811c8c:	defff804 	addi	sp,sp,-32
  811c90:	dfc00715 	stw	ra,28(sp)
  811c94:	df000615 	stw	fp,24(sp)
  811c98:	df000604 	addi	fp,sp,24
  811c9c:	e13ffc15 	stw	r4,-16(fp)
  811ca0:	e17ffd15 	stw	r5,-12(fp)
  811ca4:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  811ca8:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  811cac:	e0bffc17 	ldw	r2,-16(fp)
  811cb0:	1004803a 	cmplt	r2,r2,zero
  811cb4:	1000091e 	bne	r2,zero,811cdc <lseek+0x50>
  811cb8:	e13ffc17 	ldw	r4,-16(fp)
  811cbc:	01400304 	movi	r5,12
  811cc0:	0801c5c0 	call	801c5c <__mulsi3>
  811cc4:	1007883a 	mov	r3,r2
  811cc8:	00802074 	movhi	r2,129
  811ccc:	10966004 	addi	r2,r2,22912
  811cd0:	1887883a 	add	r3,r3,r2
  811cd4:	e0ffff15 	stw	r3,-4(fp)
  811cd8:	00000106 	br	811ce0 <lseek+0x54>
  811cdc:	e03fff15 	stw	zero,-4(fp)
  811ce0:	e0bfff17 	ldw	r2,-4(fp)
  811ce4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  811ce8:	e0bffb17 	ldw	r2,-20(fp)
  811cec:	1005003a 	cmpeq	r2,r2,zero
  811cf0:	1000111e 	bne	r2,zero,811d38 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  811cf4:	e0bffb17 	ldw	r2,-20(fp)
  811cf8:	10800017 	ldw	r2,0(r2)
  811cfc:	10800717 	ldw	r2,28(r2)
  811d00:	1005003a 	cmpeq	r2,r2,zero
  811d04:	1000091e 	bne	r2,zero,811d2c <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  811d08:	e0bffb17 	ldw	r2,-20(fp)
  811d0c:	10800017 	ldw	r2,0(r2)
  811d10:	10800717 	ldw	r2,28(r2)
  811d14:	e13ffb17 	ldw	r4,-20(fp)
  811d18:	e17ffd17 	ldw	r5,-12(fp)
  811d1c:	e1bffe17 	ldw	r6,-8(fp)
  811d20:	103ee83a 	callr	r2
  811d24:	e0bffa15 	stw	r2,-24(fp)
  811d28:	00000506 	br	811d40 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  811d2c:	00bfde84 	movi	r2,-134
  811d30:	e0bffa15 	stw	r2,-24(fp)
  811d34:	00000206 	br	811d40 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  811d38:	00bfebc4 	movi	r2,-81
  811d3c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  811d40:	e0bffa17 	ldw	r2,-24(fp)
  811d44:	1004403a 	cmpge	r2,r2,zero
  811d48:	1000071e 	bne	r2,zero,811d68 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  811d4c:	0811d800 	call	811d80 <alt_get_errno>
  811d50:	1007883a 	mov	r3,r2
  811d54:	e0bffa17 	ldw	r2,-24(fp)
  811d58:	0085c83a 	sub	r2,zero,r2
  811d5c:	18800015 	stw	r2,0(r3)
    rc = -1;
  811d60:	00bfffc4 	movi	r2,-1
  811d64:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  811d68:	e0bffa17 	ldw	r2,-24(fp)
}
  811d6c:	e037883a 	mov	sp,fp
  811d70:	dfc00117 	ldw	ra,4(sp)
  811d74:	df000017 	ldw	fp,0(sp)
  811d78:	dec00204 	addi	sp,sp,8
  811d7c:	f800283a 	ret

00811d80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811d80:	defffd04 	addi	sp,sp,-12
  811d84:	dfc00215 	stw	ra,8(sp)
  811d88:	df000115 	stw	fp,4(sp)
  811d8c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  811d90:	00802074 	movhi	r2,129
  811d94:	109aee04 	addi	r2,r2,27576
  811d98:	10800017 	ldw	r2,0(r2)
  811d9c:	1005003a 	cmpeq	r2,r2,zero
  811da0:	1000061e 	bne	r2,zero,811dbc <alt_get_errno+0x3c>
  811da4:	00802074 	movhi	r2,129
  811da8:	109aee04 	addi	r2,r2,27576
  811dac:	10800017 	ldw	r2,0(r2)
  811db0:	103ee83a 	callr	r2
  811db4:	e0bfff15 	stw	r2,-4(fp)
  811db8:	00000306 	br	811dc8 <alt_get_errno+0x48>
  811dbc:	008020b4 	movhi	r2,130
  811dc0:	10a1c304 	addi	r2,r2,-30964
  811dc4:	e0bfff15 	stw	r2,-4(fp)
  811dc8:	e0bfff17 	ldw	r2,-4(fp)
}
  811dcc:	e037883a 	mov	sp,fp
  811dd0:	dfc00117 	ldw	ra,4(sp)
  811dd4:	df000017 	ldw	fp,0(sp)
  811dd8:	dec00204 	addi	sp,sp,8
  811ddc:	f800283a 	ret

00811de0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  811de0:	defffd04 	addi	sp,sp,-12
  811de4:	dfc00215 	stw	ra,8(sp)
  811de8:	df000115 	stw	fp,4(sp)
  811dec:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  811df0:	0009883a 	mov	r4,zero
  811df4:	08125ac0 	call	8125ac <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  811df8:	08125e00 	call	8125e0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  811dfc:	01002074 	movhi	r4,129
  811e00:	21143c04 	addi	r4,r4,20720
  811e04:	01402074 	movhi	r5,129
  811e08:	29543c04 	addi	r5,r5,20720
  811e0c:	01802074 	movhi	r6,129
  811e10:	31943c04 	addi	r6,r6,20720
  811e14:	08143b80 	call	8143b8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  811e18:	0813c080 	call	813c08 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  811e1c:	01002074 	movhi	r4,129
  811e20:	210f1b04 	addi	r4,r4,15468
  811e24:	08146840 	call	814684 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  811e28:	d126e817 	ldw	r4,-25696(gp)
  811e2c:	d166e917 	ldw	r5,-25692(gp)
  811e30:	d1a6ea17 	ldw	r6,-25688(gp)
  811e34:	11000000 	call	1100000 <__alt_mem_tightly_coupled_instr_mem>
  811e38:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  811e3c:	01000044 	movi	r4,1
  811e40:	08117580 	call	811758 <close>
  exit (result);
  811e44:	e13fff17 	ldw	r4,-4(fp)
  811e48:	08022440 	call	802244 <exit>

00811e4c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  811e4c:	defffe04 	addi	sp,sp,-8
  811e50:	df000115 	stw	fp,4(sp)
  811e54:	df000104 	addi	fp,sp,4
  811e58:	e13fff15 	stw	r4,-4(fp)
}
  811e5c:	e037883a 	mov	sp,fp
  811e60:	df000017 	ldw	fp,0(sp)
  811e64:	dec00104 	addi	sp,sp,4
  811e68:	f800283a 	ret

00811e6c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  811e6c:	defffe04 	addi	sp,sp,-8
  811e70:	df000115 	stw	fp,4(sp)
  811e74:	df000104 	addi	fp,sp,4
  811e78:	e13fff15 	stw	r4,-4(fp)
}
  811e7c:	e037883a 	mov	sp,fp
  811e80:	df000017 	ldw	fp,0(sp)
  811e84:	dec00104 	addi	sp,sp,4
  811e88:	f800283a 	ret

00811e8c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  811e8c:	defffa04 	addi	sp,sp,-24
  811e90:	dfc00515 	stw	ra,20(sp)
  811e94:	df000415 	stw	fp,16(sp)
  811e98:	dc000315 	stw	r16,12(sp)
  811e9c:	df000304 	addi	fp,sp,12
  811ea0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  811ea4:	e0bffe17 	ldw	r2,-8(fp)
  811ea8:	10800217 	ldw	r2,8(r2)
  811eac:	10d00034 	orhi	r3,r2,16384
  811eb0:	e0bffe17 	ldw	r2,-8(fp)
  811eb4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  811eb8:	e03ffd15 	stw	zero,-12(fp)
  811ebc:	00002306 	br	811f4c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  811ec0:	e13ffd17 	ldw	r4,-12(fp)
  811ec4:	04002074 	movhi	r16,129
  811ec8:	84166004 	addi	r16,r16,22912
  811ecc:	01400304 	movi	r5,12
  811ed0:	0801c5c0 	call	801c5c <__mulsi3>
  811ed4:	1405883a 	add	r2,r2,r16
  811ed8:	10c00017 	ldw	r3,0(r2)
  811edc:	e0bffe17 	ldw	r2,-8(fp)
  811ee0:	10800017 	ldw	r2,0(r2)
  811ee4:	1880161e 	bne	r3,r2,811f40 <alt_file_locked+0xb4>
  811ee8:	e13ffd17 	ldw	r4,-12(fp)
  811eec:	04002074 	movhi	r16,129
  811ef0:	84166004 	addi	r16,r16,22912
  811ef4:	01400304 	movi	r5,12
  811ef8:	0801c5c0 	call	801c5c <__mulsi3>
  811efc:	1405883a 	add	r2,r2,r16
  811f00:	10800204 	addi	r2,r2,8
  811f04:	10800017 	ldw	r2,0(r2)
  811f08:	1004403a 	cmpge	r2,r2,zero
  811f0c:	10000c1e 	bne	r2,zero,811f40 <alt_file_locked+0xb4>
  811f10:	e13ffd17 	ldw	r4,-12(fp)
  811f14:	01400304 	movi	r5,12
  811f18:	0801c5c0 	call	801c5c <__mulsi3>
  811f1c:	1007883a 	mov	r3,r2
  811f20:	00802074 	movhi	r2,129
  811f24:	10966004 	addi	r2,r2,22912
  811f28:	1887883a 	add	r3,r3,r2
  811f2c:	e0bffe17 	ldw	r2,-8(fp)
  811f30:	18800326 	beq	r3,r2,811f40 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  811f34:	00bffcc4 	movi	r2,-13
  811f38:	e0bfff15 	stw	r2,-4(fp)
  811f3c:	00000a06 	br	811f68 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  811f40:	e0bffd17 	ldw	r2,-12(fp)
  811f44:	10800044 	addi	r2,r2,1
  811f48:	e0bffd15 	stw	r2,-12(fp)
  811f4c:	00802074 	movhi	r2,129
  811f50:	109aed04 	addi	r2,r2,27572
  811f54:	10800017 	ldw	r2,0(r2)
  811f58:	1007883a 	mov	r3,r2
  811f5c:	e0bffd17 	ldw	r2,-12(fp)
  811f60:	18bfd72e 	bgeu	r3,r2,811ec0 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  811f64:	e03fff15 	stw	zero,-4(fp)
  811f68:	e0bfff17 	ldw	r2,-4(fp)
}
  811f6c:	e037883a 	mov	sp,fp
  811f70:	dfc00217 	ldw	ra,8(sp)
  811f74:	df000117 	ldw	fp,4(sp)
  811f78:	dc000017 	ldw	r16,0(sp)
  811f7c:	dec00304 	addi	sp,sp,12
  811f80:	f800283a 	ret

00811f84 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  811f84:	defff404 	addi	sp,sp,-48
  811f88:	dfc00b15 	stw	ra,44(sp)
  811f8c:	df000a15 	stw	fp,40(sp)
  811f90:	df000a04 	addi	fp,sp,40
  811f94:	e13ffb15 	stw	r4,-20(fp)
  811f98:	e17ffc15 	stw	r5,-16(fp)
  811f9c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  811fa0:	00bfffc4 	movi	r2,-1
  811fa4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  811fa8:	00bffb44 	movi	r2,-19
  811fac:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  811fb0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  811fb4:	e13ffb17 	ldw	r4,-20(fp)
  811fb8:	01402074 	movhi	r5,129
  811fbc:	295aeb04 	addi	r5,r5,27564
  811fc0:	0813cd00 	call	813cd0 <alt_find_dev>
  811fc4:	e0bffa15 	stw	r2,-24(fp)
  811fc8:	e0bffa17 	ldw	r2,-24(fp)
  811fcc:	1004c03a 	cmpne	r2,r2,zero
  811fd0:	1000051e 	bne	r2,zero,811fe8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  811fd4:	e13ffb17 	ldw	r4,-20(fp)
  811fd8:	0813d640 	call	813d64 <alt_find_file>
  811fdc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  811fe0:	00800044 	movi	r2,1
  811fe4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  811fe8:	e0bffa17 	ldw	r2,-24(fp)
  811fec:	1005003a 	cmpeq	r2,r2,zero
  811ff0:	1000311e 	bne	r2,zero,8120b8 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  811ff4:	e13ffa17 	ldw	r4,-24(fp)
  811ff8:	0813f140 	call	813f14 <alt_get_fd>
  811ffc:	e0bff815 	stw	r2,-32(fp)
  812000:	e0bff817 	ldw	r2,-32(fp)
  812004:	1004403a 	cmpge	r2,r2,zero
  812008:	1000031e 	bne	r2,zero,812018 <open+0x94>
    {
      status = index;
  81200c:	e0bff817 	ldw	r2,-32(fp)
  812010:	e0bff715 	stw	r2,-36(fp)
  812014:	00002a06 	br	8120c0 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  812018:	e13ff817 	ldw	r4,-32(fp)
  81201c:	01400304 	movi	r5,12
  812020:	0801c5c0 	call	801c5c <__mulsi3>
  812024:	1007883a 	mov	r3,r2
  812028:	00802074 	movhi	r2,129
  81202c:	10966004 	addi	r2,r2,22912
  812030:	1885883a 	add	r2,r3,r2
  812034:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  812038:	e0fffc17 	ldw	r3,-16(fp)
  81203c:	00900034 	movhi	r2,16384
  812040:	10bfffc4 	addi	r2,r2,-1
  812044:	1886703a 	and	r3,r3,r2
  812048:	e0bff917 	ldw	r2,-28(fp)
  81204c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  812050:	e0bff617 	ldw	r2,-40(fp)
  812054:	1004c03a 	cmpne	r2,r2,zero
  812058:	1000061e 	bne	r2,zero,812074 <open+0xf0>
  81205c:	e13ff917 	ldw	r4,-28(fp)
  812060:	0811e8c0 	call	811e8c <alt_file_locked>
  812064:	e0bff715 	stw	r2,-36(fp)
  812068:	e0bff717 	ldw	r2,-36(fp)
  81206c:	1004803a 	cmplt	r2,r2,zero
  812070:	1000131e 	bne	r2,zero,8120c0 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  812074:	e0bffa17 	ldw	r2,-24(fp)
  812078:	10800317 	ldw	r2,12(r2)
  81207c:	1005003a 	cmpeq	r2,r2,zero
  812080:	1000091e 	bne	r2,zero,8120a8 <open+0x124>
  812084:	e0bffa17 	ldw	r2,-24(fp)
  812088:	10800317 	ldw	r2,12(r2)
  81208c:	e13ff917 	ldw	r4,-28(fp)
  812090:	e17ffb17 	ldw	r5,-20(fp)
  812094:	e1bffc17 	ldw	r6,-16(fp)
  812098:	e1fffd17 	ldw	r7,-12(fp)
  81209c:	103ee83a 	callr	r2
  8120a0:	e0bfff15 	stw	r2,-4(fp)
  8120a4:	00000106 	br	8120ac <open+0x128>
  8120a8:	e03fff15 	stw	zero,-4(fp)
  8120ac:	e0bfff17 	ldw	r2,-4(fp)
  8120b0:	e0bff715 	stw	r2,-36(fp)
  8120b4:	00000206 	br	8120c0 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  8120b8:	00bffb44 	movi	r2,-19
  8120bc:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  8120c0:	e0bff717 	ldw	r2,-36(fp)
  8120c4:	1004403a 	cmpge	r2,r2,zero
  8120c8:	1000091e 	bne	r2,zero,8120f0 <open+0x16c>
  {
    alt_release_fd (index);  
  8120cc:	e13ff817 	ldw	r4,-32(fp)
  8120d0:	08122f40 	call	8122f4 <alt_release_fd>
    ALT_ERRNO = -status;
  8120d4:	08121100 	call	812110 <alt_get_errno>
  8120d8:	e0fff717 	ldw	r3,-36(fp)
  8120dc:	00c7c83a 	sub	r3,zero,r3
  8120e0:	10c00015 	stw	r3,0(r2)
    return -1;
  8120e4:	00bfffc4 	movi	r2,-1
  8120e8:	e0bffe15 	stw	r2,-8(fp)
  8120ec:	00000206 	br	8120f8 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  8120f0:	e0bff817 	ldw	r2,-32(fp)
  8120f4:	e0bffe15 	stw	r2,-8(fp)
  8120f8:	e0bffe17 	ldw	r2,-8(fp)
}
  8120fc:	e037883a 	mov	sp,fp
  812100:	dfc00117 	ldw	ra,4(sp)
  812104:	df000017 	ldw	fp,0(sp)
  812108:	dec00204 	addi	sp,sp,8
  81210c:	f800283a 	ret

00812110 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812110:	defffd04 	addi	sp,sp,-12
  812114:	dfc00215 	stw	ra,8(sp)
  812118:	df000115 	stw	fp,4(sp)
  81211c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  812120:	00802074 	movhi	r2,129
  812124:	109aee04 	addi	r2,r2,27576
  812128:	10800017 	ldw	r2,0(r2)
  81212c:	1005003a 	cmpeq	r2,r2,zero
  812130:	1000061e 	bne	r2,zero,81214c <alt_get_errno+0x3c>
  812134:	00802074 	movhi	r2,129
  812138:	109aee04 	addi	r2,r2,27576
  81213c:	10800017 	ldw	r2,0(r2)
  812140:	103ee83a 	callr	r2
  812144:	e0bfff15 	stw	r2,-4(fp)
  812148:	00000306 	br	812158 <alt_get_errno+0x48>
  81214c:	008020b4 	movhi	r2,130
  812150:	10a1c304 	addi	r2,r2,-30964
  812154:	e0bfff15 	stw	r2,-4(fp)
  812158:	e0bfff17 	ldw	r2,-4(fp)
}
  81215c:	e037883a 	mov	sp,fp
  812160:	dfc00117 	ldw	ra,4(sp)
  812164:	df000017 	ldw	fp,0(sp)
  812168:	dec00204 	addi	sp,sp,8
  81216c:	f800283a 	ret

00812170 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  812170:	defff704 	addi	sp,sp,-36
  812174:	dfc00815 	stw	ra,32(sp)
  812178:	df000715 	stw	fp,28(sp)
  81217c:	df000704 	addi	fp,sp,28
  812180:	e13ffb15 	stw	r4,-20(fp)
  812184:	e17ffc15 	stw	r5,-16(fp)
  812188:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81218c:	e0bffb17 	ldw	r2,-20(fp)
  812190:	1004803a 	cmplt	r2,r2,zero
  812194:	1000091e 	bne	r2,zero,8121bc <read+0x4c>
  812198:	e13ffb17 	ldw	r4,-20(fp)
  81219c:	01400304 	movi	r5,12
  8121a0:	0801c5c0 	call	801c5c <__mulsi3>
  8121a4:	1007883a 	mov	r3,r2
  8121a8:	00802074 	movhi	r2,129
  8121ac:	10966004 	addi	r2,r2,22912
  8121b0:	1887883a 	add	r3,r3,r2
  8121b4:	e0ffff15 	stw	r3,-4(fp)
  8121b8:	00000106 	br	8121c0 <read+0x50>
  8121bc:	e03fff15 	stw	zero,-4(fp)
  8121c0:	e0bfff17 	ldw	r2,-4(fp)
  8121c4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  8121c8:	e0bffa17 	ldw	r2,-24(fp)
  8121cc:	1005003a 	cmpeq	r2,r2,zero
  8121d0:	1000241e 	bne	r2,zero,812264 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8121d4:	e0bffa17 	ldw	r2,-24(fp)
  8121d8:	10800217 	ldw	r2,8(r2)
  8121dc:	108000cc 	andi	r2,r2,3
  8121e0:	10800060 	cmpeqi	r2,r2,1
  8121e4:	10001a1e 	bne	r2,zero,812250 <read+0xe0>
  8121e8:	e0bffa17 	ldw	r2,-24(fp)
  8121ec:	10800017 	ldw	r2,0(r2)
  8121f0:	10800517 	ldw	r2,20(r2)
  8121f4:	1005003a 	cmpeq	r2,r2,zero
  8121f8:	1000151e 	bne	r2,zero,812250 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  8121fc:	e0bffa17 	ldw	r2,-24(fp)
  812200:	10800017 	ldw	r2,0(r2)
  812204:	10800517 	ldw	r2,20(r2)
  812208:	e17ffc17 	ldw	r5,-16(fp)
  81220c:	e1bffd17 	ldw	r6,-12(fp)
  812210:	e13ffa17 	ldw	r4,-24(fp)
  812214:	103ee83a 	callr	r2
  812218:	e0bff915 	stw	r2,-28(fp)
  81221c:	e0bff917 	ldw	r2,-28(fp)
  812220:	1004403a 	cmpge	r2,r2,zero
  812224:	1000071e 	bne	r2,zero,812244 <read+0xd4>
        {
          ALT_ERRNO = -rval;
  812228:	08122940 	call	812294 <alt_get_errno>
  81222c:	e0fff917 	ldw	r3,-28(fp)
  812230:	00c7c83a 	sub	r3,zero,r3
  812234:	10c00015 	stw	r3,0(r2)
          return -1;
  812238:	00bfffc4 	movi	r2,-1
  81223c:	e0bffe15 	stw	r2,-8(fp)
  812240:	00000e06 	br	81227c <read+0x10c>
        }
        return rval;
  812244:	e0bff917 	ldw	r2,-28(fp)
  812248:	e0bffe15 	stw	r2,-8(fp)
  81224c:	00000b06 	br	81227c <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  812250:	08122940 	call	812294 <alt_get_errno>
  812254:	1007883a 	mov	r3,r2
  812258:	00800344 	movi	r2,13
  81225c:	18800015 	stw	r2,0(r3)
  812260:	00000406 	br	812274 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  812264:	08122940 	call	812294 <alt_get_errno>
  812268:	1007883a 	mov	r3,r2
  81226c:	00801444 	movi	r2,81
  812270:	18800015 	stw	r2,0(r3)
  }
  return -1;
  812274:	00bfffc4 	movi	r2,-1
  812278:	e0bffe15 	stw	r2,-8(fp)
  81227c:	e0bffe17 	ldw	r2,-8(fp)
}
  812280:	e037883a 	mov	sp,fp
  812284:	dfc00117 	ldw	ra,4(sp)
  812288:	df000017 	ldw	fp,0(sp)
  81228c:	dec00204 	addi	sp,sp,8
  812290:	f800283a 	ret

00812294 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812294:	defffd04 	addi	sp,sp,-12
  812298:	dfc00215 	stw	ra,8(sp)
  81229c:	df000115 	stw	fp,4(sp)
  8122a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8122a4:	00802074 	movhi	r2,129
  8122a8:	109aee04 	addi	r2,r2,27576
  8122ac:	10800017 	ldw	r2,0(r2)
  8122b0:	1005003a 	cmpeq	r2,r2,zero
  8122b4:	1000061e 	bne	r2,zero,8122d0 <alt_get_errno+0x3c>
  8122b8:	00802074 	movhi	r2,129
  8122bc:	109aee04 	addi	r2,r2,27576
  8122c0:	10800017 	ldw	r2,0(r2)
  8122c4:	103ee83a 	callr	r2
  8122c8:	e0bfff15 	stw	r2,-4(fp)
  8122cc:	00000306 	br	8122dc <alt_get_errno+0x48>
  8122d0:	008020b4 	movhi	r2,130
  8122d4:	10a1c304 	addi	r2,r2,-30964
  8122d8:	e0bfff15 	stw	r2,-4(fp)
  8122dc:	e0bfff17 	ldw	r2,-4(fp)
}
  8122e0:	e037883a 	mov	sp,fp
  8122e4:	dfc00117 	ldw	ra,4(sp)
  8122e8:	df000017 	ldw	fp,0(sp)
  8122ec:	dec00204 	addi	sp,sp,8
  8122f0:	f800283a 	ret

008122f4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8122f4:	defffc04 	addi	sp,sp,-16
  8122f8:	dfc00315 	stw	ra,12(sp)
  8122fc:	df000215 	stw	fp,8(sp)
  812300:	dc000115 	stw	r16,4(sp)
  812304:	df000104 	addi	fp,sp,4
  812308:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  81230c:	e0bfff17 	ldw	r2,-4(fp)
  812310:	108000d0 	cmplti	r2,r2,3
  812314:	10000f1e 	bne	r2,zero,812354 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  812318:	e13fff17 	ldw	r4,-4(fp)
  81231c:	04002074 	movhi	r16,129
  812320:	84166004 	addi	r16,r16,22912
  812324:	01400304 	movi	r5,12
  812328:	0801c5c0 	call	801c5c <__mulsi3>
  81232c:	1405883a 	add	r2,r2,r16
  812330:	10800204 	addi	r2,r2,8
  812334:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  812338:	e13fff17 	ldw	r4,-4(fp)
  81233c:	04002074 	movhi	r16,129
  812340:	84166004 	addi	r16,r16,22912
  812344:	01400304 	movi	r5,12
  812348:	0801c5c0 	call	801c5c <__mulsi3>
  81234c:	1405883a 	add	r2,r2,r16
  812350:	10000015 	stw	zero,0(r2)
  }
}
  812354:	e037883a 	mov	sp,fp
  812358:	dfc00217 	ldw	ra,8(sp)
  81235c:	df000117 	ldw	fp,4(sp)
  812360:	dc000017 	ldw	r16,0(sp)
  812364:	dec00304 	addi	sp,sp,12
  812368:	f800283a 	ret

0081236c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  81236c:	defff804 	addi	sp,sp,-32
  812370:	df000715 	stw	fp,28(sp)
  812374:	df000704 	addi	fp,sp,28
  812378:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81237c:	0005303a 	rdctl	r2,status
  812380:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812384:	e0fffb17 	ldw	r3,-20(fp)
  812388:	00bfff84 	movi	r2,-2
  81238c:	1884703a 	and	r2,r3,r2
  812390:	1001703a 	wrctl	status,r2
  
  return context;
  812394:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  812398:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  81239c:	d0a00d17 	ldw	r2,-32716(gp)
  8123a0:	10c000c4 	addi	r3,r2,3
  8123a4:	00bfff04 	movi	r2,-4
  8123a8:	1884703a 	and	r2,r3,r2
  8123ac:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  8123b0:	d0e00d17 	ldw	r3,-32716(gp)
  8123b4:	e0bffe17 	ldw	r2,-8(fp)
  8123b8:	1887883a 	add	r3,r3,r2
  8123bc:	00804034 	movhi	r2,256
  8123c0:	10800004 	addi	r2,r2,0
  8123c4:	10c0072e 	bgeu	r2,r3,8123e4 <sbrk+0x78>
  8123c8:	e0bffd17 	ldw	r2,-12(fp)
  8123cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8123d0:	e0bffa17 	ldw	r2,-24(fp)
  8123d4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  8123d8:	00bfffc4 	movi	r2,-1
  8123dc:	e0bfff15 	stw	r2,-4(fp)
  8123e0:	00000c06 	br	812414 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  8123e4:	d0a00d17 	ldw	r2,-32716(gp)
  8123e8:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  8123ec:	d0e00d17 	ldw	r3,-32716(gp)
  8123f0:	e0bffe17 	ldw	r2,-8(fp)
  8123f4:	1885883a 	add	r2,r3,r2
  8123f8:	d0a00d15 	stw	r2,-32716(gp)
  8123fc:	e0bffd17 	ldw	r2,-12(fp)
  812400:	e0bff915 	stw	r2,-28(fp)
  812404:	e0bff917 	ldw	r2,-28(fp)
  812408:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  81240c:	e0bffc17 	ldw	r2,-16(fp)
  812410:	e0bfff15 	stw	r2,-4(fp)
  812414:	e0bfff17 	ldw	r2,-4(fp)
} 
  812418:	e037883a 	mov	sp,fp
  81241c:	df000017 	ldw	fp,0(sp)
  812420:	dec00104 	addi	sp,sp,4
  812424:	f800283a 	ret

00812428 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  812428:	defff704 	addi	sp,sp,-36
  81242c:	dfc00815 	stw	ra,32(sp)
  812430:	df000715 	stw	fp,28(sp)
  812434:	df000704 	addi	fp,sp,28
  812438:	e13ffb15 	stw	r4,-20(fp)
  81243c:	e17ffc15 	stw	r5,-16(fp)
  812440:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  812444:	e0bffb17 	ldw	r2,-20(fp)
  812448:	1004803a 	cmplt	r2,r2,zero
  81244c:	1000091e 	bne	r2,zero,812474 <write+0x4c>
  812450:	e13ffb17 	ldw	r4,-20(fp)
  812454:	01400304 	movi	r5,12
  812458:	0801c5c0 	call	801c5c <__mulsi3>
  81245c:	1007883a 	mov	r3,r2
  812460:	00802074 	movhi	r2,129
  812464:	10966004 	addi	r2,r2,22912
  812468:	1887883a 	add	r3,r3,r2
  81246c:	e0ffff15 	stw	r3,-4(fp)
  812470:	00000106 	br	812478 <write+0x50>
  812474:	e03fff15 	stw	zero,-4(fp)
  812478:	e0bfff17 	ldw	r2,-4(fp)
  81247c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  812480:	e0bffa17 	ldw	r2,-24(fp)
  812484:	1005003a 	cmpeq	r2,r2,zero
  812488:	1000241e 	bne	r2,zero,81251c <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  81248c:	e0bffa17 	ldw	r2,-24(fp)
  812490:	10800217 	ldw	r2,8(r2)
  812494:	108000cc 	andi	r2,r2,3
  812498:	1005003a 	cmpeq	r2,r2,zero
  81249c:	10001a1e 	bne	r2,zero,812508 <write+0xe0>
  8124a0:	e0bffa17 	ldw	r2,-24(fp)
  8124a4:	10800017 	ldw	r2,0(r2)
  8124a8:	10800617 	ldw	r2,24(r2)
  8124ac:	1005003a 	cmpeq	r2,r2,zero
  8124b0:	1000151e 	bne	r2,zero,812508 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  8124b4:	e0bffa17 	ldw	r2,-24(fp)
  8124b8:	10800017 	ldw	r2,0(r2)
  8124bc:	10800617 	ldw	r2,24(r2)
  8124c0:	e17ffc17 	ldw	r5,-16(fp)
  8124c4:	e1bffd17 	ldw	r6,-12(fp)
  8124c8:	e13ffa17 	ldw	r4,-24(fp)
  8124cc:	103ee83a 	callr	r2
  8124d0:	e0bff915 	stw	r2,-28(fp)
  8124d4:	e0bff917 	ldw	r2,-28(fp)
  8124d8:	1004403a 	cmpge	r2,r2,zero
  8124dc:	1000071e 	bne	r2,zero,8124fc <write+0xd4>
      {
        ALT_ERRNO = -rval;
  8124e0:	081254c0 	call	81254c <alt_get_errno>
  8124e4:	e0fff917 	ldw	r3,-28(fp)
  8124e8:	00c7c83a 	sub	r3,zero,r3
  8124ec:	10c00015 	stw	r3,0(r2)
        return -1;
  8124f0:	00bfffc4 	movi	r2,-1
  8124f4:	e0bffe15 	stw	r2,-8(fp)
  8124f8:	00000e06 	br	812534 <write+0x10c>
      }
      return rval;
  8124fc:	e0bff917 	ldw	r2,-28(fp)
  812500:	e0bffe15 	stw	r2,-8(fp)
  812504:	00000b06 	br	812534 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  812508:	081254c0 	call	81254c <alt_get_errno>
  81250c:	1007883a 	mov	r3,r2
  812510:	00800344 	movi	r2,13
  812514:	18800015 	stw	r2,0(r3)
  812518:	00000406 	br	81252c <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  81251c:	081254c0 	call	81254c <alt_get_errno>
  812520:	1007883a 	mov	r3,r2
  812524:	00801444 	movi	r2,81
  812528:	18800015 	stw	r2,0(r3)
  }
  return -1;
  81252c:	00bfffc4 	movi	r2,-1
  812530:	e0bffe15 	stw	r2,-8(fp)
  812534:	e0bffe17 	ldw	r2,-8(fp)
}
  812538:	e037883a 	mov	sp,fp
  81253c:	dfc00117 	ldw	ra,4(sp)
  812540:	df000017 	ldw	fp,0(sp)
  812544:	dec00204 	addi	sp,sp,8
  812548:	f800283a 	ret

0081254c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81254c:	defffd04 	addi	sp,sp,-12
  812550:	dfc00215 	stw	ra,8(sp)
  812554:	df000115 	stw	fp,4(sp)
  812558:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81255c:	00802074 	movhi	r2,129
  812560:	109aee04 	addi	r2,r2,27576
  812564:	10800017 	ldw	r2,0(r2)
  812568:	1005003a 	cmpeq	r2,r2,zero
  81256c:	1000061e 	bne	r2,zero,812588 <alt_get_errno+0x3c>
  812570:	00802074 	movhi	r2,129
  812574:	109aee04 	addi	r2,r2,27576
  812578:	10800017 	ldw	r2,0(r2)
  81257c:	103ee83a 	callr	r2
  812580:	e0bfff15 	stw	r2,-4(fp)
  812584:	00000306 	br	812594 <alt_get_errno+0x48>
  812588:	008020b4 	movhi	r2,130
  81258c:	10a1c304 	addi	r2,r2,-30964
  812590:	e0bfff15 	stw	r2,-4(fp)
  812594:	e0bfff17 	ldw	r2,-4(fp)
}
  812598:	e037883a 	mov	sp,fp
  81259c:	dfc00117 	ldw	ra,4(sp)
  8125a0:	df000017 	ldw	fp,0(sp)
  8125a4:	dec00204 	addi	sp,sp,8
  8125a8:	f800283a 	ret

008125ac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  8125ac:	defffd04 	addi	sp,sp,-12
  8125b0:	dfc00215 	stw	ra,8(sp)
  8125b4:	df000115 	stw	fp,4(sp)
  8125b8:	df000104 	addi	fp,sp,4
  8125bc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  8125c0:	08145d40 	call	8145d4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8125c4:	00800044 	movi	r2,1
  8125c8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8125cc:	e037883a 	mov	sp,fp
  8125d0:	dfc00117 	ldw	ra,4(sp)
  8125d4:	df000017 	ldw	fp,0(sp)
  8125d8:	dec00204 	addi	sp,sp,8
  8125dc:	f800283a 	ret

008125e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8125e0:	defffe04 	addi	sp,sp,-8
  8125e4:	dfc00115 	stw	ra,4(sp)
  8125e8:	df000015 	stw	fp,0(sp)
  8125ec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  8125f0:	01004434 	movhi	r4,272
  8125f4:	210c0804 	addi	r4,r4,12320
  8125f8:	000b883a 	mov	r5,zero
  8125fc:	01800044 	movi	r6,1
  812600:	01c0fa04 	movi	r7,1000
  812604:	08131c40 	call	8131c4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_TIMER, timestamp_timer);
  812608:	00c020b4 	movhi	r3,130
  81260c:	18e1cd04 	addi	r3,r3,-30924
  812610:	00804434 	movhi	r2,272
  812614:	108c0004 	addi	r2,r2,12288
  812618:	18800015 	stw	r2,0(r3)
  81261c:	00c020b4 	movhi	r3,130
  812620:	18e1ce04 	addi	r3,r3,-30920
  812624:	0080bef4 	movhi	r2,763
  812628:	10bc2004 	addi	r2,r2,-3968
  81262c:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  812630:	01002074 	movhi	r4,129
  812634:	2116ca04 	addi	r4,r4,23336
  812638:	000b883a 	mov	r5,zero
  81263c:	01800404 	movi	r6,16
  812640:	08127f00 	call	8127f0 <altera_avalon_jtag_uart_init>
  812644:	01002074 	movhi	r4,129
  812648:	2116c004 	addi	r4,r4,23296
  81264c:	08126700 	call	812670 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
  812650:	01002074 	movhi	r4,129
  812654:	211ad804 	addi	r4,r4,27488
  812658:	0813e840 	call	813e84 <alt_fs_reg>
}
  81265c:	e037883a 	mov	sp,fp
  812660:	dfc00117 	ldw	ra,4(sp)
  812664:	df000017 	ldw	fp,0(sp)
  812668:	dec00204 	addi	sp,sp,8
  81266c:	f800283a 	ret

00812670 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  812670:	defffd04 	addi	sp,sp,-12
  812674:	dfc00215 	stw	ra,8(sp)
  812678:	df000115 	stw	fp,4(sp)
  81267c:	df000104 	addi	fp,sp,4
  812680:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  812684:	e13fff17 	ldw	r4,-4(fp)
  812688:	01402074 	movhi	r5,129
  81268c:	295aeb04 	addi	r5,r5,27564
  812690:	0813af40 	call	813af4 <alt_dev_llist_insert>
}
  812694:	e037883a 	mov	sp,fp
  812698:	dfc00117 	ldw	ra,4(sp)
  81269c:	df000017 	ldw	fp,0(sp)
  8126a0:	dec00204 	addi	sp,sp,8
  8126a4:	f800283a 	ret

008126a8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8126a8:	defffa04 	addi	sp,sp,-24
  8126ac:	dfc00515 	stw	ra,20(sp)
  8126b0:	df000415 	stw	fp,16(sp)
  8126b4:	df000404 	addi	fp,sp,16
  8126b8:	e13ffd15 	stw	r4,-12(fp)
  8126bc:	e17ffe15 	stw	r5,-8(fp)
  8126c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8126c4:	e0bffd17 	ldw	r2,-12(fp)
  8126c8:	10800017 	ldw	r2,0(r2)
  8126cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8126d0:	e0bffc17 	ldw	r2,-16(fp)
  8126d4:	11000a04 	addi	r4,r2,40
  8126d8:	e0bffd17 	ldw	r2,-12(fp)
  8126dc:	11c00217 	ldw	r7,8(r2)
  8126e0:	e17ffe17 	ldw	r5,-8(fp)
  8126e4:	e1bfff17 	ldw	r6,-4(fp)
  8126e8:	0812cf00 	call	812cf0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8126ec:	e037883a 	mov	sp,fp
  8126f0:	dfc00117 	ldw	ra,4(sp)
  8126f4:	df000017 	ldw	fp,0(sp)
  8126f8:	dec00204 	addi	sp,sp,8
  8126fc:	f800283a 	ret

00812700 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  812700:	defffa04 	addi	sp,sp,-24
  812704:	dfc00515 	stw	ra,20(sp)
  812708:	df000415 	stw	fp,16(sp)
  81270c:	df000404 	addi	fp,sp,16
  812710:	e13ffd15 	stw	r4,-12(fp)
  812714:	e17ffe15 	stw	r5,-8(fp)
  812718:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81271c:	e0bffd17 	ldw	r2,-12(fp)
  812720:	10800017 	ldw	r2,0(r2)
  812724:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  812728:	e0bffc17 	ldw	r2,-16(fp)
  81272c:	11000a04 	addi	r4,r2,40
  812730:	e0bffd17 	ldw	r2,-12(fp)
  812734:	11c00217 	ldw	r7,8(r2)
  812738:	e17ffe17 	ldw	r5,-8(fp)
  81273c:	e1bfff17 	ldw	r6,-4(fp)
  812740:	0812f140 	call	812f14 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  812744:	e037883a 	mov	sp,fp
  812748:	dfc00117 	ldw	ra,4(sp)
  81274c:	df000017 	ldw	fp,0(sp)
  812750:	dec00204 	addi	sp,sp,8
  812754:	f800283a 	ret

00812758 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  812758:	defffc04 	addi	sp,sp,-16
  81275c:	dfc00315 	stw	ra,12(sp)
  812760:	df000215 	stw	fp,8(sp)
  812764:	df000204 	addi	fp,sp,8
  812768:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  81276c:	e0bfff17 	ldw	r2,-4(fp)
  812770:	10800017 	ldw	r2,0(r2)
  812774:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  812778:	e0bffe17 	ldw	r2,-8(fp)
  81277c:	11000a04 	addi	r4,r2,40
  812780:	e0bfff17 	ldw	r2,-4(fp)
  812784:	11400217 	ldw	r5,8(r2)
  812788:	0812b880 	call	812b88 <altera_avalon_jtag_uart_close>
}
  81278c:	e037883a 	mov	sp,fp
  812790:	dfc00117 	ldw	ra,4(sp)
  812794:	df000017 	ldw	fp,0(sp)
  812798:	dec00204 	addi	sp,sp,8
  81279c:	f800283a 	ret

008127a0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  8127a0:	defffa04 	addi	sp,sp,-24
  8127a4:	dfc00515 	stw	ra,20(sp)
  8127a8:	df000415 	stw	fp,16(sp)
  8127ac:	df000404 	addi	fp,sp,16
  8127b0:	e13ffd15 	stw	r4,-12(fp)
  8127b4:	e17ffe15 	stw	r5,-8(fp)
  8127b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  8127bc:	e0bffd17 	ldw	r2,-12(fp)
  8127c0:	10800017 	ldw	r2,0(r2)
  8127c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  8127c8:	e0bffc17 	ldw	r2,-16(fp)
  8127cc:	11000a04 	addi	r4,r2,40
  8127d0:	e17ffe17 	ldw	r5,-8(fp)
  8127d4:	e1bfff17 	ldw	r6,-4(fp)
  8127d8:	0812bfc0 	call	812bfc <altera_avalon_jtag_uart_ioctl>
}
  8127dc:	e037883a 	mov	sp,fp
  8127e0:	dfc00117 	ldw	ra,4(sp)
  8127e4:	df000017 	ldw	fp,0(sp)
  8127e8:	dec00204 	addi	sp,sp,8
  8127ec:	f800283a 	ret

008127f0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  8127f0:	defffa04 	addi	sp,sp,-24
  8127f4:	dfc00515 	stw	ra,20(sp)
  8127f8:	df000415 	stw	fp,16(sp)
  8127fc:	df000404 	addi	fp,sp,16
  812800:	e13ffd15 	stw	r4,-12(fp)
  812804:	e17ffe15 	stw	r5,-8(fp)
  812808:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81280c:	e0fffd17 	ldw	r3,-12(fp)
  812810:	00800044 	movi	r2,1
  812814:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  812818:	e0bffd17 	ldw	r2,-12(fp)
  81281c:	10800017 	ldw	r2,0(r2)
  812820:	11000104 	addi	r4,r2,4
  812824:	e0bffd17 	ldw	r2,-12(fp)
  812828:	10800817 	ldw	r2,32(r2)
  81282c:	1007883a 	mov	r3,r2
  812830:	2005883a 	mov	r2,r4
  812834:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  812838:	e13ffe17 	ldw	r4,-8(fp)
  81283c:	e17fff17 	ldw	r5,-4(fp)
  812840:	d8000015 	stw	zero,0(sp)
  812844:	01802074 	movhi	r6,129
  812848:	318a2c04 	addi	r6,r6,10416
  81284c:	e1fffd17 	ldw	r7,-12(fp)
  812850:	08140140 	call	814014 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  812854:	e0bffd17 	ldw	r2,-12(fp)
  812858:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  81285c:	e0bffd17 	ldw	r2,-12(fp)
  812860:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  812864:	008020b4 	movhi	r2,130
  812868:	10a1d004 	addi	r2,r2,-30912
  81286c:	10800017 	ldw	r2,0(r2)
  812870:	100b883a 	mov	r5,r2
  812874:	01802074 	movhi	r6,129
  812878:	318ab604 	addi	r6,r6,10968
  81287c:	e1fffd17 	ldw	r7,-12(fp)
  812880:	081395c0 	call	81395c <alt_alarm_start>
  812884:	1004403a 	cmpge	r2,r2,zero
  812888:	1000041e 	bne	r2,zero,81289c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  81288c:	e0fffd17 	ldw	r3,-12(fp)
  812890:	00a00034 	movhi	r2,32768
  812894:	10bfffc4 	addi	r2,r2,-1
  812898:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  81289c:	e037883a 	mov	sp,fp
  8128a0:	dfc00117 	ldw	ra,4(sp)
  8128a4:	df000017 	ldw	fp,0(sp)
  8128a8:	dec00204 	addi	sp,sp,8
  8128ac:	f800283a 	ret

008128b0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  8128b0:	defff804 	addi	sp,sp,-32
  8128b4:	df000715 	stw	fp,28(sp)
  8128b8:	df000704 	addi	fp,sp,28
  8128bc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  8128c0:	e0bfff17 	ldw	r2,-4(fp)
  8128c4:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  8128c8:	e0bffe17 	ldw	r2,-8(fp)
  8128cc:	10800017 	ldw	r2,0(r2)
  8128d0:	e0bffd15 	stw	r2,-12(fp)
  8128d4:	00000006 	br	8128d8 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8128d8:	e0bffd17 	ldw	r2,-12(fp)
  8128dc:	10800104 	addi	r2,r2,4
  8128e0:	10800037 	ldwio	r2,0(r2)
  8128e4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  8128e8:	e0bffc17 	ldw	r2,-16(fp)
  8128ec:	1080c00c 	andi	r2,r2,768
  8128f0:	1005003a 	cmpeq	r2,r2,zero
  8128f4:	1000741e 	bne	r2,zero,812ac8 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  8128f8:	e0bffc17 	ldw	r2,-16(fp)
  8128fc:	1080400c 	andi	r2,r2,256
  812900:	1005003a 	cmpeq	r2,r2,zero
  812904:	1000351e 	bne	r2,zero,8129dc <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  812908:	00800074 	movhi	r2,1
  81290c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  812910:	e0bffe17 	ldw	r2,-8(fp)
  812914:	10800a17 	ldw	r2,40(r2)
  812918:	10800044 	addi	r2,r2,1
  81291c:	1081ffcc 	andi	r2,r2,2047
  812920:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  812924:	e0bffe17 	ldw	r2,-8(fp)
  812928:	10c00b17 	ldw	r3,44(r2)
  81292c:	e0bffa17 	ldw	r2,-24(fp)
  812930:	18801626 	beq	r3,r2,81298c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  812934:	e0bffd17 	ldw	r2,-12(fp)
  812938:	10800037 	ldwio	r2,0(r2)
  81293c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  812940:	e0bffb17 	ldw	r2,-20(fp)
  812944:	10a0000c 	andi	r2,r2,32768
  812948:	1005003a 	cmpeq	r2,r2,zero
  81294c:	10000f1e 	bne	r2,zero,81298c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  812950:	e0bffe17 	ldw	r2,-8(fp)
  812954:	10c00a17 	ldw	r3,40(r2)
  812958:	e0bffb17 	ldw	r2,-20(fp)
  81295c:	1009883a 	mov	r4,r2
  812960:	e0bffe17 	ldw	r2,-8(fp)
  812964:	1885883a 	add	r2,r3,r2
  812968:	10800e04 	addi	r2,r2,56
  81296c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  812970:	e0bffe17 	ldw	r2,-8(fp)
  812974:	10800a17 	ldw	r2,40(r2)
  812978:	10800044 	addi	r2,r2,1
  81297c:	10c1ffcc 	andi	r3,r2,2047
  812980:	e0bffe17 	ldw	r2,-8(fp)
  812984:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  812988:	003fe106 	br	812910 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  81298c:	e0bffb17 	ldw	r2,-20(fp)
  812990:	10bfffec 	andhi	r2,r2,65535
  812994:	1005003a 	cmpeq	r2,r2,zero
  812998:	1000101e 	bne	r2,zero,8129dc <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81299c:	e0bffe17 	ldw	r2,-8(fp)
  8129a0:	10c00817 	ldw	r3,32(r2)
  8129a4:	00bfff84 	movi	r2,-2
  8129a8:	1886703a 	and	r3,r3,r2
  8129ac:	e0bffe17 	ldw	r2,-8(fp)
  8129b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  8129b4:	e0bffd17 	ldw	r2,-12(fp)
  8129b8:	11000104 	addi	r4,r2,4
  8129bc:	e0bffe17 	ldw	r2,-8(fp)
  8129c0:	10800817 	ldw	r2,32(r2)
  8129c4:	1007883a 	mov	r3,r2
  8129c8:	2005883a 	mov	r2,r4
  8129cc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8129d0:	e0bffd17 	ldw	r2,-12(fp)
  8129d4:	10800104 	addi	r2,r2,4
  8129d8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  8129dc:	e0bffc17 	ldw	r2,-16(fp)
  8129e0:	1080800c 	andi	r2,r2,512
  8129e4:	1005003a 	cmpeq	r2,r2,zero
  8129e8:	103fbb1e 	bne	r2,zero,8128d8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  8129ec:	e0bffc17 	ldw	r2,-16(fp)
  8129f0:	10bfffec 	andhi	r2,r2,65535
  8129f4:	1004d43a 	srli	r2,r2,16
  8129f8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  8129fc:	00001506 	br	812a54 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  812a00:	e13ffd17 	ldw	r4,-12(fp)
  812a04:	e0bffe17 	ldw	r2,-8(fp)
  812a08:	10c00d17 	ldw	r3,52(r2)
  812a0c:	e0bffe17 	ldw	r2,-8(fp)
  812a10:	1885883a 	add	r2,r3,r2
  812a14:	10820e04 	addi	r2,r2,2104
  812a18:	10800003 	ldbu	r2,0(r2)
  812a1c:	10c03fcc 	andi	r3,r2,255
  812a20:	18c0201c 	xori	r3,r3,128
  812a24:	18ffe004 	addi	r3,r3,-128
  812a28:	2005883a 	mov	r2,r4
  812a2c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  812a30:	e0bffe17 	ldw	r2,-8(fp)
  812a34:	10800d17 	ldw	r2,52(r2)
  812a38:	10800044 	addi	r2,r2,1
  812a3c:	10c1ffcc 	andi	r3,r2,2047
  812a40:	e0bffe17 	ldw	r2,-8(fp)
  812a44:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  812a48:	e0bff917 	ldw	r2,-28(fp)
  812a4c:	10bfffc4 	addi	r2,r2,-1
  812a50:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  812a54:	e0bff917 	ldw	r2,-28(fp)
  812a58:	1005003a 	cmpeq	r2,r2,zero
  812a5c:	1000051e 	bne	r2,zero,812a74 <altera_avalon_jtag_uart_irq+0x1c4>
  812a60:	e0bffe17 	ldw	r2,-8(fp)
  812a64:	10c00d17 	ldw	r3,52(r2)
  812a68:	e0bffe17 	ldw	r2,-8(fp)
  812a6c:	10800c17 	ldw	r2,48(r2)
  812a70:	18bfe31e 	bne	r3,r2,812a00 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  812a74:	e0bff917 	ldw	r2,-28(fp)
  812a78:	1005003a 	cmpeq	r2,r2,zero
  812a7c:	103f961e 	bne	r2,zero,8128d8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  812a80:	e0bffe17 	ldw	r2,-8(fp)
  812a84:	10c00817 	ldw	r3,32(r2)
  812a88:	00bfff44 	movi	r2,-3
  812a8c:	1886703a 	and	r3,r3,r2
  812a90:	e0bffe17 	ldw	r2,-8(fp)
  812a94:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  812a98:	e0bffe17 	ldw	r2,-8(fp)
  812a9c:	10800017 	ldw	r2,0(r2)
  812aa0:	11000104 	addi	r4,r2,4
  812aa4:	e0bffe17 	ldw	r2,-8(fp)
  812aa8:	10800817 	ldw	r2,32(r2)
  812aac:	1007883a 	mov	r3,r2
  812ab0:	2005883a 	mov	r2,r4
  812ab4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  812ab8:	e0bffd17 	ldw	r2,-12(fp)
  812abc:	10800104 	addi	r2,r2,4
  812ac0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  812ac4:	003f8406 	br	8128d8 <altera_avalon_jtag_uart_irq+0x28>
}
  812ac8:	e037883a 	mov	sp,fp
  812acc:	df000017 	ldw	fp,0(sp)
  812ad0:	dec00104 	addi	sp,sp,4
  812ad4:	f800283a 	ret

00812ad8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  812ad8:	defffc04 	addi	sp,sp,-16
  812adc:	df000315 	stw	fp,12(sp)
  812ae0:	df000304 	addi	fp,sp,12
  812ae4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  812ae8:	e0bfff17 	ldw	r2,-4(fp)
  812aec:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  812af0:	e0bffe17 	ldw	r2,-8(fp)
  812af4:	10800017 	ldw	r2,0(r2)
  812af8:	10800104 	addi	r2,r2,4
  812afc:	10800037 	ldwio	r2,0(r2)
  812b00:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  812b04:	e0bffd17 	ldw	r2,-12(fp)
  812b08:	1081000c 	andi	r2,r2,1024
  812b0c:	1005003a 	cmpeq	r2,r2,zero
  812b10:	10000c1e 	bne	r2,zero,812b44 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  812b14:	e0bffe17 	ldw	r2,-8(fp)
  812b18:	10800017 	ldw	r2,0(r2)
  812b1c:	11000104 	addi	r4,r2,4
  812b20:	e0bffe17 	ldw	r2,-8(fp)
  812b24:	10800817 	ldw	r2,32(r2)
  812b28:	10810014 	ori	r2,r2,1024
  812b2c:	1007883a 	mov	r3,r2
  812b30:	2005883a 	mov	r2,r4
  812b34:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  812b38:	e0bffe17 	ldw	r2,-8(fp)
  812b3c:	10000915 	stw	zero,36(r2)
  812b40:	00000a06 	br	812b6c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  812b44:	e0bffe17 	ldw	r2,-8(fp)
  812b48:	10c00917 	ldw	r3,36(r2)
  812b4c:	00a00034 	movhi	r2,32768
  812b50:	10bfff04 	addi	r2,r2,-4
  812b54:	10c00536 	bltu	r2,r3,812b6c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  812b58:	e0bffe17 	ldw	r2,-8(fp)
  812b5c:	10800917 	ldw	r2,36(r2)
  812b60:	10c00044 	addi	r3,r2,1
  812b64:	e0bffe17 	ldw	r2,-8(fp)
  812b68:	10c00915 	stw	r3,36(r2)
  812b6c:	008020b4 	movhi	r2,130
  812b70:	10a1d004 	addi	r2,r2,-30912
  812b74:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  812b78:	e037883a 	mov	sp,fp
  812b7c:	df000017 	ldw	fp,0(sp)
  812b80:	dec00104 	addi	sp,sp,4
  812b84:	f800283a 	ret

00812b88 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  812b88:	defffc04 	addi	sp,sp,-16
  812b8c:	df000315 	stw	fp,12(sp)
  812b90:	df000304 	addi	fp,sp,12
  812b94:	e13ffd15 	stw	r4,-12(fp)
  812b98:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  812b9c:	00000706 	br	812bbc <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  812ba0:	e0bffe17 	ldw	r2,-8(fp)
  812ba4:	1090000c 	andi	r2,r2,16384
  812ba8:	1005003a 	cmpeq	r2,r2,zero
  812bac:	1000031e 	bne	r2,zero,812bbc <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  812bb0:	00bffd44 	movi	r2,-11
  812bb4:	e0bfff15 	stw	r2,-4(fp)
  812bb8:	00000b06 	br	812be8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  812bbc:	e0bffd17 	ldw	r2,-12(fp)
  812bc0:	10c00d17 	ldw	r3,52(r2)
  812bc4:	e0bffd17 	ldw	r2,-12(fp)
  812bc8:	10800c17 	ldw	r2,48(r2)
  812bcc:	18800526 	beq	r3,r2,812be4 <altera_avalon_jtag_uart_close+0x5c>
  812bd0:	e0bffd17 	ldw	r2,-12(fp)
  812bd4:	10c00917 	ldw	r3,36(r2)
  812bd8:	e0bffd17 	ldw	r2,-12(fp)
  812bdc:	10800117 	ldw	r2,4(r2)
  812be0:	18bfef36 	bltu	r3,r2,812ba0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  812be4:	e03fff15 	stw	zero,-4(fp)
  812be8:	e0bfff17 	ldw	r2,-4(fp)
}
  812bec:	e037883a 	mov	sp,fp
  812bf0:	df000017 	ldw	fp,0(sp)
  812bf4:	dec00104 	addi	sp,sp,4
  812bf8:	f800283a 	ret

00812bfc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  812bfc:	defff804 	addi	sp,sp,-32
  812c00:	df000715 	stw	fp,28(sp)
  812c04:	df000704 	addi	fp,sp,28
  812c08:	e13ffb15 	stw	r4,-20(fp)
  812c0c:	e17ffc15 	stw	r5,-16(fp)
  812c10:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  812c14:	00bff9c4 	movi	r2,-25
  812c18:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  812c1c:	e0bffc17 	ldw	r2,-16(fp)
  812c20:	e0bfff15 	stw	r2,-4(fp)
  812c24:	e0ffff17 	ldw	r3,-4(fp)
  812c28:	189a8060 	cmpeqi	r2,r3,27137
  812c2c:	1000041e 	bne	r2,zero,812c40 <altera_avalon_jtag_uart_ioctl+0x44>
  812c30:	e0ffff17 	ldw	r3,-4(fp)
  812c34:	189a80a0 	cmpeqi	r2,r3,27138
  812c38:	10001b1e 	bne	r2,zero,812ca8 <altera_avalon_jtag_uart_ioctl+0xac>
  812c3c:	00002706 	br	812cdc <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  812c40:	e0bffb17 	ldw	r2,-20(fp)
  812c44:	10c00117 	ldw	r3,4(r2)
  812c48:	00a00034 	movhi	r2,32768
  812c4c:	10bfffc4 	addi	r2,r2,-1
  812c50:	18802226 	beq	r3,r2,812cdc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  812c54:	e0bffd17 	ldw	r2,-12(fp)
  812c58:	10800017 	ldw	r2,0(r2)
  812c5c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  812c60:	e0bff917 	ldw	r2,-28(fp)
  812c64:	10800090 	cmplti	r2,r2,2
  812c68:	1000071e 	bne	r2,zero,812c88 <altera_avalon_jtag_uart_ioctl+0x8c>
  812c6c:	e0fff917 	ldw	r3,-28(fp)
  812c70:	00a00034 	movhi	r2,32768
  812c74:	10bfffc4 	addi	r2,r2,-1
  812c78:	18800326 	beq	r3,r2,812c88 <altera_avalon_jtag_uart_ioctl+0x8c>
  812c7c:	e0bff917 	ldw	r2,-28(fp)
  812c80:	e0bffe15 	stw	r2,-8(fp)
  812c84:	00000306 	br	812c94 <altera_avalon_jtag_uart_ioctl+0x98>
  812c88:	00e00034 	movhi	r3,32768
  812c8c:	18ffff84 	addi	r3,r3,-2
  812c90:	e0fffe15 	stw	r3,-8(fp)
  812c94:	e0bffb17 	ldw	r2,-20(fp)
  812c98:	e0fffe17 	ldw	r3,-8(fp)
  812c9c:	10c00115 	stw	r3,4(r2)
      rc = 0;
  812ca0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  812ca4:	00000d06 	br	812cdc <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  812ca8:	e0bffb17 	ldw	r2,-20(fp)
  812cac:	10c00117 	ldw	r3,4(r2)
  812cb0:	00a00034 	movhi	r2,32768
  812cb4:	10bfffc4 	addi	r2,r2,-1
  812cb8:	18800826 	beq	r3,r2,812cdc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  812cbc:	e13ffd17 	ldw	r4,-12(fp)
  812cc0:	e0bffb17 	ldw	r2,-20(fp)
  812cc4:	10c00917 	ldw	r3,36(r2)
  812cc8:	e0bffb17 	ldw	r2,-20(fp)
  812ccc:	10800117 	ldw	r2,4(r2)
  812cd0:	1885803a 	cmpltu	r2,r3,r2
  812cd4:	20800015 	stw	r2,0(r4)
      rc = 0;
  812cd8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  812cdc:	e0bffa17 	ldw	r2,-24(fp)
}
  812ce0:	e037883a 	mov	sp,fp
  812ce4:	df000017 	ldw	fp,0(sp)
  812ce8:	dec00104 	addi	sp,sp,4
  812cec:	f800283a 	ret

00812cf0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  812cf0:	defff204 	addi	sp,sp,-56
  812cf4:	dfc00d15 	stw	ra,52(sp)
  812cf8:	df000c15 	stw	fp,48(sp)
  812cfc:	df000c04 	addi	fp,sp,48
  812d00:	e13ffb15 	stw	r4,-20(fp)
  812d04:	e17ffc15 	stw	r5,-16(fp)
  812d08:	e1bffd15 	stw	r6,-12(fp)
  812d0c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  812d10:	e0bffc17 	ldw	r2,-16(fp)
  812d14:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  812d18:	00004806 	br	812e3c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  812d1c:	e0bffb17 	ldw	r2,-20(fp)
  812d20:	10800a17 	ldw	r2,40(r2)
  812d24:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  812d28:	e0bffb17 	ldw	r2,-20(fp)
  812d2c:	10800b17 	ldw	r2,44(r2)
  812d30:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  812d34:	e0fff717 	ldw	r3,-36(fp)
  812d38:	e0bff617 	ldw	r2,-40(fp)
  812d3c:	18800536 	bltu	r3,r2,812d54 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  812d40:	e0bff717 	ldw	r2,-36(fp)
  812d44:	e0fff617 	ldw	r3,-40(fp)
  812d48:	10c5c83a 	sub	r2,r2,r3
  812d4c:	e0bff815 	stw	r2,-32(fp)
  812d50:	00000406 	br	812d64 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  812d54:	00820004 	movi	r2,2048
  812d58:	e0fff617 	ldw	r3,-40(fp)
  812d5c:	10c5c83a 	sub	r2,r2,r3
  812d60:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  812d64:	e0bff817 	ldw	r2,-32(fp)
  812d68:	1005003a 	cmpeq	r2,r2,zero
  812d6c:	10001f1e 	bne	r2,zero,812dec <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  812d70:	e0fffd17 	ldw	r3,-12(fp)
  812d74:	e0bff817 	ldw	r2,-32(fp)
  812d78:	1880022e 	bgeu	r3,r2,812d84 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  812d7c:	e0bffd17 	ldw	r2,-12(fp)
  812d80:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  812d84:	e0bffb17 	ldw	r2,-20(fp)
  812d88:	10c00e04 	addi	r3,r2,56
  812d8c:	e0bff617 	ldw	r2,-40(fp)
  812d90:	1887883a 	add	r3,r3,r2
  812d94:	e0bffa17 	ldw	r2,-24(fp)
  812d98:	1009883a 	mov	r4,r2
  812d9c:	180b883a 	mov	r5,r3
  812da0:	e1bff817 	ldw	r6,-32(fp)
  812da4:	08044e00 	call	8044e0 <memcpy>
      ptr   += n;
  812da8:	e0fff817 	ldw	r3,-32(fp)
  812dac:	e0bffa17 	ldw	r2,-24(fp)
  812db0:	10c5883a 	add	r2,r2,r3
  812db4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  812db8:	e0fffd17 	ldw	r3,-12(fp)
  812dbc:	e0bff817 	ldw	r2,-32(fp)
  812dc0:	1885c83a 	sub	r2,r3,r2
  812dc4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  812dc8:	e0fff617 	ldw	r3,-40(fp)
  812dcc:	e0bff817 	ldw	r2,-32(fp)
  812dd0:	1885883a 	add	r2,r3,r2
  812dd4:	10c1ffcc 	andi	r3,r2,2047
  812dd8:	e0bffb17 	ldw	r2,-20(fp)
  812ddc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  812de0:	e0bffd17 	ldw	r2,-12(fp)
  812de4:	10800048 	cmpgei	r2,r2,1
  812de8:	103fcc1e 	bne	r2,zero,812d1c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  812dec:	e0fffa17 	ldw	r3,-24(fp)
  812df0:	e0bffc17 	ldw	r2,-16(fp)
  812df4:	1880141e 	bne	r3,r2,812e48 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  812df8:	e0bffe17 	ldw	r2,-8(fp)
  812dfc:	1090000c 	andi	r2,r2,16384
  812e00:	1004c03a 	cmpne	r2,r2,zero
  812e04:	1000101e 	bne	r2,zero,812e48 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  812e08:	e0bffb17 	ldw	r2,-20(fp)
  812e0c:	10c00a17 	ldw	r3,40(r2)
  812e10:	e0bff717 	ldw	r2,-36(fp)
  812e14:	1880051e 	bne	r3,r2,812e2c <altera_avalon_jtag_uart_read+0x13c>
  812e18:	e0bffb17 	ldw	r2,-20(fp)
  812e1c:	10c00917 	ldw	r3,36(r2)
  812e20:	e0bffb17 	ldw	r2,-20(fp)
  812e24:	10800117 	ldw	r2,4(r2)
  812e28:	18bff736 	bltu	r3,r2,812e08 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  812e2c:	e0bffb17 	ldw	r2,-20(fp)
  812e30:	10c00a17 	ldw	r3,40(r2)
  812e34:	e0bff717 	ldw	r2,-36(fp)
  812e38:	18800326 	beq	r3,r2,812e48 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  812e3c:	e0bffd17 	ldw	r2,-12(fp)
  812e40:	10800048 	cmpgei	r2,r2,1
  812e44:	103fb51e 	bne	r2,zero,812d1c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  812e48:	e0fffa17 	ldw	r3,-24(fp)
  812e4c:	e0bffc17 	ldw	r2,-16(fp)
  812e50:	18801926 	beq	r3,r2,812eb8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812e54:	0005303a 	rdctl	r2,status
  812e58:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812e5c:	e0fff517 	ldw	r3,-44(fp)
  812e60:	00bfff84 	movi	r2,-2
  812e64:	1884703a 	and	r2,r3,r2
  812e68:	1001703a 	wrctl	status,r2
  
  return context;
  812e6c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  812e70:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  812e74:	e0bffb17 	ldw	r2,-20(fp)
  812e78:	10800817 	ldw	r2,32(r2)
  812e7c:	10c00054 	ori	r3,r2,1
  812e80:	e0bffb17 	ldw	r2,-20(fp)
  812e84:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  812e88:	e0bffb17 	ldw	r2,-20(fp)
  812e8c:	10800017 	ldw	r2,0(r2)
  812e90:	11000104 	addi	r4,r2,4
  812e94:	e0bffb17 	ldw	r2,-20(fp)
  812e98:	10800817 	ldw	r2,32(r2)
  812e9c:	1007883a 	mov	r3,r2
  812ea0:	2005883a 	mov	r2,r4
  812ea4:	10c00035 	stwio	r3,0(r2)
  812ea8:	e0bff917 	ldw	r2,-28(fp)
  812eac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812eb0:	e0bff417 	ldw	r2,-48(fp)
  812eb4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  812eb8:	e0fffa17 	ldw	r3,-24(fp)
  812ebc:	e0bffc17 	ldw	r2,-16(fp)
  812ec0:	18800526 	beq	r3,r2,812ed8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  812ec4:	e0fffa17 	ldw	r3,-24(fp)
  812ec8:	e0bffc17 	ldw	r2,-16(fp)
  812ecc:	1887c83a 	sub	r3,r3,r2
  812ed0:	e0ffff15 	stw	r3,-4(fp)
  812ed4:	00000906 	br	812efc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  812ed8:	e0bffe17 	ldw	r2,-8(fp)
  812edc:	1090000c 	andi	r2,r2,16384
  812ee0:	1005003a 	cmpeq	r2,r2,zero
  812ee4:	1000031e 	bne	r2,zero,812ef4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  812ee8:	00bffd44 	movi	r2,-11
  812eec:	e0bfff15 	stw	r2,-4(fp)
  812ef0:	00000206 	br	812efc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  812ef4:	00bffec4 	movi	r2,-5
  812ef8:	e0bfff15 	stw	r2,-4(fp)
  812efc:	e0bfff17 	ldw	r2,-4(fp)
}
  812f00:	e037883a 	mov	sp,fp
  812f04:	dfc00117 	ldw	ra,4(sp)
  812f08:	df000017 	ldw	fp,0(sp)
  812f0c:	dec00204 	addi	sp,sp,8
  812f10:	f800283a 	ret

00812f14 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  812f14:	defff204 	addi	sp,sp,-56
  812f18:	dfc00d15 	stw	ra,52(sp)
  812f1c:	df000c15 	stw	fp,48(sp)
  812f20:	df000c04 	addi	fp,sp,48
  812f24:	e13ffb15 	stw	r4,-20(fp)
  812f28:	e17ffc15 	stw	r5,-16(fp)
  812f2c:	e1bffd15 	stw	r6,-12(fp)
  812f30:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  812f34:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  812f38:	e0bffc17 	ldw	r2,-16(fp)
  812f3c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  812f40:	00003a06 	br	81302c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  812f44:	e0bffb17 	ldw	r2,-20(fp)
  812f48:	10800c17 	ldw	r2,48(r2)
  812f4c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  812f50:	e0bffb17 	ldw	r2,-20(fp)
  812f54:	10800d17 	ldw	r2,52(r2)
  812f58:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  812f5c:	e0fffa17 	ldw	r3,-24(fp)
  812f60:	e0bff917 	ldw	r2,-28(fp)
  812f64:	1880062e 	bgeu	r3,r2,812f80 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  812f68:	e0fff917 	ldw	r3,-28(fp)
  812f6c:	e0bffa17 	ldw	r2,-24(fp)
  812f70:	1885c83a 	sub	r2,r3,r2
  812f74:	10bfffc4 	addi	r2,r2,-1
  812f78:	e0bff815 	stw	r2,-32(fp)
  812f7c:	00000c06 	br	812fb0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  812f80:	e0bff917 	ldw	r2,-28(fp)
  812f84:	1005003a 	cmpeq	r2,r2,zero
  812f88:	1000051e 	bne	r2,zero,812fa0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  812f8c:	00820004 	movi	r2,2048
  812f90:	e0fffa17 	ldw	r3,-24(fp)
  812f94:	10c5c83a 	sub	r2,r2,r3
  812f98:	e0bff815 	stw	r2,-32(fp)
  812f9c:	00000406 	br	812fb0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  812fa0:	0081ffc4 	movi	r2,2047
  812fa4:	e0fffa17 	ldw	r3,-24(fp)
  812fa8:	10c5c83a 	sub	r2,r2,r3
  812fac:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  812fb0:	e0bff817 	ldw	r2,-32(fp)
  812fb4:	1005003a 	cmpeq	r2,r2,zero
  812fb8:	10001f1e 	bne	r2,zero,813038 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  812fbc:	e0fffd17 	ldw	r3,-12(fp)
  812fc0:	e0bff817 	ldw	r2,-32(fp)
  812fc4:	1880022e 	bgeu	r3,r2,812fd0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  812fc8:	e0bffd17 	ldw	r2,-12(fp)
  812fcc:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  812fd0:	e0bffb17 	ldw	r2,-20(fp)
  812fd4:	10c20e04 	addi	r3,r2,2104
  812fd8:	e0bffa17 	ldw	r2,-24(fp)
  812fdc:	1885883a 	add	r2,r3,r2
  812fe0:	e0fffc17 	ldw	r3,-16(fp)
  812fe4:	1009883a 	mov	r4,r2
  812fe8:	180b883a 	mov	r5,r3
  812fec:	e1bff817 	ldw	r6,-32(fp)
  812ff0:	08044e00 	call	8044e0 <memcpy>
      ptr   += n;
  812ff4:	e0fff817 	ldw	r3,-32(fp)
  812ff8:	e0bffc17 	ldw	r2,-16(fp)
  812ffc:	10c5883a 	add	r2,r2,r3
  813000:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  813004:	e0fffd17 	ldw	r3,-12(fp)
  813008:	e0bff817 	ldw	r2,-32(fp)
  81300c:	1885c83a 	sub	r2,r3,r2
  813010:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813014:	e0fffa17 	ldw	r3,-24(fp)
  813018:	e0bff817 	ldw	r2,-32(fp)
  81301c:	1885883a 	add	r2,r3,r2
  813020:	10c1ffcc 	andi	r3,r2,2047
  813024:	e0bffb17 	ldw	r2,-20(fp)
  813028:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  81302c:	e0bffd17 	ldw	r2,-12(fp)
  813030:	10800048 	cmpgei	r2,r2,1
  813034:	103fc31e 	bne	r2,zero,812f44 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813038:	0005303a 	rdctl	r2,status
  81303c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813040:	e0fff517 	ldw	r3,-44(fp)
  813044:	00bfff84 	movi	r2,-2
  813048:	1884703a 	and	r2,r3,r2
  81304c:	1001703a 	wrctl	status,r2
  
  return context;
  813050:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  813054:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  813058:	e0bffb17 	ldw	r2,-20(fp)
  81305c:	10800817 	ldw	r2,32(r2)
  813060:	10c00094 	ori	r3,r2,2
  813064:	e0bffb17 	ldw	r2,-20(fp)
  813068:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81306c:	e0bffb17 	ldw	r2,-20(fp)
  813070:	10800017 	ldw	r2,0(r2)
  813074:	11000104 	addi	r4,r2,4
  813078:	e0bffb17 	ldw	r2,-20(fp)
  81307c:	10800817 	ldw	r2,32(r2)
  813080:	1007883a 	mov	r3,r2
  813084:	2005883a 	mov	r2,r4
  813088:	10c00035 	stwio	r3,0(r2)
  81308c:	e0bff717 	ldw	r2,-36(fp)
  813090:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813094:	e0bff417 	ldw	r2,-48(fp)
  813098:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  81309c:	e0bffd17 	ldw	r2,-12(fp)
  8130a0:	10800050 	cmplti	r2,r2,1
  8130a4:	1000111e 	bne	r2,zero,8130ec <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  8130a8:	e0bffe17 	ldw	r2,-8(fp)
  8130ac:	1090000c 	andi	r2,r2,16384
  8130b0:	1004c03a 	cmpne	r2,r2,zero
  8130b4:	1000101e 	bne	r2,zero,8130f8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8130b8:	e0bffb17 	ldw	r2,-20(fp)
  8130bc:	10c00d17 	ldw	r3,52(r2)
  8130c0:	e0bff917 	ldw	r2,-28(fp)
  8130c4:	1880051e 	bne	r3,r2,8130dc <altera_avalon_jtag_uart_write+0x1c8>
  8130c8:	e0bffb17 	ldw	r2,-20(fp)
  8130cc:	10c00917 	ldw	r3,36(r2)
  8130d0:	e0bffb17 	ldw	r2,-20(fp)
  8130d4:	10800117 	ldw	r2,4(r2)
  8130d8:	18bff736 	bltu	r3,r2,8130b8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  8130dc:	e0bffb17 	ldw	r2,-20(fp)
  8130e0:	10c00d17 	ldw	r3,52(r2)
  8130e4:	e0bff917 	ldw	r2,-28(fp)
  8130e8:	18800326 	beq	r3,r2,8130f8 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
  8130ec:	e0bffd17 	ldw	r2,-12(fp)
  8130f0:	10800048 	cmpgei	r2,r2,1
  8130f4:	103fcd1e 	bne	r2,zero,81302c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8130f8:	e0fffc17 	ldw	r3,-16(fp)
  8130fc:	e0bff617 	ldw	r2,-40(fp)
  813100:	18800526 	beq	r3,r2,813118 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  813104:	e0fffc17 	ldw	r3,-16(fp)
  813108:	e0bff617 	ldw	r2,-40(fp)
  81310c:	1887c83a 	sub	r3,r3,r2
  813110:	e0ffff15 	stw	r3,-4(fp)
  813114:	00000906 	br	81313c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  813118:	e0bffe17 	ldw	r2,-8(fp)
  81311c:	1090000c 	andi	r2,r2,16384
  813120:	1005003a 	cmpeq	r2,r2,zero
  813124:	1000031e 	bne	r2,zero,813134 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  813128:	00bffd44 	movi	r2,-11
  81312c:	e0bfff15 	stw	r2,-4(fp)
  813130:	00000206 	br	81313c <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
  813134:	00bffec4 	movi	r2,-5
  813138:	e0bfff15 	stw	r2,-4(fp)
  81313c:	e0bfff17 	ldw	r2,-4(fp)
}
  813140:	e037883a 	mov	sp,fp
  813144:	dfc00117 	ldw	ra,4(sp)
  813148:	df000017 	ldw	fp,0(sp)
  81314c:	dec00204 	addi	sp,sp,8
  813150:	f800283a 	ret

00813154 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  813154:	defffa04 	addi	sp,sp,-24
  813158:	dfc00515 	stw	ra,20(sp)
  81315c:	df000415 	stw	fp,16(sp)
  813160:	df000404 	addi	fp,sp,16
  813164:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  813168:	e0bfff17 	ldw	r2,-4(fp)
  81316c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  813170:	e0bfff17 	ldw	r2,-4(fp)
  813174:	10800104 	addi	r2,r2,4
  813178:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81317c:	0005303a 	rdctl	r2,status
  813180:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813184:	e0fffd17 	ldw	r3,-12(fp)
  813188:	00bfff84 	movi	r2,-2
  81318c:	1884703a 	and	r2,r3,r2
  813190:	1001703a 	wrctl	status,r2
  
  return context;
  813194:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  813198:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  81319c:	08144c80 	call	8144c8 <alt_tick>
  8131a0:	e0bffe17 	ldw	r2,-8(fp)
  8131a4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8131a8:	e0bffc17 	ldw	r2,-16(fp)
  8131ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8131b0:	e037883a 	mov	sp,fp
  8131b4:	dfc00117 	ldw	ra,4(sp)
  8131b8:	df000017 	ldw	fp,0(sp)
  8131bc:	dec00204 	addi	sp,sp,8
  8131c0:	f800283a 	ret

008131c4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  8131c4:	defff804 	addi	sp,sp,-32
  8131c8:	dfc00715 	stw	ra,28(sp)
  8131cc:	df000615 	stw	fp,24(sp)
  8131d0:	df000604 	addi	fp,sp,24
  8131d4:	e13ffc15 	stw	r4,-16(fp)
  8131d8:	e17ffd15 	stw	r5,-12(fp)
  8131dc:	e1bffe15 	stw	r6,-8(fp)
  8131e0:	e1ffff15 	stw	r7,-4(fp)
  8131e4:	e0bfff17 	ldw	r2,-4(fp)
  8131e8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8131ec:	008020b4 	movhi	r2,130
  8131f0:	10a1d004 	addi	r2,r2,-30912
  8131f4:	10800017 	ldw	r2,0(r2)
  8131f8:	1004c03a 	cmpne	r2,r2,zero
  8131fc:	1000041e 	bne	r2,zero,813210 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  813200:	00c020b4 	movhi	r3,130
  813204:	18e1d004 	addi	r3,r3,-30912
  813208:	e0bffb17 	ldw	r2,-20(fp)
  81320c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  813210:	e0bffc17 	ldw	r2,-16(fp)
  813214:	10800104 	addi	r2,r2,4
  813218:	1007883a 	mov	r3,r2
  81321c:	008001c4 	movi	r2,7
  813220:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  813224:	d8000015 	stw	zero,0(sp)
  813228:	e13ffd17 	ldw	r4,-12(fp)
  81322c:	e17ffe17 	ldw	r5,-8(fp)
  813230:	01802074 	movhi	r6,129
  813234:	318c5504 	addi	r6,r6,12628
  813238:	e1fffc17 	ldw	r7,-16(fp)
  81323c:	08140140 	call	814014 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  813240:	e037883a 	mov	sp,fp
  813244:	dfc00117 	ldw	ra,4(sp)
  813248:	df000017 	ldw	fp,0(sp)
  81324c:	dec00204 	addi	sp,sp,8
  813250:	f800283a 	ret

00813254 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  813254:	defffd04 	addi	sp,sp,-12
  813258:	df000215 	stw	fp,8(sp)
  81325c:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
  813260:	008020b4 	movhi	r2,130
  813264:	10a1cd04 	addi	r2,r2,-30924
  813268:	10800017 	ldw	r2,0(r2)
  81326c:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
  813270:	008020b4 	movhi	r2,130
  813274:	10a1ce04 	addi	r2,r2,-30920
  813278:	10800017 	ldw	r2,0(r2)
  81327c:	1004c03a 	cmpne	r2,r2,zero
  813280:	1000031e 	bne	r2,zero,813290 <alt_timestamp_start+0x3c>
  {
    return -1;
  813284:	00bfffc4 	movi	r2,-1
  813288:	e0bfff15 	stw	r2,-4(fp)
  81328c:	00001506 	br	8132e4 <alt_timestamp_start+0x90>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
  813290:	e0bffe17 	ldw	r2,-8(fp)
  813294:	10800104 	addi	r2,r2,4
  813298:	1007883a 	mov	r3,r2
  81329c:	00800204 	movi	r2,8
  8132a0:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
  8132a4:	e0bffe17 	ldw	r2,-8(fp)
  8132a8:	10800204 	addi	r2,r2,8
  8132ac:	1007883a 	mov	r3,r2
  8132b0:	00bfffd4 	movui	r2,65535
  8132b4:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
  8132b8:	e0bffe17 	ldw	r2,-8(fp)
  8132bc:	10800304 	addi	r2,r2,12
  8132c0:	1007883a 	mov	r3,r2
  8132c4:	00bfffd4 	movui	r2,65535
  8132c8:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
  8132cc:	e0bffe17 	ldw	r2,-8(fp)
  8132d0:	10800104 	addi	r2,r2,4
  8132d4:	1007883a 	mov	r3,r2
  8132d8:	00800104 	movi	r2,4
  8132dc:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
  8132e0:	e03fff15 	stw	zero,-4(fp)
  8132e4:	e0bfff17 	ldw	r2,-4(fp)
}
  8132e8:	e037883a 	mov	sp,fp
  8132ec:	df000017 	ldw	fp,0(sp)
  8132f0:	dec00104 	addi	sp,sp,4
  8132f4:	f800283a 	ret

008132f8 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
  8132f8:	defffb04 	addi	sp,sp,-20
  8132fc:	df000415 	stw	fp,16(sp)
  813300:	df000404 	addi	fp,sp,16

  void* base = altera_avalon_timer_ts_base;
  813304:	008020b4 	movhi	r2,130
  813308:	10a1cd04 	addi	r2,r2,-30924
  81330c:	10800017 	ldw	r2,0(r2)
  813310:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
  813314:	008020b4 	movhi	r2,130
  813318:	10a1ce04 	addi	r2,r2,-30920
  81331c:	10800017 	ldw	r2,0(r2)
  813320:	1004c03a 	cmpne	r2,r2,zero
  813324:	1000031e 	bne	r2,zero,813334 <alt_timestamp+0x3c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
  813328:	00bfffc4 	movi	r2,-1
  81332c:	e0bfff15 	stw	r2,-4(fp)
  813330:	00001306 	br	813380 <alt_timestamp+0x88>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
  813334:	e0bffe17 	ldw	r2,-8(fp)
  813338:	10800404 	addi	r2,r2,16
  81333c:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
  813340:	e0bffe17 	ldw	r2,-8(fp)
  813344:	10800404 	addi	r2,r2,16
  813348:	10800037 	ldwio	r2,0(r2)
  81334c:	10bfffcc 	andi	r2,r2,65535
  813350:	e0bffd15 	stw	r2,-12(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
  813354:	e0bffe17 	ldw	r2,-8(fp)
  813358:	10800504 	addi	r2,r2,20
  81335c:	10800037 	ldwio	r2,0(r2)
  813360:	10bfffcc 	andi	r2,r2,65535
  813364:	e0bffc15 	stw	r2,-16(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
  813368:	e0bffc17 	ldw	r2,-16(fp)
  81336c:	1006943a 	slli	r3,r2,16
  813370:	e0bffd17 	ldw	r2,-12(fp)
  813374:	1884b03a 	or	r2,r3,r2
  813378:	0084303a 	nor	r2,zero,r2
  81337c:	e0bfff15 	stw	r2,-4(fp)
  813380:	e0bfff17 	ldw	r2,-4(fp)
    }  
  }
}
  813384:	e037883a 	mov	sp,fp
  813388:	df000017 	ldw	fp,0(sp)
  81338c:	dec00104 	addi	sp,sp,4
  813390:	f800283a 	ret

00813394 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
  813394:	deffff04 	addi	sp,sp,-4
  813398:	df000015 	stw	fp,0(sp)
  81339c:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
  8133a0:	008020b4 	movhi	r2,130
  8133a4:	10a1ce04 	addi	r2,r2,-30920
  8133a8:	10800017 	ldw	r2,0(r2)
}
  8133ac:	e037883a 	mov	sp,fp
  8133b0:	df000017 	ldw	fp,0(sp)
  8133b4:	dec00104 	addi	sp,sp,4
  8133b8:	f800283a 	ret

008133bc <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
  8133bc:	deffee04 	addi	sp,sp,-72
  8133c0:	df001115 	stw	fp,68(sp)
  8133c4:	df001104 	addi	fp,sp,68
  8133c8:	e13ffc15 	stw	r4,-16(fp)
  8133cc:	e17ffd15 	stw	r5,-12(fp)
  8133d0:	e1bffe15 	stw	r6,-8(fp)
  8133d4:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
  8133d8:	e0bffc17 	ldw	r2,-16(fp)
  8133dc:	10800017 	ldw	r2,0(r2)
  8133e0:	e0bffb15 	stw	r2,-20(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
  8133e4:	e0bffb17 	ldw	r2,-20(fp)
  8133e8:	10800217 	ldw	r2,8(r2)
  8133ec:	e0bff115 	stw	r2,-60(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
  8133f0:	e0bff117 	ldw	r2,-60(fp)
  8133f4:	10bfffc4 	addi	r2,r2,-1
  8133f8:	e0bff215 	stw	r2,-56(fp)

  while (*++ptr != 0)
  8133fc:	e0bff217 	ldw	r2,-56(fp)
  813400:	10800044 	addi	r2,r2,1
  813404:	e0bff215 	stw	r2,-56(fp)
  813408:	e0bff217 	ldw	r2,-56(fp)
  81340c:	10800003 	ldbu	r2,0(r2)
  813410:	10803fcc 	andi	r2,r2,255
  813414:	1080201c 	xori	r2,r2,128
  813418:	10bfe004 	addi	r2,r2,-128
  81341c:	1004c03a 	cmpne	r2,r2,zero
  813420:	103ff61e 	bne	r2,zero,8133fc <alt_hostfs_open+0x40>
    ;

  return ptr - string;
  813424:	e0fff217 	ldw	r3,-56(fp)
  813428:	e0bff117 	ldw	r2,-60(fp)
  81342c:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
  813430:	1007883a 	mov	r3,r2
  813434:	e0bffd17 	ldw	r2,-12(fp)
  813438:	1885883a 	add	r2,r3,r2
  81343c:	10800044 	addi	r2,r2,1
  813440:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
  813444:	d0a00e04 	addi	r2,gp,-32712
  813448:	e0bff715 	stw	r2,-36(fp)
  r4 = (int)name;
  81344c:	e0bffd17 	ldw	r2,-12(fp)
  813450:	e0bff615 	stw	r2,-40(fp)
  r5 = flags;
  813454:	e0bffe17 	ldw	r2,-8(fp)
  813458:	e0bff515 	stw	r2,-44(fp)
  r6 = mode;
  81345c:	e0bfff17 	ldw	r2,-4(fp)
  813460:	e0bff415 	stw	r2,-48(fp)
  813464:	e0bffd17 	ldw	r2,-12(fp)
  813468:	e0bfef15 	stw	r2,-68(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
  81346c:	e0bfef17 	ldw	r2,-68(fp)
  813470:	10bfffc4 	addi	r2,r2,-1
  813474:	e0bff015 	stw	r2,-64(fp)

  while (*++ptr != 0)
  813478:	e0bff017 	ldw	r2,-64(fp)
  81347c:	10800044 	addi	r2,r2,1
  813480:	e0bff015 	stw	r2,-64(fp)
  813484:	e0bff017 	ldw	r2,-64(fp)
  813488:	10800003 	ldbu	r2,0(r2)
  81348c:	10803fcc 	andi	r2,r2,255
  813490:	1080201c 	xori	r2,r2,128
  813494:	10bfe004 	addi	r2,r2,-128
  813498:	1004c03a 	cmpne	r2,r2,zero
  81349c:	103ff61e 	bne	r2,zero,813478 <alt_hostfs_open+0xbc>
    ;

  return ptr - string;
  8134a0:	e0fff017 	ldw	r3,-64(fp)
  8134a4:	e0bfef17 	ldw	r2,-68(fp)
  8134a8:	1885c83a 	sub	r2,r3,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
  8134ac:	e0bff315 	stw	r2,-52(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6), "D07" (r7) : "memory" );
  8134b0:	e13ff617 	ldw	r4,-40(fp)
  8134b4:	e17ff517 	ldw	r5,-44(fp)
  8134b8:	e1bff417 	ldw	r6,-48(fp)
  8134bc:	e1fff317 	ldw	r7,-52(fp)
  8134c0:	e0fff717 	ldw	r3,-36(fp)
  8134c4:	003da07a 	break	1
  8134c8:	e0bff815 	stw	r2,-32(fp)
  8134cc:	e0fff715 	stw	r3,-36(fp)

  handle = (void *)r2;
  8134d0:	e0bff817 	ldw	r2,-32(fp)
  8134d4:	e0bff915 	stw	r2,-28(fp)
  error = r3;
  8134d8:	e0bff717 	ldw	r2,-36(fp)
  8134dc:	e0bffa15 	stw	r2,-24(fp)

  if (error == 0)
  8134e0:	e0bffa17 	ldw	r2,-24(fp)
  8134e4:	1004c03a 	cmpne	r2,r2,zero
  8134e8:	1000031e 	bne	r2,zero,8134f8 <alt_hostfs_open+0x13c>
    fd->priv = handle;
  8134ec:	e0fff917 	ldw	r3,-28(fp)
  8134f0:	e0bffc17 	ldw	r2,-16(fp)
  8134f4:	10c00115 	stw	r3,4(r2)

  return -error;
  8134f8:	e0bffa17 	ldw	r2,-24(fp)
  8134fc:	0085c83a 	sub	r2,zero,r2
}
  813500:	e037883a 	mov	sp,fp
  813504:	df000017 	ldw	fp,0(sp)
  813508:	dec00104 	addi	sp,sp,4
  81350c:	f800283a 	ret

00813510 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
  813510:	defffb04 	addi	sp,sp,-20
  813514:	df000415 	stw	fp,16(sp)
  813518:	df000404 	addi	fp,sp,16
  81351c:	e13fff15 	stw	r4,-4(fp)
  int error;

  /* Input and output parameters for the hostcall */
  int r3, r4;

  r3 = (int)&hcinfo;
  813520:	d0a01104 	addi	r2,gp,-32700
  813524:	e0bffd15 	stw	r2,-12(fp)
  r4 = (int)fd->priv;
  813528:	e0bfff17 	ldw	r2,-4(fp)
  81352c:	10800117 	ldw	r2,4(r2)
  813530:	e0bffc15 	stw	r2,-16(fp)

  __asm__ volatile("break 1" : "+D03" (r3) : "D04" (r4) );
  813534:	e13ffc17 	ldw	r4,-16(fp)
  813538:	e0fffd17 	ldw	r3,-12(fp)
  81353c:	003da07a 	break	1
  813540:	e0fffd15 	stw	r3,-12(fp)

  error = r3;
  813544:	e0bffd17 	ldw	r2,-12(fp)
  813548:	e0bffe15 	stw	r2,-8(fp)

  return -error;
  81354c:	e0bffe17 	ldw	r2,-8(fp)
  813550:	0085c83a 	sub	r2,zero,r2
}
  813554:	e037883a 	mov	sp,fp
  813558:	df000017 	ldw	fp,0(sp)
  81355c:	dec00104 	addi	sp,sp,4
  813560:	f800283a 	ret

00813564 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
  813564:	defff404 	addi	sp,sp,-48
  813568:	df000b15 	stw	fp,44(sp)
  81356c:	df000b04 	addi	fp,sp,44
  813570:	e13ffc15 	stw	r4,-16(fp)
  813574:	e17ffd15 	stw	r5,-12(fp)
  813578:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
  81357c:	d0a01404 	addi	r2,gp,-32688
  813580:	e0bff815 	stw	r2,-32(fp)
  r4 = (int)fd->priv;
  813584:	e0bffc17 	ldw	r2,-16(fp)
  813588:	10800117 	ldw	r2,4(r2)
  81358c:	e0bff715 	stw	r2,-36(fp)
  r5 = (int)ptr;
  813590:	e0bffd17 	ldw	r2,-12(fp)
  813594:	e0bff615 	stw	r2,-40(fp)
  r6 = len;
  813598:	e0bffe17 	ldw	r2,-8(fp)
  81359c:	e0bff515 	stw	r2,-44(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
  8135a0:	e13ff717 	ldw	r4,-36(fp)
  8135a4:	e17ff617 	ldw	r5,-40(fp)
  8135a8:	e1bff517 	ldw	r6,-44(fp)
  8135ac:	e0fff817 	ldw	r3,-32(fp)
  8135b0:	003da07a 	break	1
  8135b4:	e0bff915 	stw	r2,-28(fp)
  8135b8:	e0fff815 	stw	r3,-32(fp)

  rc = r2;
  8135bc:	e0bff917 	ldw	r2,-28(fp)
  8135c0:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
  8135c4:	e0bff817 	ldw	r2,-32(fp)
  8135c8:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
  8135cc:	e0bffb17 	ldw	r2,-20(fp)
  8135d0:	1005003a 	cmpeq	r2,r2,zero
  8135d4:	1000041e 	bne	r2,zero,8135e8 <alt_hostfs_read+0x84>
  8135d8:	e0bffb17 	ldw	r2,-20(fp)
  8135dc:	0085c83a 	sub	r2,zero,r2
  8135e0:	e0bfff15 	stw	r2,-4(fp)
  8135e4:	00000206 	br	8135f0 <alt_hostfs_read+0x8c>
  8135e8:	e0bffa17 	ldw	r2,-24(fp)
  8135ec:	e0bfff15 	stw	r2,-4(fp)
  8135f0:	e0bfff17 	ldw	r2,-4(fp)
}
  8135f4:	e037883a 	mov	sp,fp
  8135f8:	df000017 	ldw	fp,0(sp)
  8135fc:	dec00104 	addi	sp,sp,4
  813600:	f800283a 	ret

00813604 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
  813604:	defff404 	addi	sp,sp,-48
  813608:	df000b15 	stw	fp,44(sp)
  81360c:	df000b04 	addi	fp,sp,44
  813610:	e13ffc15 	stw	r4,-16(fp)
  813614:	e17ffd15 	stw	r5,-12(fp)
  813618:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
  81361c:	d0a01704 	addi	r2,gp,-32676
  813620:	e0bff815 	stw	r2,-32(fp)
  r4 = (int)fd->priv;
  813624:	e0bffc17 	ldw	r2,-16(fp)
  813628:	10800117 	ldw	r2,4(r2)
  81362c:	e0bff715 	stw	r2,-36(fp)
  r5 = (int)ptr;
  813630:	e0bffd17 	ldw	r2,-12(fp)
  813634:	e0bff615 	stw	r2,-40(fp)
  r6 = len;
  813638:	e0bffe17 	ldw	r2,-8(fp)
  81363c:	e0bff515 	stw	r2,-44(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
  813640:	e13ff717 	ldw	r4,-36(fp)
  813644:	e17ff617 	ldw	r5,-40(fp)
  813648:	e1bff517 	ldw	r6,-44(fp)
  81364c:	e0fff817 	ldw	r3,-32(fp)
  813650:	003da07a 	break	1
  813654:	e0bff915 	stw	r2,-28(fp)
  813658:	e0fff815 	stw	r3,-32(fp)

  rc = r2;
  81365c:	e0bff917 	ldw	r2,-28(fp)
  813660:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
  813664:	e0bff817 	ldw	r2,-32(fp)
  813668:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
  81366c:	e0bffb17 	ldw	r2,-20(fp)
  813670:	1005003a 	cmpeq	r2,r2,zero
  813674:	1000041e 	bne	r2,zero,813688 <alt_hostfs_write+0x84>
  813678:	e0bffb17 	ldw	r2,-20(fp)
  81367c:	0085c83a 	sub	r2,zero,r2
  813680:	e0bfff15 	stw	r2,-4(fp)
  813684:	00000206 	br	813690 <alt_hostfs_write+0x8c>
  813688:	e0bffa17 	ldw	r2,-24(fp)
  81368c:	e0bfff15 	stw	r2,-4(fp)
  813690:	e0bfff17 	ldw	r2,-4(fp)
}
  813694:	e037883a 	mov	sp,fp
  813698:	df000017 	ldw	fp,0(sp)
  81369c:	dec00104 	addi	sp,sp,4
  8136a0:	f800283a 	ret

008136a4 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
  8136a4:	defff404 	addi	sp,sp,-48
  8136a8:	df000b15 	stw	fp,44(sp)
  8136ac:	df000b04 	addi	fp,sp,44
  8136b0:	e13ffc15 	stw	r4,-16(fp)
  8136b4:	e17ffd15 	stw	r5,-12(fp)
  8136b8:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
  8136bc:	d0a01a04 	addi	r2,gp,-32664
  8136c0:	e0bff815 	stw	r2,-32(fp)
  r4 = (int)fd->priv;
  8136c4:	e0bffc17 	ldw	r2,-16(fp)
  8136c8:	10800117 	ldw	r2,4(r2)
  8136cc:	e0bff715 	stw	r2,-36(fp)
  r5 = ptr;
  8136d0:	e0bffd17 	ldw	r2,-12(fp)
  8136d4:	e0bff615 	stw	r2,-40(fp)
  r6 = dir;
  8136d8:	e0bffe17 	ldw	r2,-8(fp)
  8136dc:	e0bff515 	stw	r2,-44(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
  8136e0:	e13ff717 	ldw	r4,-36(fp)
  8136e4:	e17ff617 	ldw	r5,-40(fp)
  8136e8:	e1bff517 	ldw	r6,-44(fp)
  8136ec:	e0fff817 	ldw	r3,-32(fp)
  8136f0:	003da07a 	break	1
  8136f4:	e0bff915 	stw	r2,-28(fp)
  8136f8:	e0fff815 	stw	r3,-32(fp)

  rc = r2;
  8136fc:	e0bff917 	ldw	r2,-28(fp)
  813700:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
  813704:	e0bff817 	ldw	r2,-32(fp)
  813708:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
  81370c:	e0bffb17 	ldw	r2,-20(fp)
  813710:	1005003a 	cmpeq	r2,r2,zero
  813714:	1000041e 	bne	r2,zero,813728 <alt_hostfs_seek+0x84>
  813718:	e0bffb17 	ldw	r2,-20(fp)
  81371c:	0085c83a 	sub	r2,zero,r2
  813720:	e0bfff15 	stw	r2,-4(fp)
  813724:	00000206 	br	813730 <alt_hostfs_seek+0x8c>
  813728:	e0bffa17 	ldw	r2,-24(fp)
  81372c:	e0bfff15 	stw	r2,-4(fp)
  813730:	e0bfff17 	ldw	r2,-4(fp)
}
  813734:	e037883a 	mov	sp,fp
  813738:	df000017 	ldw	fp,0(sp)
  81373c:	dec00104 	addi	sp,sp,4
  813740:	f800283a 	ret

00813744 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
  813744:	deffe404 	addi	sp,sp,-112
  813748:	df001b15 	stw	fp,108(sp)
  81374c:	df001b04 	addi	fp,sp,108
  813750:	e13ffd15 	stw	r4,-12(fp)
  813754:	e17ffe15 	stw	r5,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5;

  r3 = (int)&hcinfo;
  813758:	d0a01d04 	addi	r2,gp,-32652
  81375c:	e0bfe915 	stw	r2,-92(fp)
  r4 = (int)fd->priv;
  813760:	e0bffd17 	ldw	r2,-12(fp)
  813764:	10800117 	ldw	r2,4(r2)
  813768:	e0bfe815 	stw	r2,-96(fp)
  r5 = (int)&hoststat;
  81376c:	e0bfed04 	addi	r2,fp,-76
  813770:	e0bfe715 	stw	r2,-100(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5) : "memory" );
  813774:	e13fe817 	ldw	r4,-96(fp)
  813778:	e17fe717 	ldw	r5,-100(fp)
  81377c:	e0ffe917 	ldw	r3,-92(fp)
  813780:	003da07a 	break	1
  813784:	e0bfea15 	stw	r2,-88(fp)
  813788:	e0ffe915 	stw	r3,-92(fp)

  rc = r2;
  81378c:	e0bfea17 	ldw	r2,-88(fp)
  813790:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
  813794:	e0bfe917 	ldw	r2,-92(fp)
  813798:	e0bfec15 	stw	r2,-80(fp)

  if (error == 0)
  81379c:	e0bfec17 	ldw	r2,-80(fp)
  8137a0:	1004c03a 	cmpne	r2,r2,zero
  8137a4:	1000651e 	bne	r2,zero,81393c <alt_hostfs_fstat+0x1f8>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
  8137a8:	e0bfed04 	addi	r2,fp,-76
  8137ac:	e0bfe615 	stw	r2,-104(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
  8137b0:	e0bfe617 	ldw	r2,-104(fp)
  8137b4:	10801004 	addi	r2,r2,64
  8137b8:	e0bfe515 	stw	r2,-108(fp)
    for ( ; ptr < end ; ptr++)
  8137bc:	00001806 	br	813820 <alt_hostfs_fstat+0xdc>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
  8137c0:	e0bfe617 	ldw	r2,-104(fp)
  8137c4:	10800017 	ldw	r2,0(r2)
  8137c8:	10bfc02c 	andhi	r2,r2,65280
  8137cc:	1006d63a 	srli	r3,r2,24
  8137d0:	e0bfe617 	ldw	r2,-104(fp)
  8137d4:	10800017 	ldw	r2,0(r2)
  8137d8:	10803fec 	andhi	r2,r2,255
  8137dc:	1004d23a 	srli	r2,r2,8
  8137e0:	1886b03a 	or	r3,r3,r2
  8137e4:	e0bfe617 	ldw	r2,-104(fp)
  8137e8:	10800017 	ldw	r2,0(r2)
  8137ec:	10bfc00c 	andi	r2,r2,65280
  8137f0:	1004923a 	slli	r2,r2,8
  8137f4:	1886b03a 	or	r3,r3,r2
  8137f8:	e0bfe617 	ldw	r2,-104(fp)
  8137fc:	10800017 	ldw	r2,0(r2)
  813800:	10803fcc 	andi	r2,r2,255
  813804:	1004963a 	slli	r2,r2,24
  813808:	1886b03a 	or	r3,r3,r2
  81380c:	e0bfe617 	ldw	r2,-104(fp)
  813810:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
  813814:	e0bfe617 	ldw	r2,-104(fp)
  813818:	10800104 	addi	r2,r2,4
  81381c:	e0bfe615 	stw	r2,-104(fp)
  813820:	e0ffe617 	ldw	r3,-104(fp)
  813824:	e0bfe517 	ldw	r2,-108(fp)
  813828:	18bfe536 	bltu	r3,r2,8137c0 <alt_hostfs_fstat+0x7c>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
  81382c:	e0bffe17 	ldw	r2,-8(fp)
  813830:	e0bfe615 	stw	r2,-104(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
  813834:	e0bfe617 	ldw	r2,-104(fp)
  813838:	10800f04 	addi	r2,r2,60
  81383c:	e0bfe515 	stw	r2,-108(fp)
    for ( ; ptr < end ; ptr++)
  813840:	00000506 	br	813858 <alt_hostfs_fstat+0x114>
      *ptr = 0;
  813844:	e0bfe617 	ldw	r2,-104(fp)
  813848:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
  81384c:	e0bfe617 	ldw	r2,-104(fp)
  813850:	10800104 	addi	r2,r2,4
  813854:	e0bfe615 	stw	r2,-104(fp)
  813858:	e0ffe617 	ldw	r3,-104(fp)
  81385c:	e0bfe517 	ldw	r2,-108(fp)
  813860:	18bff836 	bltu	r3,r2,813844 <alt_hostfs_fstat+0x100>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
  813864:	e0bfed17 	ldw	r2,-76(fp)
  813868:	1007883a 	mov	r3,r2
  81386c:	e0bffe17 	ldw	r2,-8(fp)
  813870:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
  813874:	e0bfee17 	ldw	r2,-72(fp)
  813878:	1007883a 	mov	r3,r2
  81387c:	e0bffe17 	ldw	r2,-8(fp)
  813880:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
  813884:	e0ffef17 	ldw	r3,-68(fp)
  813888:	e0bffe17 	ldw	r2,-8(fp)
  81388c:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
  813890:	e0bff017 	ldw	r2,-64(fp)
  813894:	1007883a 	mov	r3,r2
  813898:	e0bffe17 	ldw	r2,-8(fp)
  81389c:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
  8138a0:	e0bff117 	ldw	r2,-60(fp)
  8138a4:	1007883a 	mov	r3,r2
  8138a8:	e0bffe17 	ldw	r2,-8(fp)
  8138ac:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
  8138b0:	e0bff217 	ldw	r2,-56(fp)
  8138b4:	1007883a 	mov	r3,r2
  8138b8:	e0bffe17 	ldw	r2,-8(fp)
  8138bc:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
  8138c0:	e0bff317 	ldw	r2,-52(fp)
  8138c4:	1007883a 	mov	r3,r2
  8138c8:	e0bffe17 	ldw	r2,-8(fp)
  8138cc:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
  8138d0:	e0bff517 	ldw	r2,-44(fp)
  8138d4:	1007883a 	mov	r3,r2
  8138d8:	e0bffe17 	ldw	r2,-8(fp)
  8138dc:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
  8138e0:	e0bffa17 	ldw	r2,-24(fp)
  8138e4:	1007883a 	mov	r3,r2
  8138e8:	e0bffe17 	ldw	r2,-8(fp)
  8138ec:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
  8138f0:	e0bffb17 	ldw	r2,-20(fp)
  8138f4:	1007883a 	mov	r3,r2
  8138f8:	e0bffe17 	ldw	r2,-8(fp)
  8138fc:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
  813900:	e0bffc17 	ldw	r2,-16(fp)
  813904:	1007883a 	mov	r3,r2
  813908:	e0bffe17 	ldw	r2,-8(fp)
  81390c:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
  813910:	e0bff717 	ldw	r2,-36(fp)
  813914:	1007883a 	mov	r3,r2
  813918:	e0bffe17 	ldw	r2,-8(fp)
  81391c:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
  813920:	e0bff917 	ldw	r2,-28(fp)
  813924:	1007883a 	mov	r3,r2
  813928:	e0bffe17 	ldw	r2,-8(fp)
  81392c:	10c00c15 	stw	r3,48(r2)

    return rc;
  813930:	e0bfeb17 	ldw	r2,-84(fp)
  813934:	e0bfff15 	stw	r2,-4(fp)
  813938:	00000306 	br	813948 <alt_hostfs_fstat+0x204>
  }
  else
    return -error;
  81393c:	e0bfec17 	ldw	r2,-80(fp)
  813940:	0085c83a 	sub	r2,zero,r2
  813944:	e0bfff15 	stw	r2,-4(fp)
  813948:	e0bfff17 	ldw	r2,-4(fp)
}
  81394c:	e037883a 	mov	sp,fp
  813950:	df000017 	ldw	fp,0(sp)
  813954:	dec00104 	addi	sp,sp,4
  813958:	f800283a 	ret

0081395c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  81395c:	defff404 	addi	sp,sp,-48
  813960:	df000b15 	stw	fp,44(sp)
  813964:	df000b04 	addi	fp,sp,44
  813968:	e13ffb15 	stw	r4,-20(fp)
  81396c:	e17ffc15 	stw	r5,-16(fp)
  813970:	e1bffd15 	stw	r6,-12(fp)
  813974:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  813978:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  81397c:	008020b4 	movhi	r2,130
  813980:	10a1d004 	addi	r2,r2,-30912
  813984:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  813988:	1005003a 	cmpeq	r2,r2,zero
  81398c:	1000411e 	bne	r2,zero,813a94 <alt_alarm_start+0x138>
  {
    if (alarm)
  813990:	e0bffb17 	ldw	r2,-20(fp)
  813994:	1005003a 	cmpeq	r2,r2,zero
  813998:	10003b1e 	bne	r2,zero,813a88 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  81399c:	e0fffb17 	ldw	r3,-20(fp)
  8139a0:	e0bffd17 	ldw	r2,-12(fp)
  8139a4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  8139a8:	e0fffb17 	ldw	r3,-20(fp)
  8139ac:	e0bffe17 	ldw	r2,-8(fp)
  8139b0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8139b4:	0005303a 	rdctl	r2,status
  8139b8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8139bc:	e0fff817 	ldw	r3,-32(fp)
  8139c0:	00bfff84 	movi	r2,-2
  8139c4:	1884703a 	and	r2,r3,r2
  8139c8:	1001703a 	wrctl	status,r2
  
  return context;
  8139cc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  8139d0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8139d4:	008020b4 	movhi	r2,130
  8139d8:	10a1d104 	addi	r2,r2,-30908
  8139dc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  8139e0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  8139e4:	e0fffc17 	ldw	r3,-16(fp)
  8139e8:	e0bff917 	ldw	r2,-28(fp)
  8139ec:	1885883a 	add	r2,r3,r2
  8139f0:	10c00044 	addi	r3,r2,1
  8139f4:	e0bffb17 	ldw	r2,-20(fp)
  8139f8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  8139fc:	e0bffb17 	ldw	r2,-20(fp)
  813a00:	10c00217 	ldw	r3,8(r2)
  813a04:	e0bff917 	ldw	r2,-28(fp)
  813a08:	1880042e 	bgeu	r3,r2,813a1c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  813a0c:	e0fffb17 	ldw	r3,-20(fp)
  813a10:	00800044 	movi	r2,1
  813a14:	18800405 	stb	r2,16(r3)
  813a18:	00000206 	br	813a24 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  813a1c:	e0bffb17 	ldw	r2,-20(fp)
  813a20:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  813a24:	e0fffb17 	ldw	r3,-20(fp)
  813a28:	00802074 	movhi	r2,129
  813a2c:	109b0304 	addi	r2,r2,27660
  813a30:	e0bff615 	stw	r2,-40(fp)
  813a34:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  813a38:	e0fff717 	ldw	r3,-36(fp)
  813a3c:	e0bff617 	ldw	r2,-40(fp)
  813a40:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  813a44:	e0bff617 	ldw	r2,-40(fp)
  813a48:	10c00017 	ldw	r3,0(r2)
  813a4c:	e0bff717 	ldw	r2,-36(fp)
  813a50:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  813a54:	e0bff617 	ldw	r2,-40(fp)
  813a58:	10c00017 	ldw	r3,0(r2)
  813a5c:	e0bff717 	ldw	r2,-36(fp)
  813a60:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  813a64:	e0fff617 	ldw	r3,-40(fp)
  813a68:	e0bff717 	ldw	r2,-36(fp)
  813a6c:	18800015 	stw	r2,0(r3)
  813a70:	e0bffa17 	ldw	r2,-24(fp)
  813a74:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813a78:	e0bff517 	ldw	r2,-44(fp)
  813a7c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  813a80:	e03fff15 	stw	zero,-4(fp)
  813a84:	00000506 	br	813a9c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  813a88:	00bffa84 	movi	r2,-22
  813a8c:	e0bfff15 	stw	r2,-4(fp)
  813a90:	00000206 	br	813a9c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  813a94:	00bfde84 	movi	r2,-134
  813a98:	e0bfff15 	stw	r2,-4(fp)
  813a9c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  813aa0:	e037883a 	mov	sp,fp
  813aa4:	df000017 	ldw	fp,0(sp)
  813aa8:	dec00104 	addi	sp,sp,4
  813aac:	f800283a 	ret

00813ab0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  813ab0:	defffe04 	addi	sp,sp,-8
  813ab4:	df000115 	stw	fp,4(sp)
  813ab8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  813abc:	e03fff15 	stw	zero,-4(fp)
  813ac0:	00000506 	br	813ad8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  813ac4:	e0bfff17 	ldw	r2,-4(fp)
  813ac8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  813acc:	e0bfff17 	ldw	r2,-4(fp)
  813ad0:	10800404 	addi	r2,r2,16
  813ad4:	e0bfff15 	stw	r2,-4(fp)
  813ad8:	e0bfff17 	ldw	r2,-4(fp)
  813adc:	10880030 	cmpltui	r2,r2,8192
  813ae0:	103ff81e 	bne	r2,zero,813ac4 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  813ae4:	e037883a 	mov	sp,fp
  813ae8:	df000017 	ldw	fp,0(sp)
  813aec:	dec00104 	addi	sp,sp,4
  813af0:	f800283a 	ret

00813af4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  813af4:	defff904 	addi	sp,sp,-28
  813af8:	dfc00615 	stw	ra,24(sp)
  813afc:	df000515 	stw	fp,20(sp)
  813b00:	df000504 	addi	fp,sp,20
  813b04:	e13ffd15 	stw	r4,-12(fp)
  813b08:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  813b0c:	e0bffd17 	ldw	r2,-12(fp)
  813b10:	1005003a 	cmpeq	r2,r2,zero
  813b14:	1000041e 	bne	r2,zero,813b28 <alt_dev_llist_insert+0x34>
  813b18:	e0bffd17 	ldw	r2,-12(fp)
  813b1c:	10800217 	ldw	r2,8(r2)
  813b20:	1004c03a 	cmpne	r2,r2,zero
  813b24:	1000071e 	bne	r2,zero,813b44 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  813b28:	0813ba80 	call	813ba8 <alt_get_errno>
  813b2c:	1007883a 	mov	r3,r2
  813b30:	00800584 	movi	r2,22
  813b34:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  813b38:	00bffa84 	movi	r2,-22
  813b3c:	e0bfff15 	stw	r2,-4(fp)
  813b40:	00001306 	br	813b90 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  813b44:	e0fffd17 	ldw	r3,-12(fp)
  813b48:	e0bffe17 	ldw	r2,-8(fp)
  813b4c:	e0bffb15 	stw	r2,-20(fp)
  813b50:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  813b54:	e0fffc17 	ldw	r3,-16(fp)
  813b58:	e0bffb17 	ldw	r2,-20(fp)
  813b5c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  813b60:	e0bffb17 	ldw	r2,-20(fp)
  813b64:	10c00017 	ldw	r3,0(r2)
  813b68:	e0bffc17 	ldw	r2,-16(fp)
  813b6c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  813b70:	e0bffb17 	ldw	r2,-20(fp)
  813b74:	10c00017 	ldw	r3,0(r2)
  813b78:	e0bffc17 	ldw	r2,-16(fp)
  813b7c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  813b80:	e0fffb17 	ldw	r3,-20(fp)
  813b84:	e0bffc17 	ldw	r2,-16(fp)
  813b88:	18800015 	stw	r2,0(r3)

  return 0;  
  813b8c:	e03fff15 	stw	zero,-4(fp)
  813b90:	e0bfff17 	ldw	r2,-4(fp)
}
  813b94:	e037883a 	mov	sp,fp
  813b98:	dfc00117 	ldw	ra,4(sp)
  813b9c:	df000017 	ldw	fp,0(sp)
  813ba0:	dec00204 	addi	sp,sp,8
  813ba4:	f800283a 	ret

00813ba8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813ba8:	defffd04 	addi	sp,sp,-12
  813bac:	dfc00215 	stw	ra,8(sp)
  813bb0:	df000115 	stw	fp,4(sp)
  813bb4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  813bb8:	00802074 	movhi	r2,129
  813bbc:	109aee04 	addi	r2,r2,27576
  813bc0:	10800017 	ldw	r2,0(r2)
  813bc4:	1005003a 	cmpeq	r2,r2,zero
  813bc8:	1000061e 	bne	r2,zero,813be4 <alt_get_errno+0x3c>
  813bcc:	00802074 	movhi	r2,129
  813bd0:	109aee04 	addi	r2,r2,27576
  813bd4:	10800017 	ldw	r2,0(r2)
  813bd8:	103ee83a 	callr	r2
  813bdc:	e0bfff15 	stw	r2,-4(fp)
  813be0:	00000306 	br	813bf0 <alt_get_errno+0x48>
  813be4:	008020b4 	movhi	r2,130
  813be8:	10a1c304 	addi	r2,r2,-30964
  813bec:	e0bfff15 	stw	r2,-4(fp)
  813bf0:	e0bfff17 	ldw	r2,-4(fp)
}
  813bf4:	e037883a 	mov	sp,fp
  813bf8:	dfc00117 	ldw	ra,4(sp)
  813bfc:	df000017 	ldw	fp,0(sp)
  813c00:	dec00204 	addi	sp,sp,8
  813c04:	f800283a 	ret

00813c08 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  813c08:	defffd04 	addi	sp,sp,-12
  813c0c:	dfc00215 	stw	ra,8(sp)
  813c10:	df000115 	stw	fp,4(sp)
  813c14:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  813c18:	00bfff04 	movi	r2,-4
  813c1c:	00c02074 	movhi	r3,129
  813c20:	18d21104 	addi	r3,r3,18500
  813c24:	1885883a 	add	r2,r3,r2
  813c28:	e0bfff15 	stw	r2,-4(fp)
  813c2c:	00000606 	br	813c48 <_do_ctors+0x40>
        (*ctor) (); 
  813c30:	e0bfff17 	ldw	r2,-4(fp)
  813c34:	10800017 	ldw	r2,0(r2)
  813c38:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  813c3c:	e0bfff17 	ldw	r2,-4(fp)
  813c40:	10bfff04 	addi	r2,r2,-4
  813c44:	e0bfff15 	stw	r2,-4(fp)
  813c48:	e0ffff17 	ldw	r3,-4(fp)
  813c4c:	00802074 	movhi	r2,129
  813c50:	10921004 	addi	r2,r2,18496
  813c54:	18bff62e 	bgeu	r3,r2,813c30 <_do_ctors+0x28>
        (*ctor) (); 
}
  813c58:	e037883a 	mov	sp,fp
  813c5c:	dfc00117 	ldw	ra,4(sp)
  813c60:	df000017 	ldw	fp,0(sp)
  813c64:	dec00204 	addi	sp,sp,8
  813c68:	f800283a 	ret

00813c6c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  813c6c:	defffd04 	addi	sp,sp,-12
  813c70:	dfc00215 	stw	ra,8(sp)
  813c74:	df000115 	stw	fp,4(sp)
  813c78:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  813c7c:	00bfff04 	movi	r2,-4
  813c80:	00c02074 	movhi	r3,129
  813c84:	18d21104 	addi	r3,r3,18500
  813c88:	1885883a 	add	r2,r3,r2
  813c8c:	e0bfff15 	stw	r2,-4(fp)
  813c90:	00000606 	br	813cac <_do_dtors+0x40>
        (*dtor) (); 
  813c94:	e0bfff17 	ldw	r2,-4(fp)
  813c98:	10800017 	ldw	r2,0(r2)
  813c9c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  813ca0:	e0bfff17 	ldw	r2,-4(fp)
  813ca4:	10bfff04 	addi	r2,r2,-4
  813ca8:	e0bfff15 	stw	r2,-4(fp)
  813cac:	e0ffff17 	ldw	r3,-4(fp)
  813cb0:	00802074 	movhi	r2,129
  813cb4:	10921104 	addi	r2,r2,18500
  813cb8:	18bff62e 	bgeu	r3,r2,813c94 <_do_dtors+0x28>
        (*dtor) (); 
}
  813cbc:	e037883a 	mov	sp,fp
  813cc0:	dfc00117 	ldw	ra,4(sp)
  813cc4:	df000017 	ldw	fp,0(sp)
  813cc8:	dec00204 	addi	sp,sp,8
  813ccc:	f800283a 	ret

00813cd0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  813cd0:	defff904 	addi	sp,sp,-28
  813cd4:	dfc00615 	stw	ra,24(sp)
  813cd8:	df000515 	stw	fp,20(sp)
  813cdc:	df000504 	addi	fp,sp,20
  813ce0:	e13ffd15 	stw	r4,-12(fp)
  813ce4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  813ce8:	e0bffe17 	ldw	r2,-8(fp)
  813cec:	10800017 	ldw	r2,0(r2)
  813cf0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  813cf4:	e13ffd17 	ldw	r4,-12(fp)
  813cf8:	0804ccc0 	call	804ccc <strlen>
  813cfc:	10800044 	addi	r2,r2,1
  813d00:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  813d04:	00000d06 	br	813d3c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  813d08:	e0bffc17 	ldw	r2,-16(fp)
  813d0c:	11000217 	ldw	r4,8(r2)
  813d10:	e1bffb17 	ldw	r6,-20(fp)
  813d14:	e17ffd17 	ldw	r5,-12(fp)
  813d18:	08146980 	call	814698 <memcmp>
  813d1c:	1004c03a 	cmpne	r2,r2,zero
  813d20:	1000031e 	bne	r2,zero,813d30 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  813d24:	e0bffc17 	ldw	r2,-16(fp)
  813d28:	e0bfff15 	stw	r2,-4(fp)
  813d2c:	00000706 	br	813d4c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  813d30:	e0bffc17 	ldw	r2,-16(fp)
  813d34:	10800017 	ldw	r2,0(r2)
  813d38:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  813d3c:	e0fffe17 	ldw	r3,-8(fp)
  813d40:	e0bffc17 	ldw	r2,-16(fp)
  813d44:	10fff01e 	bne	r2,r3,813d08 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  813d48:	e03fff15 	stw	zero,-4(fp)
  813d4c:	e0bfff17 	ldw	r2,-4(fp)
}
  813d50:	e037883a 	mov	sp,fp
  813d54:	dfc00117 	ldw	ra,4(sp)
  813d58:	df000017 	ldw	fp,0(sp)
  813d5c:	dec00204 	addi	sp,sp,8
  813d60:	f800283a 	ret

00813d64 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  813d64:	defffa04 	addi	sp,sp,-24
  813d68:	dfc00515 	stw	ra,20(sp)
  813d6c:	df000415 	stw	fp,16(sp)
  813d70:	df000404 	addi	fp,sp,16
  813d74:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  813d78:	00802074 	movhi	r2,129
  813d7c:	109ae904 	addi	r2,r2,27556
  813d80:	10800017 	ldw	r2,0(r2)
  813d84:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813d88:	00003306 	br	813e58 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  813d8c:	e0bffd17 	ldw	r2,-12(fp)
  813d90:	11000217 	ldw	r4,8(r2)
  813d94:	0804ccc0 	call	804ccc <strlen>
  813d98:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  813d9c:	e0bffd17 	ldw	r2,-12(fp)
  813da0:	10c00217 	ldw	r3,8(r2)
  813da4:	e0bffc17 	ldw	r2,-16(fp)
  813da8:	1885883a 	add	r2,r3,r2
  813dac:	10bfffc4 	addi	r2,r2,-1
  813db0:	10800003 	ldbu	r2,0(r2)
  813db4:	10803fcc 	andi	r2,r2,255
  813db8:	1080201c 	xori	r2,r2,128
  813dbc:	10bfe004 	addi	r2,r2,-128
  813dc0:	10800bd8 	cmpnei	r2,r2,47
  813dc4:	1000031e 	bne	r2,zero,813dd4 <alt_find_file+0x70>
    {
      len -= 1;
  813dc8:	e0bffc17 	ldw	r2,-16(fp)
  813dcc:	10bfffc4 	addi	r2,r2,-1
  813dd0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  813dd4:	e0bffc17 	ldw	r2,-16(fp)
  813dd8:	1007883a 	mov	r3,r2
  813ddc:	e0bffe17 	ldw	r2,-8(fp)
  813de0:	1885883a 	add	r2,r3,r2
  813de4:	10800003 	ldbu	r2,0(r2)
  813de8:	10803fcc 	andi	r2,r2,255
  813dec:	1080201c 	xori	r2,r2,128
  813df0:	10bfe004 	addi	r2,r2,-128
  813df4:	10800be0 	cmpeqi	r2,r2,47
  813df8:	10000a1e 	bne	r2,zero,813e24 <alt_find_file+0xc0>
  813dfc:	e0bffc17 	ldw	r2,-16(fp)
  813e00:	1007883a 	mov	r3,r2
  813e04:	e0bffe17 	ldw	r2,-8(fp)
  813e08:	1885883a 	add	r2,r3,r2
  813e0c:	10800003 	ldbu	r2,0(r2)
  813e10:	10803fcc 	andi	r2,r2,255
  813e14:	1080201c 	xori	r2,r2,128
  813e18:	10bfe004 	addi	r2,r2,-128
  813e1c:	1004c03a 	cmpne	r2,r2,zero
  813e20:	10000a1e 	bne	r2,zero,813e4c <alt_find_file+0xe8>
  813e24:	e0bffd17 	ldw	r2,-12(fp)
  813e28:	11000217 	ldw	r4,8(r2)
  813e2c:	e1bffc17 	ldw	r6,-16(fp)
  813e30:	e17ffe17 	ldw	r5,-8(fp)
  813e34:	08146980 	call	814698 <memcmp>
  813e38:	1004c03a 	cmpne	r2,r2,zero
  813e3c:	1000031e 	bne	r2,zero,813e4c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  813e40:	e0bffd17 	ldw	r2,-12(fp)
  813e44:	e0bfff15 	stw	r2,-4(fp)
  813e48:	00000806 	br	813e6c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  813e4c:	e0bffd17 	ldw	r2,-12(fp)
  813e50:	10800017 	ldw	r2,0(r2)
  813e54:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813e58:	00c02074 	movhi	r3,129
  813e5c:	18dae904 	addi	r3,r3,27556
  813e60:	e0bffd17 	ldw	r2,-12(fp)
  813e64:	10ffc91e 	bne	r2,r3,813d8c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  813e68:	e03fff15 	stw	zero,-4(fp)
  813e6c:	e0bfff17 	ldw	r2,-4(fp)
}
  813e70:	e037883a 	mov	sp,fp
  813e74:	dfc00117 	ldw	ra,4(sp)
  813e78:	df000017 	ldw	fp,0(sp)
  813e7c:	dec00204 	addi	sp,sp,8
  813e80:	f800283a 	ret

00813e84 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
  813e84:	defffb04 	addi	sp,sp,-20
  813e88:	df000415 	stw	fp,16(sp)
  813e8c:	df000404 	addi	fp,sp,16
  813e90:	e13ffe15 	stw	r4,-8(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
  813e94:	e0bffe17 	ldw	r2,-8(fp)
  813e98:	10800217 	ldw	r2,8(r2)
  813e9c:	1004c03a 	cmpne	r2,r2,zero
  813ea0:	1000031e 	bne	r2,zero,813eb0 <alt_fs_reg+0x2c>
  {
    return -ENODEV;
  813ea4:	00bffb44 	movi	r2,-19
  813ea8:	e0bfff15 	stw	r2,-4(fp)
  813eac:	00001406 	br	813f00 <alt_fs_reg+0x7c>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
  813eb0:	e0fffe17 	ldw	r3,-8(fp)
  813eb4:	00802074 	movhi	r2,129
  813eb8:	109ae904 	addi	r2,r2,27556
  813ebc:	e0bffc15 	stw	r2,-16(fp)
  813ec0:	e0fffd15 	stw	r3,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  813ec4:	e0fffd17 	ldw	r3,-12(fp)
  813ec8:	e0bffc17 	ldw	r2,-16(fp)
  813ecc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  813ed0:	e0bffc17 	ldw	r2,-16(fp)
  813ed4:	10c00017 	ldw	r3,0(r2)
  813ed8:	e0bffd17 	ldw	r2,-12(fp)
  813edc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  813ee0:	e0bffc17 	ldw	r2,-16(fp)
  813ee4:	10c00017 	ldw	r3,0(r2)
  813ee8:	e0bffd17 	ldw	r2,-12(fp)
  813eec:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  813ef0:	e0fffc17 	ldw	r3,-16(fp)
  813ef4:	e0bffd17 	ldw	r2,-12(fp)
  813ef8:	18800015 	stw	r2,0(r3)

  return 0;
  813efc:	e03fff15 	stw	zero,-4(fp)
  813f00:	e0bfff17 	ldw	r2,-4(fp)
} 
  813f04:	e037883a 	mov	sp,fp
  813f08:	df000017 	ldw	fp,0(sp)
  813f0c:	dec00104 	addi	sp,sp,4
  813f10:	f800283a 	ret

00813f14 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  813f14:	defffa04 	addi	sp,sp,-24
  813f18:	dfc00515 	stw	ra,20(sp)
  813f1c:	df000415 	stw	fp,16(sp)
  813f20:	dc000315 	stw	r16,12(sp)
  813f24:	df000304 	addi	fp,sp,12
  813f28:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  813f2c:	00bffa04 	movi	r2,-24
  813f30:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813f34:	e03ffe15 	stw	zero,-8(fp)
  813f38:	00002006 	br	813fbc <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
  813f3c:	e13ffe17 	ldw	r4,-8(fp)
  813f40:	04002074 	movhi	r16,129
  813f44:	84166004 	addi	r16,r16,22912
  813f48:	01400304 	movi	r5,12
  813f4c:	0801c5c0 	call	801c5c <__mulsi3>
  813f50:	1405883a 	add	r2,r2,r16
  813f54:	10800017 	ldw	r2,0(r2)
  813f58:	1004c03a 	cmpne	r2,r2,zero
  813f5c:	1000141e 	bne	r2,zero,813fb0 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
  813f60:	e13ffe17 	ldw	r4,-8(fp)
  813f64:	04002074 	movhi	r16,129
  813f68:	84166004 	addi	r16,r16,22912
  813f6c:	01400304 	movi	r5,12
  813f70:	0801c5c0 	call	801c5c <__mulsi3>
  813f74:	1407883a 	add	r3,r2,r16
  813f78:	e0bfff17 	ldw	r2,-4(fp)
  813f7c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  813f80:	00802074 	movhi	r2,129
  813f84:	109aed04 	addi	r2,r2,27572
  813f88:	10c00017 	ldw	r3,0(r2)
  813f8c:	e0bffe17 	ldw	r2,-8(fp)
  813f90:	1880040e 	bge	r3,r2,813fa4 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
  813f94:	00c02074 	movhi	r3,129
  813f98:	18daed04 	addi	r3,r3,27572
  813f9c:	e0bffe17 	ldw	r2,-8(fp)
  813fa0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  813fa4:	e0bffe17 	ldw	r2,-8(fp)
  813fa8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  813fac:	00000606 	br	813fc8 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813fb0:	e0bffe17 	ldw	r2,-8(fp)
  813fb4:	10800044 	addi	r2,r2,1
  813fb8:	e0bffe15 	stw	r2,-8(fp)
  813fbc:	e0bffe17 	ldw	r2,-8(fp)
  813fc0:	10800810 	cmplti	r2,r2,32
  813fc4:	103fdd1e 	bne	r2,zero,813f3c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  813fc8:	e0bffd17 	ldw	r2,-12(fp)
}
  813fcc:	e037883a 	mov	sp,fp
  813fd0:	dfc00217 	ldw	ra,8(sp)
  813fd4:	df000117 	ldw	fp,4(sp)
  813fd8:	dc000017 	ldw	r16,0(sp)
  813fdc:	dec00304 	addi	sp,sp,12
  813fe0:	f800283a 	ret

00813fe4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  813fe4:	defffe04 	addi	sp,sp,-8
  813fe8:	dfc00115 	stw	ra,4(sp)
  813fec:	df000015 	stw	fp,0(sp)
  813ff0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  813ff4:	0009883a 	mov	r4,zero
  813ff8:	01440004 	movi	r5,4096
  813ffc:	08145f40 	call	8145f4 <alt_icache_flush>
#endif
}
  814000:	e037883a 	mov	sp,fp
  814004:	dfc00117 	ldw	ra,4(sp)
  814008:	df000017 	ldw	fp,0(sp)
  81400c:	dec00204 	addi	sp,sp,8
  814010:	f800283a 	ret

00814014 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  814014:	defff904 	addi	sp,sp,-28
  814018:	dfc00615 	stw	ra,24(sp)
  81401c:	df000515 	stw	fp,20(sp)
  814020:	df000504 	addi	fp,sp,20
  814024:	e13ffc15 	stw	r4,-16(fp)
  814028:	e17ffd15 	stw	r5,-12(fp)
  81402c:	e1bffe15 	stw	r6,-8(fp)
  814030:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  814034:	e0800217 	ldw	r2,8(fp)
  814038:	d8800015 	stw	r2,0(sp)
  81403c:	e13ffc17 	ldw	r4,-16(fp)
  814040:	e17ffd17 	ldw	r5,-12(fp)
  814044:	e1bffe17 	ldw	r6,-8(fp)
  814048:	e1ffff17 	ldw	r7,-4(fp)
  81404c:	08141e80 	call	8141e8 <alt_iic_isr_register>
}  
  814050:	e037883a 	mov	sp,fp
  814054:	dfc00117 	ldw	ra,4(sp)
  814058:	df000017 	ldw	fp,0(sp)
  81405c:	dec00204 	addi	sp,sp,8
  814060:	f800283a 	ret

00814064 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  814064:	defff904 	addi	sp,sp,-28
  814068:	df000615 	stw	fp,24(sp)
  81406c:	df000604 	addi	fp,sp,24
  814070:	e13ffe15 	stw	r4,-8(fp)
  814074:	e17fff15 	stw	r5,-4(fp)
  814078:	e0bfff17 	ldw	r2,-4(fp)
  81407c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814080:	0005303a 	rdctl	r2,status
  814084:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814088:	e0fffb17 	ldw	r3,-20(fp)
  81408c:	00bfff84 	movi	r2,-2
  814090:	1884703a 	and	r2,r3,r2
  814094:	1001703a 	wrctl	status,r2
  
  return context;
  814098:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81409c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  8140a0:	e0fffc17 	ldw	r3,-16(fp)
  8140a4:	00800044 	movi	r2,1
  8140a8:	10c4983a 	sll	r2,r2,r3
  8140ac:	1007883a 	mov	r3,r2
  8140b0:	008020b4 	movhi	r2,130
  8140b4:	10a1cf04 	addi	r2,r2,-30916
  8140b8:	10800017 	ldw	r2,0(r2)
  8140bc:	1886b03a 	or	r3,r3,r2
  8140c0:	008020b4 	movhi	r2,130
  8140c4:	10a1cf04 	addi	r2,r2,-30916
  8140c8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8140cc:	008020b4 	movhi	r2,130
  8140d0:	10a1cf04 	addi	r2,r2,-30916
  8140d4:	10800017 	ldw	r2,0(r2)
  8140d8:	100170fa 	wrctl	ienable,r2
  8140dc:	e0bffd17 	ldw	r2,-12(fp)
  8140e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8140e4:	e0bffa17 	ldw	r2,-24(fp)
  8140e8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8140ec:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  8140f0:	e037883a 	mov	sp,fp
  8140f4:	df000017 	ldw	fp,0(sp)
  8140f8:	dec00104 	addi	sp,sp,4
  8140fc:	f800283a 	ret

00814100 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  814100:	defff904 	addi	sp,sp,-28
  814104:	df000615 	stw	fp,24(sp)
  814108:	df000604 	addi	fp,sp,24
  81410c:	e13ffe15 	stw	r4,-8(fp)
  814110:	e17fff15 	stw	r5,-4(fp)
  814114:	e0bfff17 	ldw	r2,-4(fp)
  814118:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81411c:	0005303a 	rdctl	r2,status
  814120:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814124:	e0fffb17 	ldw	r3,-20(fp)
  814128:	00bfff84 	movi	r2,-2
  81412c:	1884703a 	and	r2,r3,r2
  814130:	1001703a 	wrctl	status,r2
  
  return context;
  814134:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  814138:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  81413c:	e0fffc17 	ldw	r3,-16(fp)
  814140:	00800044 	movi	r2,1
  814144:	10c4983a 	sll	r2,r2,r3
  814148:	0084303a 	nor	r2,zero,r2
  81414c:	1007883a 	mov	r3,r2
  814150:	008020b4 	movhi	r2,130
  814154:	10a1cf04 	addi	r2,r2,-30916
  814158:	10800017 	ldw	r2,0(r2)
  81415c:	1886703a 	and	r3,r3,r2
  814160:	008020b4 	movhi	r2,130
  814164:	10a1cf04 	addi	r2,r2,-30916
  814168:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81416c:	008020b4 	movhi	r2,130
  814170:	10a1cf04 	addi	r2,r2,-30916
  814174:	10800017 	ldw	r2,0(r2)
  814178:	100170fa 	wrctl	ienable,r2
  81417c:	e0bffd17 	ldw	r2,-12(fp)
  814180:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814184:	e0bffa17 	ldw	r2,-24(fp)
  814188:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  81418c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  814190:	e037883a 	mov	sp,fp
  814194:	df000017 	ldw	fp,0(sp)
  814198:	dec00104 	addi	sp,sp,4
  81419c:	f800283a 	ret

008141a0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  8141a0:	defffc04 	addi	sp,sp,-16
  8141a4:	df000315 	stw	fp,12(sp)
  8141a8:	df000304 	addi	fp,sp,12
  8141ac:	e13ffe15 	stw	r4,-8(fp)
  8141b0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8141b4:	000530fa 	rdctl	r2,ienable
  8141b8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8141bc:	e0ffff17 	ldw	r3,-4(fp)
  8141c0:	00800044 	movi	r2,1
  8141c4:	10c4983a 	sll	r2,r2,r3
  8141c8:	1007883a 	mov	r3,r2
  8141cc:	e0bffd17 	ldw	r2,-12(fp)
  8141d0:	1884703a 	and	r2,r3,r2
  8141d4:	1004c03a 	cmpne	r2,r2,zero
}
  8141d8:	e037883a 	mov	sp,fp
  8141dc:	df000017 	ldw	fp,0(sp)
  8141e0:	dec00104 	addi	sp,sp,4
  8141e4:	f800283a 	ret

008141e8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8141e8:	defff404 	addi	sp,sp,-48
  8141ec:	dfc00b15 	stw	ra,44(sp)
  8141f0:	df000a15 	stw	fp,40(sp)
  8141f4:	df000a04 	addi	fp,sp,40
  8141f8:	e13ffb15 	stw	r4,-20(fp)
  8141fc:	e17ffc15 	stw	r5,-16(fp)
  814200:	e1bffd15 	stw	r6,-12(fp)
  814204:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  814208:	00bffa84 	movi	r2,-22
  81420c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  814210:	e0bffc17 	ldw	r2,-16(fp)
  814214:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  814218:	e0bff917 	ldw	r2,-28(fp)
  81421c:	10800808 	cmpgei	r2,r2,32
  814220:	1000291e 	bne	r2,zero,8142c8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814224:	0005303a 	rdctl	r2,status
  814228:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81422c:	e0fff717 	ldw	r3,-36(fp)
  814230:	00bfff84 	movi	r2,-2
  814234:	1884703a 	and	r2,r3,r2
  814238:	1001703a 	wrctl	status,r2
  
  return context;
  81423c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  814240:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  814244:	e0bff917 	ldw	r2,-28(fp)
  814248:	00c020b4 	movhi	r3,130
  81424c:	18e21c04 	addi	r3,r3,-30608
  814250:	100490fa 	slli	r2,r2,3
  814254:	10c7883a 	add	r3,r2,r3
  814258:	e0bffd17 	ldw	r2,-12(fp)
  81425c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  814260:	e0bff917 	ldw	r2,-28(fp)
  814264:	00c020b4 	movhi	r3,130
  814268:	18e21c04 	addi	r3,r3,-30608
  81426c:	100490fa 	slli	r2,r2,3
  814270:	10c5883a 	add	r2,r2,r3
  814274:	10c00104 	addi	r3,r2,4
  814278:	e0bffe17 	ldw	r2,-8(fp)
  81427c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  814280:	e0bffd17 	ldw	r2,-12(fp)
  814284:	1005003a 	cmpeq	r2,r2,zero
  814288:	1000051e 	bne	r2,zero,8142a0 <alt_iic_isr_register+0xb8>
  81428c:	e17ff917 	ldw	r5,-28(fp)
  814290:	e13ffb17 	ldw	r4,-20(fp)
  814294:	08140640 	call	814064 <alt_ic_irq_enable>
  814298:	e0bfff15 	stw	r2,-4(fp)
  81429c:	00000406 	br	8142b0 <alt_iic_isr_register+0xc8>
  8142a0:	e17ff917 	ldw	r5,-28(fp)
  8142a4:	e13ffb17 	ldw	r4,-20(fp)
  8142a8:	08141000 	call	814100 <alt_ic_irq_disable>
  8142ac:	e0bfff15 	stw	r2,-4(fp)
  8142b0:	e0bfff17 	ldw	r2,-4(fp)
  8142b4:	e0bffa15 	stw	r2,-24(fp)
  8142b8:	e0bff817 	ldw	r2,-32(fp)
  8142bc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8142c0:	e0bff617 	ldw	r2,-40(fp)
  8142c4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8142c8:	e0bffa17 	ldw	r2,-24(fp)
}
  8142cc:	e037883a 	mov	sp,fp
  8142d0:	dfc00117 	ldw	ra,4(sp)
  8142d4:	df000017 	ldw	fp,0(sp)
  8142d8:	dec00204 	addi	sp,sp,8
  8142dc:	f800283a 	ret

008142e0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8142e0:	defff804 	addi	sp,sp,-32
  8142e4:	dfc00715 	stw	ra,28(sp)
  8142e8:	df000615 	stw	fp,24(sp)
  8142ec:	dc000515 	stw	r16,20(sp)
  8142f0:	df000504 	addi	fp,sp,20
  8142f4:	e13ffc15 	stw	r4,-16(fp)
  8142f8:	e17ffd15 	stw	r5,-12(fp)
  8142fc:	e1bffe15 	stw	r6,-8(fp)
  814300:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  814304:	e13ffd17 	ldw	r4,-12(fp)
  814308:	e17ffe17 	ldw	r5,-8(fp)
  81430c:	e1bfff17 	ldw	r6,-4(fp)
  814310:	0811f840 	call	811f84 <open>
  814314:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  814318:	e0bffb17 	ldw	r2,-20(fp)
  81431c:	1004803a 	cmplt	r2,r2,zero
  814320:	10001f1e 	bne	r2,zero,8143a0 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  814324:	e13ffb17 	ldw	r4,-20(fp)
  814328:	04002074 	movhi	r16,129
  81432c:	84166004 	addi	r16,r16,22912
  814330:	01400304 	movi	r5,12
  814334:	0801c5c0 	call	801c5c <__mulsi3>
  814338:	1405883a 	add	r2,r2,r16
  81433c:	10c00017 	ldw	r3,0(r2)
  814340:	e0bffc17 	ldw	r2,-16(fp)
  814344:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  814348:	e13ffb17 	ldw	r4,-20(fp)
  81434c:	04002074 	movhi	r16,129
  814350:	84166004 	addi	r16,r16,22912
  814354:	01400304 	movi	r5,12
  814358:	0801c5c0 	call	801c5c <__mulsi3>
  81435c:	1405883a 	add	r2,r2,r16
  814360:	10800104 	addi	r2,r2,4
  814364:	10c00017 	ldw	r3,0(r2)
  814368:	e0bffc17 	ldw	r2,-16(fp)
  81436c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  814370:	e13ffb17 	ldw	r4,-20(fp)
  814374:	04002074 	movhi	r16,129
  814378:	84166004 	addi	r16,r16,22912
  81437c:	01400304 	movi	r5,12
  814380:	0801c5c0 	call	801c5c <__mulsi3>
  814384:	1405883a 	add	r2,r2,r16
  814388:	10800204 	addi	r2,r2,8
  81438c:	10c00017 	ldw	r3,0(r2)
  814390:	e0bffc17 	ldw	r2,-16(fp)
  814394:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  814398:	e13ffb17 	ldw	r4,-20(fp)
  81439c:	08122f40 	call	8122f4 <alt_release_fd>
  }
} 
  8143a0:	e037883a 	mov	sp,fp
  8143a4:	dfc00217 	ldw	ra,8(sp)
  8143a8:	df000117 	ldw	fp,4(sp)
  8143ac:	dc000017 	ldw	r16,0(sp)
  8143b0:	dec00304 	addi	sp,sp,12
  8143b4:	f800283a 	ret

008143b8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8143b8:	defffb04 	addi	sp,sp,-20
  8143bc:	dfc00415 	stw	ra,16(sp)
  8143c0:	df000315 	stw	fp,12(sp)
  8143c4:	df000304 	addi	fp,sp,12
  8143c8:	e13ffd15 	stw	r4,-12(fp)
  8143cc:	e17ffe15 	stw	r5,-8(fp)
  8143d0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8143d4:	01002074 	movhi	r4,129
  8143d8:	21166304 	addi	r4,r4,22924
  8143dc:	e17ffd17 	ldw	r5,-12(fp)
  8143e0:	01800044 	movi	r6,1
  8143e4:	01c07fc4 	movi	r7,511
  8143e8:	08142e00 	call	8142e0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8143ec:	01002074 	movhi	r4,129
  8143f0:	21166004 	addi	r4,r4,22912
  8143f4:	e17ffe17 	ldw	r5,-8(fp)
  8143f8:	000d883a 	mov	r6,zero
  8143fc:	01c07fc4 	movi	r7,511
  814400:	08142e00 	call	8142e0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  814404:	01002074 	movhi	r4,129
  814408:	21166604 	addi	r4,r4,22936
  81440c:	e17fff17 	ldw	r5,-4(fp)
  814410:	01800044 	movi	r6,1
  814414:	01c07fc4 	movi	r7,511
  814418:	08142e00 	call	8142e0 <alt_open_fd>
}  
  81441c:	e037883a 	mov	sp,fp
  814420:	dfc00117 	ldw	ra,4(sp)
  814424:	df000017 	ldw	fp,0(sp)
  814428:	dec00204 	addi	sp,sp,8
  81442c:	f800283a 	ret

00814430 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  814430:	defffa04 	addi	sp,sp,-24
  814434:	df000515 	stw	fp,20(sp)
  814438:	df000504 	addi	fp,sp,20
  81443c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814440:	0005303a 	rdctl	r2,status
  814444:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814448:	e0fffd17 	ldw	r3,-12(fp)
  81444c:	00bfff84 	movi	r2,-2
  814450:	1884703a 	and	r2,r3,r2
  814454:	1001703a 	wrctl	status,r2
  
  return context;
  814458:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  81445c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  814460:	e0bfff17 	ldw	r2,-4(fp)
  814464:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  814468:	e0bffc17 	ldw	r2,-16(fp)
  81446c:	10c00017 	ldw	r3,0(r2)
  814470:	e0bffc17 	ldw	r2,-16(fp)
  814474:	10800117 	ldw	r2,4(r2)
  814478:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  81447c:	e0bffc17 	ldw	r2,-16(fp)
  814480:	10c00117 	ldw	r3,4(r2)
  814484:	e0bffc17 	ldw	r2,-16(fp)
  814488:	10800017 	ldw	r2,0(r2)
  81448c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  814490:	e0fffc17 	ldw	r3,-16(fp)
  814494:	e0bffc17 	ldw	r2,-16(fp)
  814498:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  81449c:	e0fffc17 	ldw	r3,-16(fp)
  8144a0:	e0bffc17 	ldw	r2,-16(fp)
  8144a4:	18800015 	stw	r2,0(r3)
  8144a8:	e0bffe17 	ldw	r2,-8(fp)
  8144ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8144b0:	e0bffb17 	ldw	r2,-20(fp)
  8144b4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  8144b8:	e037883a 	mov	sp,fp
  8144bc:	df000017 	ldw	fp,0(sp)
  8144c0:	dec00104 	addi	sp,sp,4
  8144c4:	f800283a 	ret

008144c8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8144c8:	defffb04 	addi	sp,sp,-20
  8144cc:	dfc00415 	stw	ra,16(sp)
  8144d0:	df000315 	stw	fp,12(sp)
  8144d4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  8144d8:	d0a02117 	ldw	r2,-32636(gp)
  8144dc:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8144e0:	d0a6ef17 	ldw	r2,-25668(gp)
  8144e4:	10800044 	addi	r2,r2,1
  8144e8:	d0a6ef15 	stw	r2,-25668(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8144ec:	00003106 	br	8145b4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  8144f0:	e0bffe17 	ldw	r2,-8(fp)
  8144f4:	10800017 	ldw	r2,0(r2)
  8144f8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8144fc:	e0bffe17 	ldw	r2,-8(fp)
  814500:	10800403 	ldbu	r2,16(r2)
  814504:	10803fcc 	andi	r2,r2,255
  814508:	1005003a 	cmpeq	r2,r2,zero
  81450c:	1000051e 	bne	r2,zero,814524 <alt_tick+0x5c>
  814510:	d0a6ef17 	ldw	r2,-25668(gp)
  814514:	1004c03a 	cmpne	r2,r2,zero
  814518:	1000021e 	bne	r2,zero,814524 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  81451c:	e0bffe17 	ldw	r2,-8(fp)
  814520:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  814524:	e0bffe17 	ldw	r2,-8(fp)
  814528:	10c00217 	ldw	r3,8(r2)
  81452c:	d0a6ef17 	ldw	r2,-25668(gp)
  814530:	10c01e36 	bltu	r2,r3,8145ac <alt_tick+0xe4>
  814534:	e0bffe17 	ldw	r2,-8(fp)
  814538:	10800403 	ldbu	r2,16(r2)
  81453c:	10803fcc 	andi	r2,r2,255
  814540:	1004c03a 	cmpne	r2,r2,zero
  814544:	1000191e 	bne	r2,zero,8145ac <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  814548:	e0bffe17 	ldw	r2,-8(fp)
  81454c:	10c00317 	ldw	r3,12(r2)
  814550:	e0bffe17 	ldw	r2,-8(fp)
  814554:	11000517 	ldw	r4,20(r2)
  814558:	183ee83a 	callr	r3
  81455c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  814560:	e0bffd17 	ldw	r2,-12(fp)
  814564:	1004c03a 	cmpne	r2,r2,zero
  814568:	1000031e 	bne	r2,zero,814578 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  81456c:	e13ffe17 	ldw	r4,-8(fp)
  814570:	08144300 	call	814430 <alt_alarm_stop>
  814574:	00000d06 	br	8145ac <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  814578:	e0bffe17 	ldw	r2,-8(fp)
  81457c:	10c00217 	ldw	r3,8(r2)
  814580:	e0bffd17 	ldw	r2,-12(fp)
  814584:	1887883a 	add	r3,r3,r2
  814588:	e0bffe17 	ldw	r2,-8(fp)
  81458c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  814590:	e0bffe17 	ldw	r2,-8(fp)
  814594:	10c00217 	ldw	r3,8(r2)
  814598:	d0a6ef17 	ldw	r2,-25668(gp)
  81459c:	1880032e 	bgeu	r3,r2,8145ac <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  8145a0:	e0fffe17 	ldw	r3,-8(fp)
  8145a4:	00800044 	movi	r2,1
  8145a8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  8145ac:	e0bfff17 	ldw	r2,-4(fp)
  8145b0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8145b4:	d0e02104 	addi	r3,gp,-32636
  8145b8:	e0bffe17 	ldw	r2,-8(fp)
  8145bc:	10ffcc1e 	bne	r2,r3,8144f0 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  8145c0:	e037883a 	mov	sp,fp
  8145c4:	dfc00117 	ldw	ra,4(sp)
  8145c8:	df000017 	ldw	fp,0(sp)
  8145cc:	dec00204 	addi	sp,sp,8
  8145d0:	f800283a 	ret

008145d4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  8145d4:	deffff04 	addi	sp,sp,-4
  8145d8:	df000015 	stw	fp,0(sp)
  8145dc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  8145e0:	000170fa 	wrctl	ienable,zero
}
  8145e4:	e037883a 	mov	sp,fp
  8145e8:	df000017 	ldw	fp,0(sp)
  8145ec:	dec00104 	addi	sp,sp,4
  8145f0:	f800283a 	ret

008145f4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8145f4:	defffb04 	addi	sp,sp,-20
  8145f8:	df000415 	stw	fp,16(sp)
  8145fc:	df000404 	addi	fp,sp,16
  814600:	e13ffe15 	stw	r4,-8(fp)
  814604:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  814608:	e0bfff17 	ldw	r2,-4(fp)
  81460c:	10840070 	cmpltui	r2,r2,4097
  814610:	1000021e 	bne	r2,zero,81461c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  814614:	00840004 	movi	r2,4096
  814618:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  81461c:	e0fffe17 	ldw	r3,-8(fp)
  814620:	e0bfff17 	ldw	r2,-4(fp)
  814624:	1885883a 	add	r2,r3,r2
  814628:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81462c:	e0bffe17 	ldw	r2,-8(fp)
  814630:	e0bffd15 	stw	r2,-12(fp)
  814634:	00000506 	br	81464c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  814638:	e0bffd17 	ldw	r2,-12(fp)
  81463c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  814640:	e0bffd17 	ldw	r2,-12(fp)
  814644:	10800804 	addi	r2,r2,32
  814648:	e0bffd15 	stw	r2,-12(fp)
  81464c:	e0fffd17 	ldw	r3,-12(fp)
  814650:	e0bffc17 	ldw	r2,-16(fp)
  814654:	18bff836 	bltu	r3,r2,814638 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  814658:	e0bffe17 	ldw	r2,-8(fp)
  81465c:	108007cc 	andi	r2,r2,31
  814660:	1005003a 	cmpeq	r2,r2,zero
  814664:	1000021e 	bne	r2,zero,814670 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  814668:	e0bffd17 	ldw	r2,-12(fp)
  81466c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  814670:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  814674:	e037883a 	mov	sp,fp
  814678:	df000017 	ldw	fp,0(sp)
  81467c:	dec00104 	addi	sp,sp,4
  814680:	f800283a 	ret

00814684 <atexit>:
  814684:	200b883a 	mov	r5,r4
  814688:	000d883a 	mov	r6,zero
  81468c:	0009883a 	mov	r4,zero
  814690:	000f883a 	mov	r7,zero
  814694:	081470c1 	jmpi	81470c <__register_exitproc>

00814698 <memcmp>:
  814698:	00c000c4 	movi	r3,3
  81469c:	1980032e 	bgeu	r3,r6,8146ac <memcmp+0x14>
  8146a0:	2144b03a 	or	r2,r4,r5
  8146a4:	10c4703a 	and	r2,r2,r3
  8146a8:	10000f26 	beq	r2,zero,8146e8 <memcmp+0x50>
  8146ac:	31ffffc4 	addi	r7,r6,-1
  8146b0:	3000061e 	bne	r6,zero,8146cc <memcmp+0x34>
  8146b4:	00000a06 	br	8146e0 <memcmp+0x48>
  8146b8:	39ffffc4 	addi	r7,r7,-1
  8146bc:	00bfffc4 	movi	r2,-1
  8146c0:	21000044 	addi	r4,r4,1
  8146c4:	29400044 	addi	r5,r5,1
  8146c8:	38800526 	beq	r7,r2,8146e0 <memcmp+0x48>
  8146cc:	20c00003 	ldbu	r3,0(r4)
  8146d0:	28800003 	ldbu	r2,0(r5)
  8146d4:	18bff826 	beq	r3,r2,8146b8 <memcmp+0x20>
  8146d8:	1885c83a 	sub	r2,r3,r2
  8146dc:	f800283a 	ret
  8146e0:	0005883a 	mov	r2,zero
  8146e4:	f800283a 	ret
  8146e8:	180f883a 	mov	r7,r3
  8146ec:	20c00017 	ldw	r3,0(r4)
  8146f0:	28800017 	ldw	r2,0(r5)
  8146f4:	18bfed1e 	bne	r3,r2,8146ac <memcmp+0x14>
  8146f8:	31bfff04 	addi	r6,r6,-4
  8146fc:	21000104 	addi	r4,r4,4
  814700:	29400104 	addi	r5,r5,4
  814704:	39bff936 	bltu	r7,r6,8146ec <memcmp+0x54>
  814708:	003fe806 	br	8146ac <memcmp+0x14>

0081470c <__register_exitproc>:
  81470c:	defffa04 	addi	sp,sp,-24
  814710:	00802074 	movhi	r2,129
  814714:	109ae404 	addi	r2,r2,27536
  814718:	dc000015 	stw	r16,0(sp)
  81471c:	14000017 	ldw	r16,0(r2)
  814720:	dd000415 	stw	r20,16(sp)
  814724:	2829883a 	mov	r20,r5
  814728:	81405217 	ldw	r5,328(r16)
  81472c:	dcc00315 	stw	r19,12(sp)
  814730:	dc800215 	stw	r18,8(sp)
  814734:	dc400115 	stw	r17,4(sp)
  814738:	dfc00515 	stw	ra,20(sp)
  81473c:	2023883a 	mov	r17,r4
  814740:	3027883a 	mov	r19,r6
  814744:	3825883a 	mov	r18,r7
  814748:	28002526 	beq	r5,zero,8147e0 <__register_exitproc+0xd4>
  81474c:	29000117 	ldw	r4,4(r5)
  814750:	008007c4 	movi	r2,31
  814754:	11002716 	blt	r2,r4,8147f4 <__register_exitproc+0xe8>
  814758:	8800101e 	bne	r17,zero,81479c <__register_exitproc+0x90>
  81475c:	2105883a 	add	r2,r4,r4
  814760:	1085883a 	add	r2,r2,r2
  814764:	20c00044 	addi	r3,r4,1
  814768:	1145883a 	add	r2,r2,r5
  81476c:	0009883a 	mov	r4,zero
  814770:	15000215 	stw	r20,8(r2)
  814774:	28c00115 	stw	r3,4(r5)
  814778:	2005883a 	mov	r2,r4
  81477c:	dfc00517 	ldw	ra,20(sp)
  814780:	dd000417 	ldw	r20,16(sp)
  814784:	dcc00317 	ldw	r19,12(sp)
  814788:	dc800217 	ldw	r18,8(sp)
  81478c:	dc400117 	ldw	r17,4(sp)
  814790:	dc000017 	ldw	r16,0(sp)
  814794:	dec00604 	addi	sp,sp,24
  814798:	f800283a 	ret
  81479c:	29802204 	addi	r6,r5,136
  8147a0:	00800044 	movi	r2,1
  8147a4:	110e983a 	sll	r7,r2,r4
  8147a8:	30c04017 	ldw	r3,256(r6)
  8147ac:	2105883a 	add	r2,r4,r4
  8147b0:	1085883a 	add	r2,r2,r2
  8147b4:	1185883a 	add	r2,r2,r6
  8147b8:	19c6b03a 	or	r3,r3,r7
  8147bc:	14802015 	stw	r18,128(r2)
  8147c0:	14c00015 	stw	r19,0(r2)
  8147c4:	00800084 	movi	r2,2
  8147c8:	30c04015 	stw	r3,256(r6)
  8147cc:	88bfe31e 	bne	r17,r2,81475c <__register_exitproc+0x50>
  8147d0:	30804117 	ldw	r2,260(r6)
  8147d4:	11c4b03a 	or	r2,r2,r7
  8147d8:	30804115 	stw	r2,260(r6)
  8147dc:	003fdf06 	br	81475c <__register_exitproc+0x50>
  8147e0:	008020b4 	movhi	r2,130
  8147e4:	10a25c04 	addi	r2,r2,-30352
  8147e8:	100b883a 	mov	r5,r2
  8147ec:	80805215 	stw	r2,328(r16)
  8147f0:	003fd606 	br	81474c <__register_exitproc+0x40>
  8147f4:	00802034 	movhi	r2,128
  8147f8:	108f2a04 	addi	r2,r2,15528
  8147fc:	1000021e 	bne	r2,zero,814808 <__register_exitproc+0xfc>
  814800:	013fffc4 	movi	r4,-1
  814804:	003fdc06 	br	814778 <__register_exitproc+0x6c>
  814808:	01006404 	movi	r4,400
  81480c:	103ee83a 	callr	r2
  814810:	1007883a 	mov	r3,r2
  814814:	103ffa26 	beq	r2,zero,814800 <__register_exitproc+0xf4>
  814818:	80805217 	ldw	r2,328(r16)
  81481c:	180b883a 	mov	r5,r3
  814820:	18000115 	stw	zero,4(r3)
  814824:	18800015 	stw	r2,0(r3)
  814828:	80c05215 	stw	r3,328(r16)
  81482c:	18006215 	stw	zero,392(r3)
  814830:	18006315 	stw	zero,396(r3)
  814834:	0009883a 	mov	r4,zero
  814838:	883fc826 	beq	r17,zero,81475c <__register_exitproc+0x50>
  81483c:	003fd706 	br	81479c <__register_exitproc+0x90>
  814840:	00808940 	call	80894 <__alt_mem_sdram-0x77f76c>
