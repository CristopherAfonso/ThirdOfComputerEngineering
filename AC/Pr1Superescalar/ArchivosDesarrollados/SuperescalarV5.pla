80
ADDI R1 R0 #100 // R1 = pImg
ADDI R2 R0 #414 // R2 = resultImg
ADDI R3 R0 #16 // R3 -> int = Wp (Width pixel = 16)
ADDI R4 R0 #14 // R4 -> int = height - 1 - 1
ADDI R5 R0 #14 // R5 -> int = width - 1 - 1
ADDI R6 R0 #3 // R6 -> int = rows_kernel
// (modificado, instrucción ha sido borrada)
LF F10 0(R0) // F10 = pos. 0 kernel (modificado, añadido)
LF F11 1(R0) // F11 = pos. 1 kernel (modificado, añadido)
LF F12 2(R0) // F12 = pos. 2 kernel (modificado, añadido)
LF F13 3(R0) // F13 = pos. 3 kernel (modificado, añadido)
LF F14 4(R0) // F14 = pos. 4 kernel (modificado, añadido)
LF F15 5(R0) // F15 = pos. 5 kernel (modificado, añadido)
LF F16 6(R0) // F16 = pos. 6 kernel (modificado, añadido)
LF F17 7(R0) // F17 = pos. 7 kernel (modificado, añadido)
LF F18 8(R0) // F18 = pos. 8 kernel (modificado, añadido)

ADDI R7 R0 #0 // R7 -> int = row - 1
FOR1:
BEQ R7 R4 FINFOR1

ADDI R2 R2 #2 // nos ayuda a encajar la imagen en las direcciones de memoria correctas

ADDI R8 R0 #0 // R8 -> int = col - 1
FOR2:
BEQ R8 R5 FINFOR2 

ADDF F1 F0 F0 // F1 -> float = 0.0 // (magX) esta es tu magnitud

// magX += pImg[(row - 1 + a) * Wp + col - 1 + b] * kernelx[a][b];

// (modificado, bucle for3 y for4 borrados, de aquí en adelante hasta que acaba el for2 todo es nuevo)

ADDI R9 R7 #1 // R9 -> int = row - 1 + 1
ADDI R10 R7 #2 // R10 -> int = row - 1 + 2

ADDI R11 R8 #1 // R11 -> int = col - 1 + 1
ADDI R12 R8 #2 // R12 -> int = col - 1 + 2

MULT R13 R7 R3 // R13 -> int = (row - 1 + a=0) * Wp
MULT R14 R9 R3 // R14 -> int = (row - 1 + a=1) * Wp
MULT R15 R10 R3 // R15 -> int = (row - 1 + a=2) * Wp



// Guardamos en los registro R20 - R28 el desplazamiento en memoria del elemento a buscar
ADD R20 R13 R8     // R20 -> int = (row - 1 + a=0) * Wp + col - 1 + b=0
ADD R21 R13 R11     // R21 -> int = (row - 1 + a=0) * Wp + col - 1 + b=1
ADD R22 R13 R12     // R22 -> int = (row - 1 + a=0) * Wp + col - 1 + b=2
ADD R23 R14 R8     // R23 -> int = (row - 1 + a=1) * Wp + col - 1 + b=0
ADD R24 R14 R11     // R24 -> int = (row - 1 + a=1) * Wp + col - 1 + b=1
ADD R25 R14 R12     // R25 -> int = (row - 1 + a=1) * Wp + col - 1 + b=2
ADD R26 R15 R8     // R26 -> int = (row - 1 + a=2) * Wp + col - 1 + b=0
ADD R27 R15 R11     // R27 -> int = (row - 1 + a=2) * Wp + col - 1 + b=1
ADD R28 R15 R12     // R28 -> int = (row - 1 + a=2) * Wp + col - 1 + b=2

// Guardamos la dirección de memoria concreta del elemento al que queremos acceder
ADD R30 R1 R20     // R30 -> dir. mem. pImg[(row - 1 + a=0) * Wp + col - 1 + b=0]
ADD R31 R1 R21     // R30 -> dir. mem. pImg[(row - 1 + a=0) * Wp + col - 1 + b=1]
ADD R32 R1 R22     // R30 -> dir. mem. pImg[(row - 1 + a=0) * Wp + col - 1 + b=2]
ADD R33 R1 R23     // R30 -> dir. mem. pImg[(row - 1 + a=1) * Wp + col - 1 + b=0]
ADD R34 R1 R24     // R30 -> dir. mem. pImg[(row - 1 + a=1) * Wp + col - 1 + b=1]
ADD R35 R1 R25     // R30 -> dir. mem. pImg[(row - 1 + a=1) * Wp + col - 1 + b=2]
ADD R36 R1 R26     // R30 -> dir. mem. pImg[(row - 1 + a=2) * Wp + col - 1 + b=0]
ADD R37 R1 R27     // R30 -> dir. mem. pImg[(row - 1 + a=2) * Wp + col - 1 + b=1]
ADD R38 R1 R28     // R30 -> dir. mem. pImg[(row - 1 + a=2) * Wp + col - 1 + b=2]

// Traemos desde la memoria, los elementos necesarios para multiplicarlos con cada elemento del kernel
LF F20 0(R30)      // F20 -> float = pImg[(row - 1 + a=0) * Wp + col - 1 + b=0]
LF F21 0(R31)      // F21 -> float = pImg[(row - 1 + a=0) * Wp + col - 1 + b=1]
LF F22 0(R32)      // F22 -> float = pImg[(row - 1 + a=0) * Wp + col - 1 + b=2]
LF F23 0(R33)      // F23 -> float = pImg[(row - 1 + a=1) * Wp + col - 1 + b=0]
LF F24 0(R34)      // F24 -> float = pImg[(row - 1 + a=1) * Wp + col - 1 + b=1]
LF F25 0(R35)      // F25 -> float = pImg[(row - 1 + a=1) * Wp + col - 1 + b=2]
LF F26 0(R36)      // F26 -> float = pImg[(row - 1 + a=2) * Wp + col - 1 + b=0]
LF F27 0(R37)      // F27 -> float = pImg[(row - 1 + a=2) * Wp + col - 1 + b=1]
LF F28 0(R38)      // F28 -> float = pImg[(row - 1 + a=2) * Wp + col - 1 + b=2]


// Guardamos el resultado de cada operación flotante antes de sumarla a magX
MULTF F30 F20 F10  // F30 -> float = pImg[(row - 1 + a=0) * Wp + col - 1 + b=0] * kernelx[0][0]
MULTF F31 F21 F11  // F30 -> float = pImg[(row - 1 + a=0) * Wp + col - 1 + b=1] * kernelx[0][1]
MULTF F32 F22 F12  // F30 -> float = pImg[(row - 1 + a=0) * Wp + col - 1 + b=2] * kernelx[0][2]
MULTF F33 F23 F13  // F30 -> float = pImg[(row - 1 + a=1) * Wp + col - 1 + b=0] * kernelx[1][0]
MULTF F34 F24 F14  // F30 -> float = pImg[(row - 1 + a=1) * Wp + col - 1 + b=1] * kernelx[1][1]
MULTF F35 F25 F15  // F30 -> float = pImg[(row - 1 + a=1) * Wp + col - 1 + b=2] * kernelx[1][2]
MULTF F36 F26 F16  // F30 -> float = pImg[(row - 1 + a=2) * Wp + col - 1 + b=0] * kernelx[2][0]
MULTF F37 F27 F17  // F30 -> float = pImg[(row - 1 + a=2) * Wp + col - 1 + b=1] * kernelx[2][1]
MULTF F38 F28 F18  // F30 -> float = pImg[(row - 1 + a=2) * Wp + col - 1 + b=2] * kernelx[2][2]


// Ahora sumamos todos los contenidos de los registros F30 - F38 al registro F1 (magX)
ADDF F1 F1 F30 
ADDF F1 F1 F31
ADDF F1 F1 F32
ADDF F1 F1 F33
ADDF F1 F1 F34
ADDF F1 F1 F35
ADDF F1 F1 F36
ADDF F1 F1 F37
ADDF F1 F1 F38
// aquí F1 (magX) ha sido actualizado

// resultImg[row * Wp + col] = magX;
ADDI R2 R2 #1 // resultImg++
SF F1 0(R2) // resultImg[row * Wp + col] = magX;

ADDI R8 R8 #1 // col++
BEQ R0 R0 FOR2 // simula un salto incondicional
FINFOR2:

ADDI R7 R7 #1 // row++
BEQ R0 R0 FOR1 // simula un salto incondicional
FINFOR1:
ADD R0 R0 R0 // NO TOCAR ESTA INSTRUCCIÓN, si se borra el programa no funciona