43
ADDI R1 R0 #100 // R1 = pImg
ADDI R2 R0 #400 // R2 = resultImg
ADDI R3 R0 #16 // R3 -> int = Wp (Width pixel = 16)
ADDI R4 R0 #15 // R4 -> int = height - 1
ADDI R5 R0 #15 // R5 -> int = width - 1
ADDI R6 R0 #3 // R6 -> int = rows_kernel
ADDI R7 R0 #3 // R7 -> int = cols_kernel

ADDI R8 R0 #1 // R8 -> int = row
FOR1:
BEQ R8 R4 FINFOR1

ADDI R9 R0 #1 // R9 -> int = col
FOR2:
BEQ R9 R5 FINFOR2 

ADDF F1 F0 F0 // F1 -> float = 0.0 // (magX) esta es tu magnitud

ADDI R10 R0 #0 // R10 -> int = a
FOR3:
BEQ R10 R6 FINFOR3

ADDI R11 R0 #0 // R11 -> int = b
FOR4:
BEQ R11 R7 FINFOR4



// magX += pImg[(row - 1 + a) * Wp + col - 1 + b] * kernelx[a][b];

MULT R12 R6 R10 // rows_kernel * a = desp. de la dir. mem. de kernelx[a]
ADD R13 R12 R11 // rows_kernel * a  + b = sumo el desp. de b, kernelx[a][b]
LF F2 0(R13) // cargamos en el registro F2, el contenido de la dirección de memoria que tiene R13
// aquí kernelx[a][b] está listo para usarse

ADDI R14 R0 #-1 // R14 = -1

ADD R15 R8 R14 // R15 = row - 1
ADD R16 R15 R10 // R16 = row - 1 + a
MULT R17 R16 R3 // R17 = (row - 1 + a) * Wp

ADD R18 R9 R14 // R18 = col - 1
ADD R19 R18 R11 // R19 = col - 1 + b

ADD R20 R17 R19 // R20 = (row - 1 + a) * Wp + col - 1 + b

ADD R21 R1 R20 // R21 = pImg[(row - 1 + a) * Wp + col - 1 + b] (sólo es la dir. de mem. del elemento)
LF F3 0(R21) // F3 = pImg[(row - 1 + a) * Wp + col - 1 + b] (aquí ya buscamos el elemento)
// aquí pImg[(row - 1 + a) * Wp + col - 1 + b] está listo para usarse

MULTF F4 F3 F2 // F4 = pImg[(row - 1 + a) * Wp + col - 1 + b] * kernelx[a][b]
ADDF F1 F1 F4 // F1 = magX += pImg[(row - 1 + a) * Wp + col - 1 + b] * kernelx[a][b];
// aquí magX ha sido actualizado



ADDI R11 R11 #1 // b++
BEQ R0 R0 FOR4
FINFOR4:

ADDI R10 R10 #1 // a++
BEQ R0 R0 FOR3
FINFOR3:





// resultImg[row * Wp + col] = magX;

MULT R22 R8 R3 // R22 = row * Wp
ADD R23 R22 R9 // R23 = row * Wp + col
ADD R24 R2 R23 // R24 = resultImg[row * Wp + col] (sólo es la dir. de mem. del elemento)

SF F1 0(R24) // resultImg[row * Wp + col] = magX;





ADDI R9 R9 #1 // col++
BEQ R0 R0 FOR2 // simula un salto incondicional
FINFOR2:

ADDI R8 R8 #1 // row++
BEQ R0 R0 FOR1 // simula un salto incondicional
FINFOR1:
ADD R0 R0 R0 // NO TOCAR ESTA INSTRUCCIÓN, si se borra el programa no funciona