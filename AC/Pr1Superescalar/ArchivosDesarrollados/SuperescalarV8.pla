45
ADDI R2 R0 #414 // R2 = resultImg
ADDI R3 R0 #16 // R3 -> int = Wp (Width pixel = 16)
ADDI R4 R0 #14 // R4 -> int = height - 1 - 1 = width - 1 - 1
ADDI R6 R0 #3 // R6 -> int = rows_kernel = cols_kernel
LF F10 0(R0) // F10 = pos. 0 kernel // conservar
LF F13 3(R0) // F13 = pos. 3 kernel // conservar
LF F15 5(R0) // F15 = pos. 5 kernel // conservar

ADDI R7 R0 #0 // R7 -> int = row - 1

FOR1:

ADDI R2 R2 #2 // nos ayuda a encajar la imagen en las direcciones de memoria correctas

// (modificado, 5 siguientes instrucciones sacadas del FOR2 y subidas al FOR1)
ADDI R9 R7 #1 // R9 -> int = row - 1 + 1
ADDI R10 R7 #2 // R10 -> int = row - 1 + 2

MULT R13 R7 R3 // R13 -> int = (row - 1 + a=0) * Wp
MULT R14 R9 R3 // R14 -> int = (row - 1 + a=1) * Wp
MULT R15 R10 R3 // R15 -> int = (row - 1 + a=2) * Wp

ADDI R8 R0 #0 // R8 -> int = col - 1

FOR2:

ADDF F1 F0 F0 // F1 -> float = 0.0 // (magX) esta es tu magnitud

// magX += pImg[(row - 1 + a) * Wp + col - 1 + b] * kernelx[a][b];








ADDI R12 R8 #2 // R12 -> int = col - 1 + 2

// Guardamos en los registro R20 - R28 el desplazamiento en memoria del elemento a buscar
ADD R20 R13 R8     // R20 -> int = (row - 1 + a=0) * Wp + col - 1 + b=0
ADD R22 R13 R12     // R22 -> int = (row - 1 + a=0) * Wp + col - 1 + b=2
ADD R23 R14 R8     // R23 -> int = (row - 1 + a=1) * Wp + col - 1 + b=0
ADD R25 R14 R12     // R25 -> int = (row - 1 + a=1) * Wp + col - 1 + b=2
ADD R26 R15 R8     // R26 -> int = (row - 1 + a=2) * Wp + col - 1 + b=0
ADD R28 R15 R12     // R28 -> int = (row - 1 + a=2) * Wp + col - 1 + b=2















// Guardamos la dirección de memoria concreta del elemento al que queremos acceder
// (modificado, 6 instrucciones borradas porque sumamos la dirección base de donde está la imagen en memoria directamente)

// Traemos desde la memoria, los elementos necesarios para multiplicarlos con cada elemento del kernel
LF F20 100(R20)      // F20 -> float = pImg[(row - 1 + a=0) * Wp + col - 1 + b=0]
LF F22 100(R22)      // F22 -> float = pImg[(row - 1 + a=0) * Wp + col - 1 + b=2]
LF F23 100(R23)      // F23 -> float = pImg[(row - 1 + a=1) * Wp + col - 1 + b=0]
LF F25 100(R25)      // F25 -> float = pImg[(row - 1 + a=1) * Wp + col - 1 + b=2]
LF F26 100(R26)      // F26 -> float = pImg[(row - 1 + a=2) * Wp + col - 1 + b=0]
LF F28 100(R28)      // F28 -> float = pImg[(row - 1 + a=2) * Wp + col - 1 + b=2]




// Guardamos el resultado de cada operación flotante antes de sumarla a magX
MULTF F30 F20 F10  // F30 -> float = pImg[(row - 1 + a=0) * Wp + col - 1 + b=0] * kernelx[0][0]
MULTF F33 F23 F13  // F30 -> float = pImg[(row - 1 + a=1) * Wp + col - 1 + b=0] * kernelx[1][0]
MULTF F35 F25 F15  // F30 -> float = pImg[(row - 1 + a=1) * Wp + col - 1 + b=2] * kernelx[1][2]
MULTF F36 F26 F10  // F30 -> float = pImg[(row - 1 + a=2) * Wp + col - 1 + b=0] * kernelx[2][0]

// Ahora sumamos todos los contenidos de los registros F30 - F38 al registro F1 (magX)
ADDF F1 F1 F30 
ADDF F1 F1 F22
ADDF F1 F1 F33
ADDF F1 F1 F35
ADDF F1 F1 F36
ADDF F1 F1 F28
// aquí F1 (magX) ha sido actualizado

// resultImg[row * Wp + col] = magX;
ADDI R2 R2 #1 // resultImg++
SF F1 0(R2) // resultImg[row * Wp + col] = magX;

ADDI R8 R8 #1 // col++
BGT R4 R8 FOR2 // implementamos un "do while" en el for2, equivale a "BLT R8 R4 FOR2"

ADDI R7 R7 #1 // row++
BGT R4 R7 FOR1 // implementamos un "do while" en el for1, equivale a "BLT R7 R4 FOR1"
