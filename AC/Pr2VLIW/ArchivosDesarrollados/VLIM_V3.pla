52
ADDI R1 R0 #115 // R1 = pImg
ADDI R2 R0 #414 // R2 = resultImg
ADDI R3 R0 #16 // R3 -> int = Wp (Width pixel = 16)
ADDI R4 R0 #14 // R4 -> int = height - 1 - 1 = width - 1 - 1
// (modificado, todo el programa pasa a usar enteros, dejamos de usar flotantes)
LW R10 0(R0) // R10 = pos. 0 kernel
LW R11 1(R0) // R11 = pos. 1 kernel
LW R12 2(R0) // R12 = pos. 2 kernel
LW R13 3(R0) // R13 = pos. 3 kernel
LW R14 4(R0) // R14 = pos. 4 kernel
LW R15 5(R0) // R15 = pos. 5 kernel
LW R16 6(R0) // R16 = pos. 6 kernel
LW R17 7(R0) // R17 = pos. 7 kernel
LW R18 8(R0) // R18 = pos. 8 kernel


ADDI R5 R0 #0 // R5 -> int = row - 1
FOR1:
ADDI R1 R1 #2 // nos ayuda a encajar la imagen en las direcciones de memoria correctas
ADDI R2 R2 #2 // nos ayuda a encajar la imagen en las direcciones de memoria correctas
ADDI R6 R0 #0 // R6 -> int = col - 1
FOR2:


ADD R60 R0 R0 // R60 -> int magX = 0 // magX esta es tu magnitud
// magX += pImg[(row - 1 + a) * Wp + col - 1 + b] * kernelx[a][b];

// Traemos desde la memoria, los elementos necesarios para multiplicarlos con cada elemento del kernel
LW R20 -17(R1)      // R20 -> int = pImg[(row - 1 + a=0) * Wp + col - 1 + b=0]
LW R21 -16(R1)      // R21 -> int = pImg[(row - 1 + a=0) * Wp + col - 1 + b=1]
LW R22 -15(R1)      // R22 -> int = pImg[(row - 1 + a=0) * Wp + col - 1 + b=2]
LW R23  -1(R1)      // R23 -> int = pImg[(row - 1 + a=1) * Wp + col - 1 + b=0]
LW R24   0(R1)      // R24 -> int = pImg[(row - 1 + a=1) * Wp + col - 1 + b=1]
LW R25   1(R1)      // R25 -> int = pImg[(row - 1 + a=1) * Wp + col - 1 + b=2]
LW R26  15(R1)      // R26 -> int = pImg[(row - 1 + a=2) * Wp + col - 1 + b=0]
LW R27  16(R1)      // R27 -> int = pImg[(row - 1 + a=2) * Wp + col - 1 + b=1]
LW R28  17(R1)      // R28 -> int = pImg[(row - 1 + a=2) * Wp + col - 1 + b=2]


// Guardamos el resultado de cada operación antes de sumarla a magX
MULT R20 R20 R10  // R20 -> int = pImg[(row - 1 + a=0) * Wp + col - 1 + b=0] * kernelx[0][0]
MULT R21 R21 R11  // R21 -> int = pImg[(row - 1 + a=0) * Wp + col - 1 + b=1] * kernelx[0][1]
MULT R22 R22 R12  // R22 -> int = pImg[(row - 1 + a=0) * Wp + col - 1 + b=2] * kernelx[0][2]
MULT R23 R23 R13  // R23 -> int = pImg[(row - 1 + a=1) * Wp + col - 1 + b=0] * kernelx[1][0]
MULT R24 R24 R14  // R24 -> int = pImg[(row - 1 + a=1) * Wp + col - 1 + b=1] * kernelx[1][1]
MULT R25 R25 R15  // R25 -> int = pImg[(row - 1 + a=1) * Wp + col - 1 + b=2] * kernelx[1][2]
MULT R26 R26 R16  // R26 -> int = pImg[(row - 1 + a=2) * Wp + col - 1 + b=0] * kernelx[2][0]
MULT R27 R27 R17  // R27 -> int = pImg[(row - 1 + a=2) * Wp + col - 1 + b=1] * kernelx[2][1]
MULT R28 R28 R18  // R28 -> int = pImg[(row - 1 + a=2) * Wp + col - 1 + b=2] * kernelx[2][2]

// Ahora sumamos todos los contenidos de los registros R20 - R28 al registro R60 (magX)
// (modificación, realizamos agrupamientos para reducir las dependencias)
ADD R60 R60 R20
ADD R21 R21 R22 // Agrupamos 
ADD R23 R23 R24 // Agrupamos
ADD R25 R25 R26 // Agrupamos
ADD R27 R27 R28 // Agrupamos
ADD R21 R21 R23 // Agrupamos grupos
ADD R25 R25 R27 // Agrupamos grupos
ADD R21 R21 R25 // Agrupamos grupos de grupos
ADD R60 R60 R21 // Sumamos todo
// aquí R60 (magX) ha sido actualizado

// resultImg[row * Wp + col] = magX;
ADDI R1 R1 #1 // pImg++ (modificado, línea añadida)
ADDI R2 R2 #1 // resultImg++
SW R60 0(R2) // resultImg[row * Wp + col] = magX;

ADDI R6 R6 #1 // col++
BGT R4 R6 FOR2 // implementamos un "do while" en el for2, equivale a "BLT R6 R4 FOR2"

ADDI R5 R5 #1 // row++
BGT R4 R5 FOR1 // implementamos un "do while" en el for1, equivale a "BLT R5 R4 FOR1"
