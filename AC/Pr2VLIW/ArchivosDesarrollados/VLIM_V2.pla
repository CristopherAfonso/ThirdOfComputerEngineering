52
ADDI R1 R0 #115 // R1 = pImg (modificado, añadido dirección de posición de memoria de imagen original)
ADDI R2 R0 #414 // R2 = resultImg
ADDI R3 R0 #16 // R3 -> int = Wp (Width pixel = 16)
ADDI R4 R0 #14 // R4 -> int = height - 1 - 1 = width - 1 - 1
LF F10 0(R0) // F10 = pos. 0 kernel
LF F11 1(R0) // F11 = pos. 1 kernel
LF F12 2(R0) // F12 = pos. 2 kernel
LF F13 3(R0) // F13 = pos. 3 kernel
LF F14 4(R0) // F14 = pos. 4 kernel
LF F15 5(R0) // F15 = pos. 5 kernel
LF F16 6(R0) // F16 = pos. 6 kernel
LF F17 7(R0) // F17 = pos. 7 kernel
LF F18 8(R0) // F18 = pos. 8 kernel


ADDI R5 R0 #0 // R5 -> int = row - 1
FOR1:

// (modficado, 5 líneas borradas)

// (modificado, línea de abajo añadida)
ADDI R1 R1 #2 // nos ayuda a encajar la imagen en las direcciones de memoria correctas
ADDI R2 R2 #2 // nos ayuda a encajar la imagen en las direcciones de memoria correctas
ADDI R8 R0 #0 // R8 -> int = col - 1
FOR2:

ADDF F1 F0 F0 // F1 -> float = 0.0 // (magX) esta es tu magnitud
// magX += pImg[(row - 1 + a) * Wp + col - 1 + b] * kernelx[a][b];

// (modificado, 11 instrucciones borradas por ser innecesarias)

// Traemos desde la memoria, los elementos necesarios para multiplicarlos con cada elemento del kernel
// (modificado, 9 instrucciones siguientes cambiadas su forma de acceder al pixel de la imagen)
LF F20 -17(R1)      // F20 -> float = pImg[(row - 1 + a=0) * Wp + col - 1 + b=0]
LF F21 -16(R1)      // F21 -> float = pImg[(row - 1 + a=0) * Wp + col - 1 + b=1]
LF F22 -15(R1)      // F22 -> float = pImg[(row - 1 + a=0) * Wp + col - 1 + b=2]
LF F23  -1(R1)      // F23 -> float = pImg[(row - 1 + a=1) * Wp + col - 1 + b=0]
LF F24   0(R1)      // F24 -> float = pImg[(row - 1 + a=1) * Wp + col - 1 + b=1]
LF F25   1(R1)      // F25 -> float = pImg[(row - 1 + a=1) * Wp + col - 1 + b=2]
LF F26  15(R1)      // F26 -> float = pImg[(row - 1 + a=2) * Wp + col - 1 + b=0]
LF F27  16(R1)      // F27 -> float = pImg[(row - 1 + a=2) * Wp + col - 1 + b=1]
LF F28  17(R1)      // F28 -> float = pImg[(row - 1 + a=2) * Wp + col - 1 + b=2]


// Guardamos el resultado de cada operación flotante antes de sumarla a magX
MULTF F30 F20 F10  // F30 -> float = pImg[(row - 1 + a=0) * Wp + col - 1 + b=0] * kernelx[0][0]
MULTF F31 F21 F11  // F31 -> float = pImg[(row - 1 + a=0) * Wp + col - 1 + b=1] * kernelx[0][1]
MULTF F32 F22 F12  // F32 -> float = pImg[(row - 1 + a=0) * Wp + col - 1 + b=2] * kernelx[0][2]
MULTF F33 F23 F13  // F33 -> float = pImg[(row - 1 + a=1) * Wp + col - 1 + b=0] * kernelx[1][0]
MULTF F34 F24 F14  // F34 -> float = pImg[(row - 1 + a=1) * Wp + col - 1 + b=1] * kernelx[1][1]
MULTF F35 F25 F15  // F35 -> float = pImg[(row - 1 + a=1) * Wp + col - 1 + b=2] * kernelx[1][2]
MULTF F36 F26 F16  // F36 -> float = pImg[(row - 1 + a=2) * Wp + col - 1 + b=0] * kernelx[2][0]
MULTF F37 F27 F17  // F37 -> float = pImg[(row - 1 + a=2) * Wp + col - 1 + b=1] * kernelx[2][1]
MULTF F38 F28 F18  // F38 -> float = pImg[(row - 1 + a=2) * Wp + col - 1 + b=2] * kernelx[2][2]

// Ahora sumamos todos los contenidos de los registros F30 - F38 al registro F1 (magX)
ADDF F1 F1 F30 
ADDF F1 F1 F31
ADDF F1 F1 F32
ADDF F1 F1 F33
ADDF F1 F1 F34
ADDF F1 F1 F35
ADDF F1 F1 F36
ADDF F1 F1 F37
ADDF F1 F1 F38
// aquí F1 (magX) ha sido actualizado

// resultImg[row * Wp + col] = magX;
ADDI R1 R1 #1 // pImg++ (modificado, línea añadida)
ADDI R2 R2 #1 // resultImg++
SF F1 0(R2) // resultImg[row * Wp + col] = magX;

ADDI R8 R8 #1 // col++
BGT R4 R8 FOR2 // implementamos un "do while" en el for2, equivale a "BLT R8 R4 FOR2"

ADDI R5 R5 #1 // row++
BGT R4 R5 FOR1 // implementamos un "do while" en el for1, equivale a "BLT R5 R4 FOR1"
