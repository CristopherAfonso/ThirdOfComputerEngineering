65
ADDI R1 R0 #414 // R1 = resultImg
ADDI R2 R0 #16 // R2 -> int = Wp (Width pixel = 16)
ADDI R3 R0 #14 // R3 -> int = height - 1 - 1 = width - 1 - 1
LF F10 0(R0) // F10 = pos. 0 kernel
LF F11 1(R0) // F11 = pos. 1 kernel
LF F12 2(R0) // F12 = pos. 2 kernel
LF F13 3(R0) // F13 = pos. 3 kernel
LF F14 4(R0) // F14 = pos. 4 kernel
LF F15 5(R0) // F15 = pos. 5 kernel
LF F16 6(R0) // F16 = pos. 6 kernel
LF F17 7(R0) // F17 = pos. 7 kernel
LF F18 8(R0) // F18 = pos. 8 kernel  


ADDI R4 R0 #0 // R4 -> int = row - 1
FOR1:

ADDI R5 R4 #1 // R5 -> int = row - 1 + 1
ADDI R6 R4 #2 // R6 -> int = row - 1 + 2

MULT R10 R4 R2 // R10 -> int = (row - 1 + a=0) * Wp
MULT R11 R5 R2 // R11 -> int = (row - 1 + a=1) * Wp
MULT R12 R6 R2 // R12 -> int = (row - 1 + a=2) * Wp

ADDI R1 R1 #2 // nos ayuda a encajar la imagen en las direcciones de memoria correctas
ADDI R7 R0 #0 // R7 -> int = col - 1
FOR2:



ADDF F1 F0 F0 // F1 -> float = 0.0 // (magX) esta es tu magnitud
// magX += pImg[(row - 1 + a) * Wp + col - 1 + b] * kernelx[a][b];

ADDI R8 R7 #1 // R8 -> int = col - 1 + 1
ADDI R9 R7 #2 // R9 -> int = col - 1 + 2

// Guardamos en los registro R20 - R28 el desplazamiento en memoria del elemento a buscar
ADD R20 R10 R7     // R20 -> int = (row - 1 + a=0) * Wp + col - 1 + b=0
ADD R21 R10 R8     // R20 -> int = (row - 1 + a=0) * Wp + col - 1 + b=1
ADD R22 R10 R9     // R22 -> int = (row - 1 + a=0) * Wp + col - 1 + b=2
ADD R23 R11 R7     // R23 -> int = (row - 1 + a=1) * Wp + col - 1 + b=0
ADD R24 R11 R8     // R20 -> int = (row - 1 + a=1) * Wp + col - 1 + b=1
ADD R25 R11 R9     // R25 -> int = (row - 1 + a=1) * Wp + col - 1 + b=2
ADD R26 R12 R7     // R26 -> int = (row - 1 + a=2) * Wp + col - 1 + b=0
ADD R27 R12 R8     // R20 -> int = (row - 1 + a=2) * Wp + col - 1 + b=1
ADD R28 R12 R9     // R28 -> int = (row - 1 + a=2) * Wp + col - 1 + b=2


// Traemos desde la memoria, los elementos necesarios para multiplicarlos con cada elemento del kernel
LF F20 100(R20)      // F20 -> float = pImg[(row - 1 + a=0) * Wp + col - 1 + b=0]
LF F21 100(R21)      // F21 -> float = pImg[(row - 1 + a=0) * Wp + col - 1 + b=1]
LF F22 100(R22)      // F22 -> float = pImg[(row - 1 + a=0) * Wp + col - 1 + b=2]
LF F23 100(R23)      // F23 -> float = pImg[(row - 1 + a=1) * Wp + col - 1 + b=0]
LF F24 100(R24)      // F24 -> float = pImg[(row - 1 + a=1) * Wp + col - 1 + b=1]
LF F25 100(R25)      // F25 -> float = pImg[(row - 1 + a=1) * Wp + col - 1 + b=2]
LF F26 100(R26)      // F26 -> float = pImg[(row - 1 + a=2) * Wp + col - 1 + b=0]
LF F27 100(R27)      // F27 -> float = pImg[(row - 1 + a=2) * Wp + col - 1 + b=1]
LF F28 100(R28)      // F28 -> float = pImg[(row - 1 + a=2) * Wp + col - 1 + b=2]




// Guardamos el resultado de cada operación flotante antes de sumarla a magX
MULTF F30 F20 F10  // F30 -> float = pImg[(row - 1 + a=0) * Wp + col - 1 + b=0] * kernelx[0][0]
MULTF F31 F21 F11  // F31 -> float = pImg[(row - 1 + a=0) * Wp + col - 1 + b=1] * kernelx[0][1]
MULTF F32 F22 F12  // F32 -> float = pImg[(row - 1 + a=0) * Wp + col - 1 + b=2] * kernelx[0][2]
MULTF F33 F23 F13  // F33 -> float = pImg[(row - 1 + a=1) * Wp + col - 1 + b=0] * kernelx[1][0]
MULTF F34 F24 F14  // F34 -> float = pImg[(row - 1 + a=1) * Wp + col - 1 + b=1] * kernelx[1][1]
MULTF F35 F25 F15  // F35 -> float = pImg[(row - 1 + a=1) * Wp + col - 1 + b=2] * kernelx[1][2]
MULTF F36 F26 F16  // F36 -> float = pImg[(row - 1 + a=2) * Wp + col - 1 + b=0] * kernelx[2][0]
MULTF F37 F27 F17  // F37 -> float = pImg[(row - 1 + a=2) * Wp + col - 1 + b=1] * kernelx[2][1]
MULTF F38 F28 F18  // F38 -> float = pImg[(row - 1 + a=2) * Wp + col - 1 + b=2] * kernelx[2][2]

// Ahora sumamos todos los contenidos de los registros F30 - F38 al registro F1 (magX)
ADDF F1 F1 F30 
ADDF F1 F1 F31
ADDF F1 F1 F32
ADDF F1 F1 F33
ADDF F1 F1 F34
ADDF F1 F1 F35
ADDF F1 F1 F36
ADDF F1 F1 F37
ADDF F1 F1 F38
// aquí F1 (magX) ha sido actualizado

// resultImg[row * Wp + col] = magX;
ADDI R1 R1 #1 // resultImg++
SF F1 0(R1) // resultImg[row * Wp + col] = magX;

ADDI R7 R7 #1 // col++
BGT R3 R7 FOR2 // implementamos un "do while" en el for2, equivale a "BLT R7 R3 FOR2"

ADDI R4 R4 #1 // row++
BGT R3 R4 FOR1 // implementamos un "do while" en el for1, equivale a "BLT R4 R3 FOR1"
